   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"queue.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	prvGetDisinheritPriorityAfterTimeout:
  23              	.LFB25:
  24              		.file 1 "../src/FreeRTOS/queue.c"
   1:../src/FreeRTOS/queue.c **** /*
   2:../src/FreeRTOS/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:../src/FreeRTOS/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../src/FreeRTOS/queue.c ****  *
   5:../src/FreeRTOS/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../src/FreeRTOS/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../src/FreeRTOS/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../src/FreeRTOS/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../src/FreeRTOS/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../src/FreeRTOS/queue.c ****  * subject to the following conditions:
  11:../src/FreeRTOS/queue.c ****  *
  12:../src/FreeRTOS/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../src/FreeRTOS/queue.c ****  * copies or substantial portions of the Software.
  14:../src/FreeRTOS/queue.c ****  *
  15:../src/FreeRTOS/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../src/FreeRTOS/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../src/FreeRTOS/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../src/FreeRTOS/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../src/FreeRTOS/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../src/FreeRTOS/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../src/FreeRTOS/queue.c ****  *
  22:../src/FreeRTOS/queue.c ****  * http://www.FreeRTOS.org
  23:../src/FreeRTOS/queue.c ****  * http://aws.amazon.com/freertos
  24:../src/FreeRTOS/queue.c ****  *
  25:../src/FreeRTOS/queue.c ****  * 1 tab == 4 spaces!
  26:../src/FreeRTOS/queue.c ****  */
  27:../src/FreeRTOS/queue.c **** 
  28:../src/FreeRTOS/queue.c **** #include <stdlib.h>
  29:../src/FreeRTOS/queue.c **** #include <string.h>
  30:../src/FreeRTOS/queue.c **** 
  31:../src/FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../src/FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:../src/FreeRTOS/queue.c **** task.h is included from an application file. */
  34:../src/FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../src/FreeRTOS/queue.c **** 
  36:../src/FreeRTOS/queue.c **** #include "FreeRTOS.h"
  37:../src/FreeRTOS/queue.c **** #include "task.h"
  38:../src/FreeRTOS/queue.c **** #include "queue.h"
  39:../src/FreeRTOS/queue.c **** 
  40:../src/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:../src/FreeRTOS/queue.c **** 	#include "croutine.h"
  42:../src/FreeRTOS/queue.c **** #endif
  43:../src/FreeRTOS/queue.c **** 
  44:../src/FreeRTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:../src/FreeRTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:../src/FreeRTOS/queue.c **** header files above, but not in this file, in order to generate the correct
  47:../src/FreeRTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:../src/FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:../src/FreeRTOS/queue.c **** 
  50:../src/FreeRTOS/queue.c **** 
  51:../src/FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:../src/FreeRTOS/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:../src/FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:../src/FreeRTOS/queue.c **** 
  55:../src/FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../src/FreeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:../src/FreeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../src/FreeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../src/FreeRTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:../src/FreeRTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:../src/FreeRTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:../src/FreeRTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:../src/FreeRTOS/queue.c **** against the coding standard (although an exception to the standard has been
  64:../src/FreeRTOS/queue.c **** permitted where the dual use also significantly changes the type of the
  65:../src/FreeRTOS/queue.c **** structure member). */
  66:../src/FreeRTOS/queue.c **** #define pxMutexHolder					pcTail
  67:../src/FreeRTOS/queue.c **** #define uxQueueType						pcHead
  68:../src/FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:../src/FreeRTOS/queue.c **** 
  70:../src/FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:../src/FreeRTOS/queue.c **** zero. */
  72:../src/FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:../src/FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:../src/FreeRTOS/queue.c **** 
  75:../src/FreeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:../src/FreeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:../src/FreeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
  78:../src/FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:../src/FreeRTOS/queue.c **** #else
  80:../src/FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:../src/FreeRTOS/queue.c **** #endif
  82:../src/FreeRTOS/queue.c **** 
  83:../src/FreeRTOS/queue.c **** /*
  84:../src/FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
  85:../src/FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:../src/FreeRTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:../src/FreeRTOS/queue.c ****  */
  88:../src/FreeRTOS/queue.c **** typedef struct QueueDefinition
  89:../src/FreeRTOS/queue.c **** {
  90:../src/FreeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:../src/FreeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:../src/FreeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:../src/FreeRTOS/queue.c **** 
  94:../src/FreeRTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:../src/FreeRTOS/queue.c **** 	{
  96:../src/FreeRTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:../src/FreeRTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:../src/FreeRTOS/queue.c **** 	} u;
  99:../src/FreeRTOS/queue.c **** 
 100:../src/FreeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:../src/FreeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:../src/FreeRTOS/queue.c **** 
 103:../src/FreeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:../src/FreeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:../src/FreeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:../src/FreeRTOS/queue.c **** 
 107:../src/FreeRTOS/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:../src/FreeRTOS/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:../src/FreeRTOS/queue.c **** 
 110:../src/FreeRTOS/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:../src/FreeRTOS/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:../src/FreeRTOS/queue.c **** 	#endif
 113:../src/FreeRTOS/queue.c **** 
 114:../src/FreeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:../src/FreeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:../src/FreeRTOS/queue.c **** 	#endif
 117:../src/FreeRTOS/queue.c **** 
 118:../src/FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:../src/FreeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 120:../src/FreeRTOS/queue.c **** 		uint8_t ucQueueType;
 121:../src/FreeRTOS/queue.c **** 	#endif
 122:../src/FreeRTOS/queue.c **** 
 123:../src/FreeRTOS/queue.c **** } xQUEUE;
 124:../src/FreeRTOS/queue.c **** 
 125:../src/FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:../src/FreeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:../src/FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 128:../src/FreeRTOS/queue.c **** 
 129:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 130:../src/FreeRTOS/queue.c **** 
 131:../src/FreeRTOS/queue.c **** /*
 132:../src/FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:../src/FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:../src/FreeRTOS/queue.c ****  */
 135:../src/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:../src/FreeRTOS/queue.c **** 
 137:../src/FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:../src/FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:../src/FreeRTOS/queue.c **** 	more user friendly. */
 140:../src/FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:../src/FreeRTOS/queue.c **** 	{
 142:../src/FreeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:../src/FreeRTOS/queue.c **** 		QueueHandle_t xHandle;
 144:../src/FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 145:../src/FreeRTOS/queue.c **** 
 146:../src/FreeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:../src/FreeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:../src/FreeRTOS/queue.c **** 	debuggers. */
 149:../src/FreeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:../src/FreeRTOS/queue.c **** 
 151:../src/FreeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:../src/FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:../src/FreeRTOS/queue.c **** 	array position being vacant. */
 154:../src/FreeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:../src/FreeRTOS/queue.c **** 
 156:../src/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:../src/FreeRTOS/queue.c **** 
 158:../src/FreeRTOS/queue.c **** /*
 159:../src/FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:../src/FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:../src/FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:../src/FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:../src/FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:../src/FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:../src/FreeRTOS/queue.c ****  */
 166:../src/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:../src/FreeRTOS/queue.c **** 
 168:../src/FreeRTOS/queue.c **** /*
 169:../src/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:../src/FreeRTOS/queue.c ****  *
 171:../src/FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:../src/FreeRTOS/queue.c ****  */
 173:../src/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:../src/FreeRTOS/queue.c **** 
 175:../src/FreeRTOS/queue.c **** /*
 176:../src/FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:../src/FreeRTOS/queue.c ****  *
 178:../src/FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:../src/FreeRTOS/queue.c ****  */
 180:../src/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:../src/FreeRTOS/queue.c **** 
 182:../src/FreeRTOS/queue.c **** /*
 183:../src/FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:../src/FreeRTOS/queue.c ****  * back of the queue.
 185:../src/FreeRTOS/queue.c ****  */
 186:../src/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:../src/FreeRTOS/queue.c **** 
 188:../src/FreeRTOS/queue.c **** /*
 189:../src/FreeRTOS/queue.c ****  * Copies an item out of a queue.
 190:../src/FreeRTOS/queue.c ****  */
 191:../src/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:../src/FreeRTOS/queue.c **** 
 193:../src/FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:../src/FreeRTOS/queue.c **** 	/*
 195:../src/FreeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:../src/FreeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 197:../src/FreeRTOS/queue.c **** 	 */
 198:../src/FreeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:../src/FreeRTOS/queue.c **** #endif
 200:../src/FreeRTOS/queue.c **** 
 201:../src/FreeRTOS/queue.c **** /*
 202:../src/FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:../src/FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 204:../src/FreeRTOS/queue.c ****  */
 205:../src/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:../src/FreeRTOS/queue.c **** 
 207:../src/FreeRTOS/queue.c **** /*
 208:../src/FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:../src/FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:../src/FreeRTOS/queue.c ****  * as a mutex.
 211:../src/FreeRTOS/queue.c ****  */
 212:../src/FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:../src/FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:../src/FreeRTOS/queue.c **** #endif
 215:../src/FreeRTOS/queue.c **** 
 216:../src/FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:../src/FreeRTOS/queue.c **** 	/*
 218:../src/FreeRTOS/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:../src/FreeRTOS/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:../src/FreeRTOS/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:../src/FreeRTOS/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:../src/FreeRTOS/queue.c **** 	 * that priority.
 223:../src/FreeRTOS/queue.c **** 	 */
 224:../src/FreeRTOS/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:../src/FreeRTOS/queue.c **** #endif
 226:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 227:../src/FreeRTOS/queue.c **** 
 228:../src/FreeRTOS/queue.c **** /*
 229:../src/FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:../src/FreeRTOS/queue.c ****  * accessing the queue event lists.
 231:../src/FreeRTOS/queue.c ****  */
 232:../src/FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 233:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 234:../src/FreeRTOS/queue.c **** 	{														\
 235:../src/FreeRTOS/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:../src/FreeRTOS/queue.c **** 		{													\
 237:../src/FreeRTOS/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:../src/FreeRTOS/queue.c **** 		}													\
 239:../src/FreeRTOS/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:../src/FreeRTOS/queue.c **** 		{													\
 241:../src/FreeRTOS/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:../src/FreeRTOS/queue.c **** 		}													\
 243:../src/FreeRTOS/queue.c **** 	}														\
 244:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 245:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 246:../src/FreeRTOS/queue.c **** 
 247:../src/FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:../src/FreeRTOS/queue.c **** {
 249:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:../src/FreeRTOS/queue.c **** 
 251:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 252:../src/FreeRTOS/queue.c **** 
 253:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 254:../src/FreeRTOS/queue.c **** 	{
 255:../src/FreeRTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:../src/FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:../src/FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:../src/FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:../src/FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 260:../src/FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 261:../src/FreeRTOS/queue.c **** 
 262:../src/FreeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 263:../src/FreeRTOS/queue.c **** 		{
 264:../src/FreeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:../src/FreeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:../src/FreeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:../src/FreeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:../src/FreeRTOS/queue.c **** 			it will be possible to write to it. */
 269:../src/FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:../src/FreeRTOS/queue.c **** 			{
 271:../src/FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:../src/FreeRTOS/queue.c **** 				{
 273:../src/FreeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:../src/FreeRTOS/queue.c **** 				}
 275:../src/FreeRTOS/queue.c **** 				else
 276:../src/FreeRTOS/queue.c **** 				{
 277:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:../src/FreeRTOS/queue.c **** 				}
 279:../src/FreeRTOS/queue.c **** 			}
 280:../src/FreeRTOS/queue.c **** 			else
 281:../src/FreeRTOS/queue.c **** 			{
 282:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:../src/FreeRTOS/queue.c **** 			}
 284:../src/FreeRTOS/queue.c **** 		}
 285:../src/FreeRTOS/queue.c **** 		else
 286:../src/FreeRTOS/queue.c **** 		{
 287:../src/FreeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:../src/FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:../src/FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:../src/FreeRTOS/queue.c **** 		}
 291:../src/FreeRTOS/queue.c **** 	}
 292:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 293:../src/FreeRTOS/queue.c **** 
 294:../src/FreeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:../src/FreeRTOS/queue.c **** 	versions. */
 296:../src/FreeRTOS/queue.c **** 	return pdPASS;
 297:../src/FreeRTOS/queue.c **** }
 298:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 299:../src/FreeRTOS/queue.c **** 
 300:../src/FreeRTOS/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:../src/FreeRTOS/queue.c **** 
 302:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:../src/FreeRTOS/queue.c **** 	{
 304:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 305:../src/FreeRTOS/queue.c **** 
 306:../src/FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:../src/FreeRTOS/queue.c **** 
 308:../src/FreeRTOS/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:../src/FreeRTOS/queue.c **** 		supplied. */
 310:../src/FreeRTOS/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:../src/FreeRTOS/queue.c **** 
 312:../src/FreeRTOS/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:../src/FreeRTOS/queue.c **** 		should not be provided if the item size is 0. */
 314:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:../src/FreeRTOS/queue.c **** 
 317:../src/FreeRTOS/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:../src/FreeRTOS/queue.c **** 		{
 319:../src/FreeRTOS/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:../src/FreeRTOS/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:../src/FreeRTOS/queue.c **** 			the real queue and semaphore structures. */
 322:../src/FreeRTOS/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:../src/FreeRTOS/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:../src/FreeRTOS/queue.c **** 		}
 325:../src/FreeRTOS/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:../src/FreeRTOS/queue.c **** 
 327:../src/FreeRTOS/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:../src/FreeRTOS/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:../src/FreeRTOS/queue.c **** 		but is already set. */
 330:../src/FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:../src/FreeRTOS/queue.c **** 
 332:../src/FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 333:../src/FreeRTOS/queue.c **** 		{
 334:../src/FreeRTOS/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:../src/FreeRTOS/queue.c **** 			{
 336:../src/FreeRTOS/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:../src/FreeRTOS/queue.c **** 				note this queue was allocated statically in case the queue is
 338:../src/FreeRTOS/queue.c **** 				later deleted. */
 339:../src/FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:../src/FreeRTOS/queue.c **** 			}
 341:../src/FreeRTOS/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:../src/FreeRTOS/queue.c **** 
 343:../src/FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:../src/FreeRTOS/queue.c **** 		}
 345:../src/FreeRTOS/queue.c **** 		else
 346:../src/FreeRTOS/queue.c **** 		{
 347:../src/FreeRTOS/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:../src/FreeRTOS/queue.c **** 		}
 349:../src/FreeRTOS/queue.c **** 
 350:../src/FreeRTOS/queue.c **** 		return pxNewQueue;
 351:../src/FreeRTOS/queue.c **** 	}
 352:../src/FreeRTOS/queue.c **** 
 353:../src/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 355:../src/FreeRTOS/queue.c **** 
 356:../src/FreeRTOS/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:../src/FreeRTOS/queue.c **** 
 358:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:../src/FreeRTOS/queue.c **** 	{
 360:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 361:../src/FreeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 362:../src/FreeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 363:../src/FreeRTOS/queue.c **** 
 364:../src/FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:../src/FreeRTOS/queue.c **** 
 366:../src/FreeRTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:../src/FreeRTOS/queue.c **** 		{
 368:../src/FreeRTOS/queue.c **** 			/* There is not going to be a queue storage area. */
 369:../src/FreeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:../src/FreeRTOS/queue.c **** 		}
 371:../src/FreeRTOS/queue.c **** 		else
 372:../src/FreeRTOS/queue.c **** 		{
 373:../src/FreeRTOS/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 374:../src/FreeRTOS/queue.c **** 			can be in the queue at any time. */
 375:../src/FreeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:../src/FreeRTOS/queue.c **** 		}
 377:../src/FreeRTOS/queue.c **** 
 378:../src/FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:../src/FreeRTOS/queue.c **** 
 380:../src/FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 381:../src/FreeRTOS/queue.c **** 		{
 382:../src/FreeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:../src/FreeRTOS/queue.c **** 			storage area. */
 384:../src/FreeRTOS/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:../src/FreeRTOS/queue.c **** 
 386:../src/FreeRTOS/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:../src/FreeRTOS/queue.c **** 			{
 388:../src/FreeRTOS/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:../src/FreeRTOS/queue.c **** 				note this task was created dynamically in case it is later
 390:../src/FreeRTOS/queue.c **** 				deleted. */
 391:../src/FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:../src/FreeRTOS/queue.c **** 			}
 393:../src/FreeRTOS/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:../src/FreeRTOS/queue.c **** 
 395:../src/FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:../src/FreeRTOS/queue.c **** 		}
 397:../src/FreeRTOS/queue.c **** 		else
 398:../src/FreeRTOS/queue.c **** 		{
 399:../src/FreeRTOS/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:../src/FreeRTOS/queue.c **** 		}
 401:../src/FreeRTOS/queue.c **** 
 402:../src/FreeRTOS/queue.c **** 		return pxNewQueue;
 403:../src/FreeRTOS/queue.c **** 	}
 404:../src/FreeRTOS/queue.c **** 
 405:../src/FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 407:../src/FreeRTOS/queue.c **** 
 408:../src/FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:../src/FreeRTOS/queue.c **** {
 410:../src/FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:../src/FreeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:../src/FreeRTOS/queue.c **** 	( void ) ucQueueType;
 413:../src/FreeRTOS/queue.c **** 
 414:../src/FreeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:../src/FreeRTOS/queue.c **** 	{
 416:../src/FreeRTOS/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:../src/FreeRTOS/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:../src/FreeRTOS/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:../src/FreeRTOS/queue.c **** 		value that is known to be within the memory map. */
 420:../src/FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:../src/FreeRTOS/queue.c **** 	}
 422:../src/FreeRTOS/queue.c **** 	else
 423:../src/FreeRTOS/queue.c **** 	{
 424:../src/FreeRTOS/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:../src/FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:../src/FreeRTOS/queue.c **** 	}
 427:../src/FreeRTOS/queue.c **** 
 428:../src/FreeRTOS/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:../src/FreeRTOS/queue.c **** 	defined. */
 430:../src/FreeRTOS/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 431:../src/FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 432:../src/FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:../src/FreeRTOS/queue.c **** 
 434:../src/FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:../src/FreeRTOS/queue.c **** 	{
 436:../src/FreeRTOS/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:../src/FreeRTOS/queue.c **** 	}
 438:../src/FreeRTOS/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:../src/FreeRTOS/queue.c **** 
 440:../src/FreeRTOS/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:../src/FreeRTOS/queue.c **** 	{
 442:../src/FreeRTOS/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:../src/FreeRTOS/queue.c **** 	}
 444:../src/FreeRTOS/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:../src/FreeRTOS/queue.c **** 
 446:../src/FreeRTOS/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:../src/FreeRTOS/queue.c **** }
 448:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 449:../src/FreeRTOS/queue.c **** 
 450:../src/FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:../src/FreeRTOS/queue.c **** 
 452:../src/FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:../src/FreeRTOS/queue.c **** 	{
 454:../src/FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 455:../src/FreeRTOS/queue.c **** 		{
 456:../src/FreeRTOS/queue.c **** 			/* The queue create function will set all the queue structure members
 457:../src/FreeRTOS/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:../src/FreeRTOS/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:../src/FreeRTOS/queue.c **** 			in particular the information required for priority inheritance. */
 460:../src/FreeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:../src/FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:../src/FreeRTOS/queue.c **** 
 463:../src/FreeRTOS/queue.c **** 			/* In case this is a recursive mutex. */
 464:../src/FreeRTOS/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:../src/FreeRTOS/queue.c **** 
 466:../src/FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:../src/FreeRTOS/queue.c **** 
 468:../src/FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:../src/FreeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:../src/FreeRTOS/queue.c **** 		}
 471:../src/FreeRTOS/queue.c **** 		else
 472:../src/FreeRTOS/queue.c **** 		{
 473:../src/FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:../src/FreeRTOS/queue.c **** 		}
 475:../src/FreeRTOS/queue.c **** 	}
 476:../src/FreeRTOS/queue.c **** 
 477:../src/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 478:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 479:../src/FreeRTOS/queue.c **** 
 480:../src/FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:../src/FreeRTOS/queue.c **** 
 482:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:../src/FreeRTOS/queue.c **** 	{
 484:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 485:../src/FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:../src/FreeRTOS/queue.c **** 
 487:../src/FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 488:../src/FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 489:../src/FreeRTOS/queue.c **** 
 490:../src/FreeRTOS/queue.c **** 		return pxNewQueue;
 491:../src/FreeRTOS/queue.c **** 	}
 492:../src/FreeRTOS/queue.c **** 
 493:../src/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 494:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 495:../src/FreeRTOS/queue.c **** 
 496:../src/FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:../src/FreeRTOS/queue.c **** 
 498:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:../src/FreeRTOS/queue.c **** 	{
 500:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 501:../src/FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:../src/FreeRTOS/queue.c **** 
 503:../src/FreeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:../src/FreeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:../src/FreeRTOS/queue.c **** 		( void ) ucQueueType;
 506:../src/FreeRTOS/queue.c **** 
 507:../src/FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:../src/FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:../src/FreeRTOS/queue.c **** 
 510:../src/FreeRTOS/queue.c **** 		return pxNewQueue;
 511:../src/FreeRTOS/queue.c **** 	}
 512:../src/FreeRTOS/queue.c **** 
 513:../src/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 514:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 515:../src/FreeRTOS/queue.c **** 
 516:../src/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:../src/FreeRTOS/queue.c **** 
 518:../src/FreeRTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:../src/FreeRTOS/queue.c **** 	{
 520:../src/FreeRTOS/queue.c **** 	void *pxReturn;
 521:../src/FreeRTOS/queue.c **** 
 522:../src/FreeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:../src/FreeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:../src/FreeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:../src/FreeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:../src/FreeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 527:../src/FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 528:../src/FreeRTOS/queue.c **** 		{
 529:../src/FreeRTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:../src/FreeRTOS/queue.c **** 			{
 531:../src/FreeRTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:../src/FreeRTOS/queue.c **** 			}
 533:../src/FreeRTOS/queue.c **** 			else
 534:../src/FreeRTOS/queue.c **** 			{
 535:../src/FreeRTOS/queue.c **** 				pxReturn = NULL;
 536:../src/FreeRTOS/queue.c **** 			}
 537:../src/FreeRTOS/queue.c **** 		}
 538:../src/FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 539:../src/FreeRTOS/queue.c **** 
 540:../src/FreeRTOS/queue.c **** 		return pxReturn;
 541:../src/FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:../src/FreeRTOS/queue.c **** 
 543:../src/FreeRTOS/queue.c **** #endif
 544:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 545:../src/FreeRTOS/queue.c **** 
 546:../src/FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:../src/FreeRTOS/queue.c **** 
 548:../src/FreeRTOS/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:../src/FreeRTOS/queue.c **** 	{
 550:../src/FreeRTOS/queue.c **** 	void *pxReturn;
 551:../src/FreeRTOS/queue.c **** 
 552:../src/FreeRTOS/queue.c **** 		configASSERT( xSemaphore );
 553:../src/FreeRTOS/queue.c **** 
 554:../src/FreeRTOS/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:../src/FreeRTOS/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:../src/FreeRTOS/queue.c **** 		not required here. */
 557:../src/FreeRTOS/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:../src/FreeRTOS/queue.c **** 		{
 559:../src/FreeRTOS/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:../src/FreeRTOS/queue.c **** 		}
 561:../src/FreeRTOS/queue.c **** 		else
 562:../src/FreeRTOS/queue.c **** 		{
 563:../src/FreeRTOS/queue.c **** 			pxReturn = NULL;
 564:../src/FreeRTOS/queue.c **** 		}
 565:../src/FreeRTOS/queue.c **** 
 566:../src/FreeRTOS/queue.c **** 		return pxReturn;
 567:../src/FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:../src/FreeRTOS/queue.c **** 
 569:../src/FreeRTOS/queue.c **** #endif
 570:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 571:../src/FreeRTOS/queue.c **** 
 572:../src/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:../src/FreeRTOS/queue.c **** 
 574:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:../src/FreeRTOS/queue.c **** 	{
 576:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
 577:../src/FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:../src/FreeRTOS/queue.c **** 
 579:../src/FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 580:../src/FreeRTOS/queue.c **** 
 581:../src/FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:../src/FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:../src/FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:../src/FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:../src/FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:../src/FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:../src/FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:../src/FreeRTOS/queue.c **** 		{
 589:../src/FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:../src/FreeRTOS/queue.c **** 
 591:../src/FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:../src/FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:../src/FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:../src/FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:../src/FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 596:../src/FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:../src/FreeRTOS/queue.c **** 
 598:../src/FreeRTOS/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:../src/FreeRTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:../src/FreeRTOS/queue.c **** 			{
 601:../src/FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 602:../src/FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 603:../src/FreeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:../src/FreeRTOS/queue.c **** 			}
 605:../src/FreeRTOS/queue.c **** 			else
 606:../src/FreeRTOS/queue.c **** 			{
 607:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:../src/FreeRTOS/queue.c **** 			}
 609:../src/FreeRTOS/queue.c **** 
 610:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
 611:../src/FreeRTOS/queue.c **** 		}
 612:../src/FreeRTOS/queue.c **** 		else
 613:../src/FreeRTOS/queue.c **** 		{
 614:../src/FreeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:../src/FreeRTOS/queue.c **** 			holder. */
 616:../src/FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 617:../src/FreeRTOS/queue.c **** 
 618:../src/FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:../src/FreeRTOS/queue.c **** 		}
 620:../src/FreeRTOS/queue.c **** 
 621:../src/FreeRTOS/queue.c **** 		return xReturn;
 622:../src/FreeRTOS/queue.c **** 	}
 623:../src/FreeRTOS/queue.c **** 
 624:../src/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 626:../src/FreeRTOS/queue.c **** 
 627:../src/FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:../src/FreeRTOS/queue.c **** 
 629:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:../src/FreeRTOS/queue.c **** 	{
 631:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
 632:../src/FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:../src/FreeRTOS/queue.c **** 
 634:../src/FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 635:../src/FreeRTOS/queue.c **** 
 636:../src/FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:../src/FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:../src/FreeRTOS/queue.c **** 
 639:../src/FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:../src/FreeRTOS/queue.c **** 
 641:../src/FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:../src/FreeRTOS/queue.c **** 		{
 643:../src/FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
 645:../src/FreeRTOS/queue.c **** 		}
 646:../src/FreeRTOS/queue.c **** 		else
 647:../src/FreeRTOS/queue.c **** 		{
 648:../src/FreeRTOS/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:../src/FreeRTOS/queue.c **** 
 650:../src/FreeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:../src/FreeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:../src/FreeRTOS/queue.c **** 			before reaching here. */
 653:../src/FreeRTOS/queue.c **** 			if( xReturn != pdFAIL )
 654:../src/FreeRTOS/queue.c **** 			{
 655:../src/FreeRTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:../src/FreeRTOS/queue.c **** 			}
 657:../src/FreeRTOS/queue.c **** 			else
 658:../src/FreeRTOS/queue.c **** 			{
 659:../src/FreeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 660:../src/FreeRTOS/queue.c **** 			}
 661:../src/FreeRTOS/queue.c **** 		}
 662:../src/FreeRTOS/queue.c **** 
 663:../src/FreeRTOS/queue.c **** 		return xReturn;
 664:../src/FreeRTOS/queue.c **** 	}
 665:../src/FreeRTOS/queue.c **** 
 666:../src/FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 668:../src/FreeRTOS/queue.c **** 
 669:../src/FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:../src/FreeRTOS/queue.c **** 
 671:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:../src/FreeRTOS/queue.c **** 	{
 673:../src/FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 674:../src/FreeRTOS/queue.c **** 
 675:../src/FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:../src/FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:../src/FreeRTOS/queue.c **** 
 678:../src/FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:../src/FreeRTOS/queue.c **** 
 680:../src/FreeRTOS/queue.c **** 		if( xHandle != NULL )
 681:../src/FreeRTOS/queue.c **** 		{
 682:../src/FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:../src/FreeRTOS/queue.c **** 
 684:../src/FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:../src/FreeRTOS/queue.c **** 		}
 686:../src/FreeRTOS/queue.c **** 		else
 687:../src/FreeRTOS/queue.c **** 		{
 688:../src/FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:../src/FreeRTOS/queue.c **** 		}
 690:../src/FreeRTOS/queue.c **** 
 691:../src/FreeRTOS/queue.c **** 		return xHandle;
 692:../src/FreeRTOS/queue.c **** 	}
 693:../src/FreeRTOS/queue.c **** 
 694:../src/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 696:../src/FreeRTOS/queue.c **** 
 697:../src/FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:../src/FreeRTOS/queue.c **** 
 699:../src/FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:../src/FreeRTOS/queue.c **** 	{
 701:../src/FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 702:../src/FreeRTOS/queue.c **** 
 703:../src/FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:../src/FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:../src/FreeRTOS/queue.c **** 
 706:../src/FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:../src/FreeRTOS/queue.c **** 
 708:../src/FreeRTOS/queue.c **** 		if( xHandle != NULL )
 709:../src/FreeRTOS/queue.c **** 		{
 710:../src/FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:../src/FreeRTOS/queue.c **** 
 712:../src/FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:../src/FreeRTOS/queue.c **** 		}
 714:../src/FreeRTOS/queue.c **** 		else
 715:../src/FreeRTOS/queue.c **** 		{
 716:../src/FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 717:../src/FreeRTOS/queue.c **** 		}
 718:../src/FreeRTOS/queue.c **** 
 719:../src/FreeRTOS/queue.c **** 		return xHandle;
 720:../src/FreeRTOS/queue.c **** 	}
 721:../src/FreeRTOS/queue.c **** 
 722:../src/FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 724:../src/FreeRTOS/queue.c **** 
 725:../src/FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:../src/FreeRTOS/queue.c **** {
 727:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:../src/FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 729:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:../src/FreeRTOS/queue.c **** 
 731:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:../src/FreeRTOS/queue.c **** 	{
 736:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:../src/FreeRTOS/queue.c **** 	}
 738:../src/FreeRTOS/queue.c **** 	#endif
 739:../src/FreeRTOS/queue.c **** 
 740:../src/FreeRTOS/queue.c **** 
 741:../src/FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:../src/FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 743:../src/FreeRTOS/queue.c **** 	of execution time efficiency. */
 744:../src/FreeRTOS/queue.c **** 	for( ;; )
 745:../src/FreeRTOS/queue.c **** 	{
 746:../src/FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 747:../src/FreeRTOS/queue.c **** 		{
 748:../src/FreeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:../src/FreeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:../src/FreeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:../src/FreeRTOS/queue.c **** 			queue is full. */
 752:../src/FreeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:../src/FreeRTOS/queue.c **** 			{
 754:../src/FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:../src/FreeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:../src/FreeRTOS/queue.c **** 
 757:../src/FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:../src/FreeRTOS/queue.c **** 				{
 759:../src/FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:../src/FreeRTOS/queue.c **** 					{
 761:../src/FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:../src/FreeRTOS/queue.c **** 						{
 763:../src/FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:../src/FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 765:../src/FreeRTOS/queue.c **** 							unblock. A context switch is required. */
 766:../src/FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:../src/FreeRTOS/queue.c **** 						}
 768:../src/FreeRTOS/queue.c **** 						else
 769:../src/FreeRTOS/queue.c **** 						{
 770:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:../src/FreeRTOS/queue.c **** 						}
 772:../src/FreeRTOS/queue.c **** 					}
 773:../src/FreeRTOS/queue.c **** 					else
 774:../src/FreeRTOS/queue.c **** 					{
 775:../src/FreeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:../src/FreeRTOS/queue.c **** 						queue then unblock it now. */
 777:../src/FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:../src/FreeRTOS/queue.c **** 						{
 779:../src/FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:../src/FreeRTOS/queue.c **** 							{
 781:../src/FreeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 782:../src/FreeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:../src/FreeRTOS/queue.c **** 								do this from within the critical section - the
 784:../src/FreeRTOS/queue.c **** 								kernel takes care of that. */
 785:../src/FreeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:../src/FreeRTOS/queue.c **** 							}
 787:../src/FreeRTOS/queue.c **** 							else
 788:../src/FreeRTOS/queue.c **** 							{
 789:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:../src/FreeRTOS/queue.c **** 							}
 791:../src/FreeRTOS/queue.c **** 						}
 792:../src/FreeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:../src/FreeRTOS/queue.c **** 						{
 794:../src/FreeRTOS/queue.c **** 							/* This path is a special case that will only get
 795:../src/FreeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 796:../src/FreeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 797:../src/FreeRTOS/queue.c **** 							different to that in which they were taken. */
 798:../src/FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:../src/FreeRTOS/queue.c **** 						}
 800:../src/FreeRTOS/queue.c **** 						else
 801:../src/FreeRTOS/queue.c **** 						{
 802:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:../src/FreeRTOS/queue.c **** 						}
 804:../src/FreeRTOS/queue.c **** 					}
 805:../src/FreeRTOS/queue.c **** 				}
 806:../src/FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:../src/FreeRTOS/queue.c **** 				{
 808:../src/FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:../src/FreeRTOS/queue.c **** 					queue then unblock it now. */
 810:../src/FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:../src/FreeRTOS/queue.c **** 					{
 812:../src/FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:../src/FreeRTOS/queue.c **** 						{
 814:../src/FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 815:../src/FreeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:../src/FreeRTOS/queue.c **** 							this from within the critical section - the kernel
 817:../src/FreeRTOS/queue.c **** 							takes care of that. */
 818:../src/FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:../src/FreeRTOS/queue.c **** 						}
 820:../src/FreeRTOS/queue.c **** 						else
 821:../src/FreeRTOS/queue.c **** 						{
 822:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:../src/FreeRTOS/queue.c **** 						}
 824:../src/FreeRTOS/queue.c **** 					}
 825:../src/FreeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:../src/FreeRTOS/queue.c **** 					{
 827:../src/FreeRTOS/queue.c **** 						/* This path is a special case that will only get
 828:../src/FreeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 829:../src/FreeRTOS/queue.c **** 						the mutexes were given back in an order that is
 830:../src/FreeRTOS/queue.c **** 						different to that in which they were taken. */
 831:../src/FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:../src/FreeRTOS/queue.c **** 					}
 833:../src/FreeRTOS/queue.c **** 					else
 834:../src/FreeRTOS/queue.c **** 					{
 835:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:../src/FreeRTOS/queue.c **** 					}
 837:../src/FreeRTOS/queue.c **** 				}
 838:../src/FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:../src/FreeRTOS/queue.c **** 
 840:../src/FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 841:../src/FreeRTOS/queue.c **** 				return pdPASS;
 842:../src/FreeRTOS/queue.c **** 			}
 843:../src/FreeRTOS/queue.c **** 			else
 844:../src/FreeRTOS/queue.c **** 			{
 845:../src/FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:../src/FreeRTOS/queue.c **** 				{
 847:../src/FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 848:../src/FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 849:../src/FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 850:../src/FreeRTOS/queue.c **** 
 851:../src/FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 852:../src/FreeRTOS/queue.c **** 					the function. */
 853:../src/FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:../src/FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 855:../src/FreeRTOS/queue.c **** 				}
 856:../src/FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:../src/FreeRTOS/queue.c **** 				{
 858:../src/FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 859:../src/FreeRTOS/queue.c **** 					configure the timeout structure. */
 860:../src/FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:../src/FreeRTOS/queue.c **** 				}
 863:../src/FreeRTOS/queue.c **** 				else
 864:../src/FreeRTOS/queue.c **** 				{
 865:../src/FreeRTOS/queue.c **** 					/* Entry time was already set. */
 866:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:../src/FreeRTOS/queue.c **** 				}
 868:../src/FreeRTOS/queue.c **** 			}
 869:../src/FreeRTOS/queue.c **** 		}
 870:../src/FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 871:../src/FreeRTOS/queue.c **** 
 872:../src/FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:../src/FreeRTOS/queue.c **** 		now the critical section has been exited. */
 874:../src/FreeRTOS/queue.c **** 
 875:../src/FreeRTOS/queue.c **** 		vTaskSuspendAll();
 876:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 877:../src/FreeRTOS/queue.c **** 
 878:../src/FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:../src/FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:../src/FreeRTOS/queue.c **** 		{
 881:../src/FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:../src/FreeRTOS/queue.c **** 			{
 883:../src/FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:../src/FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:../src/FreeRTOS/queue.c **** 
 886:../src/FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 887:../src/FreeRTOS/queue.c **** 				event list.  It is possible that interrupts occurring now
 888:../src/FreeRTOS/queue.c **** 				remove this task from the event list again - but as the
 889:../src/FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:../src/FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 891:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 892:../src/FreeRTOS/queue.c **** 
 893:../src/FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:../src/FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:../src/FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 896:../src/FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 897:../src/FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:../src/FreeRTOS/queue.c **** 				{
 900:../src/FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 901:../src/FreeRTOS/queue.c **** 				}
 902:../src/FreeRTOS/queue.c **** 			}
 903:../src/FreeRTOS/queue.c **** 			else
 904:../src/FreeRTOS/queue.c **** 			{
 905:../src/FreeRTOS/queue.c **** 				/* Try again. */
 906:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 907:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 908:../src/FreeRTOS/queue.c **** 			}
 909:../src/FreeRTOS/queue.c **** 		}
 910:../src/FreeRTOS/queue.c **** 		else
 911:../src/FreeRTOS/queue.c **** 		{
 912:../src/FreeRTOS/queue.c **** 			/* The timeout has expired. */
 913:../src/FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 914:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 915:../src/FreeRTOS/queue.c **** 
 916:../src/FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:../src/FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 918:../src/FreeRTOS/queue.c **** 		}
 919:../src/FreeRTOS/queue.c **** 	}
 920:../src/FreeRTOS/queue.c **** }
 921:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 922:../src/FreeRTOS/queue.c **** 
 923:../src/FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:../src/FreeRTOS/queue.c **** {
 925:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 926:../src/FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:../src/FreeRTOS/queue.c **** 
 929:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:../src/FreeRTOS/queue.c **** 
 933:../src/FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:../src/FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:../src/FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:../src/FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:../src/FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:../src/FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:../src/FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:../src/FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:../src/FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:../src/FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:../src/FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 944:../src/FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 945:../src/FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:../src/FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:../src/FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:../src/FreeRTOS/queue.c **** 
 949:../src/FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:../src/FreeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:../src/FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:../src/FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:../src/FreeRTOS/queue.c **** 	post). */
 954:../src/FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:../src/FreeRTOS/queue.c **** 	{
 956:../src/FreeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:../src/FreeRTOS/queue.c **** 		{
 958:../src/FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:../src/FreeRTOS/queue.c **** 
 960:../src/FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:../src/FreeRTOS/queue.c **** 
 962:../src/FreeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:../src/FreeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:../src/FreeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:../src/FreeRTOS/queue.c **** 			called here even though the disinherit function does not check if
 966:../src/FreeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:../src/FreeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:../src/FreeRTOS/queue.c **** 
 969:../src/FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:../src/FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
 971:../src/FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:../src/FreeRTOS/queue.c **** 			{
 973:../src/FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:../src/FreeRTOS/queue.c **** 				{
 975:../src/FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:../src/FreeRTOS/queue.c **** 					{
 977:../src/FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:../src/FreeRTOS/queue.c **** 						{
 979:../src/FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:../src/FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 981:../src/FreeRTOS/queue.c **** 							unblock.  A context switch is required. */
 982:../src/FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:../src/FreeRTOS/queue.c **** 							{
 984:../src/FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:../src/FreeRTOS/queue.c **** 							}
 986:../src/FreeRTOS/queue.c **** 							else
 987:../src/FreeRTOS/queue.c **** 							{
 988:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:../src/FreeRTOS/queue.c **** 							}
 990:../src/FreeRTOS/queue.c **** 						}
 991:../src/FreeRTOS/queue.c **** 						else
 992:../src/FreeRTOS/queue.c **** 						{
 993:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:../src/FreeRTOS/queue.c **** 						}
 995:../src/FreeRTOS/queue.c **** 					}
 996:../src/FreeRTOS/queue.c **** 					else
 997:../src/FreeRTOS/queue.c **** 					{
 998:../src/FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:../src/FreeRTOS/queue.c **** 						{
1000:../src/FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1001:../src/FreeRTOS/queue.c **** 							{
1002:../src/FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1003:../src/FreeRTOS/queue.c **** 								record that a context switch is required. */
1004:../src/FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:../src/FreeRTOS/queue.c **** 								{
1006:../src/FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:../src/FreeRTOS/queue.c **** 								}
1008:../src/FreeRTOS/queue.c **** 								else
1009:../src/FreeRTOS/queue.c **** 								{
1010:../src/FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:../src/FreeRTOS/queue.c **** 								}
1012:../src/FreeRTOS/queue.c **** 							}
1013:../src/FreeRTOS/queue.c **** 							else
1014:../src/FreeRTOS/queue.c **** 							{
1015:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:../src/FreeRTOS/queue.c **** 							}
1017:../src/FreeRTOS/queue.c **** 						}
1018:../src/FreeRTOS/queue.c **** 						else
1019:../src/FreeRTOS/queue.c **** 						{
1020:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:../src/FreeRTOS/queue.c **** 						}
1022:../src/FreeRTOS/queue.c **** 					}
1023:../src/FreeRTOS/queue.c **** 				}
1024:../src/FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:../src/FreeRTOS/queue.c **** 				{
1026:../src/FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:../src/FreeRTOS/queue.c **** 					{
1028:../src/FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:../src/FreeRTOS/queue.c **** 						{
1030:../src/FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:../src/FreeRTOS/queue.c **** 							context	switch is required. */
1032:../src/FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:../src/FreeRTOS/queue.c **** 							{
1034:../src/FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:../src/FreeRTOS/queue.c **** 							}
1036:../src/FreeRTOS/queue.c **** 							else
1037:../src/FreeRTOS/queue.c **** 							{
1038:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:../src/FreeRTOS/queue.c **** 							}
1040:../src/FreeRTOS/queue.c **** 						}
1041:../src/FreeRTOS/queue.c **** 						else
1042:../src/FreeRTOS/queue.c **** 						{
1043:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:../src/FreeRTOS/queue.c **** 						}
1045:../src/FreeRTOS/queue.c **** 					}
1046:../src/FreeRTOS/queue.c **** 					else
1047:../src/FreeRTOS/queue.c **** 					{
1048:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:../src/FreeRTOS/queue.c **** 					}
1050:../src/FreeRTOS/queue.c **** 				}
1051:../src/FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:../src/FreeRTOS/queue.c **** 			}
1053:../src/FreeRTOS/queue.c **** 			else
1054:../src/FreeRTOS/queue.c **** 			{
1055:../src/FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:../src/FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1057:../src/FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1058:../src/FreeRTOS/queue.c **** 			}
1059:../src/FreeRTOS/queue.c **** 
1060:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
1061:../src/FreeRTOS/queue.c **** 		}
1062:../src/FreeRTOS/queue.c **** 		else
1063:../src/FreeRTOS/queue.c **** 		{
1064:../src/FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:../src/FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1066:../src/FreeRTOS/queue.c **** 		}
1067:../src/FreeRTOS/queue.c **** 	}
1068:../src/FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:../src/FreeRTOS/queue.c **** 
1070:../src/FreeRTOS/queue.c **** 	return xReturn;
1071:../src/FreeRTOS/queue.c **** }
1072:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1073:../src/FreeRTOS/queue.c **** 
1074:../src/FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:../src/FreeRTOS/queue.c **** {
1076:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
1077:../src/FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:../src/FreeRTOS/queue.c **** 
1080:../src/FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:../src/FreeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:../src/FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:../src/FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:../src/FreeRTOS/queue.c **** 	post). */
1085:../src/FreeRTOS/queue.c **** 
1086:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1087:../src/FreeRTOS/queue.c **** 
1088:../src/FreeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:../src/FreeRTOS/queue.c **** 	if the item size is not 0. */
1090:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:../src/FreeRTOS/queue.c **** 
1092:../src/FreeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:../src/FreeRTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:../src/FreeRTOS/queue.c **** 	interrupts, only tasks. */
1095:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:../src/FreeRTOS/queue.c **** 
1097:../src/FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:../src/FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:../src/FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:../src/FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:../src/FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:../src/FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:../src/FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:../src/FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:../src/FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:../src/FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:../src/FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:../src/FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:../src/FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:../src/FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:../src/FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:../src/FreeRTOS/queue.c **** 
1113:../src/FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:../src/FreeRTOS/queue.c **** 	{
1115:../src/FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1116:../src/FreeRTOS/queue.c **** 
1117:../src/FreeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:../src/FreeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:../src/FreeRTOS/queue.c **** 		space'. */
1120:../src/FreeRTOS/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:../src/FreeRTOS/queue.c **** 		{
1122:../src/FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:../src/FreeRTOS/queue.c **** 
1124:../src/FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:../src/FreeRTOS/queue.c **** 
1126:../src/FreeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:../src/FreeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:../src/FreeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:../src/FreeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:../src/FreeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:../src/FreeRTOS/queue.c **** 			messages (semaphores) available. */
1132:../src/FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:../src/FreeRTOS/queue.c **** 
1134:../src/FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:../src/FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1136:../src/FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:../src/FreeRTOS/queue.c **** 			{
1138:../src/FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:../src/FreeRTOS/queue.c **** 				{
1140:../src/FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:../src/FreeRTOS/queue.c **** 					{
1142:../src/FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:../src/FreeRTOS/queue.c **** 						{
1144:../src/FreeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:../src/FreeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1146:../src/FreeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1147:../src/FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:../src/FreeRTOS/queue.c **** 							{
1149:../src/FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:../src/FreeRTOS/queue.c **** 							}
1151:../src/FreeRTOS/queue.c **** 							else
1152:../src/FreeRTOS/queue.c **** 							{
1153:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:../src/FreeRTOS/queue.c **** 							}
1155:../src/FreeRTOS/queue.c **** 						}
1156:../src/FreeRTOS/queue.c **** 						else
1157:../src/FreeRTOS/queue.c **** 						{
1158:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:../src/FreeRTOS/queue.c **** 						}
1160:../src/FreeRTOS/queue.c **** 					}
1161:../src/FreeRTOS/queue.c **** 					else
1162:../src/FreeRTOS/queue.c **** 					{
1163:../src/FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:../src/FreeRTOS/queue.c **** 						{
1165:../src/FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:../src/FreeRTOS/queue.c **** 							{
1167:../src/FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1168:../src/FreeRTOS/queue.c **** 								record that a context switch is required. */
1169:../src/FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:../src/FreeRTOS/queue.c **** 								{
1171:../src/FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1172:../src/FreeRTOS/queue.c **** 								}
1173:../src/FreeRTOS/queue.c **** 								else
1174:../src/FreeRTOS/queue.c **** 								{
1175:../src/FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:../src/FreeRTOS/queue.c **** 								}
1177:../src/FreeRTOS/queue.c **** 							}
1178:../src/FreeRTOS/queue.c **** 							else
1179:../src/FreeRTOS/queue.c **** 							{
1180:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:../src/FreeRTOS/queue.c **** 							}
1182:../src/FreeRTOS/queue.c **** 						}
1183:../src/FreeRTOS/queue.c **** 						else
1184:../src/FreeRTOS/queue.c **** 						{
1185:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:../src/FreeRTOS/queue.c **** 						}
1187:../src/FreeRTOS/queue.c **** 					}
1188:../src/FreeRTOS/queue.c **** 				}
1189:../src/FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:../src/FreeRTOS/queue.c **** 				{
1191:../src/FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:../src/FreeRTOS/queue.c **** 					{
1193:../src/FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:../src/FreeRTOS/queue.c **** 						{
1195:../src/FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:../src/FreeRTOS/queue.c **** 							context	switch is required. */
1197:../src/FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:../src/FreeRTOS/queue.c **** 							{
1199:../src/FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:../src/FreeRTOS/queue.c **** 							}
1201:../src/FreeRTOS/queue.c **** 							else
1202:../src/FreeRTOS/queue.c **** 							{
1203:../src/FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:../src/FreeRTOS/queue.c **** 							}
1205:../src/FreeRTOS/queue.c **** 						}
1206:../src/FreeRTOS/queue.c **** 						else
1207:../src/FreeRTOS/queue.c **** 						{
1208:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:../src/FreeRTOS/queue.c **** 						}
1210:../src/FreeRTOS/queue.c **** 					}
1211:../src/FreeRTOS/queue.c **** 					else
1212:../src/FreeRTOS/queue.c **** 					{
1213:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:../src/FreeRTOS/queue.c **** 					}
1215:../src/FreeRTOS/queue.c **** 				}
1216:../src/FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:../src/FreeRTOS/queue.c **** 			}
1218:../src/FreeRTOS/queue.c **** 			else
1219:../src/FreeRTOS/queue.c **** 			{
1220:../src/FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:../src/FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1222:../src/FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:../src/FreeRTOS/queue.c **** 			}
1224:../src/FreeRTOS/queue.c **** 
1225:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
1226:../src/FreeRTOS/queue.c **** 		}
1227:../src/FreeRTOS/queue.c **** 		else
1228:../src/FreeRTOS/queue.c **** 		{
1229:../src/FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1230:../src/FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1231:../src/FreeRTOS/queue.c **** 		}
1232:../src/FreeRTOS/queue.c **** 	}
1233:../src/FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:../src/FreeRTOS/queue.c **** 
1235:../src/FreeRTOS/queue.c **** 	return xReturn;
1236:../src/FreeRTOS/queue.c **** }
1237:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1238:../src/FreeRTOS/queue.c **** 
1239:../src/FreeRTOS/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:../src/FreeRTOS/queue.c **** {
1241:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:../src/FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1243:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:../src/FreeRTOS/queue.c **** 
1245:../src/FreeRTOS/queue.c **** 	/* Check the pointer is not NULL. */
1246:../src/FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1247:../src/FreeRTOS/queue.c **** 
1248:../src/FreeRTOS/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:../src/FreeRTOS/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:../src/FreeRTOS/queue.c **** 
1252:../src/FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:../src/FreeRTOS/queue.c **** 	{
1255:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:../src/FreeRTOS/queue.c **** 	}
1257:../src/FreeRTOS/queue.c **** 	#endif
1258:../src/FreeRTOS/queue.c **** 
1259:../src/FreeRTOS/queue.c **** 
1260:../src/FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1261:../src/FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1262:../src/FreeRTOS/queue.c **** 	of execution time efficiency. */
1263:../src/FreeRTOS/queue.c **** 
1264:../src/FreeRTOS/queue.c **** 	for( ;; )
1265:../src/FreeRTOS/queue.c **** 	{
1266:../src/FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1267:../src/FreeRTOS/queue.c **** 		{
1268:../src/FreeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1269:../src/FreeRTOS/queue.c **** 
1270:../src/FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1271:../src/FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1272:../src/FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1273:../src/FreeRTOS/queue.c **** 			{
1274:../src/FreeRTOS/queue.c **** 				/* Data available, remove one item. */
1275:../src/FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1276:../src/FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1277:../src/FreeRTOS/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1278:../src/FreeRTOS/queue.c **** 
1279:../src/FreeRTOS/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1280:../src/FreeRTOS/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1281:../src/FreeRTOS/queue.c **** 				task. */
1282:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1283:../src/FreeRTOS/queue.c **** 				{
1284:../src/FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1285:../src/FreeRTOS/queue.c **** 					{
1286:../src/FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1287:../src/FreeRTOS/queue.c **** 					}
1288:../src/FreeRTOS/queue.c **** 					else
1289:../src/FreeRTOS/queue.c **** 					{
1290:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1291:../src/FreeRTOS/queue.c **** 					}
1292:../src/FreeRTOS/queue.c **** 				}
1293:../src/FreeRTOS/queue.c **** 				else
1294:../src/FreeRTOS/queue.c **** 				{
1295:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1296:../src/FreeRTOS/queue.c **** 				}
1297:../src/FreeRTOS/queue.c **** 
1298:../src/FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1299:../src/FreeRTOS/queue.c **** 				return pdPASS;
1300:../src/FreeRTOS/queue.c **** 			}
1301:../src/FreeRTOS/queue.c **** 			else
1302:../src/FreeRTOS/queue.c **** 			{
1303:../src/FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1304:../src/FreeRTOS/queue.c **** 				{
1305:../src/FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1306:../src/FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1307:../src/FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1308:../src/FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1309:../src/FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1310:../src/FreeRTOS/queue.c **** 				}
1311:../src/FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1312:../src/FreeRTOS/queue.c **** 				{
1313:../src/FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1314:../src/FreeRTOS/queue.c **** 					configure the timeout structure. */
1315:../src/FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1316:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1317:../src/FreeRTOS/queue.c **** 				}
1318:../src/FreeRTOS/queue.c **** 				else
1319:../src/FreeRTOS/queue.c **** 				{
1320:../src/FreeRTOS/queue.c **** 					/* Entry time was already set. */
1321:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1322:../src/FreeRTOS/queue.c **** 				}
1323:../src/FreeRTOS/queue.c **** 			}
1324:../src/FreeRTOS/queue.c **** 		}
1325:../src/FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1326:../src/FreeRTOS/queue.c **** 
1327:../src/FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1328:../src/FreeRTOS/queue.c **** 		now the critical section has been exited. */
1329:../src/FreeRTOS/queue.c **** 
1330:../src/FreeRTOS/queue.c **** 		vTaskSuspendAll();
1331:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1332:../src/FreeRTOS/queue.c **** 
1333:../src/FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1334:../src/FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1335:../src/FreeRTOS/queue.c **** 		{
1336:../src/FreeRTOS/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1337:../src/FreeRTOS/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1338:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1339:../src/FreeRTOS/queue.c **** 			{
1340:../src/FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1341:../src/FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1342:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1343:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1344:../src/FreeRTOS/queue.c **** 				{
1345:../src/FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1346:../src/FreeRTOS/queue.c **** 				}
1347:../src/FreeRTOS/queue.c **** 				else
1348:../src/FreeRTOS/queue.c **** 				{
1349:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1350:../src/FreeRTOS/queue.c **** 				}
1351:../src/FreeRTOS/queue.c **** 			}
1352:../src/FreeRTOS/queue.c **** 			else
1353:../src/FreeRTOS/queue.c **** 			{
1354:../src/FreeRTOS/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1355:../src/FreeRTOS/queue.c **** 				data. */
1356:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1357:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1358:../src/FreeRTOS/queue.c **** 			}
1359:../src/FreeRTOS/queue.c **** 		}
1360:../src/FreeRTOS/queue.c **** 		else
1361:../src/FreeRTOS/queue.c **** 		{
1362:../src/FreeRTOS/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1363:../src/FreeRTOS/queue.c **** 			back and attempt to read the data. */
1364:../src/FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1365:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1366:../src/FreeRTOS/queue.c **** 
1367:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1368:../src/FreeRTOS/queue.c **** 			{
1369:../src/FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1370:../src/FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1371:../src/FreeRTOS/queue.c **** 			}
1372:../src/FreeRTOS/queue.c **** 			else
1373:../src/FreeRTOS/queue.c **** 			{
1374:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1375:../src/FreeRTOS/queue.c **** 			}
1376:../src/FreeRTOS/queue.c **** 		}
1377:../src/FreeRTOS/queue.c **** 	}
1378:../src/FreeRTOS/queue.c **** }
1379:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1380:../src/FreeRTOS/queue.c **** 
1381:../src/FreeRTOS/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1382:../src/FreeRTOS/queue.c **** {
1383:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1384:../src/FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1385:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1386:../src/FreeRTOS/queue.c **** 
1387:../src/FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
1388:../src/FreeRTOS/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1389:../src/FreeRTOS/queue.c **** #endif
1390:../src/FreeRTOS/queue.c **** 
1391:../src/FreeRTOS/queue.c **** 	/* Check the queue pointer is not NULL. */
1392:../src/FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1393:../src/FreeRTOS/queue.c **** 
1394:../src/FreeRTOS/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1395:../src/FreeRTOS/queue.c **** 	0. */
1396:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1397:../src/FreeRTOS/queue.c **** 
1398:../src/FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1399:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1400:../src/FreeRTOS/queue.c **** 	{
1401:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1402:../src/FreeRTOS/queue.c **** 	}
1403:../src/FreeRTOS/queue.c **** 	#endif
1404:../src/FreeRTOS/queue.c **** 
1405:../src/FreeRTOS/queue.c **** 
1406:../src/FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1407:../src/FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1408:../src/FreeRTOS/queue.c **** 	of execution time efficiency. */
1409:../src/FreeRTOS/queue.c **** 
1410:../src/FreeRTOS/queue.c **** 	for( ;; )
1411:../src/FreeRTOS/queue.c **** 	{
1412:../src/FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1413:../src/FreeRTOS/queue.c **** 		{
1414:../src/FreeRTOS/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1415:../src/FreeRTOS/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1416:../src/FreeRTOS/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1417:../src/FreeRTOS/queue.c **** 
1418:../src/FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1419:../src/FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1420:../src/FreeRTOS/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1421:../src/FreeRTOS/queue.c **** 			{
1422:../src/FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1423:../src/FreeRTOS/queue.c **** 
1424:../src/FreeRTOS/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1425:../src/FreeRTOS/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1426:../src/FreeRTOS/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1427:../src/FreeRTOS/queue.c **** 
1428:../src/FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1429:../src/FreeRTOS/queue.c **** 				{
1430:../src/FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1431:../src/FreeRTOS/queue.c **** 					{
1432:../src/FreeRTOS/queue.c **** 						/* Record the information required to implement
1433:../src/FreeRTOS/queue.c **** 						priority inheritance should it become necessary. */
1434:../src/FreeRTOS/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1435:../src/FreeRTOS/queue.c **** 					}
1436:../src/FreeRTOS/queue.c **** 					else
1437:../src/FreeRTOS/queue.c **** 					{
1438:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1439:../src/FreeRTOS/queue.c **** 					}
1440:../src/FreeRTOS/queue.c **** 				}
1441:../src/FreeRTOS/queue.c **** 				#endif /* configUSE_MUTEXES */
1442:../src/FreeRTOS/queue.c **** 
1443:../src/FreeRTOS/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1444:../src/FreeRTOS/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1445:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1446:../src/FreeRTOS/queue.c **** 				{
1447:../src/FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1448:../src/FreeRTOS/queue.c **** 					{
1449:../src/FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1450:../src/FreeRTOS/queue.c **** 					}
1451:../src/FreeRTOS/queue.c **** 					else
1452:../src/FreeRTOS/queue.c **** 					{
1453:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1454:../src/FreeRTOS/queue.c **** 					}
1455:../src/FreeRTOS/queue.c **** 				}
1456:../src/FreeRTOS/queue.c **** 				else
1457:../src/FreeRTOS/queue.c **** 				{
1458:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1459:../src/FreeRTOS/queue.c **** 				}
1460:../src/FreeRTOS/queue.c **** 
1461:../src/FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1462:../src/FreeRTOS/queue.c **** 				return pdPASS;
1463:../src/FreeRTOS/queue.c **** 			}
1464:../src/FreeRTOS/queue.c **** 			else
1465:../src/FreeRTOS/queue.c **** 			{
1466:../src/FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1467:../src/FreeRTOS/queue.c **** 				{
1468:../src/FreeRTOS/queue.c **** 					/* For inheritance to have occurred there must have been an
1469:../src/FreeRTOS/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1470:../src/FreeRTOS/queue.c **** 					if it were 0 the function would have exited. */
1471:../src/FreeRTOS/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1472:../src/FreeRTOS/queue.c **** 					{
1473:../src/FreeRTOS/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1474:../src/FreeRTOS/queue.c **** 					}
1475:../src/FreeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1476:../src/FreeRTOS/queue.c **** 
1477:../src/FreeRTOS/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1478:../src/FreeRTOS/queue.c **** 					(or the block time has expired) so exit now. */
1479:../src/FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1480:../src/FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1481:../src/FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1482:../src/FreeRTOS/queue.c **** 				}
1483:../src/FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1484:../src/FreeRTOS/queue.c **** 				{
1485:../src/FreeRTOS/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1486:../src/FreeRTOS/queue.c **** 					so configure the timeout structure ready to block. */
1487:../src/FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1488:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1489:../src/FreeRTOS/queue.c **** 				}
1490:../src/FreeRTOS/queue.c **** 				else
1491:../src/FreeRTOS/queue.c **** 				{
1492:../src/FreeRTOS/queue.c **** 					/* Entry time was already set. */
1493:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1494:../src/FreeRTOS/queue.c **** 				}
1495:../src/FreeRTOS/queue.c **** 			}
1496:../src/FreeRTOS/queue.c **** 		}
1497:../src/FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1498:../src/FreeRTOS/queue.c **** 
1499:../src/FreeRTOS/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1500:../src/FreeRTOS/queue.c **** 		now the critical section has been exited. */
1501:../src/FreeRTOS/queue.c **** 
1502:../src/FreeRTOS/queue.c **** 		vTaskSuspendAll();
1503:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1504:../src/FreeRTOS/queue.c **** 
1505:../src/FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1506:../src/FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1507:../src/FreeRTOS/queue.c **** 		{
1508:../src/FreeRTOS/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1509:../src/FreeRTOS/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1510:../src/FreeRTOS/queue.c **** 			become available.  As semaphores are implemented with queues the
1511:../src/FreeRTOS/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1512:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1513:../src/FreeRTOS/queue.c **** 			{
1514:../src/FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1515:../src/FreeRTOS/queue.c **** 
1516:../src/FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1517:../src/FreeRTOS/queue.c **** 				{
1518:../src/FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1519:../src/FreeRTOS/queue.c **** 					{
1520:../src/FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1521:../src/FreeRTOS/queue.c **** 						{
1522:../src/FreeRTOS/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1523:../src/FreeRTOS/queue.c **** 						}
1524:../src/FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1525:../src/FreeRTOS/queue.c **** 					}
1526:../src/FreeRTOS/queue.c **** 					else
1527:../src/FreeRTOS/queue.c **** 					{
1528:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1529:../src/FreeRTOS/queue.c **** 					}
1530:../src/FreeRTOS/queue.c **** 				}
1531:../src/FreeRTOS/queue.c **** 				#endif
1532:../src/FreeRTOS/queue.c **** 
1533:../src/FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1534:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1535:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1536:../src/FreeRTOS/queue.c **** 				{
1537:../src/FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1538:../src/FreeRTOS/queue.c **** 				}
1539:../src/FreeRTOS/queue.c **** 				else
1540:../src/FreeRTOS/queue.c **** 				{
1541:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1542:../src/FreeRTOS/queue.c **** 				}
1543:../src/FreeRTOS/queue.c **** 			}
1544:../src/FreeRTOS/queue.c **** 			else
1545:../src/FreeRTOS/queue.c **** 			{
1546:../src/FreeRTOS/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1547:../src/FreeRTOS/queue.c **** 				attempt to take the semaphore again. */
1548:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1549:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1550:../src/FreeRTOS/queue.c **** 			}
1551:../src/FreeRTOS/queue.c **** 		}
1552:../src/FreeRTOS/queue.c **** 		else
1553:../src/FreeRTOS/queue.c **** 		{
1554:../src/FreeRTOS/queue.c **** 			/* Timed out. */
1555:../src/FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1556:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1557:../src/FreeRTOS/queue.c **** 
1558:../src/FreeRTOS/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1559:../src/FreeRTOS/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1560:../src/FreeRTOS/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1561:../src/FreeRTOS/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1562:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1563:../src/FreeRTOS/queue.c **** 			{
1564:../src/FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1565:../src/FreeRTOS/queue.c **** 				{
1566:../src/FreeRTOS/queue.c **** 					/* xInheritanceOccurred could only have be set if
1567:../src/FreeRTOS/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1568:../src/FreeRTOS/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1569:../src/FreeRTOS/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1570:../src/FreeRTOS/queue.c **** 					{
1571:../src/FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1572:../src/FreeRTOS/queue.c **** 						{
1573:../src/FreeRTOS/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1574:../src/FreeRTOS/queue.c **** 
1575:../src/FreeRTOS/queue.c **** 							/* This task blocking on the mutex caused another
1576:../src/FreeRTOS/queue.c **** 							task to inherit this task's priority.  Now this task
1577:../src/FreeRTOS/queue.c **** 							has timed out the priority should be disinherited
1578:../src/FreeRTOS/queue.c **** 							again, but only as low as the next highest priority
1579:../src/FreeRTOS/queue.c **** 							task that is waiting for the same mutex. */
1580:../src/FreeRTOS/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1581:../src/FreeRTOS/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1582:../src/FreeRTOS/queue.c **** 						}
1583:../src/FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1584:../src/FreeRTOS/queue.c **** 					}
1585:../src/FreeRTOS/queue.c **** 				}
1586:../src/FreeRTOS/queue.c **** 				#endif /* configUSE_MUTEXES */
1587:../src/FreeRTOS/queue.c **** 
1588:../src/FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1589:../src/FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1590:../src/FreeRTOS/queue.c **** 			}
1591:../src/FreeRTOS/queue.c **** 			else
1592:../src/FreeRTOS/queue.c **** 			{
1593:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1594:../src/FreeRTOS/queue.c **** 			}
1595:../src/FreeRTOS/queue.c **** 		}
1596:../src/FreeRTOS/queue.c **** 	}
1597:../src/FreeRTOS/queue.c **** }
1598:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1599:../src/FreeRTOS/queue.c **** 
1600:../src/FreeRTOS/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1601:../src/FreeRTOS/queue.c **** {
1602:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1603:../src/FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1604:../src/FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1605:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1606:../src/FreeRTOS/queue.c **** 
1607:../src/FreeRTOS/queue.c **** 	/* Check the pointer is not NULL. */
1608:../src/FreeRTOS/queue.c **** 	configASSERT( ( pxQueue ) );
1609:../src/FreeRTOS/queue.c **** 
1610:../src/FreeRTOS/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1611:../src/FreeRTOS/queue.c **** 	is zero (so no data is copied into the buffer. */
1612:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1613:../src/FreeRTOS/queue.c **** 
1614:../src/FreeRTOS/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1615:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1616:../src/FreeRTOS/queue.c **** 	{
1617:../src/FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1618:../src/FreeRTOS/queue.c **** 	}
1619:../src/FreeRTOS/queue.c **** 	#endif
1620:../src/FreeRTOS/queue.c **** 
1621:../src/FreeRTOS/queue.c **** 
1622:../src/FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1623:../src/FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1624:../src/FreeRTOS/queue.c **** 	of execution time efficiency. */
1625:../src/FreeRTOS/queue.c **** 
1626:../src/FreeRTOS/queue.c **** 	for( ;; )
1627:../src/FreeRTOS/queue.c **** 	{
1628:../src/FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1629:../src/FreeRTOS/queue.c **** 		{
1630:../src/FreeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1631:../src/FreeRTOS/queue.c **** 
1632:../src/FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1633:../src/FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1634:../src/FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1635:../src/FreeRTOS/queue.c **** 			{
1636:../src/FreeRTOS/queue.c **** 				/* Remember the read position so it can be reset after the data
1637:../src/FreeRTOS/queue.c **** 				is read from the queue as this function is only peeking the
1638:../src/FreeRTOS/queue.c **** 				data, not removing it. */
1639:../src/FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1640:../src/FreeRTOS/queue.c **** 
1641:../src/FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1642:../src/FreeRTOS/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1643:../src/FreeRTOS/queue.c **** 
1644:../src/FreeRTOS/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1645:../src/FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1646:../src/FreeRTOS/queue.c **** 
1647:../src/FreeRTOS/queue.c **** 				/* The data is being left in the queue, so see if there are
1648:../src/FreeRTOS/queue.c **** 				any other tasks waiting for the data. */
1649:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1650:../src/FreeRTOS/queue.c **** 				{
1651:../src/FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1652:../src/FreeRTOS/queue.c **** 					{
1653:../src/FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than this task. */
1654:../src/FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1655:../src/FreeRTOS/queue.c **** 					}
1656:../src/FreeRTOS/queue.c **** 					else
1657:../src/FreeRTOS/queue.c **** 					{
1658:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1659:../src/FreeRTOS/queue.c **** 					}
1660:../src/FreeRTOS/queue.c **** 				}
1661:../src/FreeRTOS/queue.c **** 				else
1662:../src/FreeRTOS/queue.c **** 				{
1663:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1664:../src/FreeRTOS/queue.c **** 				}
1665:../src/FreeRTOS/queue.c **** 
1666:../src/FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1667:../src/FreeRTOS/queue.c **** 				return pdPASS;
1668:../src/FreeRTOS/queue.c **** 			}
1669:../src/FreeRTOS/queue.c **** 			else
1670:../src/FreeRTOS/queue.c **** 			{
1671:../src/FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1672:../src/FreeRTOS/queue.c **** 				{
1673:../src/FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1674:../src/FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1675:../src/FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1676:../src/FreeRTOS/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1677:../src/FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1678:../src/FreeRTOS/queue.c **** 				}
1679:../src/FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1680:../src/FreeRTOS/queue.c **** 				{
1681:../src/FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1682:../src/FreeRTOS/queue.c **** 					configure the timeout structure ready to enter the blocked
1683:../src/FreeRTOS/queue.c **** 					state. */
1684:../src/FreeRTOS/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1685:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1686:../src/FreeRTOS/queue.c **** 				}
1687:../src/FreeRTOS/queue.c **** 				else
1688:../src/FreeRTOS/queue.c **** 				{
1689:../src/FreeRTOS/queue.c **** 					/* Entry time was already set. */
1690:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1691:../src/FreeRTOS/queue.c **** 				}
1692:../src/FreeRTOS/queue.c **** 			}
1693:../src/FreeRTOS/queue.c **** 		}
1694:../src/FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1695:../src/FreeRTOS/queue.c **** 
1696:../src/FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1697:../src/FreeRTOS/queue.c **** 		now the critical section has been exited. */
1698:../src/FreeRTOS/queue.c **** 
1699:../src/FreeRTOS/queue.c **** 		vTaskSuspendAll();
1700:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1701:../src/FreeRTOS/queue.c **** 
1702:../src/FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1703:../src/FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1704:../src/FreeRTOS/queue.c **** 		{
1705:../src/FreeRTOS/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1706:../src/FreeRTOS/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1707:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1708:../src/FreeRTOS/queue.c **** 			{
1709:../src/FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1710:../src/FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1711:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1712:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1713:../src/FreeRTOS/queue.c **** 				{
1714:../src/FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1715:../src/FreeRTOS/queue.c **** 				}
1716:../src/FreeRTOS/queue.c **** 				else
1717:../src/FreeRTOS/queue.c **** 				{
1718:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1719:../src/FreeRTOS/queue.c **** 				}
1720:../src/FreeRTOS/queue.c **** 			}
1721:../src/FreeRTOS/queue.c **** 			else
1722:../src/FreeRTOS/queue.c **** 			{
1723:../src/FreeRTOS/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1724:../src/FreeRTOS/queue.c **** 				state, instead return to try and obtain the data. */
1725:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1726:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1727:../src/FreeRTOS/queue.c **** 			}
1728:../src/FreeRTOS/queue.c **** 		}
1729:../src/FreeRTOS/queue.c **** 		else
1730:../src/FreeRTOS/queue.c **** 		{
1731:../src/FreeRTOS/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1732:../src/FreeRTOS/queue.c **** 			exit, otherwise go back and try to read the data again. */
1733:../src/FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1734:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1735:../src/FreeRTOS/queue.c **** 
1736:../src/FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1737:../src/FreeRTOS/queue.c **** 			{
1738:../src/FreeRTOS/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1739:../src/FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1740:../src/FreeRTOS/queue.c **** 			}
1741:../src/FreeRTOS/queue.c **** 			else
1742:../src/FreeRTOS/queue.c **** 			{
1743:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1744:../src/FreeRTOS/queue.c **** 			}
1745:../src/FreeRTOS/queue.c **** 		}
1746:../src/FreeRTOS/queue.c **** 	}
1747:../src/FreeRTOS/queue.c **** }
1748:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1749:../src/FreeRTOS/queue.c **** 
1750:../src/FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1751:../src/FreeRTOS/queue.c **** {
1752:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
1753:../src/FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1754:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1755:../src/FreeRTOS/queue.c **** 
1756:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1757:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1758:../src/FreeRTOS/queue.c **** 
1759:../src/FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1760:../src/FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1761:../src/FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1762:../src/FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1763:../src/FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1764:../src/FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1765:../src/FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1766:../src/FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1767:../src/FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1768:../src/FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1769:../src/FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1770:../src/FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1771:../src/FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1772:../src/FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1773:../src/FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1774:../src/FreeRTOS/queue.c **** 
1775:../src/FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1776:../src/FreeRTOS/queue.c **** 	{
1777:../src/FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1778:../src/FreeRTOS/queue.c **** 
1779:../src/FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1780:../src/FreeRTOS/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1781:../src/FreeRTOS/queue.c **** 		{
1782:../src/FreeRTOS/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1783:../src/FreeRTOS/queue.c **** 
1784:../src/FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1785:../src/FreeRTOS/queue.c **** 
1786:../src/FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1787:../src/FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1788:../src/FreeRTOS/queue.c **** 
1789:../src/FreeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1790:../src/FreeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1791:../src/FreeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1792:../src/FreeRTOS/queue.c **** 			locked. */
1793:../src/FreeRTOS/queue.c **** 			if( cRxLock == queueUNLOCKED )
1794:../src/FreeRTOS/queue.c **** 			{
1795:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1796:../src/FreeRTOS/queue.c **** 				{
1797:../src/FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1798:../src/FreeRTOS/queue.c **** 					{
1799:../src/FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1800:../src/FreeRTOS/queue.c **** 						force a context switch. */
1801:../src/FreeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1802:../src/FreeRTOS/queue.c **** 						{
1803:../src/FreeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1804:../src/FreeRTOS/queue.c **** 						}
1805:../src/FreeRTOS/queue.c **** 						else
1806:../src/FreeRTOS/queue.c **** 						{
1807:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1808:../src/FreeRTOS/queue.c **** 						}
1809:../src/FreeRTOS/queue.c **** 					}
1810:../src/FreeRTOS/queue.c **** 					else
1811:../src/FreeRTOS/queue.c **** 					{
1812:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1813:../src/FreeRTOS/queue.c **** 					}
1814:../src/FreeRTOS/queue.c **** 				}
1815:../src/FreeRTOS/queue.c **** 				else
1816:../src/FreeRTOS/queue.c **** 				{
1817:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1818:../src/FreeRTOS/queue.c **** 				}
1819:../src/FreeRTOS/queue.c **** 			}
1820:../src/FreeRTOS/queue.c **** 			else
1821:../src/FreeRTOS/queue.c **** 			{
1822:../src/FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1823:../src/FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1824:../src/FreeRTOS/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1825:../src/FreeRTOS/queue.c **** 			}
1826:../src/FreeRTOS/queue.c **** 
1827:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
1828:../src/FreeRTOS/queue.c **** 		}
1829:../src/FreeRTOS/queue.c **** 		else
1830:../src/FreeRTOS/queue.c **** 		{
1831:../src/FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1832:../src/FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1833:../src/FreeRTOS/queue.c **** 		}
1834:../src/FreeRTOS/queue.c **** 	}
1835:../src/FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1836:../src/FreeRTOS/queue.c **** 
1837:../src/FreeRTOS/queue.c **** 	return xReturn;
1838:../src/FreeRTOS/queue.c **** }
1839:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1840:../src/FreeRTOS/queue.c **** 
1841:../src/FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1842:../src/FreeRTOS/queue.c **** {
1843:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
1844:../src/FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1845:../src/FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1846:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1847:../src/FreeRTOS/queue.c **** 
1848:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1849:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1850:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1851:../src/FreeRTOS/queue.c **** 
1852:../src/FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1853:../src/FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1854:../src/FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1855:../src/FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1856:../src/FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1857:../src/FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1858:../src/FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1859:../src/FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1860:../src/FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1861:../src/FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1862:../src/FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1863:../src/FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1864:../src/FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1865:../src/FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1866:../src/FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1867:../src/FreeRTOS/queue.c **** 
1868:../src/FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1869:../src/FreeRTOS/queue.c **** 	{
1870:../src/FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1871:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1872:../src/FreeRTOS/queue.c **** 		{
1873:../src/FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1874:../src/FreeRTOS/queue.c **** 
1875:../src/FreeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1876:../src/FreeRTOS/queue.c **** 			actually being removed from the queue. */
1877:../src/FreeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1878:../src/FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1879:../src/FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1880:../src/FreeRTOS/queue.c **** 
1881:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
1882:../src/FreeRTOS/queue.c **** 		}
1883:../src/FreeRTOS/queue.c **** 		else
1884:../src/FreeRTOS/queue.c **** 		{
1885:../src/FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1886:../src/FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1887:../src/FreeRTOS/queue.c **** 		}
1888:../src/FreeRTOS/queue.c **** 	}
1889:../src/FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1890:../src/FreeRTOS/queue.c **** 
1891:../src/FreeRTOS/queue.c **** 	return xReturn;
1892:../src/FreeRTOS/queue.c **** }
1893:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1894:../src/FreeRTOS/queue.c **** 
1895:../src/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1896:../src/FreeRTOS/queue.c **** {
1897:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
1898:../src/FreeRTOS/queue.c **** 
1899:../src/FreeRTOS/queue.c **** 	configASSERT( xQueue );
1900:../src/FreeRTOS/queue.c **** 
1901:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1902:../src/FreeRTOS/queue.c **** 	{
1903:../src/FreeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1904:../src/FreeRTOS/queue.c **** 	}
1905:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1906:../src/FreeRTOS/queue.c **** 
1907:../src/FreeRTOS/queue.c **** 	return uxReturn;
1908:../src/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1909:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1910:../src/FreeRTOS/queue.c **** 
1911:../src/FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1912:../src/FreeRTOS/queue.c **** {
1913:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
1914:../src/FreeRTOS/queue.c **** Queue_t *pxQueue;
1915:../src/FreeRTOS/queue.c **** 
1916:../src/FreeRTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1917:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1918:../src/FreeRTOS/queue.c **** 
1919:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1920:../src/FreeRTOS/queue.c **** 	{
1921:../src/FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1922:../src/FreeRTOS/queue.c **** 	}
1923:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1924:../src/FreeRTOS/queue.c **** 
1925:../src/FreeRTOS/queue.c **** 	return uxReturn;
1926:../src/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1927:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1928:../src/FreeRTOS/queue.c **** 
1929:../src/FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1930:../src/FreeRTOS/queue.c **** {
1931:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
1932:../src/FreeRTOS/queue.c **** 
1933:../src/FreeRTOS/queue.c **** 	configASSERT( xQueue );
1934:../src/FreeRTOS/queue.c **** 
1935:../src/FreeRTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1936:../src/FreeRTOS/queue.c **** 
1937:../src/FreeRTOS/queue.c **** 	return uxReturn;
1938:../src/FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1939:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1940:../src/FreeRTOS/queue.c **** 
1941:../src/FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1942:../src/FreeRTOS/queue.c **** {
1943:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1944:../src/FreeRTOS/queue.c **** 
1945:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1946:../src/FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1947:../src/FreeRTOS/queue.c **** 
1948:../src/FreeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1949:../src/FreeRTOS/queue.c **** 	{
1950:../src/FreeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1951:../src/FreeRTOS/queue.c **** 	}
1952:../src/FreeRTOS/queue.c **** 	#endif
1953:../src/FreeRTOS/queue.c **** 
1954:../src/FreeRTOS/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1955:../src/FreeRTOS/queue.c **** 	{
1956:../src/FreeRTOS/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1957:../src/FreeRTOS/queue.c **** 		again. */
1958:../src/FreeRTOS/queue.c **** 		vPortFree( pxQueue );
1959:../src/FreeRTOS/queue.c **** 	}
1960:../src/FreeRTOS/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1961:../src/FreeRTOS/queue.c **** 	{
1962:../src/FreeRTOS/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1963:../src/FreeRTOS/queue.c **** 		check before attempting to free the memory. */
1964:../src/FreeRTOS/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1965:../src/FreeRTOS/queue.c **** 		{
1966:../src/FreeRTOS/queue.c **** 			vPortFree( pxQueue );
1967:../src/FreeRTOS/queue.c **** 		}
1968:../src/FreeRTOS/queue.c **** 		else
1969:../src/FreeRTOS/queue.c **** 		{
1970:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1971:../src/FreeRTOS/queue.c **** 		}
1972:../src/FreeRTOS/queue.c **** 	}
1973:../src/FreeRTOS/queue.c **** 	#else
1974:../src/FreeRTOS/queue.c **** 	{
1975:../src/FreeRTOS/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1976:../src/FreeRTOS/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1977:../src/FreeRTOS/queue.c **** 		( void ) pxQueue;
1978:../src/FreeRTOS/queue.c **** 	}
1979:../src/FreeRTOS/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1980:../src/FreeRTOS/queue.c **** }
1981:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1982:../src/FreeRTOS/queue.c **** 
1983:../src/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1984:../src/FreeRTOS/queue.c **** 
1985:../src/FreeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1986:../src/FreeRTOS/queue.c **** 	{
1987:../src/FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1988:../src/FreeRTOS/queue.c **** 	}
1989:../src/FreeRTOS/queue.c **** 
1990:../src/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1991:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1992:../src/FreeRTOS/queue.c **** 
1993:../src/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1994:../src/FreeRTOS/queue.c **** 
1995:../src/FreeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1996:../src/FreeRTOS/queue.c **** 	{
1997:../src/FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1998:../src/FreeRTOS/queue.c **** 	}
1999:../src/FreeRTOS/queue.c **** 
2000:../src/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2001:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2002:../src/FreeRTOS/queue.c **** 
2003:../src/FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2004:../src/FreeRTOS/queue.c **** 
2005:../src/FreeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2006:../src/FreeRTOS/queue.c **** 	{
2007:../src/FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2008:../src/FreeRTOS/queue.c **** 	}
2009:../src/FreeRTOS/queue.c **** 
2010:../src/FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2011:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2012:../src/FreeRTOS/queue.c **** 
2013:../src/FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
2014:../src/FreeRTOS/queue.c **** 
2015:../src/FreeRTOS/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2016:../src/FreeRTOS/queue.c **** 	{
  25              		.loc 1 2016 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2017:../src/FreeRTOS/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2018:../src/FreeRTOS/queue.c **** 
2019:../src/FreeRTOS/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2020:../src/FreeRTOS/queue.c **** 		priority, but the waiting task times out, then the holder should
2021:../src/FreeRTOS/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2022:../src/FreeRTOS/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2023:../src/FreeRTOS/queue.c **** 		return the priority of the highest priority task that is waiting for the
2024:../src/FreeRTOS/queue.c **** 		mutex. */
2025:../src/FreeRTOS/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  31              		.loc 1 2025 0
  32 0000 243090E5 		ldr	r3, [r0, #36]
  33 0004 000053E3 		cmp	r3, #0
  34 0008 0300000A 		beq	.L3
2026:../src/FreeRTOS/queue.c **** 		{
2027:../src/FreeRTOS/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
  35              		.loc 1 2027 0
  36 000c 303090E5 		ldr	r3, [r0, #48]
  37 0010 000093E5 		ldr	r0, [r3]
  38              	.LVL1:
  39 0014 140060E2 		rsb	r0, r0, #20
  40              	.LVL2:
  41 0018 1EFF2FE1 		bx	lr
  42              	.LVL3:
  43              	.L3:
2028:../src/FreeRTOS/queue.c **** 		}
2029:../src/FreeRTOS/queue.c **** 		else
2030:../src/FreeRTOS/queue.c **** 		{
2031:../src/FreeRTOS/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  44              		.loc 1 2031 0
  45 001c 0000A0E3 		mov	r0, #0
  46              	.LVL4:
2032:../src/FreeRTOS/queue.c **** 		}
2033:../src/FreeRTOS/queue.c **** 
2034:../src/FreeRTOS/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2035:../src/FreeRTOS/queue.c **** 	}
  47              		.loc 1 2035 0
  48 0020 1EFF2FE1 		bx	lr
  49              		.cfi_endproc
  50              	.LFE25:
  52              		.section	.text.prvIsQueueFull,"ax",%progbits
  53              		.align	2
  54              		.syntax unified
  55              		.arm
  56              		.fpu neon
  58              	prvIsQueueFull:
  59              	.LFB31:
2036:../src/FreeRTOS/queue.c **** 
2037:../src/FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
2038:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2039:../src/FreeRTOS/queue.c **** 
2040:../src/FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2041:../src/FreeRTOS/queue.c **** {
2042:../src/FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
2043:../src/FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
2044:../src/FreeRTOS/queue.c **** 
2045:../src/FreeRTOS/queue.c **** 	/* This function is called from a critical section. */
2046:../src/FreeRTOS/queue.c **** 
2047:../src/FreeRTOS/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2048:../src/FreeRTOS/queue.c **** 
2049:../src/FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2050:../src/FreeRTOS/queue.c **** 	{
2051:../src/FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2052:../src/FreeRTOS/queue.c **** 		{
2053:../src/FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2054:../src/FreeRTOS/queue.c **** 			{
2055:../src/FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
2056:../src/FreeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2057:../src/FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2058:../src/FreeRTOS/queue.c **** 			}
2059:../src/FreeRTOS/queue.c **** 			else
2060:../src/FreeRTOS/queue.c **** 			{
2061:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2062:../src/FreeRTOS/queue.c **** 			}
2063:../src/FreeRTOS/queue.c **** 		}
2064:../src/FreeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
2065:../src/FreeRTOS/queue.c **** 	}
2066:../src/FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2067:../src/FreeRTOS/queue.c **** 	{
2068:../src/FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2069:../src/FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2070:../src/FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2071:../src/FreeRTOS/queue.c **** 		{
2072:../src/FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2073:../src/FreeRTOS/queue.c **** 		}
2074:../src/FreeRTOS/queue.c **** 		else
2075:../src/FreeRTOS/queue.c **** 		{
2076:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2077:../src/FreeRTOS/queue.c **** 		}
2078:../src/FreeRTOS/queue.c **** 	}
2079:../src/FreeRTOS/queue.c **** 	else
2080:../src/FreeRTOS/queue.c **** 	{
2081:../src/FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2082:../src/FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2083:../src/FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2084:../src/FreeRTOS/queue.c **** 		{
2085:../src/FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2086:../src/FreeRTOS/queue.c **** 		}
2087:../src/FreeRTOS/queue.c **** 		else
2088:../src/FreeRTOS/queue.c **** 		{
2089:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2090:../src/FreeRTOS/queue.c **** 		}
2091:../src/FreeRTOS/queue.c **** 
2092:../src/FreeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
2093:../src/FreeRTOS/queue.c **** 		{
2094:../src/FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2095:../src/FreeRTOS/queue.c **** 			{
2096:../src/FreeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
2097:../src/FreeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
2098:../src/FreeRTOS/queue.c **** 				one is added again below the number of recorded items remains
2099:../src/FreeRTOS/queue.c **** 				correct. */
2100:../src/FreeRTOS/queue.c **** 				--uxMessagesWaiting;
2101:../src/FreeRTOS/queue.c **** 			}
2102:../src/FreeRTOS/queue.c **** 			else
2103:../src/FreeRTOS/queue.c **** 			{
2104:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2105:../src/FreeRTOS/queue.c **** 			}
2106:../src/FreeRTOS/queue.c **** 		}
2107:../src/FreeRTOS/queue.c **** 		else
2108:../src/FreeRTOS/queue.c **** 		{
2109:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2110:../src/FreeRTOS/queue.c **** 		}
2111:../src/FreeRTOS/queue.c **** 	}
2112:../src/FreeRTOS/queue.c **** 
2113:../src/FreeRTOS/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2114:../src/FreeRTOS/queue.c **** 
2115:../src/FreeRTOS/queue.c **** 	return xReturn;
2116:../src/FreeRTOS/queue.c **** }
2117:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2118:../src/FreeRTOS/queue.c **** 
2119:../src/FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2120:../src/FreeRTOS/queue.c **** {
2121:../src/FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2122:../src/FreeRTOS/queue.c **** 	{
2123:../src/FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2124:../src/FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2125:../src/FreeRTOS/queue.c **** 		{
2126:../src/FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2127:../src/FreeRTOS/queue.c **** 		}
2128:../src/FreeRTOS/queue.c **** 		else
2129:../src/FreeRTOS/queue.c **** 		{
2130:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2131:../src/FreeRTOS/queue.c **** 		}
2132:../src/FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2133:../src/FreeRTOS/queue.c **** 	}
2134:../src/FreeRTOS/queue.c **** }
2135:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2136:../src/FreeRTOS/queue.c **** 
2137:../src/FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2138:../src/FreeRTOS/queue.c **** {
2139:../src/FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2140:../src/FreeRTOS/queue.c **** 
2141:../src/FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2142:../src/FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2143:../src/FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2144:../src/FreeRTOS/queue.c **** 	updated. */
2145:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2146:../src/FreeRTOS/queue.c **** 	{
2147:../src/FreeRTOS/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2148:../src/FreeRTOS/queue.c **** 
2149:../src/FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
2150:../src/FreeRTOS/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2151:../src/FreeRTOS/queue.c **** 		{
2152:../src/FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2153:../src/FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
2154:../src/FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2155:../src/FreeRTOS/queue.c **** 			{
2156:../src/FreeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2157:../src/FreeRTOS/queue.c **** 				{
2158:../src/FreeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2159:../src/FreeRTOS/queue.c **** 					{
2160:../src/FreeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
2161:../src/FreeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
2162:../src/FreeRTOS/queue.c **** 						A context switch is required. */
2163:../src/FreeRTOS/queue.c **** 						vTaskMissedYield();
2164:../src/FreeRTOS/queue.c **** 					}
2165:../src/FreeRTOS/queue.c **** 					else
2166:../src/FreeRTOS/queue.c **** 					{
2167:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2168:../src/FreeRTOS/queue.c **** 					}
2169:../src/FreeRTOS/queue.c **** 				}
2170:../src/FreeRTOS/queue.c **** 				else
2171:../src/FreeRTOS/queue.c **** 				{
2172:../src/FreeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get
2173:../src/FreeRTOS/queue.c **** 					added to the pending ready list as the scheduler is still
2174:../src/FreeRTOS/queue.c **** 					suspended. */
2175:../src/FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../src/FreeRTOS/queue.c **** 					{
2177:../src/FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../src/FreeRTOS/queue.c **** 						{
2179:../src/FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
2180:../src/FreeRTOS/queue.c **** 							context	switch is required. */
2181:../src/FreeRTOS/queue.c **** 							vTaskMissedYield();
2182:../src/FreeRTOS/queue.c **** 						}
2183:../src/FreeRTOS/queue.c **** 						else
2184:../src/FreeRTOS/queue.c **** 						{
2185:../src/FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2186:../src/FreeRTOS/queue.c **** 						}
2187:../src/FreeRTOS/queue.c **** 					}
2188:../src/FreeRTOS/queue.c **** 					else
2189:../src/FreeRTOS/queue.c **** 					{
2190:../src/FreeRTOS/queue.c **** 						break;
2191:../src/FreeRTOS/queue.c **** 					}
2192:../src/FreeRTOS/queue.c **** 				}
2193:../src/FreeRTOS/queue.c **** 			}
2194:../src/FreeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2195:../src/FreeRTOS/queue.c **** 			{
2196:../src/FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
2197:../src/FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2198:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2199:../src/FreeRTOS/queue.c **** 				{
2200:../src/FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2201:../src/FreeRTOS/queue.c **** 					{
2202:../src/FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that
2203:../src/FreeRTOS/queue.c **** 						a context switch is required. */
2204:../src/FreeRTOS/queue.c **** 						vTaskMissedYield();
2205:../src/FreeRTOS/queue.c **** 					}
2206:../src/FreeRTOS/queue.c **** 					else
2207:../src/FreeRTOS/queue.c **** 					{
2208:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2209:../src/FreeRTOS/queue.c **** 					}
2210:../src/FreeRTOS/queue.c **** 				}
2211:../src/FreeRTOS/queue.c **** 				else
2212:../src/FreeRTOS/queue.c **** 				{
2213:../src/FreeRTOS/queue.c **** 					break;
2214:../src/FreeRTOS/queue.c **** 				}
2215:../src/FreeRTOS/queue.c **** 			}
2216:../src/FreeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2217:../src/FreeRTOS/queue.c **** 
2218:../src/FreeRTOS/queue.c **** 			--cTxLock;
2219:../src/FreeRTOS/queue.c **** 		}
2220:../src/FreeRTOS/queue.c **** 
2221:../src/FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2222:../src/FreeRTOS/queue.c **** 	}
2223:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2224:../src/FreeRTOS/queue.c **** 
2225:../src/FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
2226:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2227:../src/FreeRTOS/queue.c **** 	{
2228:../src/FreeRTOS/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2229:../src/FreeRTOS/queue.c **** 
2230:../src/FreeRTOS/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2231:../src/FreeRTOS/queue.c **** 		{
2232:../src/FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2233:../src/FreeRTOS/queue.c **** 			{
2234:../src/FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2235:../src/FreeRTOS/queue.c **** 				{
2236:../src/FreeRTOS/queue.c **** 					vTaskMissedYield();
2237:../src/FreeRTOS/queue.c **** 				}
2238:../src/FreeRTOS/queue.c **** 				else
2239:../src/FreeRTOS/queue.c **** 				{
2240:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2241:../src/FreeRTOS/queue.c **** 				}
2242:../src/FreeRTOS/queue.c **** 
2243:../src/FreeRTOS/queue.c **** 				--cRxLock;
2244:../src/FreeRTOS/queue.c **** 			}
2245:../src/FreeRTOS/queue.c **** 			else
2246:../src/FreeRTOS/queue.c **** 			{
2247:../src/FreeRTOS/queue.c **** 				break;
2248:../src/FreeRTOS/queue.c **** 			}
2249:../src/FreeRTOS/queue.c **** 		}
2250:../src/FreeRTOS/queue.c **** 
2251:../src/FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2252:../src/FreeRTOS/queue.c **** 	}
2253:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2254:../src/FreeRTOS/queue.c **** }
2255:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2256:../src/FreeRTOS/queue.c **** 
2257:../src/FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2258:../src/FreeRTOS/queue.c **** {
2259:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
2260:../src/FreeRTOS/queue.c **** 
2261:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
2262:../src/FreeRTOS/queue.c **** 	{
2263:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2264:../src/FreeRTOS/queue.c **** 		{
2265:../src/FreeRTOS/queue.c **** 			xReturn = pdTRUE;
2266:../src/FreeRTOS/queue.c **** 		}
2267:../src/FreeRTOS/queue.c **** 		else
2268:../src/FreeRTOS/queue.c **** 		{
2269:../src/FreeRTOS/queue.c **** 			xReturn = pdFALSE;
2270:../src/FreeRTOS/queue.c **** 		}
2271:../src/FreeRTOS/queue.c **** 	}
2272:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
2273:../src/FreeRTOS/queue.c **** 
2274:../src/FreeRTOS/queue.c **** 	return xReturn;
2275:../src/FreeRTOS/queue.c **** }
2276:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2277:../src/FreeRTOS/queue.c **** 
2278:../src/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2279:../src/FreeRTOS/queue.c **** {
2280:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
2281:../src/FreeRTOS/queue.c **** 
2282:../src/FreeRTOS/queue.c **** 	configASSERT( xQueue );
2283:../src/FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2284:../src/FreeRTOS/queue.c **** 	{
2285:../src/FreeRTOS/queue.c **** 		xReturn = pdTRUE;
2286:../src/FreeRTOS/queue.c **** 	}
2287:../src/FreeRTOS/queue.c **** 	else
2288:../src/FreeRTOS/queue.c **** 	{
2289:../src/FreeRTOS/queue.c **** 		xReturn = pdFALSE;
2290:../src/FreeRTOS/queue.c **** 	}
2291:../src/FreeRTOS/queue.c **** 
2292:../src/FreeRTOS/queue.c **** 	return xReturn;
2293:../src/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2294:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2295:../src/FreeRTOS/queue.c **** 
2296:../src/FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2297:../src/FreeRTOS/queue.c **** {
  60              		.loc 1 2297 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10402DE9 		push	{r4, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0004 0040A0E1 		mov	r4, r0
2298:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
2299:../src/FreeRTOS/queue.c **** 
2300:../src/FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
  70              		.loc 1 2300 0
  71 0008 FEFFFFEB 		bl	vPortEnterCritical
  72              	.LVL6:
2301:../src/FreeRTOS/queue.c **** 	{
2302:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  73              		.loc 1 2302 0
  74 000c 382094E5 		ldr	r2, [r4, #56]
  75 0010 3C3094E5 		ldr	r3, [r4, #60]
  76 0014 030052E1 		cmp	r2, r3
  77 0018 0300000A 		beq	.L8
2303:../src/FreeRTOS/queue.c **** 		{
2304:../src/FreeRTOS/queue.c **** 			xReturn = pdTRUE;
2305:../src/FreeRTOS/queue.c **** 		}
2306:../src/FreeRTOS/queue.c **** 		else
2307:../src/FreeRTOS/queue.c **** 		{
2308:../src/FreeRTOS/queue.c **** 			xReturn = pdFALSE;
  78              		.loc 1 2308 0
  79 001c 0040A0E3 		mov	r4, #0
  80              	.LVL7:
  81              	.L5:
2309:../src/FreeRTOS/queue.c **** 		}
2310:../src/FreeRTOS/queue.c **** 	}
2311:../src/FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
  82              		.loc 1 2311 0
  83 0020 FEFFFFEB 		bl	vPortExitCritical
  84              	.LVL8:
2312:../src/FreeRTOS/queue.c **** 
2313:../src/FreeRTOS/queue.c **** 	return xReturn;
2314:../src/FreeRTOS/queue.c **** }
  85              		.loc 1 2314 0
  86 0024 0400A0E1 		mov	r0, r4
  87 0028 1080BDE8 		pop	{r4, pc}
  88              	.LVL9:
  89              	.L8:
2304:../src/FreeRTOS/queue.c **** 		}
  90              		.loc 1 2304 0
  91 002c 0140A0E3 		mov	r4, #1
  92              	.LVL10:
  93 0030 FAFFFFEA 		b	.L5
  94              		.cfi_endproc
  95              	.LFE31:
  97              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  98              		.align	2
  99              		.syntax unified
 100              		.arm
 101              		.fpu neon
 103              	prvIsQueueEmpty:
 104              	.LFB29:
2258:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 105              		.loc 1 2258 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL11:
 110 0000 10402DE9 		push	{r4, lr}
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 4, -8
 113              		.cfi_offset 14, -4
 114 0004 0040A0E1 		mov	r4, r0
2261:../src/FreeRTOS/queue.c **** 	{
 115              		.loc 1 2261 0
 116 0008 FEFFFFEB 		bl	vPortEnterCritical
 117              	.LVL12:
2263:../src/FreeRTOS/queue.c **** 		{
 118              		.loc 1 2263 0
 119 000c 383094E5 		ldr	r3, [r4, #56]
 120 0010 000053E3 		cmp	r3, #0
 121 0014 0300000A 		beq	.L13
2269:../src/FreeRTOS/queue.c **** 		}
 122              		.loc 1 2269 0
 123 0018 0040A0E3 		mov	r4, #0
 124              	.LVL13:
 125              	.L10:
2272:../src/FreeRTOS/queue.c **** 
 126              		.loc 1 2272 0
 127 001c FEFFFFEB 		bl	vPortExitCritical
 128              	.LVL14:
2275:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 129              		.loc 1 2275 0
 130 0020 0400A0E1 		mov	r0, r4
 131 0024 1080BDE8 		pop	{r4, pc}
 132              	.LVL15:
 133              	.L13:
2265:../src/FreeRTOS/queue.c **** 		}
 134              		.loc 1 2265 0
 135 0028 0140A0E3 		mov	r4, #1
 136              	.LVL16:
 137 002c FAFFFFEA 		b	.L10
 138              		.cfi_endproc
 139              	.LFE29:
 141              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 142              		.align	2
 143              		.syntax unified
 144              		.arm
 145              		.fpu neon
 147              	prvCopyDataToQueue:
 148              	.LFB26:
2041:../src/FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 149              		.loc 1 2041 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              	.LVL17:
 154 0000 70402DE9 		push	{r4, r5, r6, lr}
 155              		.cfi_def_cfa_offset 16
 156              		.cfi_offset 4, -16
 157              		.cfi_offset 5, -12
 158              		.cfi_offset 6, -8
 159              		.cfi_offset 14, -4
 160 0004 0040A0E1 		mov	r4, r0
 161 0008 0260A0E1 		mov	r6, r2
 162              	.LVL18:
2047:../src/FreeRTOS/queue.c **** 
 163              		.loc 1 2047 0
 164 000c 385090E5 		ldr	r5, [r0, #56]
 165              	.LVL19:
2049:../src/FreeRTOS/queue.c **** 	{
 166              		.loc 1 2049 0
 167 0010 402090E5 		ldr	r2, [r0, #64]
 168              	.LVL20:
 169 0014 000052E3 		cmp	r2, #0
 170 0018 0B00001A 		bne	.L15
2053:../src/FreeRTOS/queue.c **** 			{
 171              		.loc 1 2053 0
 172 001c 003090E5 		ldr	r3, [r0]
 173 0020 000053E3 		cmp	r3, #0
 174 0024 0300000A 		beq	.L24
2042:../src/FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 175              		.loc 1 2042 0
 176 0028 0000A0E3 		mov	r0, #0
 177              	.LVL21:
 178              	.L16:
2113:../src/FreeRTOS/queue.c **** 
 179              		.loc 1 2113 0
 180 002c 015085E2 		add	r5, r5, #1
 181              	.LVL22:
 182 0030 385084E5 		str	r5, [r4, #56]
2116:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 183              		.loc 1 2116 0
 184 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 185              	.LVL23:
 186              	.L24:
2056:../src/FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 187              		.loc 1 2056 0
 188 0038 040090E5 		ldr	r0, [r0, #4]
 189              	.LVL24:
 190 003c FEFFFFEB 		bl	xTaskPriorityDisinherit
 191              	.LVL25:
2057:../src/FreeRTOS/queue.c **** 			}
 192              		.loc 1 2057 0
 193 0040 0030A0E3 		mov	r3, #0
 194 0044 043084E5 		str	r3, [r4, #4]
 195 0048 F7FFFFEA 		b	.L16
 196              	.LVL26:
 197              	.L15:
2066:../src/FreeRTOS/queue.c **** 	{
 198              		.loc 1 2066 0
 199 004c 000056E3 		cmp	r6, #0
 200 0050 0C00001A 		bne	.L17
2068:../src/FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 201              		.loc 1 2068 0
 202 0054 080090E5 		ldr	r0, [r0, #8]
 203              	.LVL27:
 204 0058 FEFFFFEB 		bl	memcpy
 205              	.LVL28:
2069:../src/FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 206              		.loc 1 2069 0
 207 005c 402094E5 		ldr	r2, [r4, #64]
 208 0060 083094E5 		ldr	r3, [r4, #8]
 209 0064 023083E0 		add	r3, r3, r2
 210 0068 083084E5 		str	r3, [r4, #8]
2070:../src/FreeRTOS/queue.c **** 		{
 211              		.loc 1 2070 0
 212 006c 042094E5 		ldr	r2, [r4, #4]
 213 0070 020053E1 		cmp	r3, r2
 214 0074 1700003A 		bcc	.L20
2072:../src/FreeRTOS/queue.c **** 		}
 215              		.loc 1 2072 0
 216 0078 003094E5 		ldr	r3, [r4]
 217 007c 083084E5 		str	r3, [r4, #8]
2042:../src/FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 218              		.loc 1 2042 0
 219 0080 0000A0E3 		mov	r0, #0
 220 0084 E8FFFFEA 		b	.L16
 221              	.LVL29:
 222              	.L17:
2081:../src/FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 223              		.loc 1 2081 0
 224 0088 0C0090E5 		ldr	r0, [r0, #12]
 225              	.LVL30:
 226 008c FEFFFFEB 		bl	memcpy
 227              	.LVL31:
2082:../src/FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 228              		.loc 1 2082 0
 229 0090 402094E5 		ldr	r2, [r4, #64]
 230 0094 002062E2 		rsb	r2, r2, #0
 231 0098 0C3094E5 		ldr	r3, [r4, #12]
 232 009c 023083E0 		add	r3, r3, r2
 233 00a0 0C3084E5 		str	r3, [r4, #12]
2083:../src/FreeRTOS/queue.c **** 		{
 234              		.loc 1 2083 0
 235 00a4 001094E5 		ldr	r1, [r4]
 236 00a8 010053E1 		cmp	r3, r1
2085:../src/FreeRTOS/queue.c **** 		}
 237              		.loc 1 2085 0
 238 00ac 04309435 		ldrcc	r3, [r4, #4]
 239 00b0 02208330 		addcc	r2, r3, r2
 240 00b4 0C208435 		strcc	r2, [r4, #12]
 241              	.L18:
2092:../src/FreeRTOS/queue.c **** 		{
 242              		.loc 1 2092 0
 243 00b8 020056E3 		cmp	r6, #2
2042:../src/FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 244              		.loc 1 2042 0
 245 00bc 0000A013 		movne	r0, #0
 246 00c0 D9FFFF1A 		bne	.L16
 247              	.L25:
2094:../src/FreeRTOS/queue.c **** 			{
 248              		.loc 1 2094 0
 249 00c4 000055E3 		cmp	r5, #0
 250 00c8 0400000A 		beq	.L22
2100:../src/FreeRTOS/queue.c **** 			}
 251              		.loc 1 2100 0
 252 00cc 015045E2 		sub	r5, r5, #1
 253              	.LVL32:
2042:../src/FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 254              		.loc 1 2042 0
 255 00d0 0000A0E3 		mov	r0, #0
 256 00d4 D4FFFFEA 		b	.L16
 257              	.L20:
 258 00d8 0000A0E3 		mov	r0, #0
 259 00dc D2FFFFEA 		b	.L16
 260              	.L22:
 261 00e0 0000A0E3 		mov	r0, #0
 262 00e4 D0FFFFEA 		b	.L16
 263              		.cfi_endproc
 264              	.LFE26:
 266              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 267              		.align	2
 268              		.syntax unified
 269              		.arm
 270              		.fpu neon
 272              	prvCopyDataFromQueue:
 273              	.LFB27:
2120:../src/FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 274              		.loc 1 2120 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL33:
2121:../src/FreeRTOS/queue.c **** 	{
 279              		.loc 1 2121 0
 280 0000 402090E5 		ldr	r2, [r0, #64]
 281 0004 000052E3 		cmp	r2, #0
 282 0008 1EFF2F01 		bxeq	lr
2120:../src/FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 283              		.loc 1 2120 0
 284 000c 10402DE9 		push	{r4, lr}
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 4, -8
 287              		.cfi_offset 14, -4
2123:../src/FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 288              		.loc 1 2123 0
 289 0010 0C3090E5 		ldr	r3, [r0, #12]
 290 0014 023083E0 		add	r3, r3, r2
 291 0018 0C3080E5 		str	r3, [r0, #12]
2124:../src/FreeRTOS/queue.c **** 		{
 292              		.loc 1 2124 0
 293 001c 04C090E5 		ldr	ip, [r0, #4]
 294 0020 0C0053E1 		cmp	r3, ip
2126:../src/FreeRTOS/queue.c **** 		}
 295              		.loc 1 2126 0
 296 0024 00309025 		ldrcs	r3, [r0]
 297 0028 0C308025 		strcs	r3, [r0, #12]
 298              	.L28:
 299 002c 01C0A0E1 		mov	ip, r1
2132:../src/FreeRTOS/queue.c **** 	}
 300              		.loc 1 2132 0
 301 0030 0C1090E5 		ldr	r1, [r0, #12]
 302              	.LVL34:
 303 0034 0C00A0E1 		mov	r0, ip
 304              	.LVL35:
 305 0038 FEFFFFEB 		bl	memcpy
 306              	.LVL36:
 307 003c 1080BDE8 		pop	{r4, pc}
 308              		.cfi_endproc
 309              	.LFE27:
 311              		.section	.text.prvUnlockQueue,"ax",%progbits
 312              		.align	2
 313              		.syntax unified
 314              		.arm
 315              		.fpu neon
 317              	prvUnlockQueue:
 318              	.LFB28:
2138:../src/FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 319              		.loc 1 2138 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323              	.LVL37:
 324 0000 70402DE9 		push	{r4, r5, r6, lr}
 325              		.cfi_def_cfa_offset 16
 326              		.cfi_offset 4, -16
 327              		.cfi_offset 5, -12
 328              		.cfi_offset 6, -8
 329              		.cfi_offset 14, -4
 330 0004 0050A0E1 		mov	r5, r0
2145:../src/FreeRTOS/queue.c **** 	{
 331              		.loc 1 2145 0
 332 0008 FEFFFFEB 		bl	vPortEnterCritical
 333              	.LVL38:
 334              	.LBB2:
2147:../src/FreeRTOS/queue.c **** 
 335              		.loc 1 2147 0
 336 000c 4540D5E5 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 337 0010 7440AFE6 		sxtb	r4, r4
 338              	.LVL39:
2150:../src/FreeRTOS/queue.c **** 		{
 339              		.loc 1 2150 0
 340 0014 010000EA 		b	.L34
 341              	.L36:
2218:../src/FreeRTOS/queue.c **** 		}
 342              		.loc 1 2218 0
 343 0018 014044E2 		sub	r4, r4, #1
 344              	.LVL40:
 345 001c 7440AFE6 		sxtb	r4, r4
 346              	.LVL41:
 347              	.L34:
2150:../src/FreeRTOS/queue.c **** 		{
 348              		.loc 1 2150 0
 349 0020 000054E3 		cmp	r4, #0
 350 0024 080000DA 		ble	.L35
2198:../src/FreeRTOS/queue.c **** 				{
 351              		.loc 1 2198 0
 352 0028 243095E5 		ldr	r3, [r5, #36]
 353 002c 000053E3 		cmp	r3, #0
 354 0030 0500000A 		beq	.L35
2200:../src/FreeRTOS/queue.c **** 					{
 355              		.loc 1 2200 0
 356 0034 240085E2 		add	r0, r5, #36
 357 0038 FEFFFFEB 		bl	xTaskRemoveFromEventList
 358              	.LVL42:
 359 003c 000050E3 		cmp	r0, #0
 360 0040 F4FFFF0A 		beq	.L36
2204:../src/FreeRTOS/queue.c **** 					}
 361              		.loc 1 2204 0
 362 0044 FEFFFFEB 		bl	vTaskMissedYield
 363              	.LVL43:
 364 0048 F2FFFFEA 		b	.L36
 365              	.L35:
2221:../src/FreeRTOS/queue.c **** 	}
 366              		.loc 1 2221 0
 367 004c 0030E0E3 		mvn	r3, #0
 368 0050 4530C5E5 		strb	r3, [r5, #69]
 369              	.LBE2:
2223:../src/FreeRTOS/queue.c **** 
 370              		.loc 1 2223 0
 371 0054 FEFFFFEB 		bl	vPortExitCritical
 372              	.LVL44:
2226:../src/FreeRTOS/queue.c **** 	{
 373              		.loc 1 2226 0
 374 0058 FEFFFFEB 		bl	vPortEnterCritical
 375              	.LVL45:
 376              	.LBB3:
2228:../src/FreeRTOS/queue.c **** 
 377              		.loc 1 2228 0
 378 005c 4440D5E5 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 379              	.LVL46:
 380 0060 7440AFE6 		sxtb	r4, r4
 381              	.LVL47:
2230:../src/FreeRTOS/queue.c **** 		{
 382              		.loc 1 2230 0
 383 0064 010000EA 		b	.L38
 384              	.L40:
2243:../src/FreeRTOS/queue.c **** 			}
 385              		.loc 1 2243 0
 386 0068 014044E2 		sub	r4, r4, #1
 387              	.LVL48:
 388 006c 7440AFE6 		sxtb	r4, r4
 389              	.LVL49:
 390              	.L38:
2230:../src/FreeRTOS/queue.c **** 		{
 391              		.loc 1 2230 0
 392 0070 000054E3 		cmp	r4, #0
 393 0074 080000DA 		ble	.L39
2232:../src/FreeRTOS/queue.c **** 			{
 394              		.loc 1 2232 0
 395 0078 103095E5 		ldr	r3, [r5, #16]
 396 007c 000053E3 		cmp	r3, #0
 397 0080 0500000A 		beq	.L39
2234:../src/FreeRTOS/queue.c **** 				{
 398              		.loc 1 2234 0
 399 0084 100085E2 		add	r0, r5, #16
 400 0088 FEFFFFEB 		bl	xTaskRemoveFromEventList
 401              	.LVL50:
 402 008c 000050E3 		cmp	r0, #0
 403 0090 F4FFFF0A 		beq	.L40
2236:../src/FreeRTOS/queue.c **** 				}
 404              		.loc 1 2236 0
 405 0094 FEFFFFEB 		bl	vTaskMissedYield
 406              	.LVL51:
 407 0098 F2FFFFEA 		b	.L40
 408              	.L39:
2251:../src/FreeRTOS/queue.c **** 	}
 409              		.loc 1 2251 0
 410 009c 0030E0E3 		mvn	r3, #0
 411 00a0 4430C5E5 		strb	r3, [r5, #68]
 412              	.LBE3:
2253:../src/FreeRTOS/queue.c **** }
 413              		.loc 1 2253 0
 414 00a4 FEFFFFEB 		bl	vPortExitCritical
 415              	.LVL52:
 416 00a8 7080BDE8 		pop	{r4, r5, r6, pc}
 417              		.cfi_endproc
 418              	.LFE28:
 420              		.section	.text.xQueueGenericReset,"ax",%progbits
 421              		.align	2
 422              		.global	xQueueGenericReset
 423              		.syntax unified
 424              		.arm
 425              		.fpu neon
 427              	xQueueGenericReset:
 428              	.LFB0:
 248:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 429              		.loc 1 248 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL53:
 434 0000 70402DE9 		push	{r4, r5, r6, lr}
 435              		.cfi_def_cfa_offset 16
 436              		.cfi_offset 4, -16
 437              		.cfi_offset 5, -12
 438              		.cfi_offset 6, -8
 439              		.cfi_offset 14, -4
 440 0004 0150A0E1 		mov	r5, r1
 441              	.LVL54:
 251:../src/FreeRTOS/queue.c **** 
 442              		.loc 1 251 0
 443 0008 004050E2 		subs	r4, r0, #0
 444 000c 1600000A 		beq	.L48
 445              	.LVL55:
 446              	.L44:
 253:../src/FreeRTOS/queue.c **** 	{
 447              		.loc 1 253 0
 448 0010 FEFFFFEB 		bl	vPortEnterCritical
 449              	.LVL56:
 255:../src/FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 450              		.loc 1 255 0
 451 0014 001094E5 		ldr	r1, [r4]
 452 0018 3C2094E5 		ldr	r2, [r4, #60]
 453 001c 403094E5 		ldr	r3, [r4, #64]
 454 0020 931220E0 		mla	r0, r3, r2, r1
 455 0024 040084E5 		str	r0, [r4, #4]
 256:../src/FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 456              		.loc 1 256 0
 457 0028 0000A0E3 		mov	r0, #0
 458 002c 380084E5 		str	r0, [r4, #56]
 257:../src/FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 459              		.loc 1 257 0
 460 0030 081084E5 		str	r1, [r4, #8]
 258:../src/FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 461              		.loc 1 258 0
 462 0034 012042E2 		sub	r2, r2, #1
 463 0038 921323E0 		mla	r3, r2, r3, r1
 464 003c 0C3084E5 		str	r3, [r4, #12]
 259:../src/FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 465              		.loc 1 259 0
 466 0040 0030E0E3 		mvn	r3, #0
 467 0044 4430C4E5 		strb	r3, [r4, #68]
 260:../src/FreeRTOS/queue.c **** 
 468              		.loc 1 260 0
 469 0048 4530C4E5 		strb	r3, [r4, #69]
 262:../src/FreeRTOS/queue.c **** 		{
 470              		.loc 1 262 0
 471 004c 000055E1 		cmp	r5, r0
 472 0050 1000001A 		bne	.L45
 269:../src/FreeRTOS/queue.c **** 			{
 473              		.loc 1 269 0
 474 0054 103094E5 		ldr	r3, [r4, #16]
 475 0058 000053E1 		cmp	r3, r0
 476 005c 0700001A 		bne	.L49
 477              	.L46:
 292:../src/FreeRTOS/queue.c **** 
 478              		.loc 1 292 0
 479 0060 FEFFFFEB 		bl	vPortExitCritical
 480              	.LVL57:
 297:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 481              		.loc 1 297 0
 482 0064 0100A0E3 		mov	r0, #1
 483 0068 7080BDE8 		pop	{r4, r5, r6, pc}
 484              	.LVL58:
 485              	.L48:
 251:../src/FreeRTOS/queue.c **** 
 486              		.loc 1 251 0 discriminator 1
 487 006c FB10A0E3 		mov	r1, #251
 488              	.LVL59:
 489 0070 000000E3 		movw	r0, #:lower16:.LC0
 490              	.LVL60:
 491 0074 000040E3 		movt	r0, #:upper16:.LC0
 492 0078 FEFFFFEB 		bl	R_OS_AssertCalled
 493              	.LVL61:
 494 007c E3FFFFEA 		b	.L44
 495              	.L49:
 271:../src/FreeRTOS/queue.c **** 				{
 496              		.loc 1 271 0
 497 0080 100084E2 		add	r0, r4, #16
 498 0084 FEFFFFEB 		bl	xTaskRemoveFromEventList
 499              	.LVL62:
 500 0088 000050E3 		cmp	r0, #0
 501 008c F3FFFF0A 		beq	.L46
 273:../src/FreeRTOS/queue.c **** 				}
 502              		.loc 1 273 0
 503              		.syntax divided
 504              	@ 273 "../src/FreeRTOS/queue.c" 1
 505 0090 000000EF 		SWI 0
 506              	@ 0 "" 2
 507              		.arm
 508              		.syntax unified
 509 0094 F1FFFFEA 		b	.L46
 510              	.L45:
 288:../src/FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 511              		.loc 1 288 0
 512 0098 100084E2 		add	r0, r4, #16
 513 009c FEFFFFEB 		bl	vListInitialise
 514              	.LVL63:
 289:../src/FreeRTOS/queue.c **** 		}
 515              		.loc 1 289 0
 516 00a0 240084E2 		add	r0, r4, #36
 517 00a4 FEFFFFEB 		bl	vListInitialise
 518              	.LVL64:
 519 00a8 ECFFFFEA 		b	.L46
 520              		.cfi_endproc
 521              	.LFE0:
 523              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 524              		.align	2
 525              		.syntax unified
 526              		.arm
 527              		.fpu neon
 529              	prvInitialiseNewQueue:
 530              	.LFB2:
 409:../src/FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 531              		.loc 1 409 0
 532              		.cfi_startproc
 533              		@ args = 4, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              	.LVL65:
 536 0000 70402DE9 		push	{r4, r5, r6, lr}
 537              		.cfi_def_cfa_offset 16
 538              		.cfi_offset 4, -16
 539              		.cfi_offset 5, -12
 540              		.cfi_offset 6, -8
 541              		.cfi_offset 14, -4
 542 0004 0350A0E1 		mov	r5, r3
 543 0008 10409DE5 		ldr	r4, [sp, #16]
 414:../src/FreeRTOS/queue.c **** 	{
 544              		.loc 1 414 0
 545 000c 000051E3 		cmp	r1, #0
 546 0010 0700000A 		beq	.L54
 425:../src/FreeRTOS/queue.c **** 	}
 547              		.loc 1 425 0
 548 0014 002084E5 		str	r2, [r4]
 549              	.L52:
 430:../src/FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 550              		.loc 1 430 0
 551 0018 3C0084E5 		str	r0, [r4, #60]
 431:../src/FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 552              		.loc 1 431 0
 553 001c 401084E5 		str	r1, [r4, #64]
 432:../src/FreeRTOS/queue.c **** 
 554              		.loc 1 432 0
 555 0020 0110A0E3 		mov	r1, #1
 556              	.LVL66:
 557 0024 0400A0E1 		mov	r0, r4
 558              	.LVL67:
 559 0028 FEFFFFEB 		bl	xQueueGenericReset
 560              	.LVL68:
 436:../src/FreeRTOS/queue.c **** 	}
 561              		.loc 1 436 0
 562 002c 4C50C4E5 		strb	r5, [r4, #76]
 563 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 564              	.LVL69:
 565              	.L54:
 420:../src/FreeRTOS/queue.c **** 	}
 566              		.loc 1 420 0
 567 0034 004084E5 		str	r4, [r4]
 568 0038 F6FFFFEA 		b	.L52
 569              		.cfi_endproc
 570              	.LFE2:
 572              		.section	.text.xQueueGenericCreate,"ax",%progbits
 573              		.align	2
 574              		.global	xQueueGenericCreate
 575              		.syntax unified
 576              		.arm
 577              		.fpu neon
 579              	xQueueGenericCreate:
 580              	.LFB1:
 359:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 581              		.loc 1 359 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              	.LVL70:
 586 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 587              		.cfi_def_cfa_offset 20
 588              		.cfi_offset 4, -20
 589              		.cfi_offset 5, -16
 590              		.cfi_offset 6, -12
 591              		.cfi_offset 7, -8
 592              		.cfi_offset 14, -4
 593 0004 0CD04DE2 		sub	sp, sp, #12
 594              		.cfi_def_cfa_offset 32
 595 0008 0150A0E1 		mov	r5, r1
 596 000c 0270A0E1 		mov	r7, r2
 364:../src/FreeRTOS/queue.c **** 
 597              		.loc 1 364 0
 598 0010 006050E2 		subs	r6, r0, #0
 599 0014 0F00000A 		beq	.L61
 600              	.LVL71:
 601              	.L56:
 366:../src/FreeRTOS/queue.c **** 		{
 602              		.loc 1 366 0
 603 0018 000055E3 		cmp	r5, #0
 604 001c 1200000A 		beq	.L59
 375:../src/FreeRTOS/queue.c **** 		}
 605              		.loc 1 375 0
 606 0020 950600E0 		mul	r0, r5, r6
 607              	.LVL72:
 608              	.L57:
 378:../src/FreeRTOS/queue.c **** 
 609              		.loc 1 378 0
 610 0024 500080E2 		add	r0, r0, #80
 611              	.LVL73:
 612 0028 FEFFFFEB 		bl	pvPortMalloc
 613              	.LVL74:
 380:../src/FreeRTOS/queue.c **** 		{
 614              		.loc 1 380 0
 615 002c 004050E2 		subs	r4, r0, #0
 616 0030 0500000A 		beq	.L58
 617              	.LVL75:
 395:../src/FreeRTOS/queue.c **** 		}
 618              		.loc 1 395 0
 619 0034 00408DE5 		str	r4, [sp]
 620 0038 0730A0E1 		mov	r3, r7
 621 003c 502084E2 		add	r2, r4, #80
 622              	.LVL76:
 623 0040 0510A0E1 		mov	r1, r5
 624 0044 0600A0E1 		mov	r0, r6
 625              	.LVL77:
 626 0048 FEFFFFEB 		bl	prvInitialiseNewQueue
 627              	.LVL78:
 628              	.L58:
 403:../src/FreeRTOS/queue.c **** 
 629              		.loc 1 403 0
 630 004c 0400A0E1 		mov	r0, r4
 631 0050 0CD08DE2 		add	sp, sp, #12
 632              		.cfi_remember_state
 633              		.cfi_def_cfa_offset 20
 634              		@ sp needed
 635 0054 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 636              	.LVL79:
 637              	.L61:
 638              		.cfi_restore_state
 364:../src/FreeRTOS/queue.c **** 
 639              		.loc 1 364 0 discriminator 1
 640 0058 5B1FA0E3 		mov	r1, #364
 641              	.LVL80:
 642 005c 000000E3 		movw	r0, #:lower16:.LC0
 643              	.LVL81:
 644 0060 000040E3 		movt	r0, #:upper16:.LC0
 645 0064 FEFFFFEB 		bl	R_OS_AssertCalled
 646              	.LVL82:
 647 0068 EAFFFFEA 		b	.L56
 648              	.L59:
 369:../src/FreeRTOS/queue.c **** 		}
 649              		.loc 1 369 0
 650 006c 0000A0E3 		mov	r0, #0
 651 0070 EBFFFFEA 		b	.L57
 652              		.cfi_endproc
 653              	.LFE1:
 655              		.section	.text.xQueueGetMutexHolder,"ax",%progbits
 656              		.align	2
 657              		.global	xQueueGetMutexHolder
 658              		.syntax unified
 659              		.arm
 660              		.fpu neon
 662              	xQueueGetMutexHolder:
 663              	.LFB5:
 519:../src/FreeRTOS/queue.c **** 	void *pxReturn;
 664              		.loc 1 519 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              	.LVL83:
 669 0000 10402DE9 		push	{r4, lr}
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 4, -8
 672              		.cfi_offset 14, -4
 673 0004 0040A0E1 		mov	r4, r0
 527:../src/FreeRTOS/queue.c **** 		{
 674              		.loc 1 527 0
 675 0008 FEFFFFEB 		bl	vPortEnterCritical
 676              	.LVL84:
 529:../src/FreeRTOS/queue.c **** 			{
 677              		.loc 1 529 0
 678 000c 003094E5 		ldr	r3, [r4]
 679 0010 000053E3 		cmp	r3, #0
 680 0014 0300001A 		bne	.L64
 531:../src/FreeRTOS/queue.c **** 			}
 681              		.loc 1 531 0
 682 0018 044094E5 		ldr	r4, [r4, #4]
 683              	.LVL85:
 684              	.L63:
 538:../src/FreeRTOS/queue.c **** 
 685              		.loc 1 538 0
 686 001c FEFFFFEB 		bl	vPortExitCritical
 687              	.LVL86:
 541:../src/FreeRTOS/queue.c **** 
 688              		.loc 1 541 0
 689 0020 0400A0E1 		mov	r0, r4
 690 0024 1080BDE8 		pop	{r4, pc}
 691              	.LVL87:
 692              	.L64:
 535:../src/FreeRTOS/queue.c **** 			}
 693              		.loc 1 535 0
 694 0028 0040A0E3 		mov	r4, #0
 695              	.LVL88:
 696 002c FAFFFFEA 		b	.L63
 697              		.cfi_endproc
 698              	.LFE5:
 700              		.section	.text.xQueueGetMutexHolderFromISR,"ax",%progbits
 701              		.align	2
 702              		.global	xQueueGetMutexHolderFromISR
 703              		.syntax unified
 704              		.arm
 705              		.fpu neon
 707              	xQueueGetMutexHolderFromISR:
 708              	.LFB6:
 549:../src/FreeRTOS/queue.c **** 	void *pxReturn;
 709              		.loc 1 549 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              	.LVL89:
 714 0000 10402DE9 		push	{r4, lr}
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 4, -8
 717              		.cfi_offset 14, -4
 552:../src/FreeRTOS/queue.c **** 
 718              		.loc 1 552 0
 719 0004 004050E2 		subs	r4, r0, #0
 720 0008 0400000A 		beq	.L71
 721              	.LVL90:
 722              	.L67:
 557:../src/FreeRTOS/queue.c **** 		{
 723              		.loc 1 557 0
 724 000c 003094E5 		ldr	r3, [r4]
 725 0010 000053E3 		cmp	r3, #0
 726 0014 0600001A 		bne	.L69
 559:../src/FreeRTOS/queue.c **** 		}
 727              		.loc 1 559 0
 728 0018 040094E5 		ldr	r0, [r4, #4]
 729              	.LVL91:
 730 001c 1080BDE8 		pop	{r4, pc}
 731              	.LVL92:
 732              	.L71:
 552:../src/FreeRTOS/queue.c **** 
 733              		.loc 1 552 0 discriminator 1
 734 0020 8A1FA0E3 		mov	r1, #552
 735 0024 000000E3 		movw	r0, #:lower16:.LC0
 736              	.LVL93:
 737 0028 000040E3 		movt	r0, #:upper16:.LC0
 738 002c FEFFFFEB 		bl	R_OS_AssertCalled
 739              	.LVL94:
 740 0030 F5FFFFEA 		b	.L67
 741              	.L69:
 563:../src/FreeRTOS/queue.c **** 		}
 742              		.loc 1 563 0
 743 0034 0000A0E3 		mov	r0, #0
 744              	.LVL95:
 567:../src/FreeRTOS/queue.c **** 
 745              		.loc 1 567 0
 746 0038 1080BDE8 		pop	{r4, pc}
 747              		.cfi_endproc
 748              	.LFE6:
 750              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 751              		.align	2
 752              		.global	xQueueCreateCountingSemaphore
 753              		.syntax unified
 754              		.arm
 755              		.fpu neon
 757              	xQueueCreateCountingSemaphore:
 758              	.LFB9:
 700:../src/FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 759              		.loc 1 700 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 0, uses_anonymous_args = 0
 763              	.LVL96:
 764 0000 70402DE9 		push	{r4, r5, r6, lr}
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 4, -16
 767              		.cfi_offset 5, -12
 768              		.cfi_offset 6, -8
 769              		.cfi_offset 14, -4
 770 0004 0150A0E1 		mov	r5, r1
 703:../src/FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 771              		.loc 1 703 0
 772 0008 004050E2 		subs	r4, r0, #0
 773 000c 0900000A 		beq	.L77
 774              	.LVL97:
 775              	.L73:
 704:../src/FreeRTOS/queue.c **** 
 776              		.loc 1 704 0
 777 0010 050054E1 		cmp	r4, r5
 778 0014 0C00003A 		bcc	.L78
 779              	.L74:
 706:../src/FreeRTOS/queue.c **** 
 780              		.loc 1 706 0
 781 0018 0220A0E3 		mov	r2, #2
 782 001c 0010A0E3 		mov	r1, #0
 783 0020 0400A0E1 		mov	r0, r4
 784 0024 FEFFFFEB 		bl	xQueueGenericCreate
 785              	.LVL98:
 708:../src/FreeRTOS/queue.c **** 		{
 786              		.loc 1 708 0
 787 0028 000050E3 		cmp	r0, #0
 788 002c 7080BD08 		popeq	{r4, r5, r6, pc}
 710:../src/FreeRTOS/queue.c **** 
 789              		.loc 1 710 0
 790 0030 385080E5 		str	r5, [r0, #56]
 720:../src/FreeRTOS/queue.c **** 
 791              		.loc 1 720 0
 792 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 793              	.LVL99:
 794              	.L77:
 703:../src/FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 795              		.loc 1 703 0 discriminator 1
 796 0038 BF1200E3 		movw	r1, #703
 797              	.LVL100:
 798 003c 000000E3 		movw	r0, #:lower16:.LC0
 799              	.LVL101:
 800 0040 000040E3 		movt	r0, #:upper16:.LC0
 801 0044 FEFFFFEB 		bl	R_OS_AssertCalled
 802              	.LVL102:
 803 0048 F0FFFFEA 		b	.L73
 804              	.L78:
 704:../src/FreeRTOS/queue.c **** 
 805              		.loc 1 704 0 discriminator 1
 806 004c 0B1DA0E3 		mov	r1, #704
 807 0050 000000E3 		movw	r0, #:lower16:.LC0
 808 0054 000040E3 		movt	r0, #:upper16:.LC0
 809 0058 FEFFFFEB 		bl	R_OS_AssertCalled
 810              	.LVL103:
 811 005c EDFFFFEA 		b	.L74
 812              		.cfi_endproc
 813              	.LFE9:
 815              		.section	.text.xQueueGenericSend,"ax",%progbits
 816              		.align	2
 817              		.global	xQueueGenericSend
 818              		.syntax unified
 819              		.arm
 820              		.fpu neon
 822              	xQueueGenericSend:
 823              	.LFB10:
 726:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 824              		.loc 1 726 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              	.LVL104:
 829 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 830              		.cfi_def_cfa_offset 20
 831              		.cfi_offset 4, -20
 832              		.cfi_offset 5, -16
 833              		.cfi_offset 6, -12
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0004 14D04DE2 		sub	sp, sp, #20
 837              		.cfi_def_cfa_offset 40
 838 0008 0170A0E1 		mov	r7, r1
 839 000c 04208DE5 		str	r2, [sp, #4]
 840 0010 0360A0E1 		mov	r6, r3
 841              	.LVL105:
 731:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 842              		.loc 1 731 0
 843 0014 004050E2 		subs	r4, r0, #0
 844 0018 1100000A 		beq	.L107
 845              	.LVL106:
 846              	.L80:
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 847              		.loc 1 732 0
 848 001c 000057E3 		cmp	r7, #0
 849 0020 1400000A 		beq	.L108
 850 0024 0130A0E3 		mov	r3, #1
 851              	.L81:
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 852              		.loc 1 732 0 is_stmt 0 discriminator 6
 853 0028 000053E3 		cmp	r3, #0
 854 002c 1700000A 		beq	.L109
 855              	.L82:
 733:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 856              		.loc 1 733 0 is_stmt 1
 857 0030 020056E3 		cmp	r6, #2
 858 0034 1A00000A 		beq	.L110
 859 0038 0130A0E3 		mov	r3, #1
 860              	.L83:
 733:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 861              		.loc 1 733 0 is_stmt 0 discriminator 6
 862 003c 000053E3 		cmp	r3, #0
 863 0040 1B00000A 		beq	.L111
 864              	.L84:
 736:../src/FreeRTOS/queue.c **** 	}
 865              		.loc 1 736 0 is_stmt 1
 866 0044 FEFFFFEB 		bl	xTaskGetSchedulerState
 867              	.LVL107:
 868 0048 000050E3 		cmp	r0, #0
 869 004c 1D00001A 		bne	.L104
 736:../src/FreeRTOS/queue.c **** 	}
 870              		.loc 1 736 0 is_stmt 0 discriminator 2
 871 0050 04309DE5 		ldr	r3, [sp, #4]
 872 0054 000053E3 		cmp	r3, #0
 873 0058 1F00001A 		bne	.L105
 736:../src/FreeRTOS/queue.c **** 	}
 874              		.loc 1 736 0
 875 005c 0130A0E3 		mov	r3, #1
 876 0060 190000EA 		b	.L85
 877              	.LVL108:
 878              	.L107:
 731:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 879              		.loc 1 731 0 is_stmt 1 discriminator 1
 880 0064 DB1200E3 		movw	r1, #731
 881              	.LVL109:
 882 0068 000000E3 		movw	r0, #:lower16:.LC0
 883              	.LVL110:
 884 006c 000040E3 		movt	r0, #:upper16:.LC0
 885 0070 FEFFFFEB 		bl	R_OS_AssertCalled
 886              	.LVL111:
 887 0074 E8FFFFEA 		b	.L80
 888              	.L108:
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 889              		.loc 1 732 0 discriminator 2
 890 0078 403094E5 		ldr	r3, [r4, #64]
 891 007c 000053E3 		cmp	r3, #0
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 892              		.loc 1 732 0 is_stmt 0
 893 0080 0130A003 		moveq	r3, #1
 894 0084 E7FFFF0A 		beq	.L81
 895              	.L101:
 896 0088 0030A0E3 		mov	r3, #0
 897 008c E5FFFFEA 		b	.L81
 898              	.L109:
 732:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 899              		.loc 1 732 0 discriminator 7
 900 0090 B71FA0E3 		mov	r1, #732
 901 0094 000000E3 		movw	r0, #:lower16:.LC0
 902 0098 000040E3 		movt	r0, #:upper16:.LC0
 903 009c FEFFFFEB 		bl	R_OS_AssertCalled
 904              	.LVL112:
 905 00a0 E2FFFFEA 		b	.L82
 906              	.L110:
 733:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 907              		.loc 1 733 0 is_stmt 1 discriminator 2
 908 00a4 3C3094E5 		ldr	r3, [r4, #60]
 909 00a8 010053E3 		cmp	r3, #1
 733:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 910              		.loc 1 733 0 is_stmt 0
 911 00ac 0030A013 		movne	r3, #0
 912 00b0 E1FFFFEA 		b	.L83
 913              	.L111:
 733:../src/FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 914              		.loc 1 733 0 discriminator 7
 915 00b4 DD1200E3 		movw	r1, #733
 916 00b8 000000E3 		movw	r0, #:lower16:.LC0
 917 00bc 000040E3 		movt	r0, #:upper16:.LC0
 918 00c0 FEFFFFEB 		bl	R_OS_AssertCalled
 919              	.LVL113:
 920 00c4 DEFFFFEA 		b	.L84
 921              	.L104:
 736:../src/FreeRTOS/queue.c **** 	}
 922              		.loc 1 736 0 is_stmt 1
 923 00c8 0130A0E3 		mov	r3, #1
 924              	.L85:
 736:../src/FreeRTOS/queue.c **** 	}
 925              		.loc 1 736 0 is_stmt 0 discriminator 6
 926 00cc 000053E3 		cmp	r3, #0
 927 00d0 0300000A 		beq	.L112
 928              	.L86:
 736:../src/FreeRTOS/queue.c **** 	}
 929              		.loc 1 736 0
 930 00d4 0050A0E3 		mov	r5, #0
 931 00d8 2A0000EA 		b	.L87
 932              	.L105:
 933 00dc 0030A0E3 		mov	r3, #0
 934 00e0 F9FFFFEA 		b	.L85
 935              	.L112:
 736:../src/FreeRTOS/queue.c **** 	}
 936              		.loc 1 736 0 discriminator 7
 937 00e4 2E1EA0E3 		mov	r1, #736
 938 00e8 000000E3 		movw	r0, #:lower16:.LC0
 939 00ec 000040E3 		movt	r0, #:upper16:.LC0
 940 00f0 FEFFFFEB 		bl	R_OS_AssertCalled
 941              	.LVL114:
 942 00f4 F6FFFFEA 		b	.L86
 943              	.LVL115:
 944              	.L88:
 755:../src/FreeRTOS/queue.c **** 
 945              		.loc 1 755 0 is_stmt 1
 946 00f8 0620A0E1 		mov	r2, r6
 947 00fc 0710A0E1 		mov	r1, r7
 948 0100 0400A0E1 		mov	r0, r4
 949 0104 FEFFFFEB 		bl	prvCopyDataToQueue
 950              	.LVL116:
 810:../src/FreeRTOS/queue.c **** 					{
 951              		.loc 1 810 0
 952 0108 243094E5 		ldr	r3, [r4, #36]
 953 010c 000053E3 		cmp	r3, #0
 954 0110 0600001A 		bne	.L113
 825:../src/FreeRTOS/queue.c **** 					{
 955              		.loc 1 825 0
 956 0114 000050E3 		cmp	r0, #0
 957 0118 0000000A 		beq	.L91
 831:../src/FreeRTOS/queue.c **** 					}
 958              		.loc 1 831 0
 959              		.syntax divided
 960              	@ 831 "../src/FreeRTOS/queue.c" 1
 961 011c 000000EF 		SWI 0
 962              	@ 0 "" 2
 963              	.LVL117:
 964              		.arm
 965              		.syntax unified
 966              	.L91:
 840:../src/FreeRTOS/queue.c **** 				return pdPASS;
 967              		.loc 1 840 0
 968 0120 FEFFFFEB 		bl	vPortExitCritical
 969              	.LVL118:
 841:../src/FreeRTOS/queue.c **** 			}
 970              		.loc 1 841 0
 971 0124 0100A0E3 		mov	r0, #1
 972              	.L79:
 920:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 973              		.loc 1 920 0
 974 0128 14D08DE2 		add	sp, sp, #20
 975              		.cfi_remember_state
 976              		.cfi_def_cfa_offset 20
 977              		@ sp needed
 978 012c F080BDE8 		pop	{r4, r5, r6, r7, pc}
 979              	.LVL119:
 980              	.L113:
 981              		.cfi_restore_state
 812:../src/FreeRTOS/queue.c **** 						{
 982              		.loc 1 812 0
 983 0130 240084E2 		add	r0, r4, #36
 984              	.LVL120:
 985 0134 FEFFFFEB 		bl	xTaskRemoveFromEventList
 986              	.LVL121:
 987 0138 000050E3 		cmp	r0, #0
 988 013c F7FFFF0A 		beq	.L91
 818:../src/FreeRTOS/queue.c **** 						}
 989              		.loc 1 818 0
 990              		.syntax divided
 991              	@ 818 "../src/FreeRTOS/queue.c" 1
 992 0140 000000EF 		SWI 0
 993              	@ 0 "" 2
 994              		.arm
 995              		.syntax unified
 996 0144 F5FFFFEA 		b	.L91
 997              	.L114:
 849:../src/FreeRTOS/queue.c **** 
 998              		.loc 1 849 0
 999 0148 FEFFFFEB 		bl	vPortExitCritical
 1000              	.LVL122:
 854:../src/FreeRTOS/queue.c **** 				}
 1001              		.loc 1 854 0
 1002 014c 0000A0E3 		mov	r0, #0
 1003 0150 F4FFFFEA 		b	.L79
 1004              	.L115:
 860:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1005              		.loc 1 860 0
 1006 0154 08008DE2 		add	r0, sp, #8
 1007 0158 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 1008              	.LVL123:
 861:../src/FreeRTOS/queue.c **** 				}
 1009              		.loc 1 861 0
 1010 015c 0150A0E3 		mov	r5, #1
 1011 0160 140000EA 		b	.L94
 1012              	.LVL124:
 1013              	.L116:
 876:../src/FreeRTOS/queue.c **** 
 1014              		.loc 1 876 0 discriminator 1
 1015 0164 0030A0E3 		mov	r3, #0
 1016 0168 4430C4E5 		strb	r3, [r4, #68]
 1017 016c 180000EA 		b	.L95
 1018              	.L117:
 876:../src/FreeRTOS/queue.c **** 
 1019              		.loc 1 876 0 is_stmt 0 discriminator 4
 1020 0170 0030A0E3 		mov	r3, #0
 1021 0174 4530C4E5 		strb	r3, [r4, #69]
 1022 0178 190000EA 		b	.L96
 1023              	.L98:
 906:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1024              		.loc 1 906 0 is_stmt 1
 1025 017c 0400A0E1 		mov	r0, r4
 1026 0180 FEFFFFEB 		bl	prvUnlockQueue
 1027              	.LVL125:
 907:../src/FreeRTOS/queue.c **** 			}
 1028              		.loc 1 907 0
 1029 0184 FEFFFFEB 		bl	xTaskResumeAll
 1030              	.LVL126:
 1031              	.L87:
 746:../src/FreeRTOS/queue.c **** 		{
 1032              		.loc 1 746 0
 1033 0188 FEFFFFEB 		bl	vPortEnterCritical
 1034              	.LVL127:
 752:../src/FreeRTOS/queue.c **** 			{
 1035              		.loc 1 752 0
 1036 018c 382094E5 		ldr	r2, [r4, #56]
 1037 0190 3C3094E5 		ldr	r3, [r4, #60]
 1038 0194 030052E1 		cmp	r2, r3
 1039 0198 D6FFFF3A 		bcc	.L88
 752:../src/FreeRTOS/queue.c **** 			{
 1040              		.loc 1 752 0 is_stmt 0 discriminator 1
 1041 019c 020056E3 		cmp	r6, #2
 1042 01a0 D4FFFF0A 		beq	.L88
 845:../src/FreeRTOS/queue.c **** 				{
 1043              		.loc 1 845 0 is_stmt 1
 1044 01a4 04309DE5 		ldr	r3, [sp, #4]
 1045 01a8 000053E3 		cmp	r3, #0
 1046 01ac E5FFFF0A 		beq	.L114
 856:../src/FreeRTOS/queue.c **** 				{
 1047              		.loc 1 856 0
 1048 01b0 000055E3 		cmp	r5, #0
 1049 01b4 E6FFFF0A 		beq	.L115
 1050              	.LVL128:
 1051              	.L94:
 870:../src/FreeRTOS/queue.c **** 
 1052              		.loc 1 870 0
 1053 01b8 FEFFFFEB 		bl	vPortExitCritical
 1054              	.LVL129:
 875:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1055              		.loc 1 875 0
 1056 01bc FEFFFFEB 		bl	vTaskSuspendAll
 1057              	.LVL130:
 876:../src/FreeRTOS/queue.c **** 
 1058              		.loc 1 876 0
 1059 01c0 FEFFFFEB 		bl	vPortEnterCritical
 1060              	.LVL131:
 1061 01c4 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1062 01c8 7330AFE6 		sxtb	r3, r3
 1063 01cc 010073E3 		cmn	r3, #1
 1064 01d0 E3FFFF0A 		beq	.L116
 1065              	.L95:
 876:../src/FreeRTOS/queue.c **** 
 1066              		.loc 1 876 0 is_stmt 0 discriminator 3
 1067 01d4 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1068 01d8 7330AFE6 		sxtb	r3, r3
 1069 01dc 010073E3 		cmn	r3, #1
 1070 01e0 E2FFFF0A 		beq	.L117
 1071              	.L96:
 876:../src/FreeRTOS/queue.c **** 
 1072              		.loc 1 876 0 discriminator 6
 1073 01e4 FEFFFFEB 		bl	vPortExitCritical
 1074              	.LVL132:
 879:../src/FreeRTOS/queue.c **** 		{
 1075              		.loc 1 879 0 is_stmt 1 discriminator 6
 1076 01e8 04108DE2 		add	r1, sp, #4
 1077 01ec 08008DE2 		add	r0, sp, #8
 1078 01f0 FEFFFFEB 		bl	xTaskCheckForTimeOut
 1079              	.LVL133:
 1080 01f4 000050E3 		cmp	r0, #0
 1081 01f8 0D00001A 		bne	.L97
 881:../src/FreeRTOS/queue.c **** 			{
 1082              		.loc 1 881 0
 1083 01fc 0400A0E1 		mov	r0, r4
 1084 0200 FEFFFFEB 		bl	prvIsQueueFull
 1085              	.LVL134:
 1086 0204 000050E3 		cmp	r0, #0
 1087 0208 DBFFFF0A 		beq	.L98
 884:../src/FreeRTOS/queue.c **** 
 1088              		.loc 1 884 0
 1089 020c 04109DE5 		ldr	r1, [sp, #4]
 1090 0210 100084E2 		add	r0, r4, #16
 1091 0214 FEFFFFEB 		bl	vTaskPlaceOnEventList
 1092              	.LVL135:
 891:../src/FreeRTOS/queue.c **** 
 1093              		.loc 1 891 0
 1094 0218 0400A0E1 		mov	r0, r4
 1095 021c FEFFFFEB 		bl	prvUnlockQueue
 1096              	.LVL136:
 898:../src/FreeRTOS/queue.c **** 				{
 1097              		.loc 1 898 0
 1098 0220 FEFFFFEB 		bl	xTaskResumeAll
 1099              	.LVL137:
 1100 0224 000050E3 		cmp	r0, #0
 1101 0228 D6FFFF1A 		bne	.L87
 900:../src/FreeRTOS/queue.c **** 				}
 1102              		.loc 1 900 0
 1103              		.syntax divided
 1104              	@ 900 "../src/FreeRTOS/queue.c" 1
 1105 022c 000000EF 		SWI 0
 1106              	@ 0 "" 2
 1107              		.arm
 1108              		.syntax unified
 1109 0230 D4FFFFEA 		b	.L87
 1110              	.L97:
 913:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1111              		.loc 1 913 0
 1112 0234 0400A0E1 		mov	r0, r4
 1113 0238 FEFFFFEB 		bl	prvUnlockQueue
 1114              	.LVL138:
 914:../src/FreeRTOS/queue.c **** 
 1115              		.loc 1 914 0
 1116 023c FEFFFFEB 		bl	xTaskResumeAll
 1117              	.LVL139:
 917:../src/FreeRTOS/queue.c **** 		}
 1118              		.loc 1 917 0
 1119 0240 0000A0E3 		mov	r0, #0
 1120 0244 B7FFFFEA 		b	.L79
 1121              		.cfi_endproc
 1122              	.LFE10:
 1124              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1125              		.align	2
 1126              		.syntax unified
 1127              		.arm
 1128              		.fpu neon
 1130              	prvInitialiseMutex:
 1131              	.LFB3:
 453:../src/FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1132              		.loc 1 453 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              	.LVL140:
 454:../src/FreeRTOS/queue.c **** 		{
 1137              		.loc 1 454 0
 1138 0000 000050E3 		cmp	r0, #0
 1139 0004 1EFF2F01 		bxeq	lr
 453:../src/FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1140              		.loc 1 453 0
 1141 0008 10402DE9 		push	{r4, lr}
 1142              		.cfi_def_cfa_offset 8
 1143              		.cfi_offset 4, -8
 1144              		.cfi_offset 14, -4
 460:../src/FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1145              		.loc 1 460 0
 1146 000c 0010A0E3 		mov	r1, #0
 1147 0010 041080E5 		str	r1, [r0, #4]
 461:../src/FreeRTOS/queue.c **** 
 1148              		.loc 1 461 0
 1149 0014 001080E5 		str	r1, [r0]
 464:../src/FreeRTOS/queue.c **** 
 1150              		.loc 1 464 0
 1151 0018 0C1080E5 		str	r1, [r0, #12]
 469:../src/FreeRTOS/queue.c **** 		}
 1152              		.loc 1 469 0
 1153 001c 0130A0E1 		mov	r3, r1
 1154 0020 0120A0E1 		mov	r2, r1
 1155 0024 FEFFFFEB 		bl	xQueueGenericSend
 1156              	.LVL141:
 1157 0028 1080BDE8 		pop	{r4, pc}
 1158              		.cfi_endproc
 1159              	.LFE3:
 1161              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1162              		.align	2
 1163              		.global	xQueueCreateMutex
 1164              		.syntax unified
 1165              		.arm
 1166              		.fpu neon
 1168              	xQueueCreateMutex:
 1169              	.LFB4:
 483:../src/FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 1170              		.loc 1 483 0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              	.LVL142:
 1175 0000 10402DE9 		push	{r4, lr}
 1176              		.cfi_def_cfa_offset 8
 1177              		.cfi_offset 4, -8
 1178              		.cfi_offset 14, -4
 1179              	.LVL143:
 487:../src/FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1180              		.loc 1 487 0
 1181 0004 0020A0E1 		mov	r2, r0
 1182 0008 0010A0E3 		mov	r1, #0
 1183 000c 0100A0E3 		mov	r0, #1
 1184              	.LVL144:
 1185 0010 FEFFFFEB 		bl	xQueueGenericCreate
 1186              	.LVL145:
 1187 0014 0040A0E1 		mov	r4, r0
 1188              	.LVL146:
 488:../src/FreeRTOS/queue.c **** 
 1189              		.loc 1 488 0
 1190 0018 FEFFFFEB 		bl	prvInitialiseMutex
 1191              	.LVL147:
 491:../src/FreeRTOS/queue.c **** 
 1192              		.loc 1 491 0
 1193 001c 0400A0E1 		mov	r0, r4
 1194 0020 1080BDE8 		pop	{r4, pc}
 1195              		.cfi_endproc
 1196              	.LFE4:
 1198              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1199              		.align	2
 1200              		.global	xQueueGiveMutexRecursive
 1201              		.syntax unified
 1202              		.arm
 1203              		.fpu neon
 1205              	xQueueGiveMutexRecursive:
 1206              	.LFB7:
 575:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
 1207              		.loc 1 575 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              	.LVL148:
 1212 0000 70402DE9 		push	{r4, r5, r6, lr}
 1213              		.cfi_def_cfa_offset 16
 1214              		.cfi_offset 4, -16
 1215              		.cfi_offset 5, -12
 1216              		.cfi_offset 6, -8
 1217              		.cfi_offset 14, -4
 1218              	.LVL149:
 579:../src/FreeRTOS/queue.c **** 
 1219              		.loc 1 579 0
 1220 0004 004050E2 		subs	r4, r0, #0
 1221 0008 0500000A 		beq	.L132
 1222              	.LVL150:
 1223              	.L127:
 587:../src/FreeRTOS/queue.c **** 		{
 1224              		.loc 1 587 0
 1225 000c 045094E5 		ldr	r5, [r4, #4]
 1226 0010 FEFFFFEB 		bl	xTaskGetCurrentTaskHandle
 1227              	.LVL151:
 1228 0014 000055E1 		cmp	r5, r0
 1229 0018 0600000A 		beq	.L133
 616:../src/FreeRTOS/queue.c **** 
 1230              		.loc 1 616 0
 1231 001c 0000A0E3 		mov	r0, #0
 1232 0020 7080BDE8 		pop	{r4, r5, r6, pc}
 1233              	.LVL152:
 1234              	.L132:
 579:../src/FreeRTOS/queue.c **** 
 1235              		.loc 1 579 0 discriminator 1
 1236 0024 431200E3 		movw	r1, #579
 1237 0028 000000E3 		movw	r0, #:lower16:.LC0
 1238              	.LVL153:
 1239 002c 000040E3 		movt	r0, #:upper16:.LC0
 1240 0030 FEFFFFEB 		bl	R_OS_AssertCalled
 1241              	.LVL154:
 1242 0034 F4FFFFEA 		b	.L127
 1243              	.L133:
 596:../src/FreeRTOS/queue.c **** 
 1244              		.loc 1 596 0
 1245 0038 0C3094E5 		ldr	r3, [r4, #12]
 1246 003c 013043E2 		sub	r3, r3, #1
 1247 0040 0C3084E5 		str	r3, [r4, #12]
 599:../src/FreeRTOS/queue.c **** 			{
 1248              		.loc 1 599 0
 1249 0044 000053E3 		cmp	r3, #0
 1250 0048 0100000A 		beq	.L134
 610:../src/FreeRTOS/queue.c **** 		}
 1251              		.loc 1 610 0
 1252 004c 0100A0E3 		mov	r0, #1
 1253              	.LVL155:
 622:../src/FreeRTOS/queue.c **** 
 1254              		.loc 1 622 0
 1255 0050 7080BDE8 		pop	{r4, r5, r6, pc}
 1256              	.LVL156:
 1257              	.L134:
 603:../src/FreeRTOS/queue.c **** 			}
 1258              		.loc 1 603 0
 1259 0054 0320A0E1 		mov	r2, r3
 1260 0058 0310A0E1 		mov	r1, r3
 1261 005c 0400A0E1 		mov	r0, r4
 1262 0060 FEFFFFEB 		bl	xQueueGenericSend
 1263              	.LVL157:
 610:../src/FreeRTOS/queue.c **** 		}
 1264              		.loc 1 610 0
 1265 0064 0100A0E3 		mov	r0, #1
 1266 0068 7080BDE8 		pop	{r4, r5, r6, pc}
 1267              		.cfi_endproc
 1268              	.LFE7:
 1270              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1271              		.align	2
 1272              		.global	xQueueGenericSendFromISR
 1273              		.syntax unified
 1274              		.arm
 1275              		.fpu neon
 1277              	xQueueGenericSendFromISR:
 1278              	.LFB11:
 924:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 1279              		.loc 1 924 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              	.LVL158:
 1284 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1285              		.cfi_def_cfa_offset 32
 1286              		.cfi_offset 4, -32
 1287              		.cfi_offset 5, -28
 1288              		.cfi_offset 6, -24
 1289              		.cfi_offset 7, -20
 1290              		.cfi_offset 8, -16
 1291              		.cfi_offset 9, -12
 1292              		.cfi_offset 10, -8
 1293              		.cfi_offset 14, -4
 1294 0004 0170A0E1 		mov	r7, r1
 1295 0008 0290A0E1 		mov	r9, r2
 1296 000c 0360A0E1 		mov	r6, r3
 1297              	.LVL159:
 929:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1298              		.loc 1 929 0
 1299 0010 004050E2 		subs	r4, r0, #0
 1300 0014 1700000A 		beq	.L153
 1301              	.LVL160:
 1302              	.L136:
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1303              		.loc 1 930 0
 1304 0018 000057E3 		cmp	r7, #0
 1305 001c 1A00000A 		beq	.L154
 1306 0020 0130A0E3 		mov	r3, #1
 1307              	.L137:
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1308              		.loc 1 930 0 is_stmt 0 discriminator 6
 1309 0024 000053E3 		cmp	r3, #0
 1310 0028 1D00000A 		beq	.L155
 1311              	.L138:
 931:../src/FreeRTOS/queue.c **** 
 1312              		.loc 1 931 0 is_stmt 1
 1313 002c 020056E3 		cmp	r6, #2
 1314 0030 2000000A 		beq	.L156
 1315 0034 0130A0E3 		mov	r3, #1
 1316              	.L139:
 931:../src/FreeRTOS/queue.c **** 
 1317              		.loc 1 931 0 is_stmt 0 discriminator 6
 1318 0038 000053E3 		cmp	r3, #0
 1319 003c 2100000A 		beq	.L157
 1320              	.L140:
 947:../src/FreeRTOS/queue.c **** 
 1321              		.loc 1 947 0 is_stmt 1
 1322 0040 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1323              	.LVL161:
 954:../src/FreeRTOS/queue.c **** 	{
 1324              		.loc 1 954 0
 1325 0044 FEFFFFEB 		bl	ulPortSetInterruptMask
 1326              	.LVL162:
 1327 0048 0080A0E1 		mov	r8, r0
 1328              	.LVL163:
 956:../src/FreeRTOS/queue.c **** 		{
 1329              		.loc 1 956 0
 1330 004c 382094E5 		ldr	r2, [r4, #56]
 1331 0050 3C3094E5 		ldr	r3, [r4, #60]
 1332 0054 030052E1 		cmp	r2, r3
 1333 0058 1F00003A 		bcc	.L141
 956:../src/FreeRTOS/queue.c **** 		{
 1334              		.loc 1 956 0 is_stmt 0 discriminator 1
 1335 005c 020056E3 		cmp	r6, #2
 1336 0060 1D00000A 		beq	.L141
1065:../src/FreeRTOS/queue.c **** 		}
 1337              		.loc 1 1065 0 is_stmt 1
 1338 0064 0040A0E3 		mov	r4, #0
 1339              	.LVL164:
 1340              	.L142:
1068:../src/FreeRTOS/queue.c **** 
 1341              		.loc 1 1068 0
 1342 0068 0800A0E1 		mov	r0, r8
 1343 006c FEFFFFEB 		bl	vPortClearInterruptMask
 1344              	.LVL165:
1071:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1345              		.loc 1 1071 0
 1346 0070 0400A0E1 		mov	r0, r4
 1347 0074 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1348              	.LVL166:
 1349              	.L153:
 929:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1350              		.loc 1 929 0 discriminator 1
 1351 0078 A11300E3 		movw	r1, #929
 1352              	.LVL167:
 1353 007c 000000E3 		movw	r0, #:lower16:.LC0
 1354              	.LVL168:
 1355 0080 000040E3 		movt	r0, #:upper16:.LC0
 1356 0084 FEFFFFEB 		bl	R_OS_AssertCalled
 1357              	.LVL169:
 1358 0088 E2FFFFEA 		b	.L136
 1359              	.L154:
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1360              		.loc 1 930 0 discriminator 2
 1361 008c 403094E5 		ldr	r3, [r4, #64]
 1362 0090 000053E3 		cmp	r3, #0
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1363              		.loc 1 930 0 is_stmt 0
 1364 0094 0130A003 		moveq	r3, #1
 1365 0098 E1FFFF0A 		beq	.L137
 1366              	.L145:
 1367 009c 0030A0E3 		mov	r3, #0
 1368 00a0 DFFFFFEA 		b	.L137
 1369              	.L155:
 930:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1370              		.loc 1 930 0 discriminator 7
 1371 00a4 A21300E3 		movw	r1, #930
 1372 00a8 000000E3 		movw	r0, #:lower16:.LC0
 1373 00ac 000040E3 		movt	r0, #:upper16:.LC0
 1374 00b0 FEFFFFEB 		bl	R_OS_AssertCalled
 1375              	.LVL170:
 1376 00b4 DCFFFFEA 		b	.L138
 1377              	.L156:
 931:../src/FreeRTOS/queue.c **** 
 1378              		.loc 1 931 0 is_stmt 1 discriminator 2
 1379 00b8 3C3094E5 		ldr	r3, [r4, #60]
 1380 00bc 010053E3 		cmp	r3, #1
 931:../src/FreeRTOS/queue.c **** 
 1381              		.loc 1 931 0 is_stmt 0
 1382 00c0 0030A013 		movne	r3, #0
 1383 00c4 DBFFFFEA 		b	.L139
 1384              	.L157:
 931:../src/FreeRTOS/queue.c **** 
 1385              		.loc 1 931 0 discriminator 7
 1386 00c8 A31300E3 		movw	r1, #931
 1387 00cc 000000E3 		movw	r0, #:lower16:.LC0
 1388 00d0 000040E3 		movt	r0, #:upper16:.LC0
 1389 00d4 FEFFFFEB 		bl	R_OS_AssertCalled
 1390              	.LVL171:
 1391 00d8 D8FFFFEA 		b	.L140
 1392              	.LVL172:
 1393              	.L141:
 1394              	.LBB4:
 958:../src/FreeRTOS/queue.c **** 
 1395              		.loc 1 958 0 is_stmt 1
 1396 00dc 4550D4E5 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1397 00e0 7550AFE6 		sxtb	r5, r5
 1398              	.LVL173:
 967:../src/FreeRTOS/queue.c **** 
 1399              		.loc 1 967 0
 1400 00e4 0620A0E1 		mov	r2, r6
 1401 00e8 0710A0E1 		mov	r1, r7
 1402 00ec 0400A0E1 		mov	r0, r4
 1403              	.LVL174:
 1404 00f0 FEFFFFEB 		bl	prvCopyDataToQueue
 1405              	.LVL175:
 971:../src/FreeRTOS/queue.c **** 			{
 1406              		.loc 1 971 0
 1407 00f4 010075E3 		cmn	r5, #1
 1408 00f8 0400000A 		beq	.L158
1057:../src/FreeRTOS/queue.c **** 			}
 1409              		.loc 1 1057 0
 1410 00fc 015085E2 		add	r5, r5, #1
 1411              	.LVL176:
 1412 0100 7550AFE6 		sxtb	r5, r5
 1413              	.LVL177:
 1414 0104 4550C4E5 		strb	r5, [r4, #69]
1060:../src/FreeRTOS/queue.c **** 		}
 1415              		.loc 1 1060 0
 1416 0108 0140A0E3 		mov	r4, #1
 1417              	.LVL178:
 1418 010c D5FFFFEA 		b	.L142
 1419              	.LVL179:
 1420              	.L158:
1026:../src/FreeRTOS/queue.c **** 					{
 1421              		.loc 1 1026 0
 1422 0110 243094E5 		ldr	r3, [r4, #36]
 1423 0114 000053E3 		cmp	r3, #0
1060:../src/FreeRTOS/queue.c **** 		}
 1424              		.loc 1 1060 0
 1425 0118 0140A003 		moveq	r4, #1
 1426              	.LVL180:
 1427 011c D1FFFF0A 		beq	.L142
 1428              	.LVL181:
 1429              	.L159:
1028:../src/FreeRTOS/queue.c **** 						{
 1430              		.loc 1 1028 0
 1431 0120 240084E2 		add	r0, r4, #36
 1432 0124 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1433              	.LVL182:
 1434 0128 000050E3 		cmp	r0, #0
 1435 012c 0400000A 		beq	.L150
1032:../src/FreeRTOS/queue.c **** 							{
 1436              		.loc 1 1032 0
 1437 0130 000059E3 		cmp	r9, #0
 1438 0134 0400000A 		beq	.L151
1034:../src/FreeRTOS/queue.c **** 							}
 1439              		.loc 1 1034 0
 1440 0138 0140A0E3 		mov	r4, #1
 1441              	.LVL183:
 1442 013c 004089E5 		str	r4, [r9]
 1443 0140 C8FFFFEA 		b	.L142
 1444              	.LVL184:
 1445              	.L150:
1060:../src/FreeRTOS/queue.c **** 		}
 1446              		.loc 1 1060 0
 1447 0144 0140A0E3 		mov	r4, #1
 1448              	.LVL185:
 1449 0148 C6FFFFEA 		b	.L142
 1450              	.LVL186:
 1451              	.L151:
 1452 014c 0140A0E3 		mov	r4, #1
 1453              	.LVL187:
 1454 0150 C4FFFFEA 		b	.L142
 1455              	.LBE4:
 1456              		.cfi_endproc
 1457              	.LFE11:
 1459              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1460              		.align	2
 1461              		.global	xQueueGiveFromISR
 1462              		.syntax unified
 1463              		.arm
 1464              		.fpu neon
 1466              	xQueueGiveFromISR:
 1467              	.LFB12:
1075:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 1468              		.loc 1 1075 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              	.LVL188:
 1473 0000 70402DE9 		push	{r4, r5, r6, lr}
 1474              		.cfi_def_cfa_offset 16
 1475              		.cfi_offset 4, -16
 1476              		.cfi_offset 5, -12
 1477              		.cfi_offset 6, -8
 1478              		.cfi_offset 14, -4
 1479 0004 0160A0E1 		mov	r6, r1
 1480              	.LVL189:
1086:../src/FreeRTOS/queue.c **** 
 1481              		.loc 1 1086 0
 1482 0008 004050E2 		subs	r4, r0, #0
 1483 000c 1D00000A 		beq	.L174
 1484              	.LVL190:
 1485              	.L161:
1090:../src/FreeRTOS/queue.c **** 
 1486              		.loc 1 1090 0
 1487 0010 403094E5 		ldr	r3, [r4, #64]
 1488 0014 000053E3 		cmp	r3, #0
 1489 0018 1F00001A 		bne	.L175
 1490              	.L162:
1095:../src/FreeRTOS/queue.c **** 
 1491              		.loc 1 1095 0
 1492 001c 003094E5 		ldr	r3, [r4]
 1493 0020 000053E3 		cmp	r3, #0
 1494 0024 2100000A 		beq	.L176
 1495 0028 0130A0E3 		mov	r3, #1
 1496              	.L163:
1095:../src/FreeRTOS/queue.c **** 
 1497              		.loc 1 1095 0 is_stmt 0 discriminator 6
 1498 002c 000053E3 		cmp	r3, #0
 1499 0030 2400000A 		beq	.L177
 1500              	.L164:
1111:../src/FreeRTOS/queue.c **** 
 1501              		.loc 1 1111 0 is_stmt 1
 1502 0034 FEFFFFEB 		bl	vPortValidateInterruptPriority
 1503              	.LVL191:
1113:../src/FreeRTOS/queue.c **** 	{
 1504              		.loc 1 1113 0
 1505 0038 FEFFFFEB 		bl	ulPortSetInterruptMask
 1506              	.LVL192:
 1507 003c 0050A0E1 		mov	r5, r0
 1508              	.LVL193:
 1509              	.LBB5:
1115:../src/FreeRTOS/queue.c **** 
 1510              		.loc 1 1115 0
 1511 0040 382094E5 		ldr	r2, [r4, #56]
 1512              	.LVL194:
1120:../src/FreeRTOS/queue.c **** 		{
 1513              		.loc 1 1120 0
 1514 0044 3C3094E5 		ldr	r3, [r4, #60]
 1515 0048 030052E1 		cmp	r2, r3
 1516 004c 2F00002A 		bcs	.L169
 1517              	.LBB6:
1122:../src/FreeRTOS/queue.c **** 
 1518              		.loc 1 1122 0
 1519 0050 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1520 0054 7330AFE6 		sxtb	r3, r3
 1521              	.LVL195:
1132:../src/FreeRTOS/queue.c **** 
 1522              		.loc 1 1132 0
 1523 0058 012082E2 		add	r2, r2, #1
 1524              	.LVL196:
 1525 005c 382084E5 		str	r2, [r4, #56]
1136:../src/FreeRTOS/queue.c **** 			{
 1526              		.loc 1 1136 0
 1527 0060 010073E3 		cmn	r3, #1
 1528 0064 1C00000A 		beq	.L178
1222:../src/FreeRTOS/queue.c **** 			}
 1529              		.loc 1 1222 0
 1530 0068 013083E2 		add	r3, r3, #1
 1531              	.LVL197:
 1532 006c 7330AFE6 		sxtb	r3, r3
 1533              	.LVL198:
 1534 0070 4530C4E5 		strb	r3, [r4, #69]
1225:../src/FreeRTOS/queue.c **** 		}
 1535              		.loc 1 1225 0
 1536 0074 0140A0E3 		mov	r4, #1
 1537              	.LVL199:
 1538              	.L165:
 1539              	.LBE6:
 1540              	.LBE5:
1233:../src/FreeRTOS/queue.c **** 
 1541              		.loc 1 1233 0
 1542 0078 0500A0E1 		mov	r0, r5
 1543 007c FEFFFFEB 		bl	vPortClearInterruptMask
 1544              	.LVL200:
1236:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1545              		.loc 1 1236 0
 1546 0080 0400A0E1 		mov	r0, r4
 1547 0084 7080BDE8 		pop	{r4, r5, r6, pc}
 1548              	.LVL201:
 1549              	.L174:
1086:../src/FreeRTOS/queue.c **** 
 1550              		.loc 1 1086 0 discriminator 1
 1551 0088 3E1400E3 		movw	r1, #1086
 1552              	.LVL202:
 1553 008c 000000E3 		movw	r0, #:lower16:.LC0
 1554              	.LVL203:
 1555 0090 000040E3 		movt	r0, #:upper16:.LC0
 1556 0094 FEFFFFEB 		bl	R_OS_AssertCalled
 1557              	.LVL204:
 1558 0098 DCFFFFEA 		b	.L161
 1559              	.L175:
1090:../src/FreeRTOS/queue.c **** 
 1560              		.loc 1 1090 0 discriminator 1
 1561 009c 421400E3 		movw	r1, #1090
 1562 00a0 000000E3 		movw	r0, #:lower16:.LC0
 1563 00a4 000040E3 		movt	r0, #:upper16:.LC0
 1564 00a8 FEFFFFEB 		bl	R_OS_AssertCalled
 1565              	.LVL205:
 1566 00ac DAFFFFEA 		b	.L162
 1567              	.L176:
1095:../src/FreeRTOS/queue.c **** 
 1568              		.loc 1 1095 0 discriminator 2
 1569 00b0 043094E5 		ldr	r3, [r4, #4]
 1570 00b4 000053E3 		cmp	r3, #0
1095:../src/FreeRTOS/queue.c **** 
 1571              		.loc 1 1095 0 is_stmt 0
 1572 00b8 0030A013 		movne	r3, #0
 1573 00bc DAFFFF1A 		bne	.L163
 1574              	.L179:
 1575 00c0 0130A0E3 		mov	r3, #1
 1576 00c4 D8FFFFEA 		b	.L163
 1577              	.L177:
1095:../src/FreeRTOS/queue.c **** 
 1578              		.loc 1 1095 0 discriminator 7
 1579 00c8 471400E3 		movw	r1, #1095
 1580 00cc 000000E3 		movw	r0, #:lower16:.LC0
 1581 00d0 000040E3 		movt	r0, #:upper16:.LC0
 1582 00d4 FEFFFFEB 		bl	R_OS_AssertCalled
 1583              	.LVL206:
 1584 00d8 D5FFFFEA 		b	.L164
 1585              	.LVL207:
 1586              	.L178:
 1587              	.LBB9:
 1588              	.LBB7:
1191:../src/FreeRTOS/queue.c **** 					{
 1589              		.loc 1 1191 0 is_stmt 1
 1590 00dc 243094E5 		ldr	r3, [r4, #36]
 1591              	.LVL208:
 1592 00e0 000053E3 		cmp	r3, #0
1225:../src/FreeRTOS/queue.c **** 		}
 1593              		.loc 1 1225 0
 1594 00e4 0140A003 		moveq	r4, #1
 1595              	.LVL209:
 1596 00e8 E2FFFF0A 		beq	.L165
 1597              	.LVL210:
 1598              	.L180:
1193:../src/FreeRTOS/queue.c **** 						{
 1599              		.loc 1 1193 0
 1600 00ec 240084E2 		add	r0, r4, #36
 1601              	.LVL211:
 1602 00f0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1603              	.LVL212:
 1604 00f4 000050E3 		cmp	r0, #0
 1605 00f8 0600000A 		beq	.L171
1197:../src/FreeRTOS/queue.c **** 							{
 1606              		.loc 1 1197 0
 1607 00fc 000056E3 		cmp	r6, #0
 1608 0100 0600000A 		beq	.L172
1199:../src/FreeRTOS/queue.c **** 							}
 1609              		.loc 1 1199 0
 1610 0104 0140A0E3 		mov	r4, #1
 1611              	.LVL213:
 1612 0108 004086E5 		str	r4, [r6]
 1613 010c D9FFFFEA 		b	.L165
 1614              	.LVL214:
 1615              	.L169:
 1616              	.LBE7:
1230:../src/FreeRTOS/queue.c **** 		}
 1617              		.loc 1 1230 0
 1618 0110 0040A0E3 		mov	r4, #0
 1619              	.LVL215:
 1620 0114 D7FFFFEA 		b	.L165
 1621              	.LVL216:
 1622              	.L171:
 1623              	.LBB8:
1225:../src/FreeRTOS/queue.c **** 		}
 1624              		.loc 1 1225 0
 1625 0118 0140A0E3 		mov	r4, #1
 1626              	.LVL217:
 1627 011c D5FFFFEA 		b	.L165
 1628              	.LVL218:
 1629              	.L172:
 1630 0120 0140A0E3 		mov	r4, #1
 1631              	.LVL219:
 1632 0124 D3FFFFEA 		b	.L165
 1633              	.LBE8:
 1634              	.LBE9:
 1635              		.cfi_endproc
 1636              	.LFE12:
 1638              		.section	.text.xQueueReceive,"ax",%progbits
 1639              		.align	2
 1640              		.global	xQueueReceive
 1641              		.syntax unified
 1642              		.arm
 1643              		.fpu neon
 1645              	xQueueReceive:
 1646              	.LFB13:
1240:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1647              		.loc 1 1240 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 16
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 1651              	.LVL220:
 1652 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 1653              		.cfi_def_cfa_offset 20
 1654              		.cfi_offset 4, -20
 1655              		.cfi_offset 5, -16
 1656              		.cfi_offset 6, -12
 1657              		.cfi_offset 7, -8
 1658              		.cfi_offset 14, -4
 1659 0004 14D04DE2 		sub	sp, sp, #20
 1660              		.cfi_def_cfa_offset 40
 1661 0008 0170A0E1 		mov	r7, r1
 1662 000c 04208DE5 		str	r2, [sp, #4]
 1663              	.LVL221:
1246:../src/FreeRTOS/queue.c **** 
 1664              		.loc 1 1246 0
 1665 0010 004050E2 		subs	r4, r0, #0
 1666 0014 0C00000A 		beq	.L203
 1667              	.LVL222:
 1668              	.L182:
1250:../src/FreeRTOS/queue.c **** 
 1669              		.loc 1 1250 0
 1670 0018 000057E3 		cmp	r7, #0
 1671 001c 0F00000A 		beq	.L204
 1672 0020 0130A0E3 		mov	r3, #1
 1673              	.L183:
1250:../src/FreeRTOS/queue.c **** 
 1674              		.loc 1 1250 0 is_stmt 0 discriminator 6
 1675 0024 000053E3 		cmp	r3, #0
 1676 0028 1200000A 		beq	.L205
 1677              	.L184:
1255:../src/FreeRTOS/queue.c **** 	}
 1678              		.loc 1 1255 0 is_stmt 1
 1679 002c FEFFFFEB 		bl	xTaskGetSchedulerState
 1680              	.LVL223:
 1681 0030 000050E3 		cmp	r0, #0
 1682 0034 1400001A 		bne	.L200
1255:../src/FreeRTOS/queue.c **** 	}
 1683              		.loc 1 1255 0 is_stmt 0 discriminator 2
 1684 0038 04309DE5 		ldr	r3, [sp, #4]
 1685 003c 000053E3 		cmp	r3, #0
 1686 0040 1600001A 		bne	.L201
1255:../src/FreeRTOS/queue.c **** 	}
 1687              		.loc 1 1255 0
 1688 0044 0130A0E3 		mov	r3, #1
 1689 0048 100000EA 		b	.L185
 1690              	.LVL224:
 1691              	.L203:
1246:../src/FreeRTOS/queue.c **** 
 1692              		.loc 1 1246 0 is_stmt 1 discriminator 1
 1693 004c DE1400E3 		movw	r1, #1246
 1694              	.LVL225:
 1695 0050 000000E3 		movw	r0, #:lower16:.LC0
 1696              	.LVL226:
 1697 0054 000040E3 		movt	r0, #:upper16:.LC0
 1698 0058 FEFFFFEB 		bl	R_OS_AssertCalled
 1699              	.LVL227:
 1700 005c EDFFFFEA 		b	.L182
 1701              	.L204:
1250:../src/FreeRTOS/queue.c **** 
 1702              		.loc 1 1250 0 discriminator 2
 1703 0060 403094E5 		ldr	r3, [r4, #64]
 1704 0064 000053E3 		cmp	r3, #0
1250:../src/FreeRTOS/queue.c **** 
 1705              		.loc 1 1250 0 is_stmt 0
 1706 0068 0130A003 		moveq	r3, #1
 1707 006c ECFFFF0A 		beq	.L183
 1708              	.L199:
 1709 0070 0030A0E3 		mov	r3, #0
 1710 0074 EAFFFFEA 		b	.L183
 1711              	.L205:
1250:../src/FreeRTOS/queue.c **** 
 1712              		.loc 1 1250 0 discriminator 7
 1713 0078 E21400E3 		movw	r1, #1250
 1714 007c 000000E3 		movw	r0, #:lower16:.LC0
 1715 0080 000040E3 		movt	r0, #:upper16:.LC0
 1716 0084 FEFFFFEB 		bl	R_OS_AssertCalled
 1717              	.LVL228:
 1718 0088 E7FFFFEA 		b	.L184
 1719              	.L200:
1255:../src/FreeRTOS/queue.c **** 	}
 1720              		.loc 1 1255 0 is_stmt 1
 1721 008c 0130A0E3 		mov	r3, #1
 1722              	.L185:
1255:../src/FreeRTOS/queue.c **** 	}
 1723              		.loc 1 1255 0 is_stmt 0 discriminator 6
 1724 0090 000053E3 		cmp	r3, #0
 1725 0094 0300000A 		beq	.L206
 1726              	.L186:
1255:../src/FreeRTOS/queue.c **** 	}
 1727              		.loc 1 1255 0
 1728 0098 0060A0E3 		mov	r6, #0
 1729 009c 300000EA 		b	.L187
 1730              	.L201:
 1731 00a0 0030A0E3 		mov	r3, #0
 1732 00a4 F9FFFFEA 		b	.L185
 1733              	.L206:
1255:../src/FreeRTOS/queue.c **** 	}
 1734              		.loc 1 1255 0 discriminator 7
 1735 00a8 E71400E3 		movw	r1, #1255
 1736 00ac 000000E3 		movw	r0, #:lower16:.LC0
 1737 00b0 000040E3 		movt	r0, #:upper16:.LC0
 1738 00b4 FEFFFFEB 		bl	R_OS_AssertCalled
 1739              	.LVL229:
 1740 00b8 F6FFFFEA 		b	.L186
 1741              	.LVL230:
 1742              	.L209:
 1743              	.LBB10:
1275:../src/FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1744              		.loc 1 1275 0 is_stmt 1
 1745 00bc 0710A0E1 		mov	r1, r7
 1746 00c0 0400A0E1 		mov	r0, r4
 1747 00c4 FEFFFFEB 		bl	prvCopyDataFromQueue
 1748              	.LVL231:
1277:../src/FreeRTOS/queue.c **** 
 1749              		.loc 1 1277 0
 1750 00c8 015045E2 		sub	r5, r5, #1
 1751              	.LVL232:
 1752 00cc 385084E5 		str	r5, [r4, #56]
1282:../src/FreeRTOS/queue.c **** 				{
 1753              		.loc 1 1282 0
 1754 00d0 103094E5 		ldr	r3, [r4, #16]
 1755 00d4 000053E3 		cmp	r3, #0
 1756 00d8 0300001A 		bne	.L207
 1757              	.L189:
1298:../src/FreeRTOS/queue.c **** 				return pdPASS;
 1758              		.loc 1 1298 0
 1759 00dc FEFFFFEB 		bl	vPortExitCritical
 1760              	.LVL233:
1299:../src/FreeRTOS/queue.c **** 			}
 1761              		.loc 1 1299 0
 1762 00e0 0100A0E3 		mov	r0, #1
 1763              	.LVL234:
 1764              	.L181:
 1765              	.LBE10:
1378:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1766              		.loc 1 1378 0
 1767 00e4 14D08DE2 		add	sp, sp, #20
 1768              		.cfi_remember_state
 1769              		.cfi_def_cfa_offset 20
 1770              		@ sp needed
 1771 00e8 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 1772              	.LVL235:
 1773              	.L207:
 1774              		.cfi_restore_state
 1775              	.LBB11:
1284:../src/FreeRTOS/queue.c **** 					{
 1776              		.loc 1 1284 0
 1777 00ec 100084E2 		add	r0, r4, #16
 1778 00f0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 1779              	.LVL236:
 1780 00f4 000050E3 		cmp	r0, #0
 1781 00f8 F7FFFF0A 		beq	.L189
1286:../src/FreeRTOS/queue.c **** 					}
 1782              		.loc 1 1286 0
 1783              		.syntax divided
 1784              	@ 1286 "../src/FreeRTOS/queue.c" 1
 1785 00fc 000000EF 		SWI 0
 1786              	@ 0 "" 2
 1787              		.arm
 1788              		.syntax unified
 1789 0100 F5FFFFEA 		b	.L189
 1790              	.LVL237:
 1791              	.L210:
1307:../src/FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1792              		.loc 1 1307 0
 1793 0104 FEFFFFEB 		bl	vPortExitCritical
 1794              	.LVL238:
1309:../src/FreeRTOS/queue.c **** 				}
 1795              		.loc 1 1309 0
 1796 0108 0000A0E3 		mov	r0, #0
 1797 010c F4FFFFEA 		b	.L181
 1798              	.L211:
1315:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1799              		.loc 1 1315 0
 1800 0110 08008DE2 		add	r0, sp, #8
 1801 0114 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 1802              	.LVL239:
1316:../src/FreeRTOS/queue.c **** 				}
 1803              		.loc 1 1316 0
 1804 0118 0160A0E3 		mov	r6, #1
 1805 011c 190000EA 		b	.L192
 1806              	.LVL240:
 1807              	.L212:
 1808              	.LBE11:
1331:../src/FreeRTOS/queue.c **** 
 1809              		.loc 1 1331 0 discriminator 1
 1810 0120 0030A0E3 		mov	r3, #0
 1811 0124 4430C4E5 		strb	r3, [r4, #68]
 1812 0128 1D0000EA 		b	.L193
 1813              	.L213:
1331:../src/FreeRTOS/queue.c **** 
 1814              		.loc 1 1331 0 is_stmt 0 discriminator 4
 1815 012c 0030A0E3 		mov	r3, #0
 1816 0130 4530C4E5 		strb	r3, [r4, #69]
 1817 0134 1E0000EA 		b	.L194
 1818              	.L196:
1356:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1819              		.loc 1 1356 0 is_stmt 1
 1820 0138 0400A0E1 		mov	r0, r4
 1821 013c FEFFFFEB 		bl	prvUnlockQueue
 1822              	.LVL241:
1357:../src/FreeRTOS/queue.c **** 			}
 1823              		.loc 1 1357 0
 1824 0140 FEFFFFEB 		bl	xTaskResumeAll
 1825              	.LVL242:
 1826 0144 060000EA 		b	.L187
 1827              	.L195:
1364:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1828              		.loc 1 1364 0
 1829 0148 0400A0E1 		mov	r0, r4
 1830 014c FEFFFFEB 		bl	prvUnlockQueue
 1831              	.LVL243:
1365:../src/FreeRTOS/queue.c **** 
 1832              		.loc 1 1365 0
 1833 0150 FEFFFFEB 		bl	xTaskResumeAll
 1834              	.LVL244:
1367:../src/FreeRTOS/queue.c **** 			{
 1835              		.loc 1 1367 0
 1836 0154 0400A0E1 		mov	r0, r4
 1837 0158 FEFFFFEB 		bl	prvIsQueueEmpty
 1838              	.LVL245:
 1839 015c 000050E3 		cmp	r0, #0
 1840 0160 2700001A 		bne	.L208
 1841              	.LVL246:
 1842              	.L187:
1266:../src/FreeRTOS/queue.c **** 		{
 1843              		.loc 1 1266 0
 1844 0164 FEFFFFEB 		bl	vPortEnterCritical
 1845              	.LVL247:
 1846              	.LBB12:
1268:../src/FreeRTOS/queue.c **** 
 1847              		.loc 1 1268 0
 1848 0168 385094E5 		ldr	r5, [r4, #56]
 1849              	.LVL248:
1272:../src/FreeRTOS/queue.c **** 			{
 1850              		.loc 1 1272 0
 1851 016c 000055E3 		cmp	r5, #0
 1852 0170 D1FFFF1A 		bne	.L209
1303:../src/FreeRTOS/queue.c **** 				{
 1853              		.loc 1 1303 0
 1854 0174 04309DE5 		ldr	r3, [sp, #4]
 1855 0178 000053E3 		cmp	r3, #0
 1856 017c E0FFFF0A 		beq	.L210
1311:../src/FreeRTOS/queue.c **** 				{
 1857              		.loc 1 1311 0
 1858 0180 000056E3 		cmp	r6, #0
 1859 0184 E1FFFF0A 		beq	.L211
 1860              	.LVL249:
 1861              	.L192:
 1862              	.LBE12:
1325:../src/FreeRTOS/queue.c **** 
 1863              		.loc 1 1325 0
 1864 0188 FEFFFFEB 		bl	vPortExitCritical
 1865              	.LVL250:
1330:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1866              		.loc 1 1330 0
 1867 018c FEFFFFEB 		bl	vTaskSuspendAll
 1868              	.LVL251:
1331:../src/FreeRTOS/queue.c **** 
 1869              		.loc 1 1331 0
 1870 0190 FEFFFFEB 		bl	vPortEnterCritical
 1871              	.LVL252:
 1872 0194 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1873 0198 7330AFE6 		sxtb	r3, r3
 1874 019c 010073E3 		cmn	r3, #1
 1875 01a0 DEFFFF0A 		beq	.L212
 1876              	.L193:
1331:../src/FreeRTOS/queue.c **** 
 1877              		.loc 1 1331 0 is_stmt 0 discriminator 3
 1878 01a4 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1879 01a8 7330AFE6 		sxtb	r3, r3
 1880 01ac 010073E3 		cmn	r3, #1
 1881 01b0 DDFFFF0A 		beq	.L213
 1882              	.L194:
1331:../src/FreeRTOS/queue.c **** 
 1883              		.loc 1 1331 0 discriminator 6
 1884 01b4 FEFFFFEB 		bl	vPortExitCritical
 1885              	.LVL253:
1334:../src/FreeRTOS/queue.c **** 		{
 1886              		.loc 1 1334 0 is_stmt 1 discriminator 6
 1887 01b8 04108DE2 		add	r1, sp, #4
 1888 01bc 08008DE2 		add	r0, sp, #8
 1889 01c0 FEFFFFEB 		bl	xTaskCheckForTimeOut
 1890              	.LVL254:
 1891 01c4 000050E3 		cmp	r0, #0
 1892 01c8 DEFFFF1A 		bne	.L195
1338:../src/FreeRTOS/queue.c **** 			{
 1893              		.loc 1 1338 0
 1894 01cc 0400A0E1 		mov	r0, r4
 1895 01d0 FEFFFFEB 		bl	prvIsQueueEmpty
 1896              	.LVL255:
 1897 01d4 000050E3 		cmp	r0, #0
 1898 01d8 D6FFFF0A 		beq	.L196
1341:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1899              		.loc 1 1341 0
 1900 01dc 04109DE5 		ldr	r1, [sp, #4]
 1901 01e0 240084E2 		add	r0, r4, #36
 1902 01e4 FEFFFFEB 		bl	vTaskPlaceOnEventList
 1903              	.LVL256:
1342:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1904              		.loc 1 1342 0
 1905 01e8 0400A0E1 		mov	r0, r4
 1906 01ec FEFFFFEB 		bl	prvUnlockQueue
 1907              	.LVL257:
1343:../src/FreeRTOS/queue.c **** 				{
 1908              		.loc 1 1343 0
 1909 01f0 FEFFFFEB 		bl	xTaskResumeAll
 1910              	.LVL258:
 1911 01f4 000050E3 		cmp	r0, #0
 1912 01f8 D9FFFF1A 		bne	.L187
1345:../src/FreeRTOS/queue.c **** 				}
 1913              		.loc 1 1345 0
 1914              		.syntax divided
 1915              	@ 1345 "../src/FreeRTOS/queue.c" 1
 1916 01fc 000000EF 		SWI 0
 1917              	@ 0 "" 2
 1918              		.arm
 1919              		.syntax unified
 1920 0200 D7FFFFEA 		b	.L187
 1921              	.L208:
1370:../src/FreeRTOS/queue.c **** 			}
 1922              		.loc 1 1370 0
 1923 0204 0000A0E3 		mov	r0, #0
 1924 0208 B5FFFFEA 		b	.L181
 1925              		.cfi_endproc
 1926              	.LFE13:
 1928              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1929              		.align	2
 1930              		.global	xQueueSemaphoreTake
 1931              		.syntax unified
 1932              		.arm
 1933              		.fpu neon
 1935              	xQueueSemaphoreTake:
 1936              	.LFB14:
1382:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1937              		.loc 1 1382 0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 16
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 1941              	.LVL259:
 1942 0000 70402DE9 		push	{r4, r5, r6, lr}
 1943              		.cfi_def_cfa_offset 16
 1944              		.cfi_offset 4, -16
 1945              		.cfi_offset 5, -12
 1946              		.cfi_offset 6, -8
 1947              		.cfi_offset 14, -4
 1948 0004 10D04DE2 		sub	sp, sp, #16
 1949              		.cfi_def_cfa_offset 32
 1950 0008 04108DE5 		str	r1, [sp, #4]
 1951              	.LVL260:
1392:../src/FreeRTOS/queue.c **** 
 1952              		.loc 1 1392 0
 1953 000c 004050E2 		subs	r4, r0, #0
 1954 0010 0A00000A 		beq	.L236
 1955              	.LVL261:
 1956              	.L215:
1396:../src/FreeRTOS/queue.c **** 
 1957              		.loc 1 1396 0
 1958 0014 403094E5 		ldr	r3, [r4, #64]
 1959 0018 000053E3 		cmp	r3, #0
 1960 001c 0C00001A 		bne	.L237
 1961              	.L216:
1401:../src/FreeRTOS/queue.c **** 	}
 1962              		.loc 1 1401 0
 1963 0020 FEFFFFEB 		bl	xTaskGetSchedulerState
 1964              	.LVL262:
 1965 0024 000050E3 		cmp	r0, #0
 1966 0028 0E00001A 		bne	.L233
1401:../src/FreeRTOS/queue.c **** 	}
 1967              		.loc 1 1401 0 is_stmt 0 discriminator 2
 1968 002c 04309DE5 		ldr	r3, [sp, #4]
 1969 0030 000053E3 		cmp	r3, #0
 1970 0034 1100001A 		bne	.L234
1401:../src/FreeRTOS/queue.c **** 	}
 1971              		.loc 1 1401 0
 1972 0038 0130A0E3 		mov	r3, #1
 1973 003c 0A0000EA 		b	.L217
 1974              	.LVL263:
 1975              	.L236:
1392:../src/FreeRTOS/queue.c **** 
 1976              		.loc 1 1392 0 is_stmt 1 discriminator 1
 1977 0040 571EA0E3 		mov	r1, #1392
 1978              	.LVL264:
 1979 0044 000000E3 		movw	r0, #:lower16:.LC0
 1980              	.LVL265:
 1981 0048 000040E3 		movt	r0, #:upper16:.LC0
 1982 004c FEFFFFEB 		bl	R_OS_AssertCalled
 1983              	.LVL266:
 1984 0050 EFFFFFEA 		b	.L215
 1985              	.L237:
1396:../src/FreeRTOS/queue.c **** 
 1986              		.loc 1 1396 0 discriminator 1
 1987 0054 741500E3 		movw	r1, #1396
 1988 0058 000000E3 		movw	r0, #:lower16:.LC0
 1989 005c 000040E3 		movt	r0, #:upper16:.LC0
 1990 0060 FEFFFFEB 		bl	R_OS_AssertCalled
 1991              	.LVL267:
 1992 0064 EDFFFFEA 		b	.L216
 1993              	.L233:
1401:../src/FreeRTOS/queue.c **** 	}
 1994              		.loc 1 1401 0
 1995 0068 0130A0E3 		mov	r3, #1
 1996              	.L217:
1401:../src/FreeRTOS/queue.c **** 	}
 1997              		.loc 1 1401 0 is_stmt 0 discriminator 6
 1998 006c 000053E3 		cmp	r3, #0
 1999 0070 0400000A 		beq	.L238
 2000              	.L218:
1401:../src/FreeRTOS/queue.c **** 	}
 2001              		.loc 1 1401 0
 2002 0074 0060A0E3 		mov	r6, #0
 2003 0078 0650A0E1 		mov	r5, r6
 2004 007c 410000EA 		b	.L219
 2005              	.L234:
 2006 0080 0030A0E3 		mov	r3, #0
 2007 0084 F8FFFFEA 		b	.L217
 2008              	.L238:
1401:../src/FreeRTOS/queue.c **** 	}
 2009              		.loc 1 1401 0 discriminator 7
 2010 0088 791500E3 		movw	r1, #1401
 2011 008c 000000E3 		movw	r0, #:lower16:.LC0
 2012 0090 000040E3 		movt	r0, #:upper16:.LC0
 2013 0094 FEFFFFEB 		bl	R_OS_AssertCalled
 2014              	.LVL268:
 2015 0098 F5FFFFEA 		b	.L218
 2016              	.LVL269:
 2017              	.L243:
 2018              	.LBB13:
1426:../src/FreeRTOS/queue.c **** 
 2019              		.loc 1 1426 0 is_stmt 1
 2020 009c 013043E2 		sub	r3, r3, #1
 2021              	.LVL270:
 2022 00a0 383084E5 		str	r3, [r4, #56]
1430:../src/FreeRTOS/queue.c **** 					{
 2023              		.loc 1 1430 0
 2024 00a4 003094E5 		ldr	r3, [r4]
 2025              	.LVL271:
 2026 00a8 000053E3 		cmp	r3, #0
 2027 00ac 0700000A 		beq	.L239
 2028              	.LVL272:
 2029              	.L221:
1445:../src/FreeRTOS/queue.c **** 				{
 2030              		.loc 1 1445 0
 2031 00b0 103094E5 		ldr	r3, [r4, #16]
 2032 00b4 000053E3 		cmp	r3, #0
 2033 00b8 0700001A 		bne	.L240
 2034              	.L222:
1461:../src/FreeRTOS/queue.c **** 				return pdPASS;
 2035              		.loc 1 1461 0
 2036 00bc FEFFFFEB 		bl	vPortExitCritical
 2037              	.LVL273:
1462:../src/FreeRTOS/queue.c **** 			}
 2038              		.loc 1 1462 0
 2039 00c0 0160A0E3 		mov	r6, #1
 2040              	.LVL274:
 2041              	.L214:
 2042              	.LBE13:
1597:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2043              		.loc 1 1597 0
 2044 00c4 0600A0E1 		mov	r0, r6
 2045 00c8 10D08DE2 		add	sp, sp, #16
 2046              		.cfi_remember_state
 2047              		.cfi_def_cfa_offset 16
 2048              		@ sp needed
 2049 00cc 7080BDE8 		pop	{r4, r5, r6, pc}
 2050              	.LVL275:
 2051              	.L239:
 2052              		.cfi_restore_state
 2053              	.LBB14:
1434:../src/FreeRTOS/queue.c **** 					}
 2054              		.loc 1 1434 0
 2055 00d0 FEFFFFEB 		bl	pvTaskIncrementMutexHeldCount
 2056              	.LVL276:
 2057 00d4 040084E5 		str	r0, [r4, #4]
 2058 00d8 F4FFFFEA 		b	.L221
 2059              	.L240:
1447:../src/FreeRTOS/queue.c **** 					{
 2060              		.loc 1 1447 0
 2061 00dc 100084E2 		add	r0, r4, #16
 2062 00e0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 2063              	.LVL277:
 2064 00e4 000050E3 		cmp	r0, #0
 2065 00e8 F3FFFF0A 		beq	.L222
1449:../src/FreeRTOS/queue.c **** 					}
 2066              		.loc 1 1449 0
 2067              		.syntax divided
 2068              	@ 1449 "../src/FreeRTOS/queue.c" 1
 2069 00ec 000000EF 		SWI 0
 2070              	@ 0 "" 2
 2071              		.arm
 2072              		.syntax unified
 2073 00f0 F1FFFFEA 		b	.L222
 2074              	.L244:
1473:../src/FreeRTOS/queue.c **** 					}
 2075              		.loc 1 1473 0
 2076 00f4 000056E3 		cmp	r6, #0
 2077 00f8 0200001A 		bne	.L241
 2078              	.L225:
1479:../src/FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2079              		.loc 1 1479 0
 2080 00fc FEFFFFEB 		bl	vPortExitCritical
 2081              	.LVL278:
1481:../src/FreeRTOS/queue.c **** 				}
 2082              		.loc 1 1481 0
 2083 0100 0060A0E3 		mov	r6, #0
 2084              	.LVL279:
 2085 0104 EEFFFFEA 		b	.L214
 2086              	.LVL280:
 2087              	.L241:
1473:../src/FreeRTOS/queue.c **** 					}
 2088              		.loc 1 1473 0 discriminator 1
 2089 0108 C11500E3 		movw	r1, #1473
 2090 010c 000000E3 		movw	r0, #:lower16:.LC0
 2091 0110 000040E3 		movt	r0, #:upper16:.LC0
 2092 0114 FEFFFFEB 		bl	R_OS_AssertCalled
 2093              	.LVL281:
 2094 0118 F7FFFFEA 		b	.L225
 2095              	.L245:
1487:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 2096              		.loc 1 1487 0
 2097 011c 08008DE2 		add	r0, sp, #8
 2098 0120 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 2099              	.LVL282:
1488:../src/FreeRTOS/queue.c **** 				}
 2100              		.loc 1 1488 0
 2101 0124 0150A0E3 		mov	r5, #1
 2102 0128 1F0000EA 		b	.L226
 2103              	.LVL283:
 2104              	.L246:
 2105              	.LBE14:
1503:../src/FreeRTOS/queue.c **** 
 2106              		.loc 1 1503 0 discriminator 1
 2107 012c 0030A0E3 		mov	r3, #0
 2108 0130 4430C4E5 		strb	r3, [r4, #68]
 2109 0134 230000EA 		b	.L227
 2110              	.L247:
1503:../src/FreeRTOS/queue.c **** 
 2111              		.loc 1 1503 0 is_stmt 0 discriminator 4
 2112 0138 0030A0E3 		mov	r3, #0
 2113 013c 4530C4E5 		strb	r3, [r4, #69]
 2114 0140 240000EA 		b	.L228
 2115              	.L248:
1520:../src/FreeRTOS/queue.c **** 						{
 2116              		.loc 1 1520 0 is_stmt 1
 2117 0144 FEFFFFEB 		bl	vPortEnterCritical
 2118              	.LVL284:
1522:../src/FreeRTOS/queue.c **** 						}
 2119              		.loc 1 1522 0
 2120 0148 040094E5 		ldr	r0, [r4, #4]
 2121 014c FEFFFFEB 		bl	xTaskPriorityInherit
 2122              	.LVL285:
 2123 0150 0060A0E1 		mov	r6, r0
 2124              	.LVL286:
1524:../src/FreeRTOS/queue.c **** 					}
 2125              		.loc 1 1524 0
 2126 0154 FEFFFFEB 		bl	vPortExitCritical
 2127              	.LVL287:
 2128 0158 2B0000EA 		b	.L231
 2129              	.L230:
1548:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 2130              		.loc 1 1548 0
 2131 015c 0400A0E1 		mov	r0, r4
 2132 0160 FEFFFFEB 		bl	prvUnlockQueue
 2133              	.LVL288:
1549:../src/FreeRTOS/queue.c **** 			}
 2134              		.loc 1 1549 0
 2135 0164 FEFFFFEB 		bl	xTaskResumeAll
 2136              	.LVL289:
 2137 0168 060000EA 		b	.L219
 2138              	.L229:
1555:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 2139              		.loc 1 1555 0
 2140 016c 0400A0E1 		mov	r0, r4
 2141 0170 FEFFFFEB 		bl	prvUnlockQueue
 2142              	.LVL290:
1556:../src/FreeRTOS/queue.c **** 
 2143              		.loc 1 1556 0
 2144 0174 FEFFFFEB 		bl	xTaskResumeAll
 2145              	.LVL291:
1562:../src/FreeRTOS/queue.c **** 			{
 2146              		.loc 1 1562 0
 2147 0178 0400A0E1 		mov	r0, r4
 2148 017c FEFFFFEB 		bl	prvIsQueueEmpty
 2149              	.LVL292:
 2150 0180 000050E3 		cmp	r0, #0
 2151 0184 2A00001A 		bne	.L242
 2152              	.LVL293:
 2153              	.L219:
1412:../src/FreeRTOS/queue.c **** 		{
 2154              		.loc 1 1412 0
 2155 0188 FEFFFFEB 		bl	vPortEnterCritical
 2156              	.LVL294:
 2157              	.LBB15:
1416:../src/FreeRTOS/queue.c **** 
 2158              		.loc 1 1416 0
 2159 018c 383094E5 		ldr	r3, [r4, #56]
 2160              	.LVL295:
1420:../src/FreeRTOS/queue.c **** 			{
 2161              		.loc 1 1420 0
 2162 0190 000053E3 		cmp	r3, #0
 2163 0194 C0FFFF1A 		bne	.L243
1466:../src/FreeRTOS/queue.c **** 				{
 2164              		.loc 1 1466 0
 2165 0198 04309DE5 		ldr	r3, [sp, #4]
 2166              	.LVL296:
 2167 019c 000053E3 		cmp	r3, #0
 2168 01a0 D3FFFF0A 		beq	.L244
1483:../src/FreeRTOS/queue.c **** 				{
 2169              		.loc 1 1483 0
 2170 01a4 000055E3 		cmp	r5, #0
 2171 01a8 DBFFFF0A 		beq	.L245
 2172              	.LVL297:
 2173              	.L226:
 2174              	.LBE15:
1497:../src/FreeRTOS/queue.c **** 
 2175              		.loc 1 1497 0
 2176 01ac FEFFFFEB 		bl	vPortExitCritical
 2177              	.LVL298:
1502:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 2178              		.loc 1 1502 0
 2179 01b0 FEFFFFEB 		bl	vTaskSuspendAll
 2180              	.LVL299:
1503:../src/FreeRTOS/queue.c **** 
 2181              		.loc 1 1503 0
 2182 01b4 FEFFFFEB 		bl	vPortEnterCritical
 2183              	.LVL300:
 2184 01b8 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2185 01bc 7330AFE6 		sxtb	r3, r3
 2186 01c0 010073E3 		cmn	r3, #1
 2187 01c4 D8FFFF0A 		beq	.L246
 2188              	.L227:
1503:../src/FreeRTOS/queue.c **** 
 2189              		.loc 1 1503 0 is_stmt 0 discriminator 3
 2190 01c8 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2191 01cc 7330AFE6 		sxtb	r3, r3
 2192 01d0 010073E3 		cmn	r3, #1
 2193 01d4 D7FFFF0A 		beq	.L247
 2194              	.L228:
1503:../src/FreeRTOS/queue.c **** 
 2195              		.loc 1 1503 0 discriminator 6
 2196 01d8 FEFFFFEB 		bl	vPortExitCritical
 2197              	.LVL301:
1506:../src/FreeRTOS/queue.c **** 		{
 2198              		.loc 1 1506 0 is_stmt 1 discriminator 6
 2199 01dc 04108DE2 		add	r1, sp, #4
 2200 01e0 08008DE2 		add	r0, sp, #8
 2201 01e4 FEFFFFEB 		bl	xTaskCheckForTimeOut
 2202              	.LVL302:
 2203 01e8 000050E3 		cmp	r0, #0
 2204 01ec DEFFFF1A 		bne	.L229
1512:../src/FreeRTOS/queue.c **** 			{
 2205              		.loc 1 1512 0
 2206 01f0 0400A0E1 		mov	r0, r4
 2207 01f4 FEFFFFEB 		bl	prvIsQueueEmpty
 2208              	.LVL303:
 2209 01f8 000050E3 		cmp	r0, #0
 2210 01fc D6FFFF0A 		beq	.L230
1518:../src/FreeRTOS/queue.c **** 					{
 2211              		.loc 1 1518 0
 2212 0200 003094E5 		ldr	r3, [r4]
 2213 0204 000053E3 		cmp	r3, #0
 2214 0208 CDFFFF0A 		beq	.L248
 2215              	.L231:
1533:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 2216              		.loc 1 1533 0
 2217 020c 04109DE5 		ldr	r1, [sp, #4]
 2218 0210 240084E2 		add	r0, r4, #36
 2219 0214 FEFFFFEB 		bl	vTaskPlaceOnEventList
 2220              	.LVL304:
1534:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2221              		.loc 1 1534 0
 2222 0218 0400A0E1 		mov	r0, r4
 2223 021c FEFFFFEB 		bl	prvUnlockQueue
 2224              	.LVL305:
1535:../src/FreeRTOS/queue.c **** 				{
 2225              		.loc 1 1535 0
 2226 0220 FEFFFFEB 		bl	xTaskResumeAll
 2227              	.LVL306:
 2228 0224 000050E3 		cmp	r0, #0
 2229 0228 D6FFFF1A 		bne	.L219
1537:../src/FreeRTOS/queue.c **** 				}
 2230              		.loc 1 1537 0
 2231              		.syntax divided
 2232              	@ 1537 "../src/FreeRTOS/queue.c" 1
 2233 022c 000000EF 		SWI 0
 2234              	@ 0 "" 2
 2235              		.arm
 2236              		.syntax unified
 2237 0230 D4FFFFEA 		b	.L219
 2238              	.L242:
1569:../src/FreeRTOS/queue.c **** 					{
 2239              		.loc 1 1569 0
 2240 0234 000056E3 		cmp	r6, #0
 2241 0238 A1FFFF0A 		beq	.L214
1571:../src/FreeRTOS/queue.c **** 						{
 2242              		.loc 1 1571 0
 2243 023c FEFFFFEB 		bl	vPortEnterCritical
 2244              	.LVL307:
 2245              	.LBB16:
1580:../src/FreeRTOS/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 2246              		.loc 1 1580 0
 2247 0240 0400A0E1 		mov	r0, r4
 2248 0244 FEFFFFEB 		bl	prvGetDisinheritPriorityAfterTimeout
 2249              	.LVL308:
1581:../src/FreeRTOS/queue.c **** 						}
 2250              		.loc 1 1581 0
 2251 0248 0010A0E1 		mov	r1, r0
 2252 024c 040094E5 		ldr	r0, [r4, #4]
 2253              	.LVL309:
 2254 0250 FEFFFFEB 		bl	vTaskPriorityDisinheritAfterTimeout
 2255              	.LVL310:
 2256              	.LBE16:
1583:../src/FreeRTOS/queue.c **** 					}
 2257              		.loc 1 1583 0
 2258 0254 FEFFFFEB 		bl	vPortExitCritical
 2259              	.LVL311:
1589:../src/FreeRTOS/queue.c **** 			}
 2260              		.loc 1 1589 0
 2261 0258 0060A0E3 		mov	r6, #0
 2262              	.LVL312:
 2263 025c 98FFFFEA 		b	.L214
 2264              		.cfi_endproc
 2265              	.LFE14:
 2267              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2268              		.align	2
 2269              		.global	xQueueTakeMutexRecursive
 2270              		.syntax unified
 2271              		.arm
 2272              		.fpu neon
 2274              	xQueueTakeMutexRecursive:
 2275              	.LFB8:
 630:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
 2276              		.loc 1 630 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              	.LVL313:
 2281 0000 70402DE9 		push	{r4, r5, r6, lr}
 2282              		.cfi_def_cfa_offset 16
 2283              		.cfi_offset 4, -16
 2284              		.cfi_offset 5, -12
 2285              		.cfi_offset 6, -8
 2286              		.cfi_offset 14, -4
 2287 0004 0160A0E1 		mov	r6, r1
 2288              	.LVL314:
 634:../src/FreeRTOS/queue.c **** 
 2289              		.loc 1 634 0
 2290 0008 004050E2 		subs	r4, r0, #0
 2291 000c 0C00000A 		beq	.L254
 2292              	.LVL315:
 2293              	.L250:
 641:../src/FreeRTOS/queue.c **** 		{
 2294              		.loc 1 641 0
 2295 0010 045094E5 		ldr	r5, [r4, #4]
 2296 0014 FEFFFFEB 		bl	xTaskGetCurrentTaskHandle
 2297              	.LVL316:
 2298 0018 000055E1 		cmp	r5, r0
 2299 001c 0D00000A 		beq	.L255
 648:../src/FreeRTOS/queue.c **** 
 2300              		.loc 1 648 0
 2301 0020 0610A0E1 		mov	r1, r6
 2302 0024 0400A0E1 		mov	r0, r4
 2303 0028 FEFFFFEB 		bl	xQueueSemaphoreTake
 2304              	.LVL317:
 653:../src/FreeRTOS/queue.c **** 			{
 2305              		.loc 1 653 0
 2306 002c 000050E3 		cmp	r0, #0
 2307 0030 7080BD08 		popeq	{r4, r5, r6, pc}
 655:../src/FreeRTOS/queue.c **** 			}
 2308              		.loc 1 655 0
 2309 0034 0C3094E5 		ldr	r3, [r4, #12]
 2310 0038 013083E2 		add	r3, r3, #1
 2311 003c 0C3084E5 		str	r3, [r4, #12]
 664:../src/FreeRTOS/queue.c **** 
 2312              		.loc 1 664 0
 2313 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 2314              	.LVL318:
 2315              	.L254:
 634:../src/FreeRTOS/queue.c **** 
 2316              		.loc 1 634 0 discriminator 1
 2317 0044 7A1200E3 		movw	r1, #634
 2318              	.LVL319:
 2319 0048 000000E3 		movw	r0, #:lower16:.LC0
 2320              	.LVL320:
 2321 004c 000040E3 		movt	r0, #:upper16:.LC0
 2322 0050 FEFFFFEB 		bl	R_OS_AssertCalled
 2323              	.LVL321:
 2324 0054 EDFFFFEA 		b	.L250
 2325              	.L255:
 643:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
 2326              		.loc 1 643 0
 2327 0058 0C3094E5 		ldr	r3, [r4, #12]
 2328 005c 013083E2 		add	r3, r3, #1
 2329 0060 0C3084E5 		str	r3, [r4, #12]
 2330              	.LVL322:
 644:../src/FreeRTOS/queue.c **** 		}
 2331              		.loc 1 644 0
 2332 0064 0100A0E3 		mov	r0, #1
 2333 0068 7080BDE8 		pop	{r4, r5, r6, pc}
 2334              		.cfi_endproc
 2335              	.LFE8:
 2337              		.section	.text.xQueuePeek,"ax",%progbits
 2338              		.align	2
 2339              		.global	xQueuePeek
 2340              		.syntax unified
 2341              		.arm
 2342              		.fpu neon
 2344              	xQueuePeek:
 2345              	.LFB15:
1601:../src/FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2346              		.loc 1 1601 0
 2347              		.cfi_startproc
 2348              		@ args = 0, pretend = 0, frame = 16
 2349              		@ frame_needed = 0, uses_anonymous_args = 0
 2350              	.LVL323:
 2351 0000 70402DE9 		push	{r4, r5, r6, lr}
 2352              		.cfi_def_cfa_offset 16
 2353              		.cfi_offset 4, -16
 2354              		.cfi_offset 5, -12
 2355              		.cfi_offset 6, -8
 2356              		.cfi_offset 14, -4
 2357 0004 10D04DE2 		sub	sp, sp, #16
 2358              		.cfi_def_cfa_offset 32
 2359 0008 0160A0E1 		mov	r6, r1
 2360 000c 04208DE5 		str	r2, [sp, #4]
 2361              	.LVL324:
1608:../src/FreeRTOS/queue.c **** 
 2362              		.loc 1 1608 0
 2363 0010 004050E2 		subs	r4, r0, #0
 2364 0014 0C00000A 		beq	.L278
 2365              	.LVL325:
 2366              	.L257:
1612:../src/FreeRTOS/queue.c **** 
 2367              		.loc 1 1612 0
 2368 0018 000056E3 		cmp	r6, #0
 2369 001c 0F00000A 		beq	.L279
 2370 0020 0130A0E3 		mov	r3, #1
 2371              	.L258:
1612:../src/FreeRTOS/queue.c **** 
 2372              		.loc 1 1612 0 is_stmt 0 discriminator 6
 2373 0024 000053E3 		cmp	r3, #0
 2374 0028 1200000A 		beq	.L280
 2375              	.L259:
1617:../src/FreeRTOS/queue.c **** 	}
 2376              		.loc 1 1617 0 is_stmt 1
 2377 002c FEFFFFEB 		bl	xTaskGetSchedulerState
 2378              	.LVL326:
 2379 0030 000050E3 		cmp	r0, #0
 2380 0034 1400001A 		bne	.L275
1617:../src/FreeRTOS/queue.c **** 	}
 2381              		.loc 1 1617 0 is_stmt 0 discriminator 2
 2382 0038 04309DE5 		ldr	r3, [sp, #4]
 2383 003c 000053E3 		cmp	r3, #0
 2384 0040 1600001A 		bne	.L276
1617:../src/FreeRTOS/queue.c **** 	}
 2385              		.loc 1 1617 0
 2386 0044 0130A0E3 		mov	r3, #1
 2387 0048 100000EA 		b	.L260
 2388              	.LVL327:
 2389              	.L278:
1608:../src/FreeRTOS/queue.c **** 
 2390              		.loc 1 1608 0 is_stmt 1 discriminator 1
 2391 004c 481600E3 		movw	r1, #1608
 2392              	.LVL328:
 2393 0050 000000E3 		movw	r0, #:lower16:.LC0
 2394              	.LVL329:
 2395 0054 000040E3 		movt	r0, #:upper16:.LC0
 2396 0058 FEFFFFEB 		bl	R_OS_AssertCalled
 2397              	.LVL330:
 2398 005c EDFFFFEA 		b	.L257
 2399              	.L279:
1612:../src/FreeRTOS/queue.c **** 
 2400              		.loc 1 1612 0 discriminator 2
 2401 0060 403094E5 		ldr	r3, [r4, #64]
 2402 0064 000053E3 		cmp	r3, #0
1612:../src/FreeRTOS/queue.c **** 
 2403              		.loc 1 1612 0 is_stmt 0
 2404 0068 0130A003 		moveq	r3, #1
 2405 006c ECFFFF0A 		beq	.L258
 2406              	.L274:
 2407 0070 0030A0E3 		mov	r3, #0
 2408 0074 EAFFFFEA 		b	.L258
 2409              	.L280:
1612:../src/FreeRTOS/queue.c **** 
 2410              		.loc 1 1612 0 discriminator 7
 2411 0078 4C1600E3 		movw	r1, #1612
 2412 007c 000000E3 		movw	r0, #:lower16:.LC0
 2413 0080 000040E3 		movt	r0, #:upper16:.LC0
 2414 0084 FEFFFFEB 		bl	R_OS_AssertCalled
 2415              	.LVL331:
 2416 0088 E7FFFFEA 		b	.L259
 2417              	.L275:
1617:../src/FreeRTOS/queue.c **** 	}
 2418              		.loc 1 1617 0 is_stmt 1
 2419 008c 0130A0E3 		mov	r3, #1
 2420              	.L260:
1617:../src/FreeRTOS/queue.c **** 	}
 2421              		.loc 1 1617 0 is_stmt 0 discriminator 6
 2422 0090 000053E3 		cmp	r3, #0
 2423 0094 0300000A 		beq	.L281
 2424              	.L261:
1617:../src/FreeRTOS/queue.c **** 	}
 2425              		.loc 1 1617 0
 2426 0098 0050A0E3 		mov	r5, #0
 2427 009c 300000EA 		b	.L262
 2428              	.L276:
 2429 00a0 0030A0E3 		mov	r3, #0
 2430 00a4 F9FFFFEA 		b	.L260
 2431              	.L281:
1617:../src/FreeRTOS/queue.c **** 	}
 2432              		.loc 1 1617 0 discriminator 7
 2433 00a8 511600E3 		movw	r1, #1617
 2434 00ac 000000E3 		movw	r0, #:lower16:.LC0
 2435 00b0 000040E3 		movt	r0, #:upper16:.LC0
 2436 00b4 FEFFFFEB 		bl	R_OS_AssertCalled
 2437              	.LVL332:
 2438 00b8 F6FFFFEA 		b	.L261
 2439              	.LVL333:
 2440              	.L284:
 2441              	.LBB17:
1639:../src/FreeRTOS/queue.c **** 
 2442              		.loc 1 1639 0 is_stmt 1
 2443 00bc 0C5094E5 		ldr	r5, [r4, #12]
 2444              	.LVL334:
1641:../src/FreeRTOS/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2445              		.loc 1 1641 0
 2446 00c0 0610A0E1 		mov	r1, r6
 2447 00c4 0400A0E1 		mov	r0, r4
 2448 00c8 FEFFFFEB 		bl	prvCopyDataFromQueue
 2449              	.LVL335:
1645:../src/FreeRTOS/queue.c **** 
 2450              		.loc 1 1645 0
 2451 00cc 0C5084E5 		str	r5, [r4, #12]
1649:../src/FreeRTOS/queue.c **** 				{
 2452              		.loc 1 1649 0
 2453 00d0 243094E5 		ldr	r3, [r4, #36]
 2454 00d4 000053E3 		cmp	r3, #0
 2455 00d8 0300001A 		bne	.L282
 2456              	.L264:
1666:../src/FreeRTOS/queue.c **** 				return pdPASS;
 2457              		.loc 1 1666 0
 2458 00dc FEFFFFEB 		bl	vPortExitCritical
 2459              	.LVL336:
1667:../src/FreeRTOS/queue.c **** 			}
 2460              		.loc 1 1667 0
 2461 00e0 0100A0E3 		mov	r0, #1
 2462              	.LVL337:
 2463              	.L256:
 2464              	.LBE17:
1747:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2465              		.loc 1 1747 0
 2466 00e4 10D08DE2 		add	sp, sp, #16
 2467              		.cfi_remember_state
 2468              		.cfi_def_cfa_offset 16
 2469              		@ sp needed
 2470 00e8 7080BDE8 		pop	{r4, r5, r6, pc}
 2471              	.LVL338:
 2472              	.L282:
 2473              		.cfi_restore_state
 2474              	.LBB18:
1651:../src/FreeRTOS/queue.c **** 					{
 2475              		.loc 1 1651 0
 2476 00ec 240084E2 		add	r0, r4, #36
 2477 00f0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 2478              	.LVL339:
 2479 00f4 000050E3 		cmp	r0, #0
 2480 00f8 F7FFFF0A 		beq	.L264
1654:../src/FreeRTOS/queue.c **** 					}
 2481              		.loc 1 1654 0
 2482              		.syntax divided
 2483              	@ 1654 "../src/FreeRTOS/queue.c" 1
 2484 00fc 000000EF 		SWI 0
 2485              	@ 0 "" 2
 2486              		.arm
 2487              		.syntax unified
 2488 0100 F5FFFFEA 		b	.L264
 2489              	.LVL340:
 2490              	.L285:
1675:../src/FreeRTOS/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2491              		.loc 1 1675 0
 2492 0104 FEFFFFEB 		bl	vPortExitCritical
 2493              	.LVL341:
1677:../src/FreeRTOS/queue.c **** 				}
 2494              		.loc 1 1677 0
 2495 0108 0000A0E3 		mov	r0, #0
 2496 010c F4FFFFEA 		b	.L256
 2497              	.L286:
1684:../src/FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 2498              		.loc 1 1684 0
 2499 0110 08008DE2 		add	r0, sp, #8
 2500 0114 FEFFFFEB 		bl	vTaskInternalSetTimeOutState
 2501              	.LVL342:
1685:../src/FreeRTOS/queue.c **** 				}
 2502              		.loc 1 1685 0
 2503 0118 0150A0E3 		mov	r5, #1
 2504 011c 190000EA 		b	.L267
 2505              	.LVL343:
 2506              	.L287:
 2507              	.LBE18:
1700:../src/FreeRTOS/queue.c **** 
 2508              		.loc 1 1700 0 discriminator 1
 2509 0120 0030A0E3 		mov	r3, #0
 2510 0124 4430C4E5 		strb	r3, [r4, #68]
 2511 0128 1D0000EA 		b	.L268
 2512              	.L288:
1700:../src/FreeRTOS/queue.c **** 
 2513              		.loc 1 1700 0 is_stmt 0 discriminator 4
 2514 012c 0030A0E3 		mov	r3, #0
 2515 0130 4530C4E5 		strb	r3, [r4, #69]
 2516 0134 1E0000EA 		b	.L269
 2517              	.L271:
1725:../src/FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 2518              		.loc 1 1725 0 is_stmt 1
 2519 0138 0400A0E1 		mov	r0, r4
 2520 013c FEFFFFEB 		bl	prvUnlockQueue
 2521              	.LVL344:
1726:../src/FreeRTOS/queue.c **** 			}
 2522              		.loc 1 1726 0
 2523 0140 FEFFFFEB 		bl	xTaskResumeAll
 2524              	.LVL345:
 2525 0144 060000EA 		b	.L262
 2526              	.L270:
1733:../src/FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 2527              		.loc 1 1733 0
 2528 0148 0400A0E1 		mov	r0, r4
 2529 014c FEFFFFEB 		bl	prvUnlockQueue
 2530              	.LVL346:
1734:../src/FreeRTOS/queue.c **** 
 2531              		.loc 1 1734 0
 2532 0150 FEFFFFEB 		bl	xTaskResumeAll
 2533              	.LVL347:
1736:../src/FreeRTOS/queue.c **** 			{
 2534              		.loc 1 1736 0
 2535 0154 0400A0E1 		mov	r0, r4
 2536 0158 FEFFFFEB 		bl	prvIsQueueEmpty
 2537              	.LVL348:
 2538 015c 000050E3 		cmp	r0, #0
 2539 0160 2700001A 		bne	.L283
 2540              	.LVL349:
 2541              	.L262:
1628:../src/FreeRTOS/queue.c **** 		{
 2542              		.loc 1 1628 0
 2543 0164 FEFFFFEB 		bl	vPortEnterCritical
 2544              	.LVL350:
 2545              	.LBB19:
1630:../src/FreeRTOS/queue.c **** 
 2546              		.loc 1 1630 0
 2547 0168 383094E5 		ldr	r3, [r4, #56]
 2548              	.LVL351:
1634:../src/FreeRTOS/queue.c **** 			{
 2549              		.loc 1 1634 0
 2550 016c 000053E3 		cmp	r3, #0
 2551 0170 D1FFFF1A 		bne	.L284
1671:../src/FreeRTOS/queue.c **** 				{
 2552              		.loc 1 1671 0
 2553 0174 04309DE5 		ldr	r3, [sp, #4]
 2554              	.LVL352:
 2555 0178 000053E3 		cmp	r3, #0
 2556 017c E0FFFF0A 		beq	.L285
1679:../src/FreeRTOS/queue.c **** 				{
 2557              		.loc 1 1679 0
 2558 0180 000055E3 		cmp	r5, #0
 2559 0184 E1FFFF0A 		beq	.L286
 2560              	.LVL353:
 2561              	.L267:
 2562              	.LBE19:
1694:../src/FreeRTOS/queue.c **** 
 2563              		.loc 1 1694 0
 2564 0188 FEFFFFEB 		bl	vPortExitCritical
 2565              	.LVL354:
1699:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 2566              		.loc 1 1699 0
 2567 018c FEFFFFEB 		bl	vTaskSuspendAll
 2568              	.LVL355:
1700:../src/FreeRTOS/queue.c **** 
 2569              		.loc 1 1700 0
 2570 0190 FEFFFFEB 		bl	vPortEnterCritical
 2571              	.LVL356:
 2572 0194 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2573 0198 7330AFE6 		sxtb	r3, r3
 2574 019c 010073E3 		cmn	r3, #1
 2575 01a0 DEFFFF0A 		beq	.L287
 2576              	.L268:
1700:../src/FreeRTOS/queue.c **** 
 2577              		.loc 1 1700 0 is_stmt 0 discriminator 3
 2578 01a4 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2579 01a8 7330AFE6 		sxtb	r3, r3
 2580 01ac 010073E3 		cmn	r3, #1
 2581 01b0 DDFFFF0A 		beq	.L288
 2582              	.L269:
1700:../src/FreeRTOS/queue.c **** 
 2583              		.loc 1 1700 0 discriminator 6
 2584 01b4 FEFFFFEB 		bl	vPortExitCritical
 2585              	.LVL357:
1703:../src/FreeRTOS/queue.c **** 		{
 2586              		.loc 1 1703 0 is_stmt 1 discriminator 6
 2587 01b8 04108DE2 		add	r1, sp, #4
 2588 01bc 08008DE2 		add	r0, sp, #8
 2589 01c0 FEFFFFEB 		bl	xTaskCheckForTimeOut
 2590              	.LVL358:
 2591 01c4 000050E3 		cmp	r0, #0
 2592 01c8 DEFFFF1A 		bne	.L270
1707:../src/FreeRTOS/queue.c **** 			{
 2593              		.loc 1 1707 0
 2594 01cc 0400A0E1 		mov	r0, r4
 2595 01d0 FEFFFFEB 		bl	prvIsQueueEmpty
 2596              	.LVL359:
 2597 01d4 000050E3 		cmp	r0, #0
 2598 01d8 D6FFFF0A 		beq	.L271
1710:../src/FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 2599              		.loc 1 1710 0
 2600 01dc 04109DE5 		ldr	r1, [sp, #4]
 2601 01e0 240084E2 		add	r0, r4, #36
 2602 01e4 FEFFFFEB 		bl	vTaskPlaceOnEventList
 2603              	.LVL360:
1711:../src/FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2604              		.loc 1 1711 0
 2605 01e8 0400A0E1 		mov	r0, r4
 2606 01ec FEFFFFEB 		bl	prvUnlockQueue
 2607              	.LVL361:
1712:../src/FreeRTOS/queue.c **** 				{
 2608              		.loc 1 1712 0
 2609 01f0 FEFFFFEB 		bl	xTaskResumeAll
 2610              	.LVL362:
 2611 01f4 000050E3 		cmp	r0, #0
 2612 01f8 D9FFFF1A 		bne	.L262
1714:../src/FreeRTOS/queue.c **** 				}
 2613              		.loc 1 1714 0
 2614              		.syntax divided
 2615              	@ 1714 "../src/FreeRTOS/queue.c" 1
 2616 01fc 000000EF 		SWI 0
 2617              	@ 0 "" 2
 2618              		.arm
 2619              		.syntax unified
 2620 0200 D7FFFFEA 		b	.L262
 2621              	.L283:
1739:../src/FreeRTOS/queue.c **** 			}
 2622              		.loc 1 1739 0
 2623 0204 0000A0E3 		mov	r0, #0
 2624 0208 B5FFFFEA 		b	.L256
 2625              		.cfi_endproc
 2626              	.LFE15:
 2628              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2629              		.align	2
 2630              		.global	xQueueReceiveFromISR
 2631              		.syntax unified
 2632              		.arm
 2633              		.fpu neon
 2635              	xQueueReceiveFromISR:
 2636              	.LFB16:
1751:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 2637              		.loc 1 1751 0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 0
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 2641              	.LVL363:
 2642 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2643              		.cfi_def_cfa_offset 32
 2644              		.cfi_offset 4, -32
 2645              		.cfi_offset 5, -28
 2646              		.cfi_offset 6, -24
 2647              		.cfi_offset 7, -20
 2648              		.cfi_offset 8, -16
 2649              		.cfi_offset 9, -12
 2650              		.cfi_offset 10, -8
 2651              		.cfi_offset 14, -4
 2652 0004 0180A0E1 		mov	r8, r1
 2653 0008 0290A0E1 		mov	r9, r2
 2654              	.LVL364:
1756:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2655              		.loc 1 1756 0
 2656 000c 004050E2 		subs	r4, r0, #0
 2657 0010 0F00000A 		beq	.L302
 2658              	.LVL365:
 2659              	.L290:
1757:../src/FreeRTOS/queue.c **** 
 2660              		.loc 1 1757 0
 2661 0014 000058E3 		cmp	r8, #0
 2662 0018 1200000A 		beq	.L303
 2663 001c 0130A0E3 		mov	r3, #1
 2664              	.L291:
1757:../src/FreeRTOS/queue.c **** 
 2665              		.loc 1 1757 0 is_stmt 0 discriminator 6
 2666 0020 000053E3 		cmp	r3, #0
 2667 0024 1500000A 		beq	.L304
 2668              	.L292:
1773:../src/FreeRTOS/queue.c **** 
 2669              		.loc 1 1773 0 is_stmt 1
 2670 0028 FEFFFFEB 		bl	vPortValidateInterruptPriority
 2671              	.LVL366:
1775:../src/FreeRTOS/queue.c **** 	{
 2672              		.loc 1 1775 0
 2673 002c FEFFFFEB 		bl	ulPortSetInterruptMask
 2674              	.LVL367:
 2675 0030 0070A0E1 		mov	r7, r0
 2676              	.LVL368:
 2677              	.LBB20:
1777:../src/FreeRTOS/queue.c **** 
 2678              		.loc 1 1777 0
 2679 0034 385094E5 		ldr	r5, [r4, #56]
 2680              	.LVL369:
1780:../src/FreeRTOS/queue.c **** 		{
 2681              		.loc 1 1780 0
 2682 0038 000055E3 		cmp	r5, #0
 2683 003c 1400001A 		bne	.L305
1831:../src/FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2684              		.loc 1 1831 0
 2685 0040 0040A0E3 		mov	r4, #0
 2686              	.LVL370:
 2687              	.L293:
 2688              	.LBE20:
1835:../src/FreeRTOS/queue.c **** 
 2689              		.loc 1 1835 0
 2690 0044 0700A0E1 		mov	r0, r7
 2691 0048 FEFFFFEB 		bl	vPortClearInterruptMask
 2692              	.LVL371:
1838:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2693              		.loc 1 1838 0
 2694 004c 0400A0E1 		mov	r0, r4
 2695 0050 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2696              	.LVL372:
 2697              	.L302:
1756:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2698              		.loc 1 1756 0 discriminator 1
 2699 0054 DC1600E3 		movw	r1, #1756
 2700              	.LVL373:
 2701 0058 000000E3 		movw	r0, #:lower16:.LC0
 2702              	.LVL374:
 2703 005c 000040E3 		movt	r0, #:upper16:.LC0
 2704 0060 FEFFFFEB 		bl	R_OS_AssertCalled
 2705              	.LVL375:
 2706 0064 EAFFFFEA 		b	.L290
 2707              	.L303:
1757:../src/FreeRTOS/queue.c **** 
 2708              		.loc 1 1757 0 discriminator 2
 2709 0068 403094E5 		ldr	r3, [r4, #64]
 2710 006c 000053E3 		cmp	r3, #0
1757:../src/FreeRTOS/queue.c **** 
 2711              		.loc 1 1757 0 is_stmt 0
 2712 0070 0130A003 		moveq	r3, #1
 2713 0074 E9FFFF0A 		beq	.L291
 2714              	.L296:
 2715 0078 0030A0E3 		mov	r3, #0
 2716 007c E7FFFFEA 		b	.L291
 2717              	.L304:
1757:../src/FreeRTOS/queue.c **** 
 2718              		.loc 1 1757 0 discriminator 7
 2719 0080 DD1600E3 		movw	r1, #1757
 2720 0084 000000E3 		movw	r0, #:lower16:.LC0
 2721 0088 000040E3 		movt	r0, #:upper16:.LC0
 2722 008c FEFFFFEB 		bl	R_OS_AssertCalled
 2723              	.LVL376:
 2724 0090 E4FFFFEA 		b	.L292
 2725              	.LVL377:
 2726              	.L305:
 2727              	.LBB22:
 2728              	.LBB21:
1782:../src/FreeRTOS/queue.c **** 
 2729              		.loc 1 1782 0 is_stmt 1
 2730 0094 4460D4E5 		ldrb	r6, [r4, #68]	@ zero_extendqisi2
 2731 0098 7660AFE6 		sxtb	r6, r6
 2732              	.LVL378:
1786:../src/FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2733              		.loc 1 1786 0
 2734 009c 0810A0E1 		mov	r1, r8
 2735 00a0 0400A0E1 		mov	r0, r4
 2736              	.LVL379:
 2737 00a4 FEFFFFEB 		bl	prvCopyDataFromQueue
 2738              	.LVL380:
1787:../src/FreeRTOS/queue.c **** 
 2739              		.loc 1 1787 0
 2740 00a8 015045E2 		sub	r5, r5, #1
 2741              	.LVL381:
 2742 00ac 385084E5 		str	r5, [r4, #56]
1793:../src/FreeRTOS/queue.c **** 			{
 2743              		.loc 1 1793 0
 2744 00b0 010076E3 		cmn	r6, #1
 2745 00b4 0400000A 		beq	.L306
1824:../src/FreeRTOS/queue.c **** 			}
 2746              		.loc 1 1824 0
 2747 00b8 016086E2 		add	r6, r6, #1
 2748              	.LVL382:
 2749 00bc 7660AFE6 		sxtb	r6, r6
 2750              	.LVL383:
 2751 00c0 4460C4E5 		strb	r6, [r4, #68]
1827:../src/FreeRTOS/queue.c **** 		}
 2752              		.loc 1 1827 0
 2753 00c4 0140A0E3 		mov	r4, #1
 2754              	.LVL384:
 2755 00c8 DDFFFFEA 		b	.L293
 2756              	.LVL385:
 2757              	.L306:
1795:../src/FreeRTOS/queue.c **** 				{
 2758              		.loc 1 1795 0
 2759 00cc 103094E5 		ldr	r3, [r4, #16]
 2760 00d0 000053E3 		cmp	r3, #0
1827:../src/FreeRTOS/queue.c **** 		}
 2761              		.loc 1 1827 0
 2762 00d4 0140A003 		moveq	r4, #1
 2763              	.LVL386:
 2764 00d8 D9FFFF0A 		beq	.L293
 2765              	.LVL387:
 2766              	.L307:
1797:../src/FreeRTOS/queue.c **** 					{
 2767              		.loc 1 1797 0
 2768 00dc 100084E2 		add	r0, r4, #16
 2769 00e0 FEFFFFEB 		bl	xTaskRemoveFromEventList
 2770              	.LVL388:
 2771 00e4 000050E3 		cmp	r0, #0
 2772 00e8 0400000A 		beq	.L299
1801:../src/FreeRTOS/queue.c **** 						{
 2773              		.loc 1 1801 0
 2774 00ec 000059E3 		cmp	r9, #0
 2775 00f0 0400000A 		beq	.L300
1803:../src/FreeRTOS/queue.c **** 						}
 2776              		.loc 1 1803 0
 2777 00f4 0140A0E3 		mov	r4, #1
 2778              	.LVL389:
 2779 00f8 004089E5 		str	r4, [r9]
 2780 00fc D0FFFFEA 		b	.L293
 2781              	.LVL390:
 2782              	.L299:
1827:../src/FreeRTOS/queue.c **** 		}
 2783              		.loc 1 1827 0
 2784 0100 0140A0E3 		mov	r4, #1
 2785              	.LVL391:
 2786 0104 CEFFFFEA 		b	.L293
 2787              	.LVL392:
 2788              	.L300:
 2789 0108 0140A0E3 		mov	r4, #1
 2790              	.LVL393:
 2791 010c CCFFFFEA 		b	.L293
 2792              	.LBE21:
 2793              	.LBE22:
 2794              		.cfi_endproc
 2795              	.LFE16:
 2797              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2798              		.align	2
 2799              		.global	xQueuePeekFromISR
 2800              		.syntax unified
 2801              		.arm
 2802              		.fpu neon
 2804              	xQueuePeekFromISR:
 2805              	.LFB17:
1842:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 2806              		.loc 1 1842 0
 2807              		.cfi_startproc
 2808              		@ args = 0, pretend = 0, frame = 0
 2809              		@ frame_needed = 0, uses_anonymous_args = 0
 2810              	.LVL394:
 2811 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2812              		.cfi_def_cfa_offset 24
 2813              		.cfi_offset 4, -24
 2814              		.cfi_offset 5, -20
 2815              		.cfi_offset 6, -16
 2816              		.cfi_offset 7, -12
 2817              		.cfi_offset 8, -8
 2818              		.cfi_offset 14, -4
 2819 0004 0150A0E1 		mov	r5, r1
 2820              	.LVL395:
1848:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2821              		.loc 1 1848 0
 2822 0008 004050E2 		subs	r4, r0, #0
 2823 000c 1200000A 		beq	.L318
 2824              	.LVL396:
 2825              	.L309:
1849:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2826              		.loc 1 1849 0
 2827 0010 000055E3 		cmp	r5, #0
 2828 0014 1500000A 		beq	.L319
 2829 0018 0130A0E3 		mov	r3, #1
 2830              	.L310:
1849:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2831              		.loc 1 1849 0 is_stmt 0 discriminator 6
 2832 001c 000053E3 		cmp	r3, #0
 2833 0020 1800000A 		beq	.L320
 2834              	.L311:
1850:../src/FreeRTOS/queue.c **** 
 2835              		.loc 1 1850 0 is_stmt 1
 2836 0024 403094E5 		ldr	r3, [r4, #64]
 2837 0028 000053E3 		cmp	r3, #0
 2838 002c 1A00000A 		beq	.L321
 2839              	.L312:
1866:../src/FreeRTOS/queue.c **** 
 2840              		.loc 1 1866 0
 2841 0030 FEFFFFEB 		bl	vPortValidateInterruptPriority
 2842              	.LVL397:
1868:../src/FreeRTOS/queue.c **** 	{
 2843              		.loc 1 1868 0
 2844 0034 FEFFFFEB 		bl	ulPortSetInterruptMask
 2845              	.LVL398:
 2846 0038 0060A0E1 		mov	r6, r0
 2847              	.LVL399:
1871:../src/FreeRTOS/queue.c **** 		{
 2848              		.loc 1 1871 0
 2849 003c 383094E5 		ldr	r3, [r4, #56]
 2850 0040 000053E3 		cmp	r3, #0
 2851 0044 1900001A 		bne	.L322
1885:../src/FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2852              		.loc 1 1885 0
 2853 0048 0040A0E3 		mov	r4, #0
 2854              	.LVL400:
 2855              	.L313:
1889:../src/FreeRTOS/queue.c **** 
 2856              		.loc 1 1889 0
 2857 004c 0600A0E1 		mov	r0, r6
 2858 0050 FEFFFFEB 		bl	vPortClearInterruptMask
 2859              	.LVL401:
1892:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2860              		.loc 1 1892 0
 2861 0054 0400A0E1 		mov	r0, r4
 2862 0058 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2863              	.LVL402:
 2864              	.L318:
1848:../src/FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2865              		.loc 1 1848 0 discriminator 1
 2866 005c 381700E3 		movw	r1, #1848
 2867              	.LVL403:
 2868 0060 000000E3 		movw	r0, #:lower16:.LC0
 2869              	.LVL404:
 2870 0064 000040E3 		movt	r0, #:upper16:.LC0
 2871 0068 FEFFFFEB 		bl	R_OS_AssertCalled
 2872              	.LVL405:
 2873 006c E7FFFFEA 		b	.L309
 2874              	.L319:
1849:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2875              		.loc 1 1849 0 discriminator 2
 2876 0070 403094E5 		ldr	r3, [r4, #64]
 2877 0074 000053E3 		cmp	r3, #0
1849:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2878              		.loc 1 1849 0 is_stmt 0
 2879 0078 0130A003 		moveq	r3, #1
 2880 007c E6FFFF0A 		beq	.L310
 2881              	.L315:
 2882 0080 0030A0E3 		mov	r3, #0
 2883 0084 E4FFFFEA 		b	.L310
 2884              	.L320:
1849:../src/FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2885              		.loc 1 1849 0 discriminator 7
 2886 0088 391700E3 		movw	r1, #1849
 2887 008c 000000E3 		movw	r0, #:lower16:.LC0
 2888 0090 000040E3 		movt	r0, #:upper16:.LC0
 2889 0094 FEFFFFEB 		bl	R_OS_AssertCalled
 2890              	.LVL406:
 2891 0098 E1FFFFEA 		b	.L311
 2892              	.L321:
1850:../src/FreeRTOS/queue.c **** 
 2893              		.loc 1 1850 0 is_stmt 1 discriminator 1
 2894 009c 3A1700E3 		movw	r1, #1850
 2895 00a0 000000E3 		movw	r0, #:lower16:.LC0
 2896 00a4 000040E3 		movt	r0, #:upper16:.LC0
 2897 00a8 FEFFFFEB 		bl	R_OS_AssertCalled
 2898              	.LVL407:
 2899 00ac DFFFFFEA 		b	.L312
 2900              	.LVL408:
 2901              	.L322:
1877:../src/FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2902              		.loc 1 1877 0
 2903 00b0 0C7094E5 		ldr	r7, [r4, #12]
 2904              	.LVL409:
1878:../src/FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2905              		.loc 1 1878 0
 2906 00b4 0510A0E1 		mov	r1, r5
 2907 00b8 0400A0E1 		mov	r0, r4
 2908              	.LVL410:
 2909 00bc FEFFFFEB 		bl	prvCopyDataFromQueue
 2910              	.LVL411:
1879:../src/FreeRTOS/queue.c **** 
 2911              		.loc 1 1879 0
 2912 00c0 0C7084E5 		str	r7, [r4, #12]
 2913              	.LVL412:
1881:../src/FreeRTOS/queue.c **** 		}
 2914              		.loc 1 1881 0
 2915 00c4 0140A0E3 		mov	r4, #1
 2916              	.LVL413:
 2917 00c8 DFFFFFEA 		b	.L313
 2918              		.cfi_endproc
 2919              	.LFE17:
 2921              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2922              		.align	2
 2923              		.global	uxQueueMessagesWaiting
 2924              		.syntax unified
 2925              		.arm
 2926              		.fpu neon
 2928              	uxQueueMessagesWaiting:
 2929              	.LFB18:
1896:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2930              		.loc 1 1896 0
 2931              		.cfi_startproc
 2932              		@ args = 0, pretend = 0, frame = 0
 2933              		@ frame_needed = 0, uses_anonymous_args = 0
 2934              	.LVL414:
 2935 0000 10402DE9 		push	{r4, lr}
 2936              		.cfi_def_cfa_offset 8
 2937              		.cfi_offset 4, -8
 2938              		.cfi_offset 14, -4
1899:../src/FreeRTOS/queue.c **** 
 2939              		.loc 1 1899 0
 2940 0004 004050E2 		subs	r4, r0, #0
 2941 0008 0400000A 		beq	.L326
 2942              	.LVL415:
 2943              	.L324:
1901:../src/FreeRTOS/queue.c **** 	{
 2944              		.loc 1 1901 0
 2945 000c FEFFFFEB 		bl	vPortEnterCritical
 2946              	.LVL416:
1903:../src/FreeRTOS/queue.c **** 	}
 2947              		.loc 1 1903 0
 2948 0010 384094E5 		ldr	r4, [r4, #56]
 2949              	.LVL417:
1905:../src/FreeRTOS/queue.c **** 
 2950              		.loc 1 1905 0
 2951 0014 FEFFFFEB 		bl	vPortExitCritical
 2952              	.LVL418:
1908:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2953              		.loc 1 1908 0
 2954 0018 0400A0E1 		mov	r0, r4
 2955 001c 1080BDE8 		pop	{r4, pc}
 2956              	.LVL419:
 2957              	.L326:
1899:../src/FreeRTOS/queue.c **** 
 2958              		.loc 1 1899 0 discriminator 1
 2959 0020 6B1700E3 		movw	r1, #1899
 2960 0024 000000E3 		movw	r0, #:lower16:.LC0
 2961              	.LVL420:
 2962 0028 000040E3 		movt	r0, #:upper16:.LC0
 2963 002c FEFFFFEB 		bl	R_OS_AssertCalled
 2964              	.LVL421:
 2965 0030 F5FFFFEA 		b	.L324
 2966              		.cfi_endproc
 2967              	.LFE18:
 2969              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2970              		.align	2
 2971              		.global	uxQueueSpacesAvailable
 2972              		.syntax unified
 2973              		.arm
 2974              		.fpu neon
 2976              	uxQueueSpacesAvailable:
 2977              	.LFB19:
1912:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2978              		.loc 1 1912 0
 2979              		.cfi_startproc
 2980              		@ args = 0, pretend = 0, frame = 0
 2981              		@ frame_needed = 0, uses_anonymous_args = 0
 2982              	.LVL422:
 2983 0000 70402DE9 		push	{r4, r5, r6, lr}
 2984              		.cfi_def_cfa_offset 16
 2985              		.cfi_offset 4, -16
 2986              		.cfi_offset 5, -12
 2987              		.cfi_offset 6, -8
 2988              		.cfi_offset 14, -4
 2989              	.LVL423:
1917:../src/FreeRTOS/queue.c **** 
 2990              		.loc 1 1917 0
 2991 0004 005050E2 		subs	r5, r0, #0
 2992 0008 0600000A 		beq	.L330
 2993              	.LVL424:
 2994              	.L328:
1919:../src/FreeRTOS/queue.c **** 	{
 2995              		.loc 1 1919 0
 2996 000c FEFFFFEB 		bl	vPortEnterCritical
 2997              	.LVL425:
1921:../src/FreeRTOS/queue.c **** 	}
 2998              		.loc 1 1921 0
 2999 0010 3C4095E5 		ldr	r4, [r5, #60]
 3000 0014 383095E5 		ldr	r3, [r5, #56]
 3001 0018 034044E0 		sub	r4, r4, r3
 3002              	.LVL426:
1923:../src/FreeRTOS/queue.c **** 
 3003              		.loc 1 1923 0
 3004 001c FEFFFFEB 		bl	vPortExitCritical
 3005              	.LVL427:
1926:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3006              		.loc 1 1926 0
 3007 0020 0400A0E1 		mov	r0, r4
 3008 0024 7080BDE8 		pop	{r4, r5, r6, pc}
 3009              	.LVL428:
 3010              	.L330:
1917:../src/FreeRTOS/queue.c **** 
 3011              		.loc 1 1917 0 discriminator 1
 3012 0028 7D1700E3 		movw	r1, #1917
 3013 002c 000000E3 		movw	r0, #:lower16:.LC0
 3014              	.LVL429:
 3015 0030 000040E3 		movt	r0, #:upper16:.LC0
 3016 0034 FEFFFFEB 		bl	R_OS_AssertCalled
 3017              	.LVL430:
 3018 0038 F3FFFFEA 		b	.L328
 3019              		.cfi_endproc
 3020              	.LFE19:
 3022              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3023              		.align	2
 3024              		.global	uxQueueMessagesWaitingFromISR
 3025              		.syntax unified
 3026              		.arm
 3027              		.fpu neon
 3029              	uxQueueMessagesWaitingFromISR:
 3030              	.LFB20:
1930:../src/FreeRTOS/queue.c **** UBaseType_t uxReturn;
 3031              		.loc 1 1930 0
 3032              		.cfi_startproc
 3033              		@ args = 0, pretend = 0, frame = 0
 3034              		@ frame_needed = 0, uses_anonymous_args = 0
 3035              	.LVL431:
 3036 0000 10402DE9 		push	{r4, lr}
 3037              		.cfi_def_cfa_offset 8
 3038              		.cfi_offset 4, -8
 3039              		.cfi_offset 14, -4
1933:../src/FreeRTOS/queue.c **** 
 3040              		.loc 1 1933 0
 3041 0004 004050E2 		subs	r4, r0, #0
 3042 0008 0100000A 		beq	.L334
 3043              	.LVL432:
 3044              	.L332:
1935:../src/FreeRTOS/queue.c **** 
 3045              		.loc 1 1935 0
 3046 000c 380094E5 		ldr	r0, [r4, #56]
 3047              	.LVL433:
1938:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3048              		.loc 1 1938 0
 3049 0010 1080BDE8 		pop	{r4, pc}
 3050              	.LVL434:
 3051              	.L334:
1933:../src/FreeRTOS/queue.c **** 
 3052              		.loc 1 1933 0 discriminator 1
 3053 0014 8D1700E3 		movw	r1, #1933
 3054 0018 000000E3 		movw	r0, #:lower16:.LC0
 3055              	.LVL435:
 3056 001c 000040E3 		movt	r0, #:upper16:.LC0
 3057 0020 FEFFFFEB 		bl	R_OS_AssertCalled
 3058              	.LVL436:
 3059 0024 F8FFFFEA 		b	.L332
 3060              		.cfi_endproc
 3061              	.LFE20:
 3063              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3064              		.align	2
 3065              		.global	uxQueueGetQueueNumber
 3066              		.syntax unified
 3067              		.arm
 3068              		.fpu neon
 3070              	uxQueueGetQueueNumber:
 3071              	.LFB22:
1986:../src/FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3072              		.loc 1 1986 0
 3073              		.cfi_startproc
 3074              		@ args = 0, pretend = 0, frame = 0
 3075              		@ frame_needed = 0, uses_anonymous_args = 0
 3076              		@ link register save eliminated.
 3077              	.LVL437:
1988:../src/FreeRTOS/queue.c **** 
 3078              		.loc 1 1988 0
 3079 0000 480090E5 		ldr	r0, [r0, #72]
 3080              	.LVL438:
 3081 0004 1EFF2FE1 		bx	lr
 3082              		.cfi_endproc
 3083              	.LFE22:
 3085              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3086              		.align	2
 3087              		.global	vQueueSetQueueNumber
 3088              		.syntax unified
 3089              		.arm
 3090              		.fpu neon
 3092              	vQueueSetQueueNumber:
 3093              	.LFB23:
1996:../src/FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3094              		.loc 1 1996 0
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 0
 3097              		@ frame_needed = 0, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
 3099              	.LVL439:
1997:../src/FreeRTOS/queue.c **** 	}
 3100              		.loc 1 1997 0
 3101 0000 481080E5 		str	r1, [r0, #72]
 3102 0004 1EFF2FE1 		bx	lr
 3103              		.cfi_endproc
 3104              	.LFE23:
 3106              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3107              		.align	2
 3108              		.global	ucQueueGetQueueType
 3109              		.syntax unified
 3110              		.arm
 3111              		.fpu neon
 3113              	ucQueueGetQueueType:
 3114              	.LFB24:
2006:../src/FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3115              		.loc 1 2006 0
 3116              		.cfi_startproc
 3117              		@ args = 0, pretend = 0, frame = 0
 3118              		@ frame_needed = 0, uses_anonymous_args = 0
 3119              		@ link register save eliminated.
 3120              	.LVL440:
2008:../src/FreeRTOS/queue.c **** 
 3121              		.loc 1 2008 0
 3122 0000 4C00D0E5 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 3123              	.LVL441:
 3124 0004 1EFF2FE1 		bx	lr
 3125              		.cfi_endproc
 3126              	.LFE24:
 3128              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3129              		.align	2
 3130              		.global	xQueueIsQueueEmptyFromISR
 3131              		.syntax unified
 3132              		.arm
 3133              		.fpu neon
 3135              	xQueueIsQueueEmptyFromISR:
 3136              	.LFB30:
2279:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
 3137              		.loc 1 2279 0
 3138              		.cfi_startproc
 3139              		@ args = 0, pretend = 0, frame = 0
 3140              		@ frame_needed = 0, uses_anonymous_args = 0
 3141              	.LVL442:
 3142 0000 10402DE9 		push	{r4, lr}
 3143              		.cfi_def_cfa_offset 8
 3144              		.cfi_offset 4, -8
 3145              		.cfi_offset 14, -4
2282:../src/FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3146              		.loc 1 2282 0
 3147 0004 004050E2 		subs	r4, r0, #0
 3148 0008 0400000A 		beq	.L343
 3149              	.LVL443:
 3150              	.L339:
2283:../src/FreeRTOS/queue.c **** 	{
 3151              		.loc 1 2283 0
 3152 000c 383094E5 		ldr	r3, [r4, #56]
 3153 0010 000053E3 		cmp	r3, #0
 3154 0014 0600000A 		beq	.L344
2289:../src/FreeRTOS/queue.c **** 	}
 3155              		.loc 1 2289 0
 3156 0018 0000A0E3 		mov	r0, #0
 3157              	.LVL444:
2293:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 3158              		.loc 1 2293 0
 3159 001c 1080BDE8 		pop	{r4, pc}
 3160              	.LVL445:
 3161              	.L343:
2282:../src/FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3162              		.loc 1 2282 0 discriminator 1
 3163 0020 EA1800E3 		movw	r1, #2282
 3164 0024 000000E3 		movw	r0, #:lower16:.LC0
 3165              	.LVL446:
 3166 0028 000040E3 		movt	r0, #:upper16:.LC0
 3167 002c FEFFFFEB 		bl	R_OS_AssertCalled
 3168              	.LVL447:
 3169 0030 F5FFFFEA 		b	.L339
 3170              	.L344:
2285:../src/FreeRTOS/queue.c **** 	}
 3171              		.loc 1 2285 0
 3172 0034 0100A0E3 		mov	r0, #1
 3173 0038 1080BDE8 		pop	{r4, pc}
 3174              		.cfi_endproc
 3175              	.LFE30:
 3177              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3178              		.align	2
 3179              		.global	xQueueIsQueueFullFromISR
 3180              		.syntax unified
 3181              		.arm
 3182              		.fpu neon
 3184              	xQueueIsQueueFullFromISR:
 3185              	.LFB32:
2315:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2316:../src/FreeRTOS/queue.c **** 
2317:../src/FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2318:../src/FreeRTOS/queue.c **** {
 3186              		.loc 1 2318 0
 3187              		.cfi_startproc
 3188              		@ args = 0, pretend = 0, frame = 0
 3189              		@ frame_needed = 0, uses_anonymous_args = 0
 3190              	.LVL448:
 3191 0000 10402DE9 		push	{r4, lr}
 3192              		.cfi_def_cfa_offset 8
 3193              		.cfi_offset 4, -8
 3194              		.cfi_offset 14, -4
2319:../src/FreeRTOS/queue.c **** BaseType_t xReturn;
2320:../src/FreeRTOS/queue.c **** 
2321:../src/FreeRTOS/queue.c **** 	configASSERT( xQueue );
 3195              		.loc 1 2321 0
 3196 0004 004050E2 		subs	r4, r0, #0
 3197 0008 0500000A 		beq	.L350
 3198              	.LVL449:
 3199              	.L346:
2322:../src/FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3200              		.loc 1 2322 0
 3201 000c 382094E5 		ldr	r2, [r4, #56]
 3202 0010 3C3094E5 		ldr	r3, [r4, #60]
 3203 0014 030052E1 		cmp	r2, r3
 3204 0018 0600000A 		beq	.L351
2323:../src/FreeRTOS/queue.c **** 	{
2324:../src/FreeRTOS/queue.c **** 		xReturn = pdTRUE;
2325:../src/FreeRTOS/queue.c **** 	}
2326:../src/FreeRTOS/queue.c **** 	else
2327:../src/FreeRTOS/queue.c **** 	{
2328:../src/FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 3205              		.loc 1 2328 0
 3206 001c 0000A0E3 		mov	r0, #0
 3207              	.LVL450:
2329:../src/FreeRTOS/queue.c **** 	}
2330:../src/FreeRTOS/queue.c **** 
2331:../src/FreeRTOS/queue.c **** 	return xReturn;
2332:../src/FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3208              		.loc 1 2332 0
 3209 0020 1080BDE8 		pop	{r4, pc}
 3210              	.LVL451:
 3211              	.L350:
2321:../src/FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3212              		.loc 1 2321 0 discriminator 1
 3213 0024 111900E3 		movw	r1, #2321
 3214 0028 000000E3 		movw	r0, #:lower16:.LC0
 3215              	.LVL452:
 3216 002c 000040E3 		movt	r0, #:upper16:.LC0
 3217 0030 FEFFFFEB 		bl	R_OS_AssertCalled
 3218              	.LVL453:
 3219 0034 F4FFFFEA 		b	.L346
 3220              	.L351:
2324:../src/FreeRTOS/queue.c **** 	}
 3221              		.loc 1 2324 0
 3222 0038 0100A0E3 		mov	r0, #1
 3223 003c 1080BDE8 		pop	{r4, pc}
 3224              		.cfi_endproc
 3225              	.LFE32:
 3227              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3228              		.align	2
 3229              		.global	vQueueAddToRegistry
 3230              		.syntax unified
 3231              		.arm
 3232              		.fpu neon
 3234              	vQueueAddToRegistry:
 3235              	.LFB33:
2333:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2334:../src/FreeRTOS/queue.c **** 
2335:../src/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2336:../src/FreeRTOS/queue.c **** 
2337:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2338:../src/FreeRTOS/queue.c **** 	{
2339:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
2340:../src/FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2341:../src/FreeRTOS/queue.c **** 
2342:../src/FreeRTOS/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2343:../src/FreeRTOS/queue.c **** 		is required to prevent an interrupt removing something from the queue
2344:../src/FreeRTOS/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2345:../src/FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2346:../src/FreeRTOS/queue.c **** 		{
2347:../src/FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2348:../src/FreeRTOS/queue.c **** 			{
2349:../src/FreeRTOS/queue.c **** 				/* The queue is full - do we want to block or just leave without
2350:../src/FreeRTOS/queue.c **** 				posting? */
2351:../src/FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2352:../src/FreeRTOS/queue.c **** 				{
2353:../src/FreeRTOS/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2354:../src/FreeRTOS/queue.c **** 					return indicating that we need to block. */
2355:../src/FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2356:../src/FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2357:../src/FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2358:../src/FreeRTOS/queue.c **** 				}
2359:../src/FreeRTOS/queue.c **** 				else
2360:../src/FreeRTOS/queue.c **** 				{
2361:../src/FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2362:../src/FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2363:../src/FreeRTOS/queue.c **** 				}
2364:../src/FreeRTOS/queue.c **** 			}
2365:../src/FreeRTOS/queue.c **** 		}
2366:../src/FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2367:../src/FreeRTOS/queue.c **** 
2368:../src/FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2369:../src/FreeRTOS/queue.c **** 		{
2370:../src/FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2371:../src/FreeRTOS/queue.c **** 			{
2372:../src/FreeRTOS/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2373:../src/FreeRTOS/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2374:../src/FreeRTOS/queue.c **** 				xReturn = pdPASS;
2375:../src/FreeRTOS/queue.c **** 
2376:../src/FreeRTOS/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2377:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2378:../src/FreeRTOS/queue.c **** 				{
2379:../src/FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2380:../src/FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2381:../src/FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2382:../src/FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2383:../src/FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2384:../src/FreeRTOS/queue.c **** 					{
2385:../src/FreeRTOS/queue.c **** 						/* The co-routine waiting has a higher priority so record
2386:../src/FreeRTOS/queue.c **** 						that a yield might be appropriate. */
2387:../src/FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2388:../src/FreeRTOS/queue.c **** 					}
2389:../src/FreeRTOS/queue.c **** 					else
2390:../src/FreeRTOS/queue.c **** 					{
2391:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2392:../src/FreeRTOS/queue.c **** 					}
2393:../src/FreeRTOS/queue.c **** 				}
2394:../src/FreeRTOS/queue.c **** 				else
2395:../src/FreeRTOS/queue.c **** 				{
2396:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2397:../src/FreeRTOS/queue.c **** 				}
2398:../src/FreeRTOS/queue.c **** 			}
2399:../src/FreeRTOS/queue.c **** 			else
2400:../src/FreeRTOS/queue.c **** 			{
2401:../src/FreeRTOS/queue.c **** 				xReturn = errQUEUE_FULL;
2402:../src/FreeRTOS/queue.c **** 			}
2403:../src/FreeRTOS/queue.c **** 		}
2404:../src/FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2405:../src/FreeRTOS/queue.c **** 
2406:../src/FreeRTOS/queue.c **** 		return xReturn;
2407:../src/FreeRTOS/queue.c **** 	}
2408:../src/FreeRTOS/queue.c **** 
2409:../src/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2410:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2411:../src/FreeRTOS/queue.c **** 
2412:../src/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2413:../src/FreeRTOS/queue.c **** 
2414:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2415:../src/FreeRTOS/queue.c **** 	{
2416:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
2417:../src/FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2418:../src/FreeRTOS/queue.c **** 
2419:../src/FreeRTOS/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2420:../src/FreeRTOS/queue.c **** 		is required to prevent an interrupt adding something to the queue
2421:../src/FreeRTOS/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2422:../src/FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2423:../src/FreeRTOS/queue.c **** 		{
2424:../src/FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2425:../src/FreeRTOS/queue.c **** 			{
2426:../src/FreeRTOS/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2427:../src/FreeRTOS/queue.c **** 				leave with nothing? */
2428:../src/FreeRTOS/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2429:../src/FreeRTOS/queue.c **** 				{
2430:../src/FreeRTOS/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2431:../src/FreeRTOS/queue.c **** 					indicating that we need to block. */
2432:../src/FreeRTOS/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2433:../src/FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2434:../src/FreeRTOS/queue.c **** 					return errQUEUE_BLOCKED;
2435:../src/FreeRTOS/queue.c **** 				}
2436:../src/FreeRTOS/queue.c **** 				else
2437:../src/FreeRTOS/queue.c **** 				{
2438:../src/FreeRTOS/queue.c **** 					portENABLE_INTERRUPTS();
2439:../src/FreeRTOS/queue.c **** 					return errQUEUE_FULL;
2440:../src/FreeRTOS/queue.c **** 				}
2441:../src/FreeRTOS/queue.c **** 			}
2442:../src/FreeRTOS/queue.c **** 			else
2443:../src/FreeRTOS/queue.c **** 			{
2444:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2445:../src/FreeRTOS/queue.c **** 			}
2446:../src/FreeRTOS/queue.c **** 		}
2447:../src/FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2448:../src/FreeRTOS/queue.c **** 
2449:../src/FreeRTOS/queue.c **** 		portDISABLE_INTERRUPTS();
2450:../src/FreeRTOS/queue.c **** 		{
2451:../src/FreeRTOS/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2452:../src/FreeRTOS/queue.c **** 			{
2453:../src/FreeRTOS/queue.c **** 				/* Data is available from the queue. */
2454:../src/FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2455:../src/FreeRTOS/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2456:../src/FreeRTOS/queue.c **** 				{
2457:../src/FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2458:../src/FreeRTOS/queue.c **** 				}
2459:../src/FreeRTOS/queue.c **** 				else
2460:../src/FreeRTOS/queue.c **** 				{
2461:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2462:../src/FreeRTOS/queue.c **** 				}
2463:../src/FreeRTOS/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2464:../src/FreeRTOS/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2465:../src/FreeRTOS/queue.c **** 
2466:../src/FreeRTOS/queue.c **** 				xReturn = pdPASS;
2467:../src/FreeRTOS/queue.c **** 
2468:../src/FreeRTOS/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2469:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2470:../src/FreeRTOS/queue.c **** 				{
2471:../src/FreeRTOS/queue.c **** 					/* In this instance the co-routine could be placed directly
2472:../src/FreeRTOS/queue.c **** 					into the ready list as we are within a critical section.
2473:../src/FreeRTOS/queue.c **** 					Instead the same pending ready list mechanism is used as if
2474:../src/FreeRTOS/queue.c **** 					the event were caused from within an interrupt. */
2475:../src/FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2476:../src/FreeRTOS/queue.c **** 					{
2477:../src/FreeRTOS/queue.c **** 						xReturn = errQUEUE_YIELD;
2478:../src/FreeRTOS/queue.c **** 					}
2479:../src/FreeRTOS/queue.c **** 					else
2480:../src/FreeRTOS/queue.c **** 					{
2481:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2482:../src/FreeRTOS/queue.c **** 					}
2483:../src/FreeRTOS/queue.c **** 				}
2484:../src/FreeRTOS/queue.c **** 				else
2485:../src/FreeRTOS/queue.c **** 				{
2486:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2487:../src/FreeRTOS/queue.c **** 				}
2488:../src/FreeRTOS/queue.c **** 			}
2489:../src/FreeRTOS/queue.c **** 			else
2490:../src/FreeRTOS/queue.c **** 			{
2491:../src/FreeRTOS/queue.c **** 				xReturn = pdFAIL;
2492:../src/FreeRTOS/queue.c **** 			}
2493:../src/FreeRTOS/queue.c **** 		}
2494:../src/FreeRTOS/queue.c **** 		portENABLE_INTERRUPTS();
2495:../src/FreeRTOS/queue.c **** 
2496:../src/FreeRTOS/queue.c **** 		return xReturn;
2497:../src/FreeRTOS/queue.c **** 	}
2498:../src/FreeRTOS/queue.c **** 
2499:../src/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2500:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2501:../src/FreeRTOS/queue.c **** 
2502:../src/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2503:../src/FreeRTOS/queue.c **** 
2504:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2505:../src/FreeRTOS/queue.c **** 	{
2506:../src/FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2507:../src/FreeRTOS/queue.c **** 
2508:../src/FreeRTOS/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2509:../src/FreeRTOS/queue.c **** 		exit without doing anything. */
2510:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2511:../src/FreeRTOS/queue.c **** 		{
2512:../src/FreeRTOS/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2513:../src/FreeRTOS/queue.c **** 
2514:../src/FreeRTOS/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2515:../src/FreeRTOS/queue.c **** 			co-routine has not already been woken. */
2516:../src/FreeRTOS/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2517:../src/FreeRTOS/queue.c **** 			{
2518:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2519:../src/FreeRTOS/queue.c **** 				{
2520:../src/FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2521:../src/FreeRTOS/queue.c **** 					{
2522:../src/FreeRTOS/queue.c **** 						return pdTRUE;
2523:../src/FreeRTOS/queue.c **** 					}
2524:../src/FreeRTOS/queue.c **** 					else
2525:../src/FreeRTOS/queue.c **** 					{
2526:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2527:../src/FreeRTOS/queue.c **** 					}
2528:../src/FreeRTOS/queue.c **** 				}
2529:../src/FreeRTOS/queue.c **** 				else
2530:../src/FreeRTOS/queue.c **** 				{
2531:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2532:../src/FreeRTOS/queue.c **** 				}
2533:../src/FreeRTOS/queue.c **** 			}
2534:../src/FreeRTOS/queue.c **** 			else
2535:../src/FreeRTOS/queue.c **** 			{
2536:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2537:../src/FreeRTOS/queue.c **** 			}
2538:../src/FreeRTOS/queue.c **** 		}
2539:../src/FreeRTOS/queue.c **** 		else
2540:../src/FreeRTOS/queue.c **** 		{
2541:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2542:../src/FreeRTOS/queue.c **** 		}
2543:../src/FreeRTOS/queue.c **** 
2544:../src/FreeRTOS/queue.c **** 		return xCoRoutinePreviouslyWoken;
2545:../src/FreeRTOS/queue.c **** 	}
2546:../src/FreeRTOS/queue.c **** 
2547:../src/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2548:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2549:../src/FreeRTOS/queue.c **** 
2550:../src/FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2551:../src/FreeRTOS/queue.c **** 
2552:../src/FreeRTOS/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2553:../src/FreeRTOS/queue.c **** 	{
2554:../src/FreeRTOS/queue.c **** 	BaseType_t xReturn;
2555:../src/FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2556:../src/FreeRTOS/queue.c **** 
2557:../src/FreeRTOS/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2558:../src/FreeRTOS/queue.c **** 		not then just leave without doing anything. */
2559:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2560:../src/FreeRTOS/queue.c **** 		{
2561:../src/FreeRTOS/queue.c **** 			/* Copy the data from the queue. */
2562:../src/FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2563:../src/FreeRTOS/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2564:../src/FreeRTOS/queue.c **** 			{
2565:../src/FreeRTOS/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2566:../src/FreeRTOS/queue.c **** 			}
2567:../src/FreeRTOS/queue.c **** 			else
2568:../src/FreeRTOS/queue.c **** 			{
2569:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2570:../src/FreeRTOS/queue.c **** 			}
2571:../src/FreeRTOS/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2572:../src/FreeRTOS/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2573:../src/FreeRTOS/queue.c **** 
2574:../src/FreeRTOS/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2575:../src/FreeRTOS/queue.c **** 			{
2576:../src/FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2577:../src/FreeRTOS/queue.c **** 				{
2578:../src/FreeRTOS/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2579:../src/FreeRTOS/queue.c **** 					{
2580:../src/FreeRTOS/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2581:../src/FreeRTOS/queue.c **** 					}
2582:../src/FreeRTOS/queue.c **** 					else
2583:../src/FreeRTOS/queue.c **** 					{
2584:../src/FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2585:../src/FreeRTOS/queue.c **** 					}
2586:../src/FreeRTOS/queue.c **** 				}
2587:../src/FreeRTOS/queue.c **** 				else
2588:../src/FreeRTOS/queue.c **** 				{
2589:../src/FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2590:../src/FreeRTOS/queue.c **** 				}
2591:../src/FreeRTOS/queue.c **** 			}
2592:../src/FreeRTOS/queue.c **** 			else
2593:../src/FreeRTOS/queue.c **** 			{
2594:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2595:../src/FreeRTOS/queue.c **** 			}
2596:../src/FreeRTOS/queue.c **** 
2597:../src/FreeRTOS/queue.c **** 			xReturn = pdPASS;
2598:../src/FreeRTOS/queue.c **** 		}
2599:../src/FreeRTOS/queue.c **** 		else
2600:../src/FreeRTOS/queue.c **** 		{
2601:../src/FreeRTOS/queue.c **** 			xReturn = pdFAIL;
2602:../src/FreeRTOS/queue.c **** 		}
2603:../src/FreeRTOS/queue.c **** 
2604:../src/FreeRTOS/queue.c **** 		return xReturn;
2605:../src/FreeRTOS/queue.c **** 	}
2606:../src/FreeRTOS/queue.c **** 
2607:../src/FreeRTOS/queue.c **** #endif /* configUSE_CO_ROUTINES */
2608:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2609:../src/FreeRTOS/queue.c **** 
2610:../src/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2611:../src/FreeRTOS/queue.c **** 
2612:../src/FreeRTOS/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2613:../src/FreeRTOS/queue.c **** 	{
 3236              		.loc 1 2613 0
 3237              		.cfi_startproc
 3238              		@ args = 0, pretend = 0, frame = 0
 3239              		@ frame_needed = 0, uses_anonymous_args = 0
 3240              		@ link register save eliminated.
 3241              	.LVL454:
2614:../src/FreeRTOS/queue.c **** 	UBaseType_t ux;
2615:../src/FreeRTOS/queue.c **** 
2616:../src/FreeRTOS/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2617:../src/FreeRTOS/queue.c **** 		a free slot. */
2618:../src/FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3242              		.loc 1 2618 0
 3243 0000 0030A0E3 		mov	r3, #0
 3244              	.LVL455:
 3245              	.L353:
 3246              		.loc 1 2618 0 is_stmt 0 discriminator 1
 3247 0004 070053E3 		cmp	r3, #7
 3248 0008 0B00008A 		bhi	.L357
2619:../src/FreeRTOS/queue.c **** 		{
2620:../src/FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3249              		.loc 1 2620 0 is_stmt 1
 3250 000c 002000E3 		movw	r2, #:lower16:xQueueRegistry
 3251 0010 002040E3 		movt	r2, #:upper16:xQueueRegistry
 3252 0014 832192E7 		ldr	r2, [r2, r3, lsl #3]
 3253 0018 000052E3 		cmp	r2, #0
2618:../src/FreeRTOS/queue.c **** 		{
 3254              		.loc 1 2618 0 discriminator 2
 3255 001c 01308312 		addne	r3, r3, #1
 3256              	.LVL456:
 3257 0020 F7FFFF1A 		bne	.L353
 3258              	.L358:
2621:../src/FreeRTOS/queue.c **** 			{
2622:../src/FreeRTOS/queue.c **** 				/* Store the information on this queue. */
2623:../src/FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3259              		.loc 1 2623 0
 3260 0024 002000E3 		movw	r2, #:lower16:xQueueRegistry
 3261 0028 002040E3 		movt	r2, #:upper16:xQueueRegistry
 3262 002c 831182E7 		str	r1, [r2, r3, lsl #3]
2624:../src/FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3263              		.loc 1 2624 0
 3264 0030 833182E0 		add	r3, r2, r3, lsl #3
 3265              	.LVL457:
 3266 0034 040083E5 		str	r0, [r3, #4]
2625:../src/FreeRTOS/queue.c **** 
2626:../src/FreeRTOS/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2627:../src/FreeRTOS/queue.c **** 				break;
 3267              		.loc 1 2627 0
 3268 0038 1EFF2FE1 		bx	lr
 3269              	.LVL458:
 3270              	.L357:
 3271 003c 1EFF2FE1 		bx	lr
 3272              		.cfi_endproc
 3273              	.LFE33:
 3275              		.section	.text.pcQueueGetName,"ax",%progbits
 3276              		.align	2
 3277              		.global	pcQueueGetName
 3278              		.syntax unified
 3279              		.arm
 3280              		.fpu neon
 3282              	pcQueueGetName:
 3283              	.LFB34:
2628:../src/FreeRTOS/queue.c **** 			}
2629:../src/FreeRTOS/queue.c **** 			else
2630:../src/FreeRTOS/queue.c **** 			{
2631:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2632:../src/FreeRTOS/queue.c **** 			}
2633:../src/FreeRTOS/queue.c **** 		}
2634:../src/FreeRTOS/queue.c **** 	}
2635:../src/FreeRTOS/queue.c **** 
2636:../src/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2637:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2638:../src/FreeRTOS/queue.c **** 
2639:../src/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2640:../src/FreeRTOS/queue.c **** 
2641:../src/FreeRTOS/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2642:../src/FreeRTOS/queue.c **** 	{
 3284              		.loc 1 2642 0
 3285              		.cfi_startproc
 3286              		@ args = 0, pretend = 0, frame = 0
 3287              		@ frame_needed = 0, uses_anonymous_args = 0
 3288              		@ link register save eliminated.
 3289              	.LVL459:
2643:../src/FreeRTOS/queue.c **** 	UBaseType_t ux;
2644:../src/FreeRTOS/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2645:../src/FreeRTOS/queue.c **** 
2646:../src/FreeRTOS/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2647:../src/FreeRTOS/queue.c **** 		removing entries from the registry while it is being searched. */
2648:../src/FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3290              		.loc 1 2648 0
 3291 0000 0020A0E3 		mov	r2, #0
 3292              	.LVL460:
 3293              	.L360:
 3294              		.loc 1 2648 0 is_stmt 0 discriminator 1
 3295 0004 070052E3 		cmp	r2, #7
 3296 0008 0A00008A 		bhi	.L364
2649:../src/FreeRTOS/queue.c **** 		{
2650:../src/FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3297              		.loc 1 2650 0 is_stmt 1
 3298 000c 003000E3 		movw	r3, #:lower16:xQueueRegistry
 3299 0010 003040E3 		movt	r3, #:upper16:xQueueRegistry
 3300 0014 823183E0 		add	r3, r3, r2, lsl #3
 3301 0018 043093E5 		ldr	r3, [r3, #4]
 3302 001c 000053E1 		cmp	r3, r0
2648:../src/FreeRTOS/queue.c **** 		{
 3303              		.loc 1 2648 0 discriminator 2
 3304 0020 01208212 		addne	r2, r2, #1
 3305              	.LVL461:
 3306 0024 F6FFFF1A 		bne	.L360
 3307              	.L365:
2651:../src/FreeRTOS/queue.c **** 			{
2652:../src/FreeRTOS/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3308              		.loc 1 2652 0
 3309 0028 003000E3 		movw	r3, #:lower16:xQueueRegistry
 3310 002c 003040E3 		movt	r3, #:upper16:xQueueRegistry
 3311 0030 820193E7 		ldr	r0, [r3, r2, lsl #3]
 3312              	.LVL462:
2653:../src/FreeRTOS/queue.c **** 				break;
 3313              		.loc 1 2653 0
 3314 0034 1EFF2FE1 		bx	lr
 3315              	.LVL463:
 3316              	.L364:
2644:../src/FreeRTOS/queue.c **** 
 3317              		.loc 1 2644 0
 3318 0038 0000A0E3 		mov	r0, #0
 3319              	.LVL464:
2654:../src/FreeRTOS/queue.c **** 			}
2655:../src/FreeRTOS/queue.c **** 			else
2656:../src/FreeRTOS/queue.c **** 			{
2657:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2658:../src/FreeRTOS/queue.c **** 			}
2659:../src/FreeRTOS/queue.c **** 		}
2660:../src/FreeRTOS/queue.c **** 
2661:../src/FreeRTOS/queue.c **** 		return pcReturn;
2662:../src/FreeRTOS/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3320              		.loc 1 2662 0
 3321 003c 1EFF2FE1 		bx	lr
 3322              		.cfi_endproc
 3323              	.LFE34:
 3325              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3326              		.align	2
 3327              		.global	vQueueUnregisterQueue
 3328              		.syntax unified
 3329              		.arm
 3330              		.fpu neon
 3332              	vQueueUnregisterQueue:
 3333              	.LFB35:
2663:../src/FreeRTOS/queue.c **** 
2664:../src/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2665:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2666:../src/FreeRTOS/queue.c **** 
2667:../src/FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2668:../src/FreeRTOS/queue.c **** 
2669:../src/FreeRTOS/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2670:../src/FreeRTOS/queue.c **** 	{
 3334              		.loc 1 2670 0
 3335              		.cfi_startproc
 3336              		@ args = 0, pretend = 0, frame = 0
 3337              		@ frame_needed = 0, uses_anonymous_args = 0
 3338              		@ link register save eliminated.
 3339              	.LVL465:
2671:../src/FreeRTOS/queue.c **** 	UBaseType_t ux;
2672:../src/FreeRTOS/queue.c **** 
2673:../src/FreeRTOS/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2674:../src/FreeRTOS/queue.c **** 		registry. */
2675:../src/FreeRTOS/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3340              		.loc 1 2675 0
 3341 0000 0020A0E3 		mov	r2, #0
 3342              	.LVL466:
 3343              	.L367:
 3344              		.loc 1 2675 0 is_stmt 0 discriminator 1
 3345 0004 070052E3 		cmp	r2, #7
 3346 0008 0D00008A 		bhi	.L371
2676:../src/FreeRTOS/queue.c **** 		{
2677:../src/FreeRTOS/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3347              		.loc 1 2677 0 is_stmt 1
 3348 000c 003000E3 		movw	r3, #:lower16:xQueueRegistry
 3349 0010 003040E3 		movt	r3, #:upper16:xQueueRegistry
 3350 0014 823183E0 		add	r3, r3, r2, lsl #3
 3351 0018 043093E5 		ldr	r3, [r3, #4]
 3352 001c 000053E1 		cmp	r3, r0
2675:../src/FreeRTOS/queue.c **** 		{
 3353              		.loc 1 2675 0 discriminator 2
 3354 0020 01208212 		addne	r2, r2, #1
 3355              	.LVL467:
 3356 0024 F6FFFF1A 		bne	.L367
 3357              	.L372:
2678:../src/FreeRTOS/queue.c **** 			{
2679:../src/FreeRTOS/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2680:../src/FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3358              		.loc 1 2680 0
 3359 0028 003000E3 		movw	r3, #:lower16:xQueueRegistry
 3360 002c 003040E3 		movt	r3, #:upper16:xQueueRegistry
 3361 0030 0010A0E3 		mov	r1, #0
 3362 0034 821183E7 		str	r1, [r3, r2, lsl #3]
2681:../src/FreeRTOS/queue.c **** 
2682:../src/FreeRTOS/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2683:../src/FreeRTOS/queue.c **** 				appear in the registry twice if it is added, removed, then
2684:../src/FreeRTOS/queue.c **** 				added again. */
2685:../src/FreeRTOS/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3363              		.loc 1 2685 0
 3364 0038 822183E0 		add	r2, r3, r2, lsl #3
 3365              	.LVL468:
 3366 003c 041082E5 		str	r1, [r2, #4]
2686:../src/FreeRTOS/queue.c **** 				break;
 3367              		.loc 1 2686 0
 3368 0040 1EFF2FE1 		bx	lr
 3369              	.LVL469:
 3370              	.L371:
 3371 0044 1EFF2FE1 		bx	lr
 3372              		.cfi_endproc
 3373              	.LFE35:
 3375              		.section	.text.vQueueDelete,"ax",%progbits
 3376              		.align	2
 3377              		.global	vQueueDelete
 3378              		.syntax unified
 3379              		.arm
 3380              		.fpu neon
 3382              	vQueueDelete:
 3383              	.LFB21:
1942:../src/FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3384              		.loc 1 1942 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL470:
 3389 0000 10402DE9 		push	{r4, lr}
 3390              		.cfi_def_cfa_offset 8
 3391              		.cfi_offset 4, -8
 3392              		.cfi_offset 14, -4
 3393              	.LVL471:
1945:../src/FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3394              		.loc 1 1945 0
 3395 0004 004050E2 		subs	r4, r0, #0
 3396 0008 0400000A 		beq	.L376
 3397              	.LVL472:
 3398              	.L374:
1950:../src/FreeRTOS/queue.c **** 	}
 3399              		.loc 1 1950 0
 3400 000c 0400A0E1 		mov	r0, r4
 3401 0010 FEFFFFEB 		bl	vQueueUnregisterQueue
 3402              	.LVL473:
1958:../src/FreeRTOS/queue.c **** 	}
 3403              		.loc 1 1958 0
 3404 0014 0400A0E1 		mov	r0, r4
 3405 0018 FEFFFFEB 		bl	vPortFree
 3406              	.LVL474:
 3407 001c 1080BDE8 		pop	{r4, pc}
 3408              	.LVL475:
 3409              	.L376:
1945:../src/FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3410              		.loc 1 1945 0 discriminator 1
 3411 0020 991700E3 		movw	r1, #1945
 3412 0024 000000E3 		movw	r0, #:lower16:.LC0
 3413              	.LVL476:
 3414 0028 000040E3 		movt	r0, #:upper16:.LC0
 3415 002c FEFFFFEB 		bl	R_OS_AssertCalled
 3416              	.LVL477:
 3417 0030 F5FFFFEA 		b	.L374
 3418              		.cfi_endproc
 3419              	.LFE21:
 3421              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3422              		.align	2
 3423              		.global	vQueueWaitForMessageRestricted
 3424              		.syntax unified
 3425              		.arm
 3426              		.fpu neon
 3428              	vQueueWaitForMessageRestricted:
 3429              	.LFB36:
2687:../src/FreeRTOS/queue.c **** 			}
2688:../src/FreeRTOS/queue.c **** 			else
2689:../src/FreeRTOS/queue.c **** 			{
2690:../src/FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2691:../src/FreeRTOS/queue.c **** 			}
2692:../src/FreeRTOS/queue.c **** 		}
2693:../src/FreeRTOS/queue.c **** 
2694:../src/FreeRTOS/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2695:../src/FreeRTOS/queue.c **** 
2696:../src/FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:../src/FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
2698:../src/FreeRTOS/queue.c **** 
2699:../src/FreeRTOS/queue.c **** #if ( configUSE_TIMERS == 1 )
2700:../src/FreeRTOS/queue.c **** 
2701:../src/FreeRTOS/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2702:../src/FreeRTOS/queue.c **** 	{
 3430              		.loc 1 2702 0
 3431              		.cfi_startproc
 3432              		@ args = 0, pretend = 0, frame = 0
 3433              		@ frame_needed = 0, uses_anonymous_args = 0
 3434              	.LVL478:
 3435 0000 70402DE9 		push	{r4, r5, r6, lr}
 3436              		.cfi_def_cfa_offset 16
 3437              		.cfi_offset 4, -16
 3438              		.cfi_offset 5, -12
 3439              		.cfi_offset 6, -8
 3440              		.cfi_offset 14, -4
 3441 0004 0040A0E1 		mov	r4, r0
 3442 0008 0150A0E1 		mov	r5, r1
 3443 000c 0260A0E1 		mov	r6, r2
 3444              	.LVL479:
2703:../src/FreeRTOS/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2704:../src/FreeRTOS/queue.c **** 
2705:../src/FreeRTOS/queue.c **** 		/* This function should not be called by application code hence the
2706:../src/FreeRTOS/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2707:../src/FreeRTOS/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2708:../src/FreeRTOS/queue.c **** 		It can result in vListInsert() being called on a list that can only
2709:../src/FreeRTOS/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2710:../src/FreeRTOS/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2711:../src/FreeRTOS/queue.c **** 		section. */
2712:../src/FreeRTOS/queue.c **** 
2713:../src/FreeRTOS/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2714:../src/FreeRTOS/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2715:../src/FreeRTOS/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2716:../src/FreeRTOS/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2717:../src/FreeRTOS/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2718:../src/FreeRTOS/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2719:../src/FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 3445              		.loc 1 2719 0
 3446 0010 FEFFFFEB 		bl	vPortEnterCritical
 3447              	.LVL480:
 3448 0014 4430D4E5 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3449 0018 7330AFE6 		sxtb	r3, r3
 3450 001c 010073E3 		cmn	r3, #1
 3451 0020 0A00000A 		beq	.L382
 3452              	.L378:
 3453              		.loc 1 2719 0 is_stmt 0 discriminator 3
 3454 0024 4530D4E5 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3455 0028 7330AFE6 		sxtb	r3, r3
 3456 002c 010073E3 		cmn	r3, #1
 3457 0030 0900000A 		beq	.L383
 3458              	.L379:
 3459              		.loc 1 2719 0 discriminator 6
 3460 0034 FEFFFFEB 		bl	vPortExitCritical
 3461              	.LVL481:
2720:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3462              		.loc 1 2720 0 is_stmt 1 discriminator 6
 3463 0038 383094E5 		ldr	r3, [r4, #56]
 3464 003c 000053E3 		cmp	r3, #0
 3465 0040 0800000A 		beq	.L384
 3466              	.L380:
2721:../src/FreeRTOS/queue.c **** 		{
2722:../src/FreeRTOS/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2723:../src/FreeRTOS/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2724:../src/FreeRTOS/queue.c **** 		}
2725:../src/FreeRTOS/queue.c **** 		else
2726:../src/FreeRTOS/queue.c **** 		{
2727:../src/FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2728:../src/FreeRTOS/queue.c **** 		}
2729:../src/FreeRTOS/queue.c **** 		prvUnlockQueue( pxQueue );
 3467              		.loc 1 2729 0
 3468 0044 0400A0E1 		mov	r0, r4
 3469 0048 FEFFFFEB 		bl	prvUnlockQueue
 3470              	.LVL482:
 3471 004c 7080BDE8 		pop	{r4, r5, r6, pc}
 3472              	.L382:
2719:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3473              		.loc 1 2719 0 discriminator 1
 3474 0050 0030A0E3 		mov	r3, #0
 3475 0054 4430C4E5 		strb	r3, [r4, #68]
 3476 0058 F1FFFFEA 		b	.L378
 3477              	.L383:
2719:../src/FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3478              		.loc 1 2719 0 is_stmt 0 discriminator 4
 3479 005c 0030A0E3 		mov	r3, #0
 3480 0060 4530C4E5 		strb	r3, [r4, #69]
 3481 0064 F2FFFFEA 		b	.L379
 3482              	.L384:
2723:../src/FreeRTOS/queue.c **** 		}
 3483              		.loc 1 2723 0 is_stmt 1
 3484 0068 0620A0E1 		mov	r2, r6
 3485 006c 0510A0E1 		mov	r1, r5
 3486 0070 240084E2 		add	r0, r4, #36
 3487 0074 FEFFFFEB 		bl	vTaskPlaceOnEventListRestricted
 3488              	.LVL483:
 3489 0078 F1FFFFEA 		b	.L380
 3490              		.cfi_endproc
 3491              	.LFE36:
 3493              		.comm	xQueueRegistry,64,4
 3494              		.section	.rodata.xQueueGenericReset.str1.4,"aMS",%progbits,1
 3495              		.align	2
 3496              	.LC0:
 3497 0000 2E2E2F73 		.ascii	"../src/FreeRTOS/queue.c\000"
 3497      72632F46 
 3497      72656552 
 3497      544F532F 
 3497      71756575 
 3498              		.text
 3499              	.Letext0:
 3500              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 3501              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3502              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3503              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3504              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3505              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3506              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3507              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 3508              		.file 10 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/FreeRTOS/portab
 3509              		.file 11 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/FreeRTOS/includ
 3510              		.file 12 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/FreeRTOS/includ
 3511              		.file 13 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/FreeRTOS/includ
 3512              		.file 14 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/config_files/Fr
 3513              		.file 15 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/FreeRTOS/includ
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:17     .text.prvGetDisinheritPriorityAfterTimeout:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:22     .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:53     .text.prvIsQueueFull:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:58     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:98     .text.prvIsQueueEmpty:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:103    .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:142    .text.prvCopyDataToQueue:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:147    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:267    .text.prvCopyDataFromQueue:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:272    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:312    .text.prvUnlockQueue:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:317    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:421    .text.xQueueGenericReset:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:427    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3496   .rodata.xQueueGenericReset.str1.4:00000000 .LC0
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:524    .text.prvInitialiseNewQueue:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:529    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:573    .text.xQueueGenericCreate:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:579    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:656    .text.xQueueGetMutexHolder:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:662    .text.xQueueGetMutexHolder:00000000 xQueueGetMutexHolder
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:701    .text.xQueueGetMutexHolderFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:707    .text.xQueueGetMutexHolderFromISR:00000000 xQueueGetMutexHolderFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:751    .text.xQueueCreateCountingSemaphore:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:757    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:816    .text.xQueueGenericSend:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:822    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1125   .text.prvInitialiseMutex:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1130   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1162   .text.xQueueCreateMutex:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1168   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1199   .text.xQueueGiveMutexRecursive:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1205   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1271   .text.xQueueGenericSendFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1277   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1460   .text.xQueueGiveFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1466   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1639   .text.xQueueReceive:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1645   .text.xQueueReceive:00000000 xQueueReceive
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1929   .text.xQueueSemaphoreTake:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:1935   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2268   .text.xQueueTakeMutexRecursive:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2274   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2338   .text.xQueuePeek:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2344   .text.xQueuePeek:00000000 xQueuePeek
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2629   .text.xQueueReceiveFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2635   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2798   .text.xQueuePeekFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2804   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2922   .text.uxQueueMessagesWaiting:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2928   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2970   .text.uxQueueSpacesAvailable:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:2976   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3023   .text.uxQueueMessagesWaitingFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3029   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3064   .text.uxQueueGetQueueNumber:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3070   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3086   .text.vQueueSetQueueNumber:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3092   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3107   .text.ucQueueGetQueueType:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3113   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3129   .text.xQueueIsQueueEmptyFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3135   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3178   .text.xQueueIsQueueFullFromISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3184   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3228   .text.vQueueAddToRegistry:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3234   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
                            *COM*:00000040 xQueueRegistry
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3276   .text.pcQueueGetName:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3282   .text.pcQueueGetName:00000000 pcQueueGetName
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3326   .text.vQueueUnregisterQueue:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3332   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3376   .text.vQueueDelete:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3382   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3422   .text.vQueueWaitForMessageRestricted:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3428   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted
C:\Users\a5050395\AppData\Local\Temp\ccJk6qen.s:3495   .rodata.xQueueGenericReset.str1.4:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.14fc17be114e5a2cba0959c511ea2aaf
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.newlib.h.21.59901f4bf241ab46c63694665baa7297
                           .group:00000000 wm4.features.h.22.5cdadbb3efe495d1c9e38350b8c376c7
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:00000000 wm4.stddef.h.39.57db33e786ccd422e31be63a26e19309
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.e658329a094974ebad41b40c60502de7
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.r_task_priority.h.26.416bb98a222bf391200df359bd0318d1
                           .group:00000000 wm4.FreeRTOSConfig.h.79.fd739ecab5eecc474fbd4cdebb362b54
                           .group:00000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:00000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.portmacro.h.32.440d21c040186908c7273660706c6bca
                           .group:00000000 wm4.portable.h.64.00b423ba030e23bed354b037664af7a6
                           .group:00000000 wm4.mpu_wrappers.h.29.89d425470b0b1ff39fbd61026b3dc073
                           .group:00000000 wm4.FreeRTOS.h.66.bad6b88d088f10e2b23c3b49ecb7db7d
                           .group:00000000 wm4.list.h.61.bafeaa82806d71ae8917c6d7827fc3d2
                           .group:00000000 wm4.task.h.46.d14b2b6bfa640e74f781e050155168fa
                           .group:00000000 wm4.queue.h.30.26f4e98f11131ce77daaf8e01a2b98bf

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
R_OS_AssertCalled
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
ulPortSetInterruptMask
vPortClearInterruptMask
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
