
;; Function const TfLiteRegistration* tflite::MicroOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator, int) const [with unsigned int tOpCount = 5u] (_ZNK6tflite15MicroOpResolverILj5EE6FindOpENS_15BuiltinOperatorEi, funcdef_no=10355, decl_uid=167466, cgraph_uid=7271, symbol_order=8102)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:38
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:38:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:38:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:38:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:38:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:35:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator, int) const [with unsigned int tOpCount = 5u] (const struct MicroOpResolver * const this, BuiltinOperator op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  sizetype _1;
  const struct TfLiteRegistration * _2;
  sizetype _5;
  long int _7;
  int _11;
  unsigned int _14;
  long int _19;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _14 = this_4(D)->registrations_len_;
  if (_14 == 0)
    goto <bb 9>;
  else
    goto <bb 3>;

  <bb 3>:
  _19 = (long int) op_8(D);

  <bb 4>:
  # i_15 = PHI <0(3), i_10(8)>
  # DEBUG i => i_15
  # DEBUG D#13 => i_15 * 32
  # DEBUG D#12 => D#13 + 4
  # DEBUG registration => this_4(D) + D#12
  _7 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_15].builtin_code;
  if (_7 == _19)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _11 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_15].version;
  if (_11 == version_12(D))
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # i_21 = PHI <i_15(5)>
  _5 = i_21 * 32;
  _1 = _5 + 4;
  registration_6 = this_4(D) + _1;
  goto <bb 9>;

  <bb 7>:
  i_10 = i_15 + 1;
  # DEBUG i => i_10
  # DEBUG i => i_10
  if (i_10 >= _14)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # _2 = PHI <registration_6(6), 0B(7), 0B(2)>
  return _2;

}



;; Function const TfLiteRegistration* tflite::MicroOpResolver<tOpCount>::FindOp(const char*, int) const [with unsigned int tOpCount = 5u] (_ZNK6tflite15MicroOpResolverILj5EE6FindOpEPKci, funcdef_no=10356, decl_uid=167470, cgraph_uid=7272, symbol_order=8103)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:47:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroOpResolver<tOpCount>::FindOp(const char*, int) const [with unsigned int tOpCount = 5u] (const struct MicroOpResolver * const this, const char * op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  sizetype _1;
  const struct TfLiteRegistration * _2;
  sizetype _5;
  long int _7;
  const char * _9;
  int _11;
  int _12;
  unsigned int _15;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _15 = this_4(D)->registrations_len_;
  if (_15 == 0)
    goto <bb 10>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # i_16 = PHI <0(3), i_8(9)>
  # DEBUG i => i_16
  # DEBUG D#15 => i_16 * 32
  # DEBUG D#14 => D#15 + 4
  # DEBUG registration => this_4(D) + D#14
  _7 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_16].builtin_code;
  if (_7 == 32)
    goto <bb 5>;
  else
    goto <bb 8>;

  <bb 5>:
  _9 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_16].custom_name;
  _11 = strcmp (_9, op_10(D));
  if (_11 == 0)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  _12 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_16].version;
  if (_12 == version_13(D))
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # i_23 = PHI <i_16(6)>
  _5 = i_23 * 32;
  _1 = _5 + 4;
  registration_6 = this_4(D) + _1;
  goto <bb 10>;

  <bb 8>:
  i_8 = i_16 + 1;
  # DEBUG i => i_8
  # DEBUG i => i_8
  if (i_8 >= _15)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 4>;

  <bb 10>:
  # _2 = PHI <registration_6(7), 0B(8), 0B(2)>
  return _2;

}



;; Function void tfl_quantdt_dnn_setupPre() (_Z24tfl_quantdt_dnn_setupPrev, funcdef_no=6665, decl_uid=8168, cgraph_uid=3593, symbol_order=3642)

../src/neural_networks/tensorflow_lite/TF_lite_quant_aware_training/tensorflowlite_quantdt_dnn_compute.cc:51:6: note: vectorized 0 loops in function.
void tfl_quantdt_dnn_setupPre() ()
{
  int version;
  int version;
  int version;
  int version;
  int version;
  static struct MicroInterpreter static_interpreter_quantdt;
  static struct MicroOpResolver micro_op_resolver_quantdt;
  static struct MicroErrorReporter micro_error_reporter_quantdt = {.D.162759={._vptr.ErrorReporter=&MEM[(void *)&_ZTVN6tflite18MicroErrorReporterE + 8B]}};
  unsigned char _7;
  int _9;
  unsigned char _10;
  unsigned char _11;
  sizetype _15;
  long int _17;
  const uint8_t[1] * _18;
  unsigned char _22;
  int _24;
  struct TfLiteRegistration * _28;
  struct TfLiteRegistration * _31;
  struct _reent * _impure_ptr.13_32;
  struct TfLiteRegistration * _34;
  struct __FILE * _35;
  struct TfLiteRegistration * _37;
  struct TfLiteRegistration * _40;
  unsigned int _41;
  unsigned char _43;
  int _45;
  const struct Model * model_quantdt.3_46;
  struct ErrorReporter * error_reporter_quantdt.4_47;
  struct ErrorReporter * error_reporter_quantdt.4_52;
  struct MicroInterpreter * interpreter_quantdt.9_54;
  TfLiteStatus _56;
  struct ErrorReporter * error_reporter_quantdt.4_57;
  struct ErrorReporter * error_reporter_quantdt.4_59;
  struct MicroInterpreter * interpreter_quantdt.9_61;
  struct TfLiteTensor * _63;
  sizetype _65;
  const uint8_t * _66;
  short unsigned int _67;
  int _68;
  short unsigned int _69;
  sizetype _71;
  const void * _72;
  long unsigned int _73;
  long unsigned int _75;
  struct Model * _76;
  unsigned char _77;
  struct _reent * _impure_ptr.13_82;
  struct __FILE * _83;
  struct _reent * _impure_ptr.13_84;
  struct __FILE * _85;
  struct __FILE * _92;
  struct _reent * _impure_ptr.13_96;
  struct __FILE * _97;
  struct _reent * _impure_ptr.13_98;
  struct __FILE * _99;
  struct _reent * _impure_ptr.13_106;
  long unsigned int iftmp.11_108;
  struct _reent * _impure_ptr.13_110;
  struct __FILE * _111;
  struct _reent * _impure_ptr.13_112;
  struct __FILE * _113;
  unsigned int _120;
  struct _reent * _impure_ptr.13_124;
  struct __FILE * _125;
  struct _reent * _impure_ptr.13_126;
  struct __FILE * _127;
  struct _reent * _impure_ptr.13_138;
  struct __FILE * _139;
  struct _reent * _impure_ptr.13_140;
  struct __FILE * _141;
  unsigned int _200;
  unsigned int _208;
  struct _reent * _impure_ptr.13_209;
  struct __FILE * _210;
  struct _reent * _impure_ptr.13_212;
  struct __FILE * _213;
  unsigned int _215;
  unsigned int _216;
  unsigned int _224;
  struct _reent * _impure_ptr.13_225;
  struct __FILE * _226;
  struct _reent * _impure_ptr.13_228;
  struct __FILE * _229;
  unsigned int _231;
  unsigned int _232;
  unsigned int _240;
  struct _reent * _impure_ptr.13_241;
  struct __FILE * _242;
  struct _reent * _impure_ptr.13_244;
  struct __FILE * _245;
  unsigned int _247;
  unsigned int _248;
  unsigned int _256;
  struct _reent * _impure_ptr.13_257;
  struct __FILE * _258;
  struct _reent * _impure_ptr.13_260;
  struct __FILE * _261;
  unsigned int _263;
  unsigned int _264;

  <bb 2>:
  _7 = __atomic_load_1 (&_ZGVZ24tfl_quantdt_dnn_setupPrevE28micro_error_reporter_quantdt, 2);
  _10 = _7 & 1;
  if (_10 == 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 6>;

  <bb 4>:
  _9 = __cxa_guard_acquire (&_ZGVZ24tfl_quantdt_dnn_setupPrevE28micro_error_reporter_quantdt);
  if (_9 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  __cxa_guard_release (&_ZGVZ24tfl_quantdt_dnn_setupPrevE28micro_error_reporter_quantdt);
  __aeabi_atexit (&micro_error_reporter_quantdt, __comp_dtor , &__dso_handle);

  <bb 6>:
  error_reporter_quantdt = &micro_error_reporter_quantdt.D.162759;
  # DEBUG buf => &g_number_plate_CNN_8int_quant_data
  # DEBUG buf => &g_number_plate_CNN_8int_quant_data
  # DEBUG buf => &g_number_plate_CNN_8int_quant_data
  _75 = MEM[(uoffset_t *)&g_number_plate_CNN_8int_quant_data];
  # DEBUG t => _75
  # DEBUG t => NULL
  _76 = &g_number_plate_CNN_8int_quant_data + _75;
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  model_quantdt = _76;
  # DEBUG this => _76
  # DEBUG D#5 => &MEM[(const struct Model *)_76].D.116578
  # DEBUG this => D#5
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#5
  # DEBUG field => 4
  # DEBUG this => D#5
  _18 = &MEM[(const struct Table *)_76].data_;
  # DEBUG p => _18
  _17 = MEM[(const long int *)_76];
  # DEBUG t => _17
  # DEBUG t => NULL
  # DEBUG p => NULL
  _15 = (sizetype) _17;
  _65 = -_15;
  _66 = _18 + _65;
  # DEBUG this => NULL
  # DEBUG vtable => _66
  # DEBUG p => _66
  _67 = MEM[(const short unsigned int *)_66];
  # DEBUG t => _67
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _67
  _68 = (int) _67;
  if (_68 > 4)
    goto <bb 7>;
  else
    goto <bb 9>;

  <bb 7>:
  # DEBUG p => _66 + 4
  _69 = MEM[(const short unsigned int *)_66 + 4B];
  # DEBUG t => _69
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => _69
  if (_69 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _71 = (sizetype) _69;
  _72 = _18 + _71;
  # DEBUG p => _72
  _73 = MEM[(const long unsigned int *)_72];
  # DEBUG t => _73
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  if (_73 != 3)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # iftmp.11_108 = PHI <_73(8), 0(7), 0(6)>
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  # DEBUG this => _76
  # DEBUG D#5 => &MEM[(const struct Model *)_76].D.116578
  # DEBUG this => D#5
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#5
  # DEBUG field => 4
  # DEBUG this => D#5
  # DEBUG p => _18
  # DEBUG t => _17
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG vtable => _66
  # DEBUG p => _66
  # DEBUG t => _67
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _67
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  tflite::ErrorReporter::Report (&micro_error_reporter_quantdt.D.162759, "Model provided is schema version %d not equal to supported version %d.", iftmp.11_108, 3);
  goto <bb 37>;

  <bb 10>:
  tflite::ErrorReporter::Report (&micro_error_reporter_quantdt.D.162759, "   quantized model loaded without error.");
  _22 = __atomic_load_1 (&_ZGVZ24tfl_quantdt_dnn_setupPrevE25micro_op_resolver_quantdt, 2);
  _11 = _22 & 1;
  if (_11 == 0)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 14>;

  <bb 12>:
  _24 = __cxa_guard_acquire (&_ZGVZ24tfl_quantdt_dnn_setupPrevE25micro_op_resolver_quantdt);
  if (_24 != 0)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 13>:
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG D#3 => &micro_op_resolver_quantdt.D.167502
  # DEBUG this => D#3
  # DEBUG this => NULL
  micro_op_resolver_quantdt.D.167502._vptr.OpResolver = &MEM[(void *)&_ZTVN6tflite15MicroOpResolverILj5EEE + 8B];
  micro_op_resolver_quantdt.registrations_len_ = 0;
  # DEBUG this => NULL
  __cxa_guard_release (&_ZGVZ24tfl_quantdt_dnn_setupPrevE25micro_op_resolver_quantdt);
  __aeabi_atexit (&micro_op_resolver_quantdt, __comp_dtor , &__dso_handle);

  <bb 14>:
  _28 = tflite::ops::micro::Register_FULLY_CONNECTED ();
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG op => 9
  # DEBUG registration => _28
  # DEBUG min_version => 1
  # DEBUG max_version => 1
  # DEBUG version => 1
  # DEBUG version => 1
  _256 = micro_op_resolver_quantdt.registrations_len_;
  if (_256 > 4)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  _impure_ptr.13_257 = _impure_ptr;
  _258 = _impure_ptr.13_257->_stdout;
  fprintf (_258, "\r        MicroOpResolver.AddBuiltin : registrations_len_ (%d) < tOpCount (%d)\n", _256, 5);
  _impure_ptr.13_260 = _impure_ptr;
  _261 = _impure_ptr.13_260->_stdout;
  fflush (_261);
  _263 = micro_op_resolver_quantdt.registrations_len_;
  # DEBUG D#4 => &micro_op_resolver_quantdt.registrations_[_263]
  # DEBUG new_registration => D#4
  _264 = _263 + 1;
  micro_op_resolver_quantdt.registrations_len_ = _264;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_263] = MEM[(const struct TfLiteRegistration &)_28];
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_263].builtin_code = 9;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_263].version = 1;
  # DEBUG version => 2
  # DEBUG version => 2
  goto <bb 17>;

  <bb 16>:
  _impure_ptr.13_138 = _impure_ptr;
  _139 = _impure_ptr.13_138->_stdout;
  fprintf (_139, "\rError: MicroOpResolver.AddBuiltin : registrations_len_ (%d) >= tOpCount (%d)\n", _256, 5);
  _impure_ptr.13_140 = _impure_ptr;
  _141 = _impure_ptr.13_140->_stdout;
  fflush (_141);

  <bb 17>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG min_version => NULL
  # DEBUG max_version => NULL
  # DEBUG version => NULL
  _31 = tflite::ops::micro::Register_SOFTMAX ();
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG op => 25
  # DEBUG registration => _31
  # DEBUG min_version => 1
  # DEBUG max_version => 1
  # DEBUG version => 1
  _240 = micro_op_resolver_quantdt.registrations_len_;
  if (_240 > 4)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  _impure_ptr.13_241 = _impure_ptr;
  _242 = _impure_ptr.13_241->_stdout;
  fprintf (_242, "\r        MicroOpResolver.AddBuiltin : registrations_len_ (%d) < tOpCount (%d)\n", _240, 5);
  _impure_ptr.13_244 = _impure_ptr;
  _245 = _impure_ptr.13_244->_stdout;
  fflush (_245);
  _247 = micro_op_resolver_quantdt.registrations_len_;
  # DEBUG D#4 => &micro_op_resolver_quantdt.registrations_[_247]
  # DEBUG new_registration => D#4
  _248 = _247 + 1;
  micro_op_resolver_quantdt.registrations_len_ = _248;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_247] = MEM[(const struct TfLiteRegistration &)_31];
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_247].builtin_code = 25;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_247].version = 1;
  # DEBUG version => 2
  # DEBUG version => 2
  goto <bb 20>;

  <bb 19>:
  _impure_ptr.13_124 = _impure_ptr;
  _125 = _impure_ptr.13_124->_stdout;
  fprintf (_125, "\rError: MicroOpResolver.AddBuiltin : registrations_len_ (%d) >= tOpCount (%d)\n", _240, 5);
  _impure_ptr.13_126 = _impure_ptr;
  _127 = _impure_ptr.13_126->_stdout;
  fflush (_127);

  <bb 20>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG min_version => NULL
  # DEBUG max_version => NULL
  # DEBUG version => NULL
  _34 = tflite::ops::micro::Register_CONV_2D ();
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG op => 3
  # DEBUG registration => _34
  # DEBUG min_version => 1
  # DEBUG max_version => 1
  # DEBUG version => 1
  _224 = micro_op_resolver_quantdt.registrations_len_;
  if (_224 > 4)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  _impure_ptr.13_225 = _impure_ptr;
  _226 = _impure_ptr.13_225->_stdout;
  fprintf (_226, "\r        MicroOpResolver.AddBuiltin : registrations_len_ (%d) < tOpCount (%d)\n", _224, 5);
  _impure_ptr.13_228 = _impure_ptr;
  _229 = _impure_ptr.13_228->_stdout;
  fflush (_229);
  _231 = micro_op_resolver_quantdt.registrations_len_;
  # DEBUG D#4 => &micro_op_resolver_quantdt.registrations_[_231]
  # DEBUG new_registration => D#4
  _232 = _231 + 1;
  micro_op_resolver_quantdt.registrations_len_ = _232;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_231] = MEM[(const struct TfLiteRegistration &)_34];
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_231].builtin_code = 3;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_231].version = 1;
  # DEBUG version => 2
  # DEBUG version => 2
  goto <bb 23>;

  <bb 22>:
  _impure_ptr.13_110 = _impure_ptr;
  _111 = _impure_ptr.13_110->_stdout;
  fprintf (_111, "\rError: MicroOpResolver.AddBuiltin : registrations_len_ (%d) >= tOpCount (%d)\n", _224, 5);
  _impure_ptr.13_112 = _impure_ptr;
  _113 = _impure_ptr.13_112->_stdout;
  fflush (_113);

  <bb 23>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG min_version => NULL
  # DEBUG max_version => NULL
  # DEBUG version => NULL
  _37 = tflite::ops::micro::Register_DEPTHWISE_CONV_2D ();
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG op => 4
  # DEBUG registration => _37
  # DEBUG min_version => 1
  # DEBUG max_version => 1
  # DEBUG version => 1
  _208 = micro_op_resolver_quantdt.registrations_len_;
  if (_208 > 4)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  _impure_ptr.13_209 = _impure_ptr;
  _210 = _impure_ptr.13_209->_stdout;
  fprintf (_210, "\r        MicroOpResolver.AddBuiltin : registrations_len_ (%d) < tOpCount (%d)\n", _208, 5);
  _impure_ptr.13_212 = _impure_ptr;
  _213 = _impure_ptr.13_212->_stdout;
  fflush (_213);
  _215 = micro_op_resolver_quantdt.registrations_len_;
  # DEBUG D#4 => &micro_op_resolver_quantdt.registrations_[_215]
  # DEBUG new_registration => D#4
  _216 = _215 + 1;
  micro_op_resolver_quantdt.registrations_len_ = _216;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_215] = MEM[(const struct TfLiteRegistration &)_37];
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_215].builtin_code = 4;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_215].version = 1;
  # DEBUG version => 2
  # DEBUG version => 2
  goto <bb 26>;

  <bb 25>:
  _impure_ptr.13_96 = _impure_ptr;
  _97 = _impure_ptr.13_96->_stdout;
  fprintf (_97, "\rError: MicroOpResolver.AddBuiltin : registrations_len_ (%d) >= tOpCount (%d)\n", _208, 5);
  _impure_ptr.13_98 = _impure_ptr;
  _99 = _impure_ptr.13_98->_stdout;
  fflush (_99);

  <bb 26>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG min_version => NULL
  # DEBUG max_version => NULL
  # DEBUG version => NULL
  _40 = tflite::ops::micro::Register_AVERAGE_POOL_2D ();
  # DEBUG this => &micro_op_resolver_quantdt
  # DEBUG op => 1
  # DEBUG registration => _40
  # DEBUG min_version => 1
  # DEBUG max_version => 1
  # DEBUG version => 1
  _120 = micro_op_resolver_quantdt.registrations_len_;
  if (_120 > 4)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  _impure_ptr.13_106 = _impure_ptr;
  _92 = _impure_ptr.13_106->_stdout;
  fprintf (_92, "\r        MicroOpResolver.AddBuiltin : registrations_len_ (%d) < tOpCount (%d)\n", _120, 5);
  _impure_ptr.13_32 = _impure_ptr;
  _35 = _impure_ptr.13_32->_stdout;
  fflush (_35);
  _41 = micro_op_resolver_quantdt.registrations_len_;
  # DEBUG D#4 => &micro_op_resolver_quantdt.registrations_[_41]
  # DEBUG new_registration => D#4
  _200 = _41 + 1;
  micro_op_resolver_quantdt.registrations_len_ = _200;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_41] = MEM[(const struct TfLiteRegistration &)_40];
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_41].builtin_code = 1;
  MEM[(struct TfLiteRegistration *)&micro_op_resolver_quantdt].registrations_[_41].version = 1;
  # DEBUG version => 2
  # DEBUG version => 2
  goto <bb 29>;

  <bb 28>:
  _impure_ptr.13_82 = _impure_ptr;
  _83 = _impure_ptr.13_82->_stdout;
  fprintf (_83, "\rError: MicroOpResolver.AddBuiltin : registrations_len_ (%d) >= tOpCount (%d)\n", _120, 5);
  _impure_ptr.13_84 = _impure_ptr;
  _85 = _impure_ptr.13_84->_stdout;
  fflush (_85);

  <bb 29>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG min_version => NULL
  # DEBUG max_version => NULL
  # DEBUG version => NULL
  _43 = __atomic_load_1 (&_ZGVZ24tfl_quantdt_dnn_setupPrevE26static_interpreter_quantdt, 2);
  _77 = _43 & 1;
  if (_77 == 0)
    goto <bb 31>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 34>;

  <bb 31>:
  _45 = __cxa_guard_acquire (&_ZGVZ24tfl_quantdt_dnn_setupPrevE26static_interpreter_quantdt);
  if (_45 != 0)
    goto <bb 32>;
  else
    goto <bb 30>;

  <bb 32>:
  model_quantdt.3_46 = model_quantdt;
  error_reporter_quantdt.4_47 = error_reporter_quantdt;
  tflite::MicroInterpreter::MicroInterpreter (&static_interpreter_quantdt, model_quantdt.3_46, &micro_op_resolver_quantdt.D.167502, &tensor_arena_quantdt, 10240, error_reporter_quantdt.4_47);

  <bb 33>:
  __cxa_guard_release (&_ZGVZ24tfl_quantdt_dnn_setupPrevE26static_interpreter_quantdt);

  <bb 34>:
  interpreter_quantdt = &static_interpreter_quantdt;
  error_reporter_quantdt.4_52 = error_reporter_quantdt;
  tflite::ErrorReporter::Report (error_reporter_quantdt.4_52, "   start allocating tensors");
  interpreter_quantdt.9_54 = interpreter_quantdt;
  _56 = tflite::MicroInterpreter::AllocateTensors (interpreter_quantdt.9_54);
  # DEBUG allocate_status_quantdt => _56
  if (_56 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  error_reporter_quantdt.4_57 = error_reporter_quantdt;
  tflite::ErrorReporter::Report (error_reporter_quantdt.4_57, "AllocateTensors() failed");
  goto <bb 37>;

  <bb 36>:
  error_reporter_quantdt.4_59 = error_reporter_quantdt;
  tflite::ErrorReporter::Report (error_reporter_quantdt.4_59, "   tensors allocated without error");
  interpreter_quantdt.9_61 = interpreter_quantdt;
  _63 = tflite::MicroInterpreter::input (interpreter_quantdt.9_61, 0);
  input_quantdt = _63;

  <bb 37>:
  return;

<L23>:
  __cxa_guard_abort (&_ZGVZ24tfl_quantdt_dnn_setupPrevE26static_interpreter_quantdt);
  resx 3

}


