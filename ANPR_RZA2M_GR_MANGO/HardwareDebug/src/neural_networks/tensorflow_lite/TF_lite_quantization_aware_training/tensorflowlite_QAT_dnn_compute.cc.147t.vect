
;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE, funcdef_no=10158, decl_uid=186273, cgraph_uid=7107, symbol_order=7178)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:45:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * _2;
  sizetype _7;
  long int _9;
  sizetype _10;
  unsigned int _14;
  long int _15;
  long int _16;

  <bb 2>:
  if (op_3(D) == 32)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i => 0
  _14 = this_6(D)->registrations_len_;
  if (_14 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG D#24 => &this_6(D)->registrations_[0]
  # DEBUG registration => D#24
  _15 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[0].builtin_code;
  _16 = (long int) op_3(D);
  if (_15 == _16)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 10>;

  <bb 6>:
  registration_13 = &this_6(D)->registrations_[0];
  goto <bb 11>;

  <bb 7>:
  # DEBUG D#23 => i_11 * 32
  # DEBUG D#22 => D#23 + 4
  # DEBUG registration => this_6(D) + D#22
  _9 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[i_11].builtin_code;
  if (_9 == _16)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  # i_4 = PHI <i_11(7)>
  _7 = i_4 * 32;
  _10 = _7 + 4;
  registration_8 = this_6(D) + _10;
  goto <bb 11>;

  <bb 9>:

  <bb 10>:
  # i_17 = PHI <0(5), i_11(9)>
  # DEBUG i => i_17
  # DEBUG registration => D#24
  i_11 = i_17 + 1;
  # DEBUG i => i_11
  # DEBUG i => i_11
  if (i_11 >= _14)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 11>:
  # _2 = PHI <0B(3), registration_8(8), registration_13(6), 0B(2), 0B(10)>
  return _2;

}



;; Function TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE, funcdef_no=11540, decl_uid=186279, cgraph_uid=8489, symbol_order=9356)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:68:41: note: vectorized 0 loops in function.
TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  unsigned int i;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _2;
  unsigned int _5;
  BuiltinOperator _7;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _10;
  BuiltinOperator _13;

  <bb 2>:
  _5 = this_4(D)->num_buitin_ops_;
  if (_5 <= 5)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG i => 0
  if (_5 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 4>:
  abort ();

  <bb 5>:
  _13 = this_4(D)->builtin_codes_[0];
  if (op_8(D) == _13)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 6>:
  _7 = this_4(D)->builtin_codes_[i_9];
  if (_7 == op_8(D))
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 11>;

  <bb 8>:
  # i_1 = PHI <i_9(6)>

  <bb 9>:
  # i_15 = PHI <i_1(8), 0(5)>
  _10 = this_4(D)->builtin_parsers_[i_15];
  goto <bb 12>;

  <bb 10>:

  <bb 11>:
  # i_14 = PHI <0(10), i_9(7)>
  # DEBUG i => i_14
  i_9 = i_14 + 1;
  # DEBUG i => i_9
  # DEBUG i => i_9
  if (_5 <= i_9)
    goto <bb 12>;
  else
    goto <bb 6>;

  <bb 12>:
  # _2 = PHI <_10(9), 0B(11), 0B(3)>
  return _2;

}



;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc, funcdef_no=11539, decl_uid=186276, cgraph_uid=8488, symbol_order=9355)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:57:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, const char * op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  sizetype _1;
  const struct TfLiteRegistration * _2;
  sizetype _5;
  long int _7;
  const char * _9;
  int _11;
  unsigned int _13;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _13 = this_4(D)->registrations_len_;
  if (_13 == 0)
    goto <bb 9>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # i_14 = PHI <0(3), i_8(8)>
  # DEBUG i => i_14
  # DEBUG D#27 => i_14 * 32
  # DEBUG D#26 => D#27 + 4
  # DEBUG registration => this_4(D) + D#26
  _7 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].builtin_code;
  if (_7 == 32)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _9 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].custom_name;
  _11 = strcmp (_9, op_10(D));
  if (_11 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # i_21 = PHI <i_14(5)>
  _5 = i_21 * 32;
  _1 = _5 + 4;
  registration_6 = this_4(D) + _1;
  goto <bb 9>;

  <bb 7>:
  i_8 = i_14 + 1;
  # DEBUG i => i_8
  # DEBUG i => i_8
  if (i_8 >= _13)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # _2 = PHI <registration_6(6), 0B(7), 0B(2)>
  return _2;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi, funcdef_no=6917, decl_uid=184860, cgraph_uid=3957, symbol_order=3997)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_op_resolver.h:53:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (const struct MicroOpResolver * const this, BuiltinOperator op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244281;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  long int _6;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  const struct TfLiteRegistration * _10;
  long int _11;
  sizetype _12;
  long int _15;
  sizetype _16;
  unsigned int _19;

  <bb 2>:
  _3 = this_2(D)->D.184881._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 24B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  # DEBUG this => this_2(D)
  # DEBUG op => op_5(D)
  if (op_5(D) == 32)
    goto <bb 13>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG i => 0
  _19 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_19 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

  <bb 5>:
  # DEBUG D#30 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#30
  _11 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  _6 = (long int) op_5(D);
  if (_6 == _11)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 11>;

  <bb 7>:
  registration_9 = &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0];
  goto <bb 13>;

  <bb 8>:
  # DEBUG D#29 => i_17 * 32
  # DEBUG D#28 => D#29 + 4
  # DEBUG registration => this_2(D) + D#28
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_17].builtin_code;
  if (_6 == _15)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # i_18 = PHI <i_17(8)>
  _12 = i_18 * 32;
  _16 = _12 + 4;
  registration_14 = this_2(D) + _16;
  goto <bb 13>;

  <bb 10>:

  <bb 11>:
  # i_23 = PHI <0(6), i_17(10)>
  # DEBUG i => i_23
  # DEBUG registration => D#30
  i_17 = i_23 + 1;
  # DEBUG i => i_17
  # DEBUG i => i_17
  if (i_17 >= _19)
    goto <bb 13>;
  else
    goto <bb 8>;

  <bb 12>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6) (this_2(D), op_5(D));

  <bb 13>:
  # _7 = PHI <_10(12), registration_9(7), 0B(4), registration_14(9), 0B(3), 0B(11)>
  return _7;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (_ZNK6tflite15MicroOpResolver6FindOpEPKci, funcdef_no=6918, decl_uid=184864, cgraph_uid=3958, symbol_order=3998)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_op_resolver.h:60:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (const struct MicroOpResolver * const this, const char * op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244288;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  unsigned int _9;
  const struct TfLiteRegistration * _10;
  sizetype _12;
  sizetype _13;
  long int _15;
  const char * _16;
  int _17;

  <bb 2>:
  _3 = this_2(D)->D.184881._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 28B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  # DEBUG i => 0
  _9 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_9 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:

  <bb 5>:
  # i_11 = PHI <0(4), i_18(9)>
  # DEBUG i => i_11
  # DEBUG D#33 => i_11 * 32
  # DEBUG D#32 => D#33 + 4
  # DEBUG registration => this_2(D) + D#32
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].builtin_code;
  if (_15 == 32)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  _16 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].custom_name;
  _17 = strcmp (_16, op_5(D));
  if (_17 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # i_27 = PHI <i_11(6)>
  _12 = i_27 * 32;
  _13 = _12 + 4;
  registration_14 = this_2(D) + _13;
  goto <bb 11>;

  <bb 8>:
  i_18 = i_11 + 1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  if (_9 <= i_18)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 5>;

  <bb 10>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7) (this_2(D), op_5(D));

  <bb 11>:
  # _7 = PHI <_10(10), registration_14(7), 0B(8), 0B(3)>
  return _7;

}



;; Function void tfl_QAT_dnn_setupPre() (tfl_QAT_dnn_setupPre, funcdef_no=7045, decl_uid=8198, cgraph_uid=4003, symbol_order=4059)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
../src/neural_networks/tensorflow_lite/TF_lite_quantization_aware_training/tensorflowlite_QAT_dnn_compute.cc:62:6: note: vectorized 0 loops in function.
void tfl_QAT_dnn_setupPre() ()
{
  TfLiteStatus D.244376;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244371;
  TfLiteStatus D.244366;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244361;
  TfLiteStatus D.244356;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244351;
  TfLiteStatus D.244346;
  TfLiteStatus D.244341;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244336;
  TfLiteStatus D.244331;
  TfLiteStatus D.244326;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244321;
  TfLiteStatus D.244316;
  struct TfLiteRegistration D.244311;
  TfLiteStatus D.244310;
  struct TfLiteRegistration D.244308;
  TfLiteStatus D.244307;
  struct TfLiteRegistration D.244305;
  TfLiteStatus D.244304;
  TfLiteStatus D.244302;
  TfLiteStatus D.244297;
  static struct MicroInterpreter static_interpreter_QAT;
  static struct MicroMutableOpResolver micro_op_resolver_QAT;
  static struct MicroProfiler micro_profiler_QAT;
  static struct MicroErrorReporter micro_error_reporter_QAT = {.D.9061={._vptr.ErrorReporter=&MEM[(void *)&_ZTVN6tflite18MicroErrorReporterE + 8B]}};
  struct TfLiteRegistration D.186544;
  struct TfLiteRegistration D.186542;
  unsigned char _9;
  int _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _18;
  int _20;
  unsigned char _21;
  sizetype _25;
  sizetype _27;
  struct ErrorReporter * error_reporter_QAT.6_28;
  long int _29;
  struct ErrorReporter * error_reporter_QAT.6_31;
  const uint8_t[1] * _32;
  struct ErrorReporter * error_reporter_QAT.6_34;
  unsigned char _37;
  int _39;
  struct ErrorReporter * error_reporter_QAT.6_40;
  unsigned char _51;
  int _53;
  const struct Model * model_QAT.5_54;
  struct ErrorReporter * error_reporter_QAT.6_55;
  struct MicroProfiler * profiler_QAT.11_56;
  struct ErrorReporter * error_reporter_QAT.6_62;
  struct MicroInterpreter * interpreter_QAT.12_64;
  TfLiteStatus _66;
  struct ErrorReporter * error_reporter_QAT.6_67;
  struct ErrorReporter * error_reporter_QAT.6_69;
  struct MicroInterpreter * interpreter_QAT.12_71;
  struct TfLiteTensor * _73;
  struct ErrorReporter * error_reporter_QAT.6_75;
  struct TfLiteIntArray * _76;
  int _77;
  struct ErrorReporter * error_reporter_QAT.6_79;
  struct TfLiteTensor * input_QAT.13_80;
  struct TfLiteIntArray * _81;
  int _82;
  int _83;
  int _84;
  int _85;
  struct TfLiteTensor * input_QAT.13_87;
  TfLiteType _88;
  struct ErrorReporter * error_reporter_QAT.6_89;
  struct ErrorReporter * error_reporter_QAT.6_91;
  struct MicroInterpreter * interpreter_QAT.12_93;
  struct TfLiteTensor * _95;
  struct ErrorReporter * error_reporter_QAT.6_96;
  struct TfLiteIntArray * _97;
  int _98;
  struct ErrorReporter * error_reporter_QAT.6_100;
  struct TfLiteIntArray * _101;
  int _102;
  int _103;
  TfLiteType _105;
  struct ErrorReporter * error_reporter_QAT.6_106;
  struct ErrorReporter * error_reporter_QAT.6_108;
  const uint8_t * _110;
  short unsigned int _111;
  int _112;
  short unsigned int _113;
  sizetype _115;
  const void * _116;
  long unsigned int _117;
  long unsigned int _119;
  struct Model * _120;
  unsigned char _123;
  unsigned int _132;
  unsigned int prephitmp_133;
  struct ErrorReporter * _135;
  long int _138;
  long unsigned int iftmp.15_139;
  unsigned int _141;
  unsigned int _142;
  unsigned int _145;
  unsigned int prephitmp_146;
  struct ErrorReporter * _148;
  unsigned int _149;
  long int _152;
  unsigned int _154;
  unsigned int _155;
  unsigned int _161;
  unsigned int _162;
  struct ErrorReporter * _164;
  unsigned int _170;
  unsigned int _171;
  unsigned int _172;
  long int _176;
  struct ErrorReporter * _181;
  unsigned int _185;
  struct ErrorReporter * _188;
  unsigned int _194;
  unsigned int _195;
  unsigned int _196;
  long int _200;
  struct ErrorReporter * _205;
  struct ErrorReporter * _212;
  long int _215;
  unsigned int _218;
  unsigned int _219;
  long int _224;
  struct ErrorReporter * _229;
  unsigned int _231;
  long int _235;
  unsigned int prephitmp_238;
  struct ErrorReporter * _240;
  long int _241;
  unsigned int _242;
  unsigned int _245;
  long int _246;
  unsigned int _247;
  unsigned int _249;
  struct ErrorReporter * _251;
  long int _253;
  unsigned int prephitmp_256;
  unsigned int _258;
  unsigned int prephitmp_262;
  unsigned int _319;

  <bb 2>:
  _9 = __atomic_load_1 (&_ZGVZ20tfl_QAT_dnn_setupPreE24micro_error_reporter_QAT, 2);
  _12 = _9 & 1;
  if (_12 == 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 6>;

  <bb 4>:
  _11 = __cxa_guard_acquire (&_ZGVZ20tfl_QAT_dnn_setupPreE24micro_error_reporter_QAT);
  if (_11 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  __cxa_guard_release (&_ZGVZ20tfl_QAT_dnn_setupPreE24micro_error_reporter_QAT);
  __aeabi_atexit (&micro_error_reporter_QAT, __comp_dtor , &__dso_handle);

  <bb 6>:
  error_reporter_QAT = &micro_error_reporter_QAT.D.9061;
  _18 = __atomic_load_1 (&_ZGVZ20tfl_QAT_dnn_setupPreE18micro_profiler_QAT, 2);
  _13 = _18 & 1;
  if (_13 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 10>;

  <bb 8>:
  _20 = __cxa_guard_acquire (&_ZGVZ20tfl_QAT_dnn_setupPreE18micro_profiler_QAT);
  if (_20 != 0)
    goto <bb 9>;
  else
    goto <bb 7>;

  <bb 9>:
  # DEBUG this => &micro_profiler_QAT
  micro_profiler_QAT._vptr.MicroProfiler = &MEM[(void *)&_ZTVN6tflite13MicroProfilerE + 8B];
  micro_profiler_QAT.num_events_ = 0;
  # DEBUG this => NULL
  __cxa_guard_release (&_ZGVZ20tfl_QAT_dnn_setupPreE18micro_profiler_QAT);
  __aeabi_atexit (&micro_profiler_QAT, __comp_dtor , &__dso_handle);

  <bb 10>:
  profiler_QAT = &micro_profiler_QAT;
  # DEBUG buf => &g_CNN_FE_Schrift_QAT_data
  # DEBUG buf => &g_CNN_FE_Schrift_QAT_data
  # DEBUG buf => &g_CNN_FE_Schrift_QAT_data
  _119 = MEM[(uoffset_t *)&g_CNN_FE_Schrift_QAT_data];
  # DEBUG t => _119
  # DEBUG t => NULL
  _120 = &g_CNN_FE_Schrift_QAT_data + _119;
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  model_QAT = _120;
  # DEBUG this => _120
  # DEBUG D#6 => &MEM[(const struct Model *)_120].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  _32 = &MEM[(const struct Table *)_120].data_;
  # DEBUG p => _32
  _29 = MEM[(const long int *)_120];
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  _27 = (sizetype) _29;
  _25 = -_27;
  _110 = _32 + _25;
  # DEBUG this => NULL
  # DEBUG vtable => _110
  # DEBUG p => _110
  _111 = MEM[(const short unsigned int *)_110];
  # DEBUG t => _111
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _111
  _112 = (int) _111;
  if (_112 > 4)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  # DEBUG p => _110 + 4
  _113 = MEM[(const short unsigned int *)_110 + 4B];
  # DEBUG t => _113
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => _113
  if (_113 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _115 = (sizetype) _113;
  _116 = _32 + _115;
  # DEBUG p => _116
  _117 = MEM[(const long unsigned int *)_116];
  # DEBUG t => _117
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  if (_117 != 3)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # iftmp.15_139 = PHI <_117(12), 0(11), 0(10)>
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  error_reporter_QAT.6_28 = error_reporter_QAT;
  # DEBUG this => _120
  # DEBUG D#6 => &MEM[(const struct Model *)_120].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  # DEBUG p => _32
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG vtable => _110
  # DEBUG p => _110
  # DEBUG t => _111
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _111
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  tflite::ErrorReporter::Report (error_reporter_QAT.6_28, "QAT model provided is schema version %d not equal to supported version %d.", iftmp.15_139, 3);
  goto <bb 81>;

  <bb 14>:
  error_reporter_QAT.6_31 = error_reporter_QAT;
  # DEBUG this => _120
  # DEBUG D#6 => &MEM[(const struct Model *)_120].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  # DEBUG p => _32
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG vtable => _110
  # DEBUG p => _110
  # DEBUG t => _111
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _111
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  tflite::ErrorReporter::Report (error_reporter_QAT.6_31, "   Model provided is schema version %d (equal to supported version %d).", 3, 3);
  error_reporter_QAT.6_34 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_34, "   => quantized model (QAT) loaded without error.");
  _37 = __atomic_load_1 (&_ZGVZ20tfl_QAT_dnn_setupPreE21micro_op_resolver_QAT, 2);
  _21 = _37 & 1;
  if (_21 == 0)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  goto <bb 18>;

  <bb 16>:
  _39 = __cxa_guard_acquire (&_ZGVZ20tfl_QAT_dnn_setupPreE21micro_op_resolver_QAT);
  if (_39 != 0)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 17>:
  error_reporter_QAT.6_40 = error_reporter_QAT;
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG error_reporter => error_reporter_QAT.6_40
  MEM[(struct  &)&micro_op_resolver_QAT] ={v} {CLOBBER};
  # DEBUG D#5 => &micro_op_resolver_QAT.D.186481
  # DEBUG this => D#5
  # DEBUG D#4 => &D#5->D.184881
  # DEBUG this => D#4
  # DEBUG this => NULL
  # DEBUG this => NULL
  micro_op_resolver_QAT.D.186481.D.184881._vptr.OpResolver = &MEM[(void *)&_ZTVN6tflite22MicroMutableOpResolverILj5EEE + 8B];
  micro_op_resolver_QAT.registrations_len_ = 0;
  micro_op_resolver_QAT.num_buitin_ops_ = 0;
  micro_op_resolver_QAT.error_reporter_ = error_reporter_QAT.6_40;
  # DEBUG this => NULL
  # DEBUG error_reporter => NULL
  __cxa_guard_release (&_ZGVZ20tfl_QAT_dnn_setupPreE21micro_op_resolver_QAT);
  __aeabi_atexit (&micro_op_resolver_QAT, __comp_dtor , &__dso_handle);

  <bb 18>:
  # DEBUG this => &micro_op_resolver_QAT
  D.244311 = tflite::Register_CONV_2D (); [return slot optimization]
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 3
  # DEBUG registration => &D.244311
  # DEBUG parser => ParseConv2D
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 3
  # DEBUG i => 0
  _242 = micro_op_resolver_QAT.registrations_len_;
  if (_242 == 0)
    goto <bb 27>;
  else
    goto <bb 19>;

  <bb 19>:
  # DEBUG D#38 => &micro_op_resolver_QAT.registrations_[0]
  # DEBUG registration => D#38
  _241 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[0].builtin_code;
  if (_241 == 3)
    goto <bb 83>;
  else
    goto <bb 22>;

  <bb 20>:
  # DEBUG D#38 => &micro_op_resolver_QAT.registrations_[i_178]
  # DEBUG registration => D#38
  _176 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[i_178].builtin_code;
  if (_176 == 3)
    goto <bb 83>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 23>;

  <bb 22>:

  <bb 23>:
  # i_213 = PHI <0(22), i_178(21)>
  # DEBUG i => i_213
  # DEBUG D#38 => &micro_op_resolver_QAT.registrations_[i_213]
  # DEBUG registration => D#38
  i_178 = i_213 + 1;
  # DEBUG i => i_178
  # DEBUG i => i_178
  if (i_178 >= _242)
    goto <bb 84>;
  else
    goto <bb 20>;

  <bb 24>:
  tflite::ErrorReporter::Report (_164, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 3);
  goto <bb 28>;

  <bb 25>:
  # DEBUG D#7 => &D.244311
  # DEBUG D#8 => ParseConv2D
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 3
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _181 = micro_op_resolver_QAT.error_reporter_;
  if (_181 != 0B)
    goto <bb 26>;
  else
    goto <bb 28>;

  <bb 26>:
  tflite::ErrorReporter::Report (_181, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 3, 5);
  goto <bb 28>;

  <bb 27>:
  # _185 = PHI <_242(85), 0(18)>
  # prephitmp_238 = PHI <_249(85), 1(18)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver_QAT.registrations_[_185] = D.244311;
  micro_op_resolver_QAT.registrations_[_185].builtin_code = 3;
  micro_op_resolver_QAT.registrations_len_ = prephitmp_238;
  _170 = micro_op_resolver_QAT.num_buitin_ops_;
  micro_op_resolver_QAT.builtin_codes_[_170] = 3;
  micro_op_resolver_QAT.builtin_parsers_[_170] = ParseConv2D;
  _171 = _170 + 1;
  micro_op_resolver_QAT.num_buitin_ops_ = _171;

  <bb 28>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244311 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => &micro_op_resolver_QAT
  D.244308 = tflite::ops::micro::Register_MAX_POOL_2D (); [return slot optimization]
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 17
  # DEBUG registration => &D.244308
  # DEBUG parser => ParsePool
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 17
  # DEBUG i => 0
  _149 = micro_op_resolver_QAT.registrations_len_;
  if (_149 == 0)
    goto <bb 37>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG D#37 => &micro_op_resolver_QAT.registrations_[0]
  # DEBUG registration => D#37
  _152 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[0].builtin_code;
  if (_152 == 17)
    goto <bb 88>;
  else
    goto <bb 32>;

  <bb 30>:
  # DEBUG D#37 => &micro_op_resolver_QAT.registrations_[i_202]
  # DEBUG registration => D#37
  _200 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[i_202].builtin_code;
  if (_200 == 17)
    goto <bb 88>;
  else
    goto <bb 31>;

  <bb 31>:
  goto <bb 33>;

  <bb 32>:

  <bb 33>:
  # i_295 = PHI <0(32), i_202(31)>
  # DEBUG i => i_295
  # DEBUG D#37 => &micro_op_resolver_QAT.registrations_[i_295]
  # DEBUG registration => D#37
  i_202 = i_295 + 1;
  # DEBUG i => i_202
  # DEBUG i => i_202
  if (_149 <= i_202)
    goto <bb 86>;
  else
    goto <bb 30>;

  <bb 34>:
  tflite::ErrorReporter::Report (_188, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 17);
  goto <bb 38>;

  <bb 35>:
  # DEBUG D#7 => &D.244308
  # DEBUG D#8 => ParsePool
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 17
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _205 = micro_op_resolver_QAT.error_reporter_;
  if (_205 != 0B)
    goto <bb 36>;
  else
    goto <bb 38>;

  <bb 36>:
  tflite::ErrorReporter::Report (_205, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 17, 5);
  goto <bb 38>;

  <bb 37>:
  # _161 = PHI <_149(87), 0(28)>
  # prephitmp_256 = PHI <_258(87), 1(28)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver_QAT.registrations_[_161] = D.244308;
  micro_op_resolver_QAT.registrations_[_161].builtin_code = 17;
  micro_op_resolver_QAT.registrations_len_ = prephitmp_256;
  _194 = micro_op_resolver_QAT.num_buitin_ops_;
  micro_op_resolver_QAT.builtin_codes_[_194] = 17;
  micro_op_resolver_QAT.builtin_parsers_[_194] = ParsePool;
  _195 = _194 + 1;
  micro_op_resolver_QAT.num_buitin_ops_ = _195;

  <bb 38>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244308 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => &micro_op_resolver_QAT
  D.244305 = tflite::ops::micro::Register_RESHAPE (); [return slot optimization]
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 22
  # DEBUG registration => &D.244305
  # DEBUG parser => ParseReshape
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 22
  # DEBUG i => 0
  _319 = micro_op_resolver_QAT.registrations_len_;
  if (_319 == 0)
    goto <bb 47>;
  else
    goto <bb 39>;

  <bb 39>:
  # DEBUG D#36 => &micro_op_resolver_QAT.registrations_[0]
  # DEBUG registration => D#36
  _253 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[0].builtin_code;
  if (_253 == 22)
    goto <bb 89>;
  else
    goto <bb 42>;

  <bb 40>:
  # DEBUG D#36 => &micro_op_resolver_QAT.registrations_[i_226]
  # DEBUG registration => D#36
  _224 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[i_226].builtin_code;
  if (_224 == 22)
    goto <bb 89>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # i_225 = PHI <0(42), i_226(41)>
  # DEBUG i => i_225
  # DEBUG D#36 => &micro_op_resolver_QAT.registrations_[i_225]
  # DEBUG registration => D#36
  i_226 = i_225 + 1;
  # DEBUG i => i_226
  # DEBUG i => i_226
  if (i_226 >= _319)
    goto <bb 90>;
  else
    goto <bb 40>;

  <bb 44>:
  tflite::ErrorReporter::Report (_212, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 22);
  goto <bb 48>;

  <bb 45>:
  # DEBUG D#7 => &D.244305
  # DEBUG D#8 => ParseReshape
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 22
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _229 = micro_op_resolver_QAT.error_reporter_;
  if (_229 != 0B)
    goto <bb 46>;
  else
    goto <bb 48>;

  <bb 46>:
  tflite::ErrorReporter::Report (_229, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 22, 5);
  goto <bb 48>;

  <bb 47>:
  # _162 = PHI <_319(91), 0(38)>
  # prephitmp_262 = PHI <_245(91), 1(38)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver_QAT.registrations_[_162] = D.244305;
  micro_op_resolver_QAT.registrations_[_162].builtin_code = 22;
  micro_op_resolver_QAT.registrations_len_ = prephitmp_262;
  _218 = micro_op_resolver_QAT.num_buitin_ops_;
  micro_op_resolver_QAT.builtin_codes_[_218] = 22;
  micro_op_resolver_QAT.builtin_parsers_[_218] = ParseReshape;
  _219 = _218 + 1;
  micro_op_resolver_QAT.num_buitin_ops_ = _219;

  <bb 48>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244305 ={v} {CLOBBER};
  # DEBUG this => NULL
  D.186542 = tflite::Register_FULLY_CONNECTED (); [return slot optimization]
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG registration => &D.186542
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 9
  # DEBUG registration => &D.186542
  # DEBUG parser => ParseFullyConnected
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 9
  # DEBUG i => 0
  _247 = micro_op_resolver_QAT.registrations_len_;
  if (_247 == 0)
    goto <bb 57>;
  else
    goto <bb 49>;

  <bb 49>:
  # DEBUG D#35 => &micro_op_resolver_QAT.registrations_[0]
  # DEBUG registration => D#35
  _138 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[0].builtin_code;
  if (_138 == 9)
    goto <bb 92>;
  else
    goto <bb 52>;

  <bb 50>:
  # DEBUG D#35 => &micro_op_resolver_QAT.registrations_[i_237]
  # DEBUG registration => D#35
  _235 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[i_237].builtin_code;
  if (_235 == 9)
    goto <bb 92>;
  else
    goto <bb 51>;

  <bb 51>:
  goto <bb 53>;

  <bb 52>:

  <bb 53>:
  # i_191 = PHI <0(52), i_237(51)>
  # DEBUG i => i_191
  # DEBUG D#35 => &micro_op_resolver_QAT.registrations_[i_191]
  # DEBUG registration => D#35
  i_237 = i_191 + 1;
  # DEBUG i => i_237
  # DEBUG i => i_237
  if (i_237 >= _247)
    goto <bb 93>;
  else
    goto <bb 50>;

  <bb 54>:
  tflite::ErrorReporter::Report (_148, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 9);
  goto <bb 58>;

  <bb 55>:
  # DEBUG D#7 => &D.186542
  # DEBUG D#8 => ParseFullyConnected
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 9
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _240 = micro_op_resolver_QAT.error_reporter_;
  if (_240 != 0B)
    goto <bb 56>;
  else
    goto <bb 58>;

  <bb 56>:
  tflite::ErrorReporter::Report (_240, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 9, 5);
  goto <bb 58>;

  <bb 57>:
  # _172 = PHI <_247(94), 0(48)>
  # prephitmp_133 = PHI <_132(94), 1(48)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver_QAT.registrations_[_172] = D.186542;
  micro_op_resolver_QAT.registrations_[_172].builtin_code = 9;
  micro_op_resolver_QAT.registrations_len_ = prephitmp_133;
  _154 = micro_op_resolver_QAT.num_buitin_ops_;
  micro_op_resolver_QAT.builtin_codes_[_154] = 9;
  micro_op_resolver_QAT.builtin_parsers_[_154] = ParseFullyConnected;
  _155 = _154 + 1;
  micro_op_resolver_QAT.num_buitin_ops_ = _155;

  <bb 58>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.186542 ={v} {CLOBBER};
  D.186544 = tflite::Register_SOFTMAX (); [return slot optimization]
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG registration => &D.186544
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 25
  # DEBUG registration => &D.186544
  # DEBUG parser => ParseSoftmax
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 25
  # DEBUG i => 0
  _231 = micro_op_resolver_QAT.registrations_len_;
  if (_231 == 0)
    goto <bb 67>;
  else
    goto <bb 59>;

  <bb 59>:
  # DEBUG D#34 => &micro_op_resolver_QAT.registrations_[0]
  # DEBUG registration => D#34
  _215 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[0].builtin_code;
  if (_215 == 25)
    goto <bb 95>;
  else
    goto <bb 62>;

  <bb 60>:
  # DEBUG D#34 => &micro_op_resolver_QAT.registrations_[i_248]
  # DEBUG registration => D#34
  _246 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver_QAT].registrations_[i_248].builtin_code;
  if (_246 == 25)
    goto <bb 95>;
  else
    goto <bb 61>;

  <bb 61>:
  goto <bb 63>;

  <bb 62>:

  <bb 63>:
  # i_156 = PHI <0(62), i_248(61)>
  # DEBUG i => i_156
  # DEBUG D#34 => &micro_op_resolver_QAT.registrations_[i_156]
  # DEBUG registration => D#34
  i_248 = i_156 + 1;
  # DEBUG i => i_248
  # DEBUG i => i_248
  if (_231 <= i_248)
    goto <bb 96>;
  else
    goto <bb 60>;

  <bb 64>:
  tflite::ErrorReporter::Report (_135, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 25);
  goto <bb 68>;

  <bb 65>:
  # DEBUG D#7 => &D.186544
  # DEBUG D#8 => ParseSoftmax
  # DEBUG this => &micro_op_resolver_QAT
  # DEBUG op => 25
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _251 = micro_op_resolver_QAT.error_reporter_;
  if (_251 != 0B)
    goto <bb 66>;
  else
    goto <bb 68>;

  <bb 66>:
  tflite::ErrorReporter::Report (_251, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 25, 5);
  goto <bb 68>;

  <bb 67>:
  # _196 = PHI <_231(97), 0(58)>
  # prephitmp_146 = PHI <_145(97), 1(58)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver_QAT.registrations_[_196] = D.186544;
  micro_op_resolver_QAT.registrations_[_196].builtin_code = 25;
  micro_op_resolver_QAT.registrations_len_ = prephitmp_146;
  _141 = micro_op_resolver_QAT.num_buitin_ops_;
  micro_op_resolver_QAT.builtin_codes_[_141] = 25;
  micro_op_resolver_QAT.builtin_parsers_[_141] = ParseSoftmax;
  _142 = _141 + 1;
  micro_op_resolver_QAT.num_buitin_ops_ = _142;

  <bb 68>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.186544 ={v} {CLOBBER};
  _51 = __atomic_load_1 (&_ZGVZ20tfl_QAT_dnn_setupPreE22static_interpreter_QAT, 2);
  _123 = _51 & 1;
  if (_123 == 0)
    goto <bb 70>;
  else
    goto <bb 69>;

  <bb 69>:
  goto <bb 73>;

  <bb 70>:
  _53 = __cxa_guard_acquire (&_ZGVZ20tfl_QAT_dnn_setupPreE22static_interpreter_QAT);
  if (_53 != 0)
    goto <bb 71>;
  else
    goto <bb 69>;

  <bb 71>:
  model_QAT.5_54 = model_QAT;
  error_reporter_QAT.6_55 = error_reporter_QAT;
  profiler_QAT.11_56 = profiler_QAT;
  tflite::MicroInterpreter::MicroInterpreter (&static_interpreter_QAT, model_QAT.5_54, &micro_op_resolver_QAT.D.186481, &tensor_arena_QAT, 10240, error_reporter_QAT.6_55, profiler_QAT.11_56);

  <bb 72>:
  __cxa_guard_release (&_ZGVZ20tfl_QAT_dnn_setupPreE22static_interpreter_QAT);
  __aeabi_atexit (&static_interpreter_QAT, __comp_dtor , &__dso_handle);

  <bb 73>:
  interpreter_QAT = &static_interpreter_QAT;
  error_reporter_QAT.6_62 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_62, "   start allocating tensors");
  interpreter_QAT.12_64 = interpreter_QAT;
  _66 = tflite::MicroInterpreter::AllocateTensors (interpreter_QAT.12_64);
  # DEBUG allocate_status_QAT => _66
  if (_66 != 0)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  error_reporter_QAT.6_67 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_67, "AllocateTensors() failed");
  goto <bb 81>;

  <bb 75>:
  error_reporter_QAT.6_69 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_69, "   allocation finished; status: ok");
  interpreter_QAT.12_71 = interpreter_QAT;
  _73 = tflite::MicroInterpreter::input (interpreter_QAT.12_71, 0);
  input_QAT = _73;
  error_reporter_QAT.6_75 = error_reporter_QAT;
  _76 = _73->dims;
  _77 = _76->size;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_75, "   input  dimensions : %d", _77);
  error_reporter_QAT.6_79 = error_reporter_QAT;
  input_QAT.13_80 = input_QAT;
  _81 = input_QAT.13_80->dims;
  _82 = _81->data[0];
  _83 = _81->data[1];
  _84 = _81->data[2];
  _85 = _81->data[3];
  tflite::ErrorReporter::Report (error_reporter_QAT.6_79, "   input  shape      : %d, %d, %d, %d", _82, _83, _84, _85);
  input_QAT.13_87 = input_QAT;
  _88 = input_QAT.13_87->type;
  if (_88 == 9)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  error_reporter_QAT.6_89 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_89, "   input  type       : %s", "kTfLiteInt8");
  goto <bb 78>;

  <bb 77>:
  error_reporter_QAT.6_91 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_91, "   ATTENTION: input type is not %s", "kTfLiteInt8");

  <bb 78>:
  interpreter_QAT.12_93 = interpreter_QAT;
  _95 = tflite::MicroInterpreter::output (interpreter_QAT.12_93, 0);
  # DEBUG output_QAT => _95
  error_reporter_QAT.6_96 = error_reporter_QAT;
  _97 = _95->dims;
  _98 = _97->size;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_96, "   output dimensions : %d", _98);
  error_reporter_QAT.6_100 = error_reporter_QAT;
  _101 = _95->dims;
  _102 = _101->data[0];
  _103 = _101->data[1];
  tflite::ErrorReporter::Report (error_reporter_QAT.6_100, "   output shape      : %d, %d", _102, _103);
  _105 = _95->type;
  if (_105 == 9)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  error_reporter_QAT.6_106 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_106, "   output type       : %s", "kTfLiteInt8");
  goto <bb 81>;

  <bb 80>:
  error_reporter_QAT.6_108 = error_reporter_QAT;
  tflite::ErrorReporter::Report (error_reporter_QAT.6_108, "   ATTENTION: output type is not %s", "kTfLiteInt8");

  <bb 81>:
  return;

<L37>:
  __cxa_guard_abort (&_ZGVZ20tfl_QAT_dnn_setupPreE22static_interpreter_QAT);
  resx 8

  <bb 83>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _164 = micro_op_resolver_QAT.error_reporter_;
  if (_164 != 0B)
    goto <bb 24>;
  else
    goto <bb 28>;

  <bb 84>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_242 > 4)
    goto <bb 25>;
  else
    goto <bb 85>;

  <bb 85>:
  _249 = _242 + 1;
  goto <bb 27>;

  <bb 86>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_149 > 4)
    goto <bb 35>;
  else
    goto <bb 87>;

  <bb 87>:
  _258 = _149 + 1;
  goto <bb 37>;

  <bb 88>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _188 = micro_op_resolver_QAT.error_reporter_;
  if (_188 != 0B)
    goto <bb 34>;
  else
    goto <bb 38>;

  <bb 89>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _212 = micro_op_resolver_QAT.error_reporter_;
  if (_212 != 0B)
    goto <bb 44>;
  else
    goto <bb 48>;

  <bb 90>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_319 > 4)
    goto <bb 45>;
  else
    goto <bb 91>;

  <bb 91>:
  _245 = _319 + 1;
  goto <bb 47>;

  <bb 92>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _148 = micro_op_resolver_QAT.error_reporter_;
  if (_148 != 0B)
    goto <bb 54>;
  else
    goto <bb 58>;

  <bb 93>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_247 > 4)
    goto <bb 55>;
  else
    goto <bb 94>;

  <bb 94>:
  _132 = _247 + 1;
  goto <bb 57>;

  <bb 95>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _135 = micro_op_resolver_QAT.error_reporter_;
  if (_135 != 0B)
    goto <bb 64>;
  else
    goto <bb 68>;

  <bb 96>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_231 > 4)
    goto <bb 65>;
  else
    goto <bb 97>;

  <bb 97>:
  _145 = _231 + 1;
  goto <bb 67>;

}


