
;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE, funcdef_no=10158, decl_uid=186273, cgraph_uid=7107, symbol_order=7178)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:45:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * _2;
  sizetype _7;
  long int _9;
  sizetype _10;
  unsigned int _14;
  long int _15;
  long int _16;

  <bb 2>:
  if (op_3(D) == 32)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i => 0
  _14 = this_6(D)->registrations_len_;
  if (_14 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG D#24 => &this_6(D)->registrations_[0]
  # DEBUG registration => D#24
  _15 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[0].builtin_code;
  _16 = (long int) op_3(D);
  if (_15 == _16)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 10>;

  <bb 6>:
  registration_13 = &this_6(D)->registrations_[0];
  goto <bb 11>;

  <bb 7>:
  # DEBUG D#23 => i_11 * 32
  # DEBUG D#22 => D#23 + 4
  # DEBUG registration => this_6(D) + D#22
  _9 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[i_11].builtin_code;
  if (_9 == _16)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  # i_4 = PHI <i_11(7)>
  _7 = i_4 * 32;
  _10 = _7 + 4;
  registration_8 = this_6(D) + _10;
  goto <bb 11>;

  <bb 9>:

  <bb 10>:
  # i_17 = PHI <0(5), i_11(9)>
  # DEBUG i => i_17
  # DEBUG registration => D#24
  i_11 = i_17 + 1;
  # DEBUG i => i_11
  # DEBUG i => i_11
  if (i_11 >= _14)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 11>:
  # _2 = PHI <0B(3), registration_8(8), registration_13(6), 0B(2), 0B(10)>
  return _2;

}



;; Function TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE, funcdef_no=11540, decl_uid=186279, cgraph_uid=8489, symbol_order=9356)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:68:41: note: vectorized 0 loops in function.
TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  unsigned int i;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _2;
  unsigned int _5;
  BuiltinOperator _7;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _10;
  BuiltinOperator _13;

  <bb 2>:
  _5 = this_4(D)->num_buitin_ops_;
  if (_5 <= 5)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG i => 0
  if (_5 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 4>:
  abort ();

  <bb 5>:
  _13 = this_4(D)->builtin_codes_[0];
  if (op_8(D) == _13)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 6>:
  _7 = this_4(D)->builtin_codes_[i_9];
  if (_7 == op_8(D))
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 11>;

  <bb 8>:
  # i_1 = PHI <i_9(6)>

  <bb 9>:
  # i_15 = PHI <i_1(8), 0(5)>
  _10 = this_4(D)->builtin_parsers_[i_15];
  goto <bb 12>;

  <bb 10>:

  <bb 11>:
  # i_14 = PHI <0(10), i_9(7)>
  # DEBUG i => i_14
  i_9 = i_14 + 1;
  # DEBUG i => i_9
  # DEBUG i => i_9
  if (_5 <= i_9)
    goto <bb 12>;
  else
    goto <bb 6>;

  <bb 12>:
  # _2 = PHI <_10(9), 0B(11), 0B(3)>
  return _2;

}



;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 5u] (_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc, funcdef_no=11539, decl_uid=186276, cgraph_uid=8488, symbol_order=9355)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:57:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 5u] (const struct MicroMutableOpResolver * const this, const char * op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  sizetype _1;
  const struct TfLiteRegistration * _2;
  sizetype _5;
  long int _7;
  const char * _9;
  int _11;
  unsigned int _13;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _13 = this_4(D)->registrations_len_;
  if (_13 == 0)
    goto <bb 9>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # i_14 = PHI <0(3), i_8(8)>
  # DEBUG i => i_14
  # DEBUG D#27 => i_14 * 32
  # DEBUG D#26 => D#27 + 4
  # DEBUG registration => this_4(D) + D#26
  _7 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].builtin_code;
  if (_7 == 32)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _9 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].custom_name;
  _11 = strcmp (_9, op_10(D));
  if (_11 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # i_21 = PHI <i_14(5)>
  _5 = i_21 * 32;
  _1 = _5 + 4;
  registration_6 = this_4(D) + _1;
  goto <bb 9>;

  <bb 7>:
  i_8 = i_14 + 1;
  # DEBUG i => i_8
  # DEBUG i => i_8
  if (i_8 >= _13)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # _2 = PHI <registration_6(6), 0B(7), 0B(2)>
  return _2;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi, funcdef_no=6917, decl_uid=184860, cgraph_uid=3957, symbol_order=3997)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_op_resolver.h:53:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (const struct MicroOpResolver * const this, BuiltinOperator op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244282;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  long int _6;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  const struct TfLiteRegistration * _10;
  long int _11;
  sizetype _12;
  long int _15;
  sizetype _16;
  unsigned int _19;

  <bb 2>:
  _3 = this_2(D)->D.184881._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 24B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  # DEBUG this => this_2(D)
  # DEBUG op => op_5(D)
  if (op_5(D) == 32)
    goto <bb 13>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG i => 0
  _19 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_19 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

  <bb 5>:
  # DEBUG D#30 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#30
  _11 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  _6 = (long int) op_5(D);
  if (_6 == _11)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 11>;

  <bb 7>:
  registration_9 = &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0];
  goto <bb 13>;

  <bb 8>:
  # DEBUG D#29 => i_17 * 32
  # DEBUG D#28 => D#29 + 4
  # DEBUG registration => this_2(D) + D#28
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_17].builtin_code;
  if (_6 == _15)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # i_18 = PHI <i_17(8)>
  _12 = i_18 * 32;
  _16 = _12 + 4;
  registration_14 = this_2(D) + _16;
  goto <bb 13>;

  <bb 10>:

  <bb 11>:
  # i_23 = PHI <0(6), i_17(10)>
  # DEBUG i => i_23
  # DEBUG registration => D#30
  i_17 = i_23 + 1;
  # DEBUG i => i_17
  # DEBUG i => i_17
  if (i_17 >= _19)
    goto <bb 13>;
  else
    goto <bb 8>;

  <bb 12>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6) (this_2(D), op_5(D));

  <bb 13>:
  # _7 = PHI <_10(12), registration_9(7), 0B(4), registration_14(9), 0B(3), 0B(11)>
  return _7;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (_ZNK6tflite15MicroOpResolver6FindOpEPKci, funcdef_no=6918, decl_uid=184864, cgraph_uid=3958, symbol_order=3998)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_op_resolver.h:60:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (const struct MicroOpResolver * const this, const char * op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244289;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  unsigned int _9;
  const struct TfLiteRegistration * _10;
  sizetype _12;
  sizetype _13;
  long int _15;
  const char * _16;
  int _17;

  <bb 2>:
  _3 = this_2(D)->D.184881._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 28B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  # DEBUG i => 0
  _9 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_9 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:

  <bb 5>:
  # i_11 = PHI <0(4), i_18(9)>
  # DEBUG i => i_11
  # DEBUG D#33 => i_11 * 32
  # DEBUG D#32 => D#33 + 4
  # DEBUG registration => this_2(D) + D#32
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].builtin_code;
  if (_15 == 32)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  _16 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].custom_name;
  _17 = strcmp (_16, op_5(D));
  if (_17 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # i_27 = PHI <i_11(6)>
  _12 = i_27 * 32;
  _13 = _12 + 4;
  registration_14 = this_2(D) + _13;
  goto <bb 11>;

  <bb 8>:
  i_18 = i_11 + 1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  if (_9 <= i_18)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 5>;

  <bb 10>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7) (this_2(D), op_5(D));

  <bb 11>:
  # _7 = PHI <_10(10), registration_14(7), 0B(8), 0B(3)>
  return _7;

}



;; Function void tfl_float_dnn_setupPre() (tfl_float_dnn_setupPre, funcdef_no=7045, decl_uid=8180, cgraph_uid=4003, symbol_order=4059)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
../src/neural_networks/tensorflow_lite/TF_lite_float/tensorflowlite_float_dnn_compute.cc:55:6: note: vectorized 0 loops in function.
void tfl_float_dnn_setupPre() ()
{
  TfLiteStatus D.244377;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244372;
  TfLiteStatus D.244367;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244362;
  TfLiteStatus D.244357;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244352;
  TfLiteStatus D.244347;
  TfLiteStatus D.244342;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244337;
  TfLiteStatus D.244332;
  TfLiteStatus D.244327;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.244322;
  TfLiteStatus D.244317;
  struct TfLiteRegistration D.244312;
  TfLiteStatus D.244311;
  struct TfLiteRegistration D.244309;
  TfLiteStatus D.244308;
  struct TfLiteRegistration D.244306;
  TfLiteStatus D.244305;
  TfLiteStatus D.244303;
  TfLiteStatus D.244298;
  static struct MicroInterpreter static_interpreter;
  static struct MicroMutableOpResolver micro_op_resolver;
  static struct MicroProfiler micro_profiler;
  static struct MicroErrorReporter micro_error_reporter = {.D.9061={._vptr.ErrorReporter=&MEM[(void *)&_ZTVN6tflite18MicroErrorReporterE + 8B]}};
  struct TfLiteRegistration D.186544;
  struct TfLiteRegistration D.186542;
  unsigned char _9;
  int _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _18;
  int _20;
  unsigned char _21;
  sizetype _25;
  sizetype _27;
  struct ErrorReporter * error_reporter.6_28;
  long int _29;
  struct ErrorReporter * error_reporter.6_31;
  const uint8_t[1] * _32;
  struct ErrorReporter * error_reporter.6_34;
  unsigned char _37;
  int _39;
  struct ErrorReporter * error_reporter.6_40;
  unsigned char _51;
  int _53;
  const struct Model * model.5_54;
  struct ErrorReporter * error_reporter.6_55;
  struct MicroProfiler * profiler.11_56;
  struct ErrorReporter * error_reporter.6_62;
  struct MicroInterpreter * interpreter.12_64;
  TfLiteStatus _66;
  struct ErrorReporter * error_reporter.6_67;
  struct ErrorReporter * error_reporter.6_69;
  struct MicroInterpreter * interpreter.12_71;
  struct TfLiteTensor * _73;
  struct ErrorReporter * error_reporter.6_75;
  struct TfLiteIntArray * _76;
  int _77;
  struct ErrorReporter * error_reporter.6_79;
  struct TfLiteTensor * input.13_80;
  struct TfLiteIntArray * _81;
  int _82;
  int _83;
  int _84;
  int _85;
  struct TfLiteTensor * input.13_87;
  TfLiteType _88;
  struct ErrorReporter * error_reporter.6_89;
  struct ErrorReporter * error_reporter.6_91;
  struct MicroInterpreter * interpreter.12_93;
  struct TfLiteTensor * _95;
  struct ErrorReporter * error_reporter.6_97;
  struct TfLiteIntArray * _98;
  int _99;
  struct ErrorReporter * error_reporter.6_101;
  struct TfLiteTensor * output.14_102;
  struct TfLiteIntArray * _103;
  int _104;
  int _105;
  struct TfLiteTensor * output.14_107;
  TfLiteType _108;
  struct ErrorReporter * error_reporter.6_109;
  struct ErrorReporter * error_reporter.6_111;
  const uint8_t * _113;
  short unsigned int _114;
  int _115;
  short unsigned int _116;
  sizetype _118;
  const void * _119;
  long unsigned int _120;
  long unsigned int _122;
  struct Model * _123;
  unsigned char _126;
  unsigned int _135;
  unsigned int prephitmp_136;
  struct ErrorReporter * _138;
  long unsigned int iftmp.16_141;
  unsigned int _144;
  unsigned int _145;
  unsigned int _148;
  unsigned int prephitmp_149;
  struct ErrorReporter * _151;
  unsigned int _152;
  long int _154;
  unsigned int _155;
  unsigned int _157;
  unsigned int _158;
  unsigned int _164;
  unsigned int _165;
  struct ErrorReporter * _167;
  unsigned int _173;
  unsigned int _174;
  unsigned int _175;
  long int _179;
  struct ErrorReporter * _184;
  unsigned int _188;
  struct ErrorReporter * _191;
  unsigned int _197;
  unsigned int _198;
  unsigned int _199;
  long int _203;
  struct ErrorReporter * _208;
  struct ErrorReporter * _215;
  unsigned int _221;
  unsigned int _222;
  long int _227;
  struct ErrorReporter * _232;
  unsigned int _233;
  long int _238;
  long int _239;
  unsigned int prephitmp_241;
  struct ErrorReporter * _243;
  unsigned int _244;
  unsigned int _248;
  long int _249;
  unsigned int _252;
  struct ErrorReporter * _254;
  long int _255;
  unsigned int _256;
  unsigned int prephitmp_259;
  unsigned int _261;
  unsigned int prephitmp_265;
  long int _298;
  long int _322;

  <bb 2>:
  _9 = __atomic_load_1 (&_ZGVZ22tfl_float_dnn_setupPreE20micro_error_reporter, 2);
  _12 = _9 & 1;
  if (_12 == 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 6>;

  <bb 4>:
  _11 = __cxa_guard_acquire (&_ZGVZ22tfl_float_dnn_setupPreE20micro_error_reporter);
  if (_11 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;

  <bb 5>:
  __cxa_guard_release (&_ZGVZ22tfl_float_dnn_setupPreE20micro_error_reporter);
  __aeabi_atexit (&micro_error_reporter, __comp_dtor , &__dso_handle);

  <bb 6>:
  error_reporter = &micro_error_reporter.D.9061;
  _18 = __atomic_load_1 (&_ZGVZ22tfl_float_dnn_setupPreE14micro_profiler, 2);
  _13 = _18 & 1;
  if (_13 == 0)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 10>;

  <bb 8>:
  _20 = __cxa_guard_acquire (&_ZGVZ22tfl_float_dnn_setupPreE14micro_profiler);
  if (_20 != 0)
    goto <bb 9>;
  else
    goto <bb 7>;

  <bb 9>:
  # DEBUG this => &micro_profiler
  micro_profiler._vptr.MicroProfiler = &MEM[(void *)&_ZTVN6tflite13MicroProfilerE + 8B];
  micro_profiler.num_events_ = 0;
  # DEBUG this => NULL
  __cxa_guard_release (&_ZGVZ22tfl_float_dnn_setupPreE14micro_profiler);
  __aeabi_atexit (&micro_profiler, __comp_dtor , &__dso_handle);

  <bb 10>:
  profiler = &micro_profiler;
  # DEBUG buf => &g_CNN_FE_Schrift_float_data
  # DEBUG buf => &g_CNN_FE_Schrift_float_data
  # DEBUG buf => &g_CNN_FE_Schrift_float_data
  _122 = MEM[(uoffset_t *)&g_CNN_FE_Schrift_float_data];
  # DEBUG t => _122
  # DEBUG t => NULL
  _123 = &g_CNN_FE_Schrift_float_data + _122;
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  # DEBUG buf => NULL
  model = _123;
  # DEBUG this => _123
  # DEBUG D#6 => &MEM[(const struct Model *)_123].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  _32 = &MEM[(const struct Table *)_123].data_;
  # DEBUG p => _32
  _29 = MEM[(const long int *)_123];
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  _27 = (sizetype) _29;
  _25 = -_27;
  _113 = _32 + _25;
  # DEBUG this => NULL
  # DEBUG vtable => _113
  # DEBUG p => _113
  _114 = MEM[(const short unsigned int *)_113];
  # DEBUG t => _114
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _114
  _115 = (int) _114;
  if (_115 > 4)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  # DEBUG p => _113 + 4
  _116 = MEM[(const short unsigned int *)_113 + 4B];
  # DEBUG t => _116
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => _116
  if (_116 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _118 = (sizetype) _116;
  _119 = _32 + _118;
  # DEBUG p => _119
  _120 = MEM[(const long unsigned int *)_119];
  # DEBUG t => _120
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  if (_120 != 3)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # iftmp.16_141 = PHI <_120(12), 0(11), 0(10)>
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  error_reporter.6_28 = error_reporter;
  # DEBUG this => _123
  # DEBUG D#6 => &MEM[(const struct Model *)_123].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  # DEBUG p => _32
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG vtable => _113
  # DEBUG p => _113
  # DEBUG t => _114
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _114
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  tflite::ErrorReporter::Report (error_reporter.6_28, "Model provided is schema version %d not equal to supported version %d.", iftmp.16_141, 3);
  goto <bb 81>;

  <bb 14>:
  error_reporter.6_31 = error_reporter;
  # DEBUG this => _123
  # DEBUG D#6 => &MEM[(const struct Model *)_123].D.126343
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG defaultval => 0
  # DEBUG this => D#6
  # DEBUG field => 4
  # DEBUG this => D#6
  # DEBUG p => _32
  # DEBUG t => _29
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG this => NULL
  # DEBUG vtable => _113
  # DEBUG p => _113
  # DEBUG t => _114
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vtsize => _114
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG field_offset => NULL
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG defaultval => NULL
  # DEBUG this => NULL
  tflite::ErrorReporter::Report (error_reporter.6_31, "   Model provided is schema version %d (equal to supported version %d).", 3, 3);
  error_reporter.6_34 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_34, "   => floating point model loaded without error.");
  _37 = __atomic_load_1 (&_ZGVZ22tfl_float_dnn_setupPreE17micro_op_resolver, 2);
  _21 = _37 & 1;
  if (_21 == 0)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  goto <bb 18>;

  <bb 16>:
  _39 = __cxa_guard_acquire (&_ZGVZ22tfl_float_dnn_setupPreE17micro_op_resolver);
  if (_39 != 0)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 17>:
  error_reporter.6_40 = error_reporter;
  # DEBUG this => &micro_op_resolver
  # DEBUG error_reporter => error_reporter.6_40
  MEM[(struct  &)&micro_op_resolver] ={v} {CLOBBER};
  # DEBUG D#5 => &micro_op_resolver.D.186481
  # DEBUG this => D#5
  # DEBUG D#4 => &D#5->D.184881
  # DEBUG this => D#4
  # DEBUG this => NULL
  # DEBUG this => NULL
  micro_op_resolver.D.186481.D.184881._vptr.OpResolver = &MEM[(void *)&_ZTVN6tflite22MicroMutableOpResolverILj5EEE + 8B];
  micro_op_resolver.registrations_len_ = 0;
  micro_op_resolver.num_buitin_ops_ = 0;
  micro_op_resolver.error_reporter_ = error_reporter.6_40;
  # DEBUG this => NULL
  # DEBUG error_reporter => NULL
  __cxa_guard_release (&_ZGVZ22tfl_float_dnn_setupPreE17micro_op_resolver);
  __aeabi_atexit (&micro_op_resolver, __comp_dtor , &__dso_handle);

  <bb 18>:
  # DEBUG this => &micro_op_resolver
  D.244312 = tflite::Register_CONV_2D (); [return slot optimization]
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 3
  # DEBUG registration => &D.244312
  # DEBUG parser => ParseConv2D
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 3
  # DEBUG i => 0
  _244 = micro_op_resolver.registrations_len_;
  if (_244 == 0)
    goto <bb 27>;
  else
    goto <bb 19>;

  <bb 19>:
  # DEBUG D#38 => &micro_op_resolver.registrations_[0]
  # DEBUG registration => D#38
  _239 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[0].builtin_code;
  if (_239 == 3)
    goto <bb 83>;
  else
    goto <bb 22>;

  <bb 20>:
  # DEBUG D#38 => &micro_op_resolver.registrations_[i_181]
  # DEBUG registration => D#38
  _179 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[i_181].builtin_code;
  if (_179 == 3)
    goto <bb 83>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 23>;

  <bb 22>:

  <bb 23>:
  # i_219 = PHI <0(22), i_181(21)>
  # DEBUG i => i_219
  # DEBUG D#38 => &micro_op_resolver.registrations_[i_219]
  # DEBUG registration => D#38
  i_181 = i_219 + 1;
  # DEBUG i => i_181
  # DEBUG i => i_181
  if (i_181 >= _244)
    goto <bb 84>;
  else
    goto <bb 20>;

  <bb 24>:
  tflite::ErrorReporter::Report (_167, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 3);
  goto <bb 28>;

  <bb 25>:
  # DEBUG D#7 => &D.244312
  # DEBUG D#8 => ParseConv2D
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 3
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _184 = micro_op_resolver.error_reporter_;
  if (_184 != 0B)
    goto <bb 26>;
  else
    goto <bb 28>;

  <bb 26>:
  tflite::ErrorReporter::Report (_184, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 3, 5);
  goto <bb 28>;

  <bb 27>:
  # _164 = PHI <_244(85), 0(18)>
  # prephitmp_241 = PHI <_252(85), 1(18)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver.registrations_[_164] = D.244312;
  micro_op_resolver.registrations_[_164].builtin_code = 3;
  micro_op_resolver.registrations_len_ = prephitmp_241;
  _173 = micro_op_resolver.num_buitin_ops_;
  micro_op_resolver.builtin_codes_[_173] = 3;
  micro_op_resolver.builtin_parsers_[_173] = ParseConv2D;
  _174 = _173 + 1;
  micro_op_resolver.num_buitin_ops_ = _174;

  <bb 28>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244312 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => &micro_op_resolver
  D.244309 = tflite::ops::micro::Register_MAX_POOL_2D (); [return slot optimization]
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 17
  # DEBUG registration => &D.244309
  # DEBUG parser => ParsePool
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 17
  # DEBUG i => 0
  _155 = micro_op_resolver.registrations_len_;
  if (_155 == 0)
    goto <bb 37>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG D#37 => &micro_op_resolver.registrations_[0]
  # DEBUG registration => D#37
  _154 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[0].builtin_code;
  if (_154 == 17)
    goto <bb 88>;
  else
    goto <bb 32>;

  <bb 30>:
  # DEBUG D#37 => &micro_op_resolver.registrations_[i_205]
  # DEBUG registration => D#37
  _203 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[i_205].builtin_code;
  if (_203 == 17)
    goto <bb 88>;
  else
    goto <bb 31>;

  <bb 31>:
  goto <bb 33>;

  <bb 32>:

  <bb 33>:
  # i_234 = PHI <0(32), i_205(31)>
  # DEBUG i => i_234
  # DEBUG D#37 => &micro_op_resolver.registrations_[i_234]
  # DEBUG registration => D#37
  i_205 = i_234 + 1;
  # DEBUG i => i_205
  # DEBUG i => i_205
  if (_155 <= i_205)
    goto <bb 86>;
  else
    goto <bb 30>;

  <bb 34>:
  tflite::ErrorReporter::Report (_191, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 17);
  goto <bb 38>;

  <bb 35>:
  # DEBUG D#7 => &D.244309
  # DEBUG D#8 => ParsePool
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 17
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _208 = micro_op_resolver.error_reporter_;
  if (_208 != 0B)
    goto <bb 36>;
  else
    goto <bb 38>;

  <bb 36>:
  tflite::ErrorReporter::Report (_208, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 17, 5);
  goto <bb 38>;

  <bb 37>:
  # _165 = PHI <_155(87), 0(28)>
  # prephitmp_259 = PHI <_261(87), 1(28)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver.registrations_[_165] = D.244309;
  micro_op_resolver.registrations_[_165].builtin_code = 17;
  micro_op_resolver.registrations_len_ = prephitmp_259;
  _197 = micro_op_resolver.num_buitin_ops_;
  micro_op_resolver.builtin_codes_[_197] = 17;
  micro_op_resolver.builtin_parsers_[_197] = ParsePool;
  _198 = _197 + 1;
  micro_op_resolver.num_buitin_ops_ = _198;

  <bb 38>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244309 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => &micro_op_resolver
  D.244306 = tflite::ops::micro::Register_RESHAPE (); [return slot optimization]
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 22
  # DEBUG registration => &D.244306
  # DEBUG parser => ParseReshape
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 22
  # DEBUG i => 0
  _256 = micro_op_resolver.registrations_len_;
  if (_256 == 0)
    goto <bb 47>;
  else
    goto <bb 39>;

  <bb 39>:
  # DEBUG D#36 => &micro_op_resolver.registrations_[0]
  # DEBUG registration => D#36
  _255 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[0].builtin_code;
  if (_255 == 22)
    goto <bb 89>;
  else
    goto <bb 42>;

  <bb 40>:
  # DEBUG D#36 => &micro_op_resolver.registrations_[i_229]
  # DEBUG registration => D#36
  _227 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[i_229].builtin_code;
  if (_227 == 22)
    goto <bb 89>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # i_192 = PHI <0(42), i_229(41)>
  # DEBUG i => i_192
  # DEBUG D#36 => &micro_op_resolver.registrations_[i_192]
  # DEBUG registration => D#36
  i_229 = i_192 + 1;
  # DEBUG i => i_229
  # DEBUG i => i_229
  if (i_229 >= _256)
    goto <bb 90>;
  else
    goto <bb 40>;

  <bb 44>:
  tflite::ErrorReporter::Report (_215, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 22);
  goto <bb 48>;

  <bb 45>:
  # DEBUG D#7 => &D.244306
  # DEBUG D#8 => ParseReshape
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 22
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _232 = micro_op_resolver.error_reporter_;
  if (_232 != 0B)
    goto <bb 46>;
  else
    goto <bb 48>;

  <bb 46>:
  tflite::ErrorReporter::Report (_232, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 22, 5);
  goto <bb 48>;

  <bb 47>:
  # _188 = PHI <_256(91), 0(38)>
  # prephitmp_265 = PHI <_248(91), 1(38)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver.registrations_[_188] = D.244306;
  micro_op_resolver.registrations_[_188].builtin_code = 22;
  micro_op_resolver.registrations_len_ = prephitmp_265;
  _221 = micro_op_resolver.num_buitin_ops_;
  micro_op_resolver.builtin_codes_[_221] = 22;
  micro_op_resolver.builtin_parsers_[_221] = ParseReshape;
  _222 = _221 + 1;
  micro_op_resolver.num_buitin_ops_ = _222;

  <bb 48>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.244306 ={v} {CLOBBER};
  # DEBUG this => NULL
  D.186542 = tflite::Register_FULLY_CONNECTED (); [return slot optimization]
  # DEBUG this => &micro_op_resolver
  # DEBUG registration => &D.186542
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 9
  # DEBUG registration => &D.186542
  # DEBUG parser => ParseFullyConnected
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 9
  # DEBUG i => 0
  _152 = micro_op_resolver.registrations_len_;
  if (_152 == 0)
    goto <bb 57>;
  else
    goto <bb 49>;

  <bb 49>:
  # DEBUG D#35 => &micro_op_resolver.registrations_[0]
  # DEBUG registration => D#35
  _322 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[0].builtin_code;
  if (_322 == 9)
    goto <bb 92>;
  else
    goto <bb 52>;

  <bb 50>:
  # DEBUG D#35 => &micro_op_resolver.registrations_[i_240]
  # DEBUG registration => D#35
  _238 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[i_240].builtin_code;
  if (_238 == 9)
    goto <bb 92>;
  else
    goto <bb 51>;

  <bb 51>:
  goto <bb 53>;

  <bb 52>:

  <bb 53>:
  # i_284 = PHI <0(52), i_240(51)>
  # DEBUG i => i_284
  # DEBUG D#35 => &micro_op_resolver.registrations_[i_284]
  # DEBUG registration => D#35
  i_240 = i_284 + 1;
  # DEBUG i => i_240
  # DEBUG i => i_240
  if (_152 <= i_240)
    goto <bb 93>;
  else
    goto <bb 50>;

  <bb 54>:
  tflite::ErrorReporter::Report (_151, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 9);
  goto <bb 58>;

  <bb 55>:
  # DEBUG D#7 => &D.186542
  # DEBUG D#8 => ParseFullyConnected
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 9
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _243 = micro_op_resolver.error_reporter_;
  if (_243 != 0B)
    goto <bb 56>;
  else
    goto <bb 58>;

  <bb 56>:
  tflite::ErrorReporter::Report (_243, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 9, 5);
  goto <bb 58>;

  <bb 57>:
  # _175 = PHI <_152(94), 0(48)>
  # prephitmp_136 = PHI <_135(94), 1(48)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver.registrations_[_175] = D.186542;
  micro_op_resolver.registrations_[_175].builtin_code = 9;
  micro_op_resolver.registrations_len_ = prephitmp_136;
  _157 = micro_op_resolver.num_buitin_ops_;
  micro_op_resolver.builtin_codes_[_157] = 9;
  micro_op_resolver.builtin_parsers_[_157] = ParseFullyConnected;
  _158 = _157 + 1;
  micro_op_resolver.num_buitin_ops_ = _158;

  <bb 58>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.186542 ={v} {CLOBBER};
  D.186544 = tflite::Register_SOFTMAX (); [return slot optimization]
  # DEBUG this => &micro_op_resolver
  # DEBUG registration => &D.186544
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 25
  # DEBUG registration => &D.186544
  # DEBUG parser => ParseSoftmax
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 25
  # DEBUG i => 0
  _233 = micro_op_resolver.registrations_len_;
  if (_233 == 0)
    goto <bb 67>;
  else
    goto <bb 59>;

  <bb 59>:
  # DEBUG D#34 => &micro_op_resolver.registrations_[0]
  # DEBUG registration => D#34
  _298 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[0].builtin_code;
  if (_298 == 25)
    goto <bb 95>;
  else
    goto <bb 62>;

  <bb 60>:
  # DEBUG D#34 => &micro_op_resolver.registrations_[i_251]
  # DEBUG registration => D#34
  _249 = MEM[(const struct TfLiteRegistration &)&micro_op_resolver].registrations_[i_251].builtin_code;
  if (_249 == 25)
    goto <bb 95>;
  else
    goto <bb 61>;

  <bb 61>:
  goto <bb 63>;

  <bb 62>:

  <bb 63>:
  # i_159 = PHI <0(62), i_251(61)>
  # DEBUG i => i_159
  # DEBUG D#34 => &micro_op_resolver.registrations_[i_159]
  # DEBUG registration => D#34
  i_251 = i_159 + 1;
  # DEBUG i => i_251
  # DEBUG i => i_251
  if (_233 <= i_251)
    goto <bb 96>;
  else
    goto <bb 60>;

  <bb 64>:
  tflite::ErrorReporter::Report (_138, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 25);
  goto <bb 68>;

  <bb 65>:
  # DEBUG D#7 => &D.186544
  # DEBUG D#8 => ParseSoftmax
  # DEBUG this => &micro_op_resolver
  # DEBUG op => 25
  # DEBUG D#10 => D#7
  # DEBUG registration => D#10
  # DEBUG D#9 => D#8
  # DEBUG parser => D#9
  _254 = micro_op_resolver.error_reporter_;
  if (_254 != 0B)
    goto <bb 66>;
  else
    goto <bb 68>;

  <bb 66>:
  tflite::ErrorReporter::Report (_254, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 25, 5);
  goto <bb 68>;

  <bb 67>:
  # _199 = PHI <_233(97), 0(58)>
  # prephitmp_149 = PHI <_148(97), 1(58)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  micro_op_resolver.registrations_[_199] = D.186544;
  micro_op_resolver.registrations_[_199].builtin_code = 25;
  micro_op_resolver.registrations_len_ = prephitmp_149;
  _144 = micro_op_resolver.num_buitin_ops_;
  micro_op_resolver.builtin_codes_[_144] = 25;
  micro_op_resolver.builtin_parsers_[_144] = ParseSoftmax;
  _145 = _144 + 1;
  micro_op_resolver.num_buitin_ops_ = _145;

  <bb 68>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.186544 ={v} {CLOBBER};
  _51 = __atomic_load_1 (&_ZGVZ22tfl_float_dnn_setupPreE18static_interpreter, 2);
  _126 = _51 & 1;
  if (_126 == 0)
    goto <bb 70>;
  else
    goto <bb 69>;

  <bb 69>:
  goto <bb 73>;

  <bb 70>:
  _53 = __cxa_guard_acquire (&_ZGVZ22tfl_float_dnn_setupPreE18static_interpreter);
  if (_53 != 0)
    goto <bb 71>;
  else
    goto <bb 69>;

  <bb 71>:
  model.5_54 = model;
  error_reporter.6_55 = error_reporter;
  profiler.11_56 = profiler;
  tflite::MicroInterpreter::MicroInterpreter (&static_interpreter, model.5_54, &micro_op_resolver.D.186481, &tensor_arena, 30720, error_reporter.6_55, profiler.11_56);

  <bb 72>:
  __cxa_guard_release (&_ZGVZ22tfl_float_dnn_setupPreE18static_interpreter);
  __aeabi_atexit (&static_interpreter, __comp_dtor , &__dso_handle);

  <bb 73>:
  interpreter = &static_interpreter;
  error_reporter.6_62 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_62, "   start allocating tensors");
  interpreter.12_64 = interpreter;
  _66 = tflite::MicroInterpreter::AllocateTensors (interpreter.12_64);
  # DEBUG allocate_status => _66
  if (_66 != 0)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  error_reporter.6_67 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_67, "AllocateTensors() failed");
  goto <bb 81>;

  <bb 75>:
  error_reporter.6_69 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_69, "   allocation finished; status: ok");
  interpreter.12_71 = interpreter;
  _73 = tflite::MicroInterpreter::input (interpreter.12_71, 0);
  input = _73;
  error_reporter.6_75 = error_reporter;
  _76 = _73->dims;
  _77 = _76->size;
  tflite::ErrorReporter::Report (error_reporter.6_75, "   input  dimensions : %d", _77);
  error_reporter.6_79 = error_reporter;
  input.13_80 = input;
  _81 = input.13_80->dims;
  _82 = _81->data[0];
  _83 = _81->data[1];
  _84 = _81->data[2];
  _85 = _81->data[3];
  tflite::ErrorReporter::Report (error_reporter.6_79, "   input  shape      : %d, %d, %d, %d", _82, _83, _84, _85);
  input.13_87 = input;
  _88 = input.13_87->type;
  if (_88 == 1)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  error_reporter.6_89 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_89, "   input  type       : %s", "tTfLiteFloat32");
  goto <bb 78>;

  <bb 77>:
  error_reporter.6_91 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_91, "   ATTENTION: input type is not %s", "tTfLiteFloat32");

  <bb 78>:
  interpreter.12_93 = interpreter;
  _95 = tflite::MicroInterpreter::output (interpreter.12_93, 0);
  output = _95;
  error_reporter.6_97 = error_reporter;
  _98 = _95->dims;
  _99 = _98->size;
  tflite::ErrorReporter::Report (error_reporter.6_97, "   output dimensions : %d", _99);
  error_reporter.6_101 = error_reporter;
  output.14_102 = output;
  _103 = output.14_102->dims;
  _104 = _103->data[0];
  _105 = _103->data[1];
  tflite::ErrorReporter::Report (error_reporter.6_101, "   output shape      : %d, %d", _104, _105);
  output.14_107 = output;
  _108 = output.14_107->type;
  if (_108 == 1)
    goto <bb 79>;
  else
    goto <bb 80>;

  <bb 79>:
  error_reporter.6_109 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_109, "   output type       : %s", "tTfLiteFloat32");
  goto <bb 81>;

  <bb 80>:
  error_reporter.6_111 = error_reporter;
  tflite::ErrorReporter::Report (error_reporter.6_111, "   ATTENTION: output type is not %s", "tTfLiteFloat32");

  <bb 81>:
  return;

<L37>:
  __cxa_guard_abort (&_ZGVZ22tfl_float_dnn_setupPreE18static_interpreter);
  resx 8

  <bb 83>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _167 = micro_op_resolver.error_reporter_;
  if (_167 != 0B)
    goto <bb 24>;
  else
    goto <bb 28>;

  <bb 84>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_244 > 4)
    goto <bb 25>;
  else
    goto <bb 85>;

  <bb 85>:
  _252 = _244 + 1;
  goto <bb 27>;

  <bb 86>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_155 > 4)
    goto <bb 35>;
  else
    goto <bb 87>;

  <bb 87>:
  _261 = _155 + 1;
  goto <bb 37>;

  <bb 88>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _191 = micro_op_resolver.error_reporter_;
  if (_191 != 0B)
    goto <bb 34>;
  else
    goto <bb 38>;

  <bb 89>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _215 = micro_op_resolver.error_reporter_;
  if (_215 != 0B)
    goto <bb 44>;
  else
    goto <bb 48>;

  <bb 90>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_256 > 4)
    goto <bb 45>;
  else
    goto <bb 91>;

  <bb 91>:
  _248 = _256 + 1;
  goto <bb 47>;

  <bb 92>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _151 = micro_op_resolver.error_reporter_;
  if (_151 != 0B)
    goto <bb 54>;
  else
    goto <bb 58>;

  <bb 93>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_152 > 4)
    goto <bb 55>;
  else
    goto <bb 94>;

  <bb 94>:
  _135 = _152 + 1;
  goto <bb 57>;

  <bb 95>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _138 = micro_op_resolver.error_reporter_;
  if (_138 != 0B)
    goto <bb 64>;
  else
    goto <bb 68>;

  <bb 96>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_233 > 4)
    goto <bb 65>;
  else
    goto <bb 97>;

  <bb 97>:
  _148 = _233 + 1;
  goto <bb 67>;

}


