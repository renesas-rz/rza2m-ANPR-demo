
;; Function flatbuffers::Offset<tflite::OperatorCode> tflite::CreateOperatorCode(flatbuffers::FlatBufferBuilder&, tflite::BuiltinOperator, flatbuffers::Offset<flatbuffers::String>, int32_t) (_ZN6tflite18CreateOperatorCodeERN11flatbuffers17FlatBufferBuilderENS_15BuiltinOperatorENS0_6OffsetINS0_6StringEEEl, funcdef_no=6273, decl_uid=173775, cgraph_uid=3490, symbol_order=3525)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.
../src/tensorflow_lite/src/tensorflow/lite/schema/schema_utils.cpp:79:35: note: vectorized 0 loops in function.
flatbuffers::Offset<tflite::OperatorCode> tflite::CreateOperatorCode(flatbuffers::FlatBufferBuilder&, tflite::BuiltinOperator, flatbuffers::Offset<flatbuffers::String>, int32_t) (struct FlatBufferBuilder & _fbb, BuiltinOperator builtin_code, struct Offset custom_code, int32_t version)
{
  long unsigned int off;
  long unsigned int custom_code$o;
  uint8_t * D.229031;
  uint8_t * D.229028;
  uint8_t * D.229017;
  uint8_t * D.229004;
  struct DefaultAllocator D.228993;
  uint8_t * D.228992;
  uint8_t * D.228969;
  uint8_t * D.228966;
  uint8_t * D.228958;
  const unsigned int D.228945;
  unsigned int old_reserved;
  size_t len;
  size_t D.228934;
  uint8_t * D.228926;
  uint8_t * D.228923;
  uint8_t * D.228912;
  uint8_t * D.228899;
  struct DefaultAllocator D.228888;
  uint8_t * D.228887;
  uint8_t * D.228864;
  uint8_t * D.228861;
  uint8_t * D.228853;
  const unsigned int D.228840;
  unsigned int old_reserved;
  size_t len;
  size_t D.228829;
  uint8_t * D.228820;
  uint8_t * D.228817;
  uint8_t * D.228806;
  uint8_t * D.228793;
  struct DefaultAllocator D.228782;
  uint8_t * D.228781;
  uint8_t * D.228758;
  uint8_t * D.228755;
  uint8_t * D.228747;
  const unsigned int D.228734;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.228723;
  uint8_t * D.228720;
  uint8_t * D.228709;
  uint8_t * D.228696;
  struct DefaultAllocator D.228685;
  uint8_t * D.228684;
  uint8_t * D.228661;
  uint8_t * D.228658;
  uint8_t * D.228650;
  const unsigned int D.228637;
  unsigned int old_reserved;
  size_t len;
  size_t D.228626;
  size_t i;
  size_t D.228609;
  uoffset_t D.228605;
  uint8_t * D.228594;
  uint8_t * D.228591;
  uint8_t * D.228580;
  uint8_t * D.228567;
  struct DefaultAllocator D.228556;
  uint8_t * D.228555;
  uint8_t * D.228532;
  uint8_t * D.228529;
  uint8_t * D.228521;
  const unsigned int D.228508;
  unsigned int old_reserved;
  size_t len;
  size_t D.228497;
  uint8_t * D.228493;
  uint8_t * D.228490;
  uint8_t * D.228479;
  uint8_t * D.228466;
  struct DefaultAllocator D.228455;
  uint8_t * D.228454;
  uint8_t * D.228431;
  uint8_t * D.228428;
  uint8_t * D.228420;
  const unsigned int D.228407;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.228396;
  uint8_t * D.228393;
  uint8_t * D.228382;
  uint8_t * D.228369;
  struct DefaultAllocator D.228358;
  uint8_t * D.228357;
  uint8_t * D.228334;
  uint8_t * D.228331;
  uint8_t * D.228323;
  const unsigned int D.228310;
  unsigned int old_reserved;
  size_t len;
  size_t D.228299;
  size_t i;
  size_t D.228282;
  uoffset_t D.228278;
  voffset_t field;
  uint8_t * D.228251;
  uint8_t * D.228248;
  uint8_t * D.228237;
  uint8_t * D.228224;
  struct DefaultAllocator D.228213;
  uint8_t * D.228212;
  uint8_t * D.228189;
  uint8_t * D.228186;
  uint8_t * D.228178;
  const unsigned int D.228165;
  unsigned int old_reserved;
  size_t len;
  size_t D.228154;
  size_t i;
  uoffset_t D.228137;
  voffset_t field;
  uint8_t * D.228110;
  uint8_t * D.228107;
  uint8_t * D.228096;
  uint8_t * D.228083;
  struct DefaultAllocator D.228072;
  uint8_t * D.228071;
  uint8_t * D.228048;
  uint8_t * D.228045;
  uint8_t * D.228037;
  const unsigned int D.228024;
  unsigned int old_reserved;
  size_t len;
  size_t D.228013;
  size_t i;
  uoffset_t D.227996;
  static const char __PRETTY_FUNCTION__[87] = "flatbuffers::uoffset_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::uoffset_t)";
  uint8_t * D.227991;
  uint8_t * D.227988;
  uint8_t * D.227977;
  uint8_t * D.227964;
  struct DefaultAllocator D.227953;
  uint8_t * D.227952;
  uint8_t * D.227929;
  uint8_t * D.227926;
  uint8_t * D.227918;
  const unsigned int D.227905;
  unsigned int old_reserved;
  size_t len;
  size_t D.227894;
  uint8_t * D.227890;
  uint8_t * D.227887;
  uint8_t * D.227876;
  uint8_t * D.227863;
  struct DefaultAllocator D.227852;
  uint8_t * D.227851;
  uint8_t * D.227828;
  uint8_t * D.227825;
  uint8_t * D.227817;
  const unsigned int D.227804;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.227793;
  uint8_t * D.227790;
  uint8_t * D.227779;
  uint8_t * D.227766;
  struct DefaultAllocator D.227755;
  uint8_t * D.227754;
  uint8_t * D.227731;
  uint8_t * D.227728;
  uint8_t * D.227720;
  const unsigned int D.227707;
  unsigned int old_reserved;
  size_t len;
  size_t D.227696;
  size_t i;
  size_t D.227679;
  uoffset_t D.227675;
  voffset_t field;
  long unsigned int off$o;
  struct Offset off;
  const short unsigned int D.227623;
  const short unsigned int D.227622;
  long unsigned int table_object_size;
  long unsigned int vt_use;
  unsigned char * it;
  short unsigned int pos;
  unsigned char * it;
  uoffset_t D.227621;
  static const char __PRETTY_FUNCTION__[88] = "flatbuffers::uoffset_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::uoffset_t)";
  uint8_t * D.227572;
  uint8_t * D.227569;
  uint8_t * D.227558;
  uint8_t * D.227545;
  struct DefaultAllocator D.227534;
  uint8_t * D.227533;
  uint8_t * D.227510;
  uint8_t * D.227507;
  uint8_t * D.227499;
  const unsigned int D.227486;
  unsigned int old_reserved;
  size_t len;
  size_t D.227475;
  uint8_t * D.227471;
  uint8_t * D.227468;
  uint8_t * D.227457;
  uint8_t * D.227444;
  struct DefaultAllocator D.227433;
  uint8_t * D.227432;
  uint8_t * D.227409;
  uint8_t * D.227406;
  uint8_t * D.227398;
  const unsigned int D.227385;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.227374;
  uint8_t * D.227371;
  uint8_t * D.227360;
  uint8_t * D.227347;
  struct DefaultAllocator D.227336;
  uint8_t * D.227335;
  uint8_t * D.227312;
  uint8_t * D.227309;
  uint8_t * D.227301;
  const unsigned int D.227288;
  unsigned int old_reserved;
  size_t len;
  size_t D.227277;
  size_t i;
  size_t D.227260;
  uoffset_t D.227256;
  voffset_t field;
  struct Offset custom_code;
  int8_t deprecated_builtin_code;
  struct Offset D.225699;
  bool _1;
  int _7;
  long unsigned int _11;
  bool _12;
  unsigned int _13;
  uint8_t * _14;
  int _15;
  uint8_t * _16;
  int _17;
  int _18;
  unsigned int _19;
  long unsigned int _20;
  unsigned int _24;
  bool _29;
  uint8_t * _37;
  long unsigned int _38;
  long unsigned int _39;
  unsigned int _40;
  short unsigned int _41;
  int _42;
  bool _44;
  short unsigned int _45;
  uint8_t * _50;
  int _52;
  int _55;
  unsigned int _56;
  long unsigned int _57;
  uint8_t * _59;
  uint8_t * _60;
  int _61;
  int _62;
  int _63;
  unsigned int _64;
  int _69;
  int _70;
  unsigned int _71;
  long unsigned int _72;
  unsigned int _73;
  bool _74;
  unsigned int _83;
  unsigned int _85;
  sizetype _88;
  uint8_t * _89;
  uint8_t * _92;
  uint8_t * _95;
  int _98;
  int _99;
  unsigned int _100;
  int _119;
  long unsigned int _120;
  unsigned int iftmp.7_121;
  unsigned int iftmp.7_122;
  unsigned int iftmp.7_123;
  bool _125;
  unsigned int _128;
  unsigned int _130;
  unsigned int _131;
  unsigned int _132;
  struct Allocator * _133;
  struct Allocator * _135;
  unsigned int _138;
  sizetype _139;
  uint8_t * _140;
  uint8_t * _141;
  int (*__vtbl_ptr_type) () * _142;
  int (*__vtbl_ptr_type) () _143;
  uint8_t * iftmp.8_146;
  void * PROF_147;
  uint8_t * _149;
  int (*__vtbl_ptr_type) () _152;
  uint8_t * _153;
  int (*__vtbl_ptr_type) () * _154;
  int (*__vtbl_ptr_type) () _155;
  void * PROF_156;
  uint8_t * _158;
  void * PROF_160;
  uint8_t * _162;
  sizetype _163;
  uint8_t * _164;
  sizetype _174;
  uint8_t * _175;
  uint8_t * _178;
  int (*__vtbl_ptr_type) () * _179;
  int (*__vtbl_ptr_type) () _180;
  uint8_t * _182;
  uint8_t * iftmp.11_183;
  void * PROF_184;
  uint8_t * _186;
  uint8_t * _188;
  int _193;
  int _194;
  unsigned int _195;
  long unsigned int _196;
  int _199;
  long unsigned int _200;
  unsigned int iftmp.7_201;
  unsigned int iftmp.7_202;
  unsigned int iftmp.7_203;
  bool _205;
  unsigned int _208;
  unsigned int _210;
  unsigned int _211;
  unsigned int _212;
  struct Allocator * _213;
  struct Allocator * _215;
  unsigned int _218;
  sizetype _219;
  uint8_t * _220;
  uint8_t * _221;
  int (*__vtbl_ptr_type) () * _222;
  int (*__vtbl_ptr_type) () _223;
  uint8_t * iftmp.8_226;
  void * PROF_227;
  uint8_t * _229;
  int (*__vtbl_ptr_type) () _232;
  uint8_t * _233;
  int (*__vtbl_ptr_type) () * _234;
  int (*__vtbl_ptr_type) () _235;
  void * PROF_236;
  uint8_t * _238;
  void * PROF_240;
  uint8_t * _242;
  sizetype _243;
  uint8_t * _244;
  sizetype _254;
  uint8_t * _255;
  uint8_t * _258;
  int (*__vtbl_ptr_type) () * _259;
  int (*__vtbl_ptr_type) () _260;
  uint8_t * _262;
  uint8_t * iftmp.11_263;
  void * PROF_264;
  uint8_t * _266;
  uint8_t * _268;
  int _273;
  int _274;
  unsigned int _275;
  int _294;
  long unsigned int _295;
  unsigned int iftmp.7_296;
  unsigned int iftmp.7_297;
  unsigned int iftmp.7_298;
  bool _300;
  unsigned int _303;
  unsigned int _305;
  unsigned int _306;
  unsigned int _307;
  struct Allocator * _308;
  struct Allocator * _310;
  unsigned int _313;
  sizetype _314;
  uint8_t * _315;
  uint8_t * _316;
  int (*__vtbl_ptr_type) () * _317;
  int (*__vtbl_ptr_type) () _318;
  uint8_t * iftmp.8_321;
  void * PROF_322;
  uint8_t * _324;
  int (*__vtbl_ptr_type) () _327;
  uint8_t * _328;
  int (*__vtbl_ptr_type) () * _329;
  int (*__vtbl_ptr_type) () _330;
  void * PROF_331;
  uint8_t * _333;
  void * PROF_335;
  uint8_t * _337;
  sizetype _338;
  uint8_t * _339;
  sizetype _349;
  uint8_t * _350;
  uint8_t * _353;
  int (*__vtbl_ptr_type) () * _354;
  int (*__vtbl_ptr_type) () _355;
  uint8_t * _357;
  uint8_t * iftmp.11_358;
  void * PROF_359;
  uint8_t * _361;
  uint8_t * _363;
  bool _364;
  short unsigned int _366;
  short unsigned int _367;
  unsigned int _368;
  bool _369;
  bool _371;
  unsigned int _372;
  uint8_t * _374;
  short unsigned int _375;
  short unsigned int _376;
  uint8_t * _377;
  long unsigned int _378;
  long unsigned int _379;
  sizetype _380;
  long unsigned int _384;
  short unsigned int _385;
  short unsigned int _387;
  sizetype _388;
  uint8_t * _389;
  short unsigned int _390;
  short unsigned int _392;
  unsigned int _393;
  int _394;
  uint8_t * _395;
  int _396;
  int _397;
  unsigned int _398;
  long unsigned int _399;
  bool _400;
  long unsigned int vt_use.24_402;
  sizetype _403;
  uint8_t * _404;
  short unsigned int _405;
  unsigned int _406;
  int _407;
  long unsigned int _408;
  uint8_t * _409;
  uint8_t * _418;
  sizetype _421;
  uint8_t * _422;
  long int vt_use.27_423;
  long int vtableoffsetloc.28_424;
  long int _425;
  bool _429;
  bool _433;
  uint8_t * _434;
  bool _436;
  uint8_t * _442;
  long unsigned int _443;
  long unsigned int _444;
  unsigned int _445;
  short unsigned int _446;
  int _447;
  bool _449;
  short unsigned int _450;
  uint8_t * _455;
  unsigned int _456;
  uint8_t * _457;
  int _458;
  uint8_t * _459;
  int _460;
  int _461;
  unsigned int _462;
  long unsigned int _463;
  int _473;
  int _475;
  int _476;
  unsigned int _477;
  long unsigned int _478;
  unsigned int _479;
  bool _480;
  unsigned int _489;
  uint8_t * _501;
  int _504;
  unsigned int _505;
  short unsigned int _506;
  bool _527;
  bool _531;
  unsigned int iftmp.7_607;
  unsigned int iftmp.7_608;
  unsigned int iftmp.7_609;
  bool _611;
  short unsigned int _612;
  unsigned int _614;
  unsigned int _616;
  unsigned int _617;
  unsigned int _618;
  struct Allocator * _619;
  struct Allocator * _621;
  unsigned int _624;
  sizetype _625;
  uint8_t * _626;
  uint8_t * _627;
  int (*__vtbl_ptr_type) () * _628;
  int (*__vtbl_ptr_type) () _629;
  uint8_t * iftmp.8_632;
  void * PROF_633;
  uint8_t * _635;
  int (*__vtbl_ptr_type) () _638;
  uint8_t * _639;
  int (*__vtbl_ptr_type) () * _640;
  int (*__vtbl_ptr_type) () _641;
  void * PROF_642;
  uint8_t * _644;
  void * PROF_646;
  uint8_t * _648;
  sizetype _649;
  uint8_t * _650;
  sizetype _660;
  uint8_t * _661;
  uint8_t * _664;
  int (*__vtbl_ptr_type) () * _665;
  int (*__vtbl_ptr_type) () _666;
  uint8_t * _668;
  uint8_t * iftmp.11_669;
  void * PROF_670;
  uint8_t * _672;
  uint8_t * _674;
  uint8_t * _676;
  int _679;
  int _680;
  unsigned int _681;
  int _700;
  long unsigned int _701;
  unsigned int iftmp.7_702;
  unsigned int iftmp.7_703;
  unsigned int iftmp.7_704;
  bool _706;
  uint8_t * _707;
  unsigned int _709;
  unsigned int _711;
  unsigned int _712;
  unsigned int _713;
  struct Allocator * _714;
  struct Allocator * _716;
  unsigned int _719;
  sizetype _720;
  uint8_t * _721;
  uint8_t * _722;
  int (*__vtbl_ptr_type) () * _723;
  int (*__vtbl_ptr_type) () _724;
  uint8_t * iftmp.8_727;
  void * PROF_728;
  uint8_t * _730;
  int (*__vtbl_ptr_type) () _733;
  uint8_t * _734;
  int (*__vtbl_ptr_type) () * _735;
  int (*__vtbl_ptr_type) () _736;
  void * PROF_737;
  uint8_t * _739;
  void * PROF_741;
  uint8_t * _743;
  sizetype _744;
  uint8_t * _745;
  sizetype _755;
  uint8_t * _756;
  uint8_t * _759;
  int (*__vtbl_ptr_type) () * _760;
  int (*__vtbl_ptr_type) () _761;
  uint8_t * _763;
  uint8_t * iftmp.11_764;
  void * PROF_765;
  uint8_t * _767;
  uint8_t * _769;
  int _772;
  int _775;
  unsigned int _776;
  long unsigned int _777;
  long unsigned int _779;
  unsigned int _780;
  struct vector_downward * _781;
  unsigned int _790;
  unsigned int _792;
  sizetype _795;
  uint8_t * _796;
  uint8_t * _799;
  uint8_t * _802;
  int _805;
  int _806;
  unsigned int _807;
  int _826;
  long unsigned int _827;
  unsigned int iftmp.7_828;
  unsigned int iftmp.7_829;
  unsigned int iftmp.7_830;
  bool _832;
  sizetype _833;
  unsigned int _835;
  unsigned int _837;
  unsigned int _838;
  unsigned int _839;
  struct Allocator * _840;
  struct Allocator * _842;
  unsigned int _845;
  sizetype _846;
  uint8_t * _847;
  uint8_t * _848;
  int (*__vtbl_ptr_type) () * _849;
  int (*__vtbl_ptr_type) () _850;
  uint8_t * iftmp.8_853;
  void * PROF_854;
  uint8_t * _856;
  int (*__vtbl_ptr_type) () _859;
  uint8_t * _860;
  int (*__vtbl_ptr_type) () * _861;
  int (*__vtbl_ptr_type) () _862;
  void * PROF_863;
  uint8_t * _865;
  void * PROF_867;
  uint8_t * _869;
  sizetype _870;
  uint8_t * _871;
  sizetype _881;
  uint8_t * _882;
  uint8_t * _885;
  int (*__vtbl_ptr_type) () * _886;
  int (*__vtbl_ptr_type) () _887;
  uint8_t * _889;
  uint8_t * iftmp.11_890;
  void * PROF_891;
  uint8_t * _893;
  uint8_t * _895;
  uint8_t * _899;
  uint8_t * _900;
  long unsigned int _901;
  long unsigned int _902;
  short unsigned int _904;
  int _905;
  bool _907;
  short unsigned int _908;
  unsigned int _910;
  uint8_t * _911;
  sizetype _912;
  uint8_t * _913;
  unsigned int _914;
  int _915;
  uint8_t * _916;
  int _917;
  int _918;
  unsigned int _919;
  long unsigned int _920;
  unsigned int _921;
  unsigned int _931;
  unsigned int _933;
  sizetype _936;
  uint8_t * _937;
  uint8_t * _940;
  uint8_t * _943;
  int _946;
  int _947;
  unsigned int _948;
  int _967;
  long unsigned int _968;
  unsigned int iftmp.7_969;
  unsigned int iftmp.7_970;
  unsigned int iftmp.7_971;
  bool _973;
  short unsigned int _974;
  unsigned int _976;
  unsigned int _978;
  unsigned int _979;
  unsigned int _980;
  struct Allocator * _981;
  struct Allocator * _983;
  unsigned int _986;
  sizetype _987;
  uint8_t * _988;
  uint8_t * _989;
  int (*__vtbl_ptr_type) () * _990;
  int (*__vtbl_ptr_type) () _991;
  uint8_t * iftmp.8_994;
  void * PROF_995;
  uint8_t * _997;
  int (*__vtbl_ptr_type) () _1000;
  uint8_t * _1001;
  int (*__vtbl_ptr_type) () * _1002;
  int (*__vtbl_ptr_type) () _1003;
  void * PROF_1004;
  uint8_t * _1006;
  void * PROF_1008;
  uint8_t * _1010;
  sizetype _1011;
  uint8_t * _1012;
  sizetype _1022;
  uint8_t * _1023;
  uint8_t * _1026;
  int (*__vtbl_ptr_type) () * _1027;
  int (*__vtbl_ptr_type) () _1028;
  uint8_t * _1030;
  uint8_t * iftmp.11_1031;
  void * PROF_1032;
  uint8_t * _1034;
  uint8_t * _1036;
  uint8_t * _1041;
  long unsigned int _1042;
  long unsigned int _1043;
  short unsigned int _1045;
  int _1046;
  bool _1048;
  short unsigned int _1049;
  uint8_t * _1054;
  int _1056;
  int _1059;
  unsigned int _1060;
  long unsigned int _1061;
  uint8_t * _1063;
  uint8_t * _1064;
  int _1065;
  int _1066;
  int _1067;
  unsigned int _1068;
  int _1073;
  int _1074;
  unsigned int _1075;
  long unsigned int _1076;
  unsigned int _1077;
  unsigned int _1078;
  unsigned int _1087;
  unsigned int _1089;
  sizetype _1092;
  uint8_t * _1093;
  uint8_t * _1096;
  uint8_t * _1099;
  int _1102;
  int _1103;
  unsigned int _1104;
  int _1123;
  long unsigned int _1124;
  unsigned int iftmp.7_1125;
  unsigned int iftmp.7_1126;
  unsigned int iftmp.7_1127;
  bool _1129;
  unsigned int _1132;
  unsigned int _1134;
  unsigned int _1135;
  unsigned int _1136;
  struct Allocator * _1137;
  struct Allocator * _1139;
  unsigned int _1142;
  sizetype _1143;
  uint8_t * _1144;
  uint8_t * _1145;
  int (*__vtbl_ptr_type) () * _1146;
  int (*__vtbl_ptr_type) () _1147;
  uint8_t * iftmp.8_1150;
  void * PROF_1151;
  uint8_t * _1153;
  int (*__vtbl_ptr_type) () _1156;
  uint8_t * _1157;
  int (*__vtbl_ptr_type) () * _1158;
  int (*__vtbl_ptr_type) () _1159;
  void * PROF_1160;
  uint8_t * _1162;
  void * PROF_1164;
  uint8_t * _1166;
  sizetype _1167;
  uint8_t * _1168;
  sizetype _1178;
  uint8_t * _1179;
  uint8_t * _1182;
  int (*__vtbl_ptr_type) () * _1183;
  int (*__vtbl_ptr_type) () _1184;
  uint8_t * _1186;
  uint8_t * iftmp.11_1187;
  void * PROF_1188;
  uint8_t * _1190;
  uint8_t * _1192;
  int _1197;
  int _1198;
  unsigned int _1199;
  long unsigned int _1200;
  int _1203;
  long unsigned int _1204;
  unsigned int iftmp.7_1205;
  unsigned int iftmp.7_1206;
  unsigned int iftmp.7_1207;
  bool _1209;
  short unsigned int _1210;
  unsigned int _1212;
  unsigned int _1214;
  unsigned int _1215;
  unsigned int _1216;
  struct Allocator * _1217;
  struct Allocator * _1219;
  unsigned int _1222;
  sizetype _1223;
  uint8_t * _1224;
  uint8_t * _1225;
  int (*__vtbl_ptr_type) () * _1226;
  int (*__vtbl_ptr_type) () _1227;
  uint8_t * iftmp.8_1230;
  void * PROF_1231;
  uint8_t * _1233;
  int (*__vtbl_ptr_type) () _1236;
  uint8_t * _1237;
  int (*__vtbl_ptr_type) () * _1238;
  int (*__vtbl_ptr_type) () _1239;
  void * PROF_1240;
  uint8_t * _1242;
  void * PROF_1244;
  uint8_t * _1246;
  sizetype _1247;
  uint8_t * _1248;
  sizetype _1258;
  uint8_t * _1259;
  uint8_t * _1262;
  int (*__vtbl_ptr_type) () * _1263;
  int (*__vtbl_ptr_type) () _1264;
  uint8_t * _1266;
  uint8_t * iftmp.11_1267;
  void * PROF_1268;
  uint8_t * _1270;
  uint8_t * _1272;
  int _1277;
  int _1278;
  unsigned int _1279;
  int _1298;
  long unsigned int _1299;
  unsigned int iftmp.7_1300;
  unsigned int iftmp.7_1301;
  unsigned int iftmp.7_1302;
  bool _1304;
  long unsigned int _1305;
  unsigned int _1307;
  unsigned int _1309;
  unsigned int _1310;
  unsigned int _1311;
  struct Allocator * _1312;
  struct Allocator * _1314;
  unsigned int _1317;
  sizetype _1318;
  uint8_t * _1319;
  uint8_t * _1320;
  int (*__vtbl_ptr_type) () * _1321;
  int (*__vtbl_ptr_type) () _1322;
  uint8_t * iftmp.8_1325;
  void * PROF_1326;
  uint8_t * _1328;
  int (*__vtbl_ptr_type) () _1331;
  uint8_t * _1332;
  int (*__vtbl_ptr_type) () * _1333;
  int (*__vtbl_ptr_type) () _1334;
  void * PROF_1335;
  uint8_t * _1337;
  void * PROF_1339;
  uint8_t * _1341;
  sizetype _1342;
  uint8_t * _1343;
  sizetype _1353;
  uint8_t * _1354;
  uint8_t * _1357;
  int (*__vtbl_ptr_type) () * _1358;
  int (*__vtbl_ptr_type) () _1359;
  uint8_t * _1361;
  uint8_t * iftmp.11_1362;
  void * PROF_1363;
  uint8_t * _1365;
  uint8_t * _1367;
  uint8_t * _1372;
  bool _1373;
  int _1374;
  bool _1375;
  bool _1376;
  int _1377;
  unsigned int _1378;
  long unsigned int _1379;
  uint8_t * _1381;
  uint8_t * _1382;
  int _1383;
  int _1384;
  int _1385;
  unsigned int _1386;
  int _1391;
  int _1392;
  unsigned int _1393;
  long unsigned int _1394;
  unsigned int _1395;
  unsigned int _1396;
  unsigned int _1397;
  uint8_t * _1398;
  int _1399;
  uint8_t * _1400;
  int _1401;
  int _1402;
  unsigned int _1403;
  long unsigned int _1404;
  unsigned int _1405;
  unsigned int _1407;
  sizetype _1410;
  uint8_t * _1411;
  uint8_t * _1414;
  uint8_t * _1417;
  int _1420;
  int _1421;
  unsigned int _1422;
  int _1441;
  long unsigned int _1442;
  unsigned int iftmp.7_1443;
  unsigned int iftmp.7_1444;
  unsigned int iftmp.7_1445;
  bool _1447;
  short unsigned int _1448;
  unsigned int _1450;
  unsigned int _1452;
  unsigned int _1453;
  unsigned int _1454;
  struct Allocator * _1455;
  struct Allocator * _1457;
  unsigned int _1460;
  sizetype _1461;
  uint8_t * _1462;
  uint8_t * _1463;
  int (*__vtbl_ptr_type) () * _1464;
  int (*__vtbl_ptr_type) () _1465;
  uint8_t * iftmp.8_1468;
  void * PROF_1469;
  uint8_t * _1471;
  int (*__vtbl_ptr_type) () _1474;
  uint8_t * _1475;
  int (*__vtbl_ptr_type) () * _1476;
  int (*__vtbl_ptr_type) () _1477;
  void * PROF_1478;
  uint8_t * _1480;
  void * PROF_1482;
  uint8_t * _1484;
  sizetype _1485;
  uint8_t * _1486;
  sizetype _1496;
  uint8_t * _1497;
  uint8_t * _1500;
  int (*__vtbl_ptr_type) () * _1501;
  int (*__vtbl_ptr_type) () _1502;
  uint8_t * _1504;
  uint8_t * iftmp.11_1505;
  void * PROF_1506;
  uint8_t * _1508;
  uint8_t * _1510;
  int _1515;
  int _1516;
  unsigned int _1517;
  long unsigned int _1518;
  int _1521;
  long unsigned int _1522;
  unsigned int iftmp.7_1523;
  unsigned int iftmp.7_1524;
  unsigned int iftmp.7_1525;
  bool _1527;
  unsigned int _1530;
  unsigned int _1532;
  unsigned int _1533;
  unsigned int _1534;
  struct Allocator * _1535;
  struct Allocator * _1537;
  unsigned int _1540;
  sizetype _1541;
  uint8_t * _1542;
  uint8_t * _1543;
  int (*__vtbl_ptr_type) () * _1544;
  int (*__vtbl_ptr_type) () _1545;
  uint8_t * iftmp.8_1548;
  void * PROF_1549;
  uint8_t * _1551;
  int (*__vtbl_ptr_type) () _1554;
  uint8_t * _1555;
  int (*__vtbl_ptr_type) () * _1556;
  int (*__vtbl_ptr_type) () _1557;
  void * PROF_1558;
  uint8_t * _1560;
  void * PROF_1562;
  uint8_t * _1564;
  sizetype _1565;
  uint8_t * _1566;
  sizetype _1576;
  uint8_t * _1577;
  uint8_t * _1580;
  int (*__vtbl_ptr_type) () * _1581;
  int (*__vtbl_ptr_type) () _1582;
  uint8_t * _1584;
  uint8_t * iftmp.11_1585;
  void * PROF_1586;
  uint8_t * _1588;
  uint8_t * _1590;
  sizetype _1593;
  uint8_t * _1594;
  bool _1595;
  bool _1597;
  bool _1598;
  int _1599;
  int _1600;
  unsigned int _1601;
  int _1620;
  long unsigned int _1621;
  unsigned int iftmp.7_1622;
  unsigned int iftmp.7_1623;
  unsigned int iftmp.7_1624;
  bool _1626;
  unsigned int _1629;
  unsigned int _1631;
  unsigned int _1632;
  unsigned int _1633;
  struct Allocator * _1634;
  struct Allocator * _1636;
  unsigned int _1639;
  sizetype _1640;
  uint8_t * _1641;
  uint8_t * _1642;
  int (*__vtbl_ptr_type) () * _1643;
  int (*__vtbl_ptr_type) () _1644;
  uint8_t * iftmp.8_1647;
  void * PROF_1648;
  uint8_t * _1650;
  int (*__vtbl_ptr_type) () _1653;
  uint8_t * _1654;
  int (*__vtbl_ptr_type) () * _1655;
  int (*__vtbl_ptr_type) () _1656;
  void * PROF_1657;
  uint8_t * _1659;
  void * PROF_1661;
  uint8_t * _1663;
  sizetype _1664;
  uint8_t * _1665;
  sizetype _1675;
  uint8_t * _1676;
  uint8_t * _1679;
  int (*__vtbl_ptr_type) () * _1680;
  int (*__vtbl_ptr_type) () _1681;
  uint8_t * _1683;
  uint8_t * iftmp.11_1684;
  void * PROF_1685;
  uint8_t * _1687;
  uint8_t * _1689;
  int _1694;
  int _1695;
  unsigned int _1696;
  int _1715;
  long unsigned int _1716;
  unsigned int iftmp.7_1717;
  unsigned int iftmp.7_1718;
  unsigned int iftmp.7_1719;
  bool _1721;
  unsigned int _1722;
  unsigned int _1724;
  unsigned int _1726;
  unsigned int _1727;
  unsigned int _1728;
  struct Allocator * _1729;
  struct Allocator * _1731;
  unsigned int _1734;
  sizetype _1735;
  uint8_t * _1736;
  uint8_t * _1737;
  int (*__vtbl_ptr_type) () * _1738;
  int (*__vtbl_ptr_type) () _1739;
  uint8_t * iftmp.8_1742;
  void * PROF_1743;
  uint8_t * _1745;
  int (*__vtbl_ptr_type) () _1748;
  uint8_t * _1749;
  int (*__vtbl_ptr_type) () * _1750;
  int (*__vtbl_ptr_type) () _1751;
  void * PROF_1752;
  uint8_t * _1754;
  void * PROF_1756;
  uint8_t * _1758;
  sizetype _1759;
  uint8_t * _1760;
  sizetype _1770;
  uint8_t * _1771;
  uint8_t * _1774;
  int (*__vtbl_ptr_type) () * _1775;
  int (*__vtbl_ptr_type) () _1776;
  uint8_t * _1778;
  uint8_t * iftmp.11_1779;
  void * PROF_1780;
  uint8_t * _1782;
  uint8_t * _1784;
  bool _1787;
  bool _1788;
  unsigned int _1834;
  unsigned int _1954;
  unsigned int _1990;
  unsigned int _2096;
  unsigned int _2097;
  unsigned int _2098;
  unsigned int _2110;
  unsigned int _2133;
  unsigned int _2134;
  unsigned int _2135;
  unsigned int _2136;
  unsigned int _2148;
  unsigned int _2179;
  unsigned int _2181;
  unsigned int _2182;
  unsigned int _2183;
  unsigned int _2195;
  unsigned int _2219;
  uint8_t * _2259;
  unsigned int _2272;
  unsigned int _2286;
  unsigned int _2392;
  long unsigned int _2393;
  unsigned int _2394;
  unsigned int _2406;
  unsigned int _2429;
  unsigned int _2430;
  unsigned int _2465;
  unsigned int _2466;
  unsigned int _2468;
  unsigned int _2469;
  unsigned int _2470;
  unsigned int _2471;
  unsigned int _2472;
  unsigned int _2516;
  uint8_t * prephitmp_2605;
  int _2606;
  int _2609;
  int _2611;
  unsigned int _2613;
  long unsigned int _2615;
  long unsigned int prephitmp_2616;
  uint8_t * pretmp_2618;
  uint8_t * prephitmp_2619;
  uint8_t * pretmp_2621;
  uint8_t * prephitmp_2622;
  unsigned int pretmp_2643;
  unsigned int prephitmp_2644;
  uint8_t * prephitmp_2645;
  int _2646;
  int prephitmp_2647;
  uint8_t * prephitmp_2648;
  uint8_t * prephitmp_2653;
  unsigned int prephitmp_2661;
  uint8_t * prephitmp_2662;
  int _2663;
  int prephitmp_2664;
  uint8_t * prephitmp_2665;
  int _2666;
  int prephitmp_2667;
  int _2668;
  unsigned int _2670;
  unsigned int prephitmp_2671;
  long unsigned int _2672;
  long unsigned int prephitmp_2673;
  uint8_t * prephitmp_2674;
  uint8_t * prephitmp_2677;
  uint8_t * prephitmp_2679;
  uint8_t * prephitmp_2681;
  unsigned int prephitmp_2682;
  uint8_t * prephitmp_2683;
  int prephitmp_2684;
  uint8_t * prephitmp_2685;
  int prephitmp_2686;
  unsigned int prephitmp_2688;
  long unsigned int prephitmp_2689;
  unsigned int prephitmp_2692;
  uint8_t * prephitmp_2693;
  int _2694;
  int prephitmp_2695;
  uint8_t * prephitmp_2696;
  int _2697;
  int prephitmp_2698;
  int _2699;
  unsigned int _2701;
  long unsigned int _2703;
  long unsigned int prephitmp_2704;
  uint8_t * prephitmp_2705;
  uint8_t * prephitmp_2708;
  uint8_t * prephitmp_2710;
  unsigned int pretmp_2715;
  unsigned int prephitmp_2716;
  uint8_t * pretmp_2718;
  uint8_t * prephitmp_2719;
  int _2721;
  int prephitmp_2722;
  uint8_t * pretmp_2724;
  uint8_t * prephitmp_2725;
  int _2727;
  int prephitmp_2728;
  int _2730;
  unsigned int _2733;
  long unsigned int _2736;
  long unsigned int prephitmp_2737;
  uint8_t * prephitmp_2739;
  int _2740;
  int _2743;
  int _2745;
  unsigned int _2747;
  long unsigned int _2749;
  long unsigned int prephitmp_2750;
  uint8_t * pretmp_2752;
  uint8_t * prephitmp_2753;
  uint8_t * pretmp_2755;
  uint8_t * prephitmp_2756;
  unsigned int pretmp_2777;
  unsigned int prephitmp_2778;
  uint8_t * prephitmp_2779;
  int _2780;
  int prephitmp_2781;
  uint8_t * prephitmp_2782;
  uint8_t * prephitmp_2789;
  int _2797;
  int _2800;
  int _2802;
  unsigned int _2804;
  long unsigned int _2806;
  long unsigned int prephitmp_2807;
  uint8_t * prephitmp_2808;
  uint8_t * prephitmp_2811;
  uint8_t * prephitmp_2813;
  uint8_t * prephitmp_2815;
  uint8_t * prephitmp_2820;
  int _2821;
  int _2824;
  int _2826;
  unsigned int _2828;
  long unsigned int _2830;
  long unsigned int prephitmp_2831;
  uint8_t * pretmp_2833;
  uint8_t * prephitmp_2834;
  uint8_t * pretmp_2836;
  uint8_t * prephitmp_2837;
  unsigned int pretmp_2858;
  unsigned int prephitmp_2859;
  uint8_t * prephitmp_2860;
  int _2861;
  int prephitmp_2862;
  uint8_t * prephitmp_2863;
  uint8_t * prephitmp_2876;
  uint8_t * prephitmp_2883;
  int _2884;
  int _2887;
  int _2889;
  unsigned int _2891;
  long unsigned int _2893;
  long unsigned int prephitmp_2894;
  uint8_t * prephitmp_2895;
  int _2896;
  int prephitmp_2897;
  int _2898;
  unsigned int _2900;
  long unsigned int _2902;
  long unsigned int prephitmp_2903;
  unsigned int prephitmp_2907;
  uint8_t * prephitmp_2908;
  unsigned int prephitmp_2909;
  int _2911;
  uint8_t * prephitmp_2913;
  int _2914;
  int _2916;
  unsigned int _2918;
  long unsigned int _2920;
  long unsigned int prephitmp_2921;
  uint8_t * prephitmp_2922;
  uint8_t * prephitmp_2924;
  uint8_t * prephitmp_2927;
  uint8_t * prephitmp_2929;
  uint8_t * prephitmp_2931;
  long unsigned int vt_use.24_2937;
  unsigned int prephitmp_2943;
  uint8_t * prephitmp_2944;
  int _2945;
  uint8_t * prephitmp_2947;
  int _2948;
  int prephitmp_2949;
  int _2950;
  unsigned int _2952;
  long unsigned int _2954;
  long unsigned int prephitmp_2955;
  uint8_t * pretmp_2960;
  uint8_t * prephitmp_2961;
  unsigned int pretmp_2963;
  unsigned int prephitmp_2964;
  uint8_t * pretmp_2965;
  uint8_t * prephitmp_2966;
  uint8_t * pretmp_2967;
  uint8_t * prephitmp_2968;
  int _2969;
  int prephitmp_2970;
  uint8_t * prephitmp_2977;
  int _2978;
  int _2981;
  int _2983;
  unsigned int _2985;
  long unsigned int _2987;
  long unsigned int prephitmp_2988;
  uint8_t * pretmp_2990;
  uint8_t * prephitmp_2991;
  uint8_t * prephitmp_2994;
  uint8_t * prephitmp_2996;
  unsigned int prephitmp_2997;
  uint8_t * prephitmp_2998;
  int prephitmp_2999;
  uint8_t * prephitmp_3000;
  int prephitmp_3001;
  long unsigned int prephitmp_3004;

  <bb 2>:
  # DEBUG this => &builder_
  # DEBUG _fbb => _fbb_3(D)
  # DEBUG builder_$fbb_ => _fbb_3(D)
  # DEBUG this => _fbb_3(D)
  _11 = MEM[(long unsigned int *)_fbb_3(D) + 32B];
  # DEBUG D#19 => _fbb_3(D)
  _12 = MEM[(bool *)_fbb_3(D) + 38B];
  # DEBUG D#19 => _fbb_3(D)
  # DEBUG this => D#19
  # DEBUG this => D#19
  if (_12 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1352, &__PRETTY_FUNCTION__, "!nested");

  <bb 4>:
  if (_11 == 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  # DEBUG D#20 => _11
  # DEBUG D#21 => 0
  flatbuffers::FlatBufferBuilder::_ZN11flatbuffers17FlatBufferBuilder9NotNestedEv.isra.12.part.13 ();

  <bb 6>:
  _fbb_3(D)->nested = 1;
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _13 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  _14 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  _15 = (int) _14;
  _16 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _17 = (int) _16;
  _18 = _15 - _17;
  _19 = (unsigned int) _18;
  _20 = _13 - _19;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG builder_$start_ => _20
  # DEBUG this => NULL
  # DEBUG _fbb => NULL
  # DEBUG D#55 => &builder_
  # DEBUG version => version_4(D)
  # DEBUG this => D#55
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 8
  # DEBUG e => version_4(D)
  # DEBUG def => 1
  # DEBUG e => version_4(D)
  # DEBUG def => 1
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (version_4(D) == 1)
    goto <bb 7>;
  else
    goto <bb 481>;

  <bb 7>:
  _29 = _fbb_3(D)->force_defaults_;
  if (_29 != 0)
    goto <bb 481>;
  else
    goto <bb 104>;

  <bb 8>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 4;

  <bb 9>:
  # DEBUG elem_size => NULL
  # DEBUG D#85 => &_fbb_3(D)->buf_
  # DEBUG this => D#85
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _83 = -_20;
  _85 = _83 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#85
  # DEBUG zero_pad_bytes => _85
  # DEBUG this => D#85
  # DEBUG len => _85
  # DEBUG this => D#85
  # DEBUG len => _85
  _95 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _1376 = _16 <= _95;
  _1787 = _14 >= _95;
  _1788 = _1376 & _1787;
  if (_1788 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 918, &__PRETTY_FUNCTION__, "cur_ >= scratch_ && scratch_ >= buf_");

  <bb 11>:
  _98 = (int) _95;
  _99 = _15 - _98;
  _100 = (unsigned int) _99;
  if (_85 > _100)
    goto <bb 12>;
  else
    goto <bb 37>;

  <bb 12>:
  # DEBUG this => D#85
  # DEBUG len => _85
  # DEBUG len => _85
  # DEBUG old_reserved => _13
  # DEBUG this => D#85
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#85
  # DEBUG D#6 => D#85
  # DEBUG this => D#6
  # DEBUG this => D#6
  _119 = _98 - _17;
  _120 = (long unsigned int) _119;
  # DEBUG old_scratch_size => NULL
  if (_13 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  iftmp.7_121 = _13 >> 1;
  goto <bb 15>;

  <bb 14>:
  iftmp.7_122 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 15>:
  # iftmp.7_123 = PHI <iftmp.7_121(13), iftmp.7_122(14)>
  # DEBUG __a => &len
  # DEBUG __b => &D.227288
  _368 = MAX_EXPR <_85, iftmp.7_123>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _128 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2097 = _13 + _128;
  _2096 = _2097 + 4294967295;
  _130 = _368 + _2096;
  _131 = -_128;
  _132 = _130 & _131;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _132;
  if (_16 != 0B)
    goto <bb 16>;
  else
    goto <bb 30>;

  <bb 16>:
  _133 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _133
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  if (_133 != 0B)
    goto <bb 17>;
  else
    goto <bb 27>;

  <bb 17>:
  _142 = _133->_vptr.Allocator;
  _143 = MEM[(int (*__vtbl_ptr_type) () *)_142 + 16B];
  PROF_147 = [obj_type_ref] OBJ_TYPE_REF(_143;(struct Allocator)_133->4);
  if (PROF_147 == reallocate_downward)
    goto <bb 18>;
  else
    goto <bb 26>;

  <bb 18>:
  # DEBUG this => _133
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  if (_13 < _132)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 617, &__PRETTY_FUNCTION__, "new_size > old_size");

  <bb 20>:
  _152 = MEM[(int (*__vtbl_ptr_type) () *)_142 + 8B];
  PROF_156 = [obj_type_ref] OBJ_TYPE_REF(_152;(struct Allocator)_133->2);
  if (PROF_156 == allocate)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  # DEBUG this => _133
  # DEBUG size => _132
  _162 = operator new [] (_132);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 23>;

  <bb 22>:
  _158 = OBJ_TYPE_REF(_152;(struct Allocator)_133->2) (_133, _132);

  <bb 23>:
  # _153 = PHI <_158(22), _162(21)>
  # DEBUG new_p => _153
  # DEBUG D#2 => _133
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_p => _153
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  # DEBUG this => D#2
  _163 = _132 - _20;
  _164 = _153 + _163;
  memcpy (_164, _14, _20);
  memcpy (_153, _16, _120);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _154 = _133->_vptr.Allocator;
  _155 = MEM[(int (*__vtbl_ptr_type) () *)_154 + 12B];
  PROF_160 = [obj_type_ref] OBJ_TYPE_REF(_155;(struct Allocator)_133->3);
  if (PROF_160 == deallocate)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  # DEBUG this => _133
  # DEBUG p => _16
  # DEBUG D.227322 => _13
  operator delete [] (_16);
  goto <bb 29>;

  <bb 25>:
  OBJ_TYPE_REF(_155;(struct Allocator)_133->3) (_133, _16, _13);
  goto <bb 29>;

  <bb 26>:
  _149 = OBJ_TYPE_REF(_143;(struct Allocator)_133->4) (_133, _16, _13, _132, _20, _120);
  goto <bb 29>;

  <bb 27>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.227336
  # DEBUG D#3 => &D.227336.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.227336.D.58579
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  if (_13 < _132)
    goto <bb 28>;
  else
    goto <bb 19>;

  <bb 28>:
  # DEBUG this => &D.227336.D.58579
  # DEBUG size => _132
  _178 = operator new [] (_132);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.227336.D.58579
  # DEBUG old_p => _16
  # DEBUG old_size => _13
  # DEBUG new_p => NULL
  # DEBUG new_size => _132
  # DEBUG in_use_back => _20
  # DEBUG in_use_front => _120
  # DEBUG this => D#2
  _174 = _132 - _20;
  _175 = _178 + _174;
  memcpy (_175, _14, _20);
  memcpy (_178, _16, _120);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.227336.D.58579
  # DEBUG p => _16
  # DEBUG D.227350 => _13
  operator delete [] (_16);
  # DEBUG p => NULL
  # DEBUG D.227350 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 29>:
  # iftmp.8_146 = PHI <_153(24), _178(28), _149(26), _153(25)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_146;
  goto <bb 36>;

  <bb 30>:
  _135 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _135
  # DEBUG size => _132
  if (_135 != 0B)
    goto <bb 31>;
  else
    goto <bb 34>;

  <bb 31>:
  _179 = _135->_vptr.Allocator;
  _180 = MEM[(int (*__vtbl_ptr_type) () *)_179 + 8B];
  PROF_184 = [obj_type_ref] OBJ_TYPE_REF(_180;(struct Allocator)_135->2);
  if (PROF_184 == allocate)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  # DEBUG this => _135
  # DEBUG size => _132
  _188 = operator new [] (_132);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 35>;

  <bb 33>:
  _186 = OBJ_TYPE_REF(_180;(struct Allocator)_135->2) (_135, _132);
  goto <bb 35>;

  <bb 34>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _132
  _182 = operator new [] (_132);

  <bb 35>:
  # iftmp.11_183 = PHI <_188(32), _182(34), _186(33)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_183;

  <bb 36>:
  # prephitmp_2681 = PHI <iftmp.8_146(29), iftmp.11_183(35)>
  _138 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _139 = _138 - _20;
  _140 = prephitmp_2681 + _139;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _140;
  _141 = prephitmp_2681 + _120;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _141;
  _2606 = (int) _140;
  _2609 = (int) prephitmp_2681;
  _2611 = _2606 - _2609;
  _2613 = (unsigned int) _2611;
  _2615 = _138 - _2613;

  <bb 37>:
  # prephitmp_2605 = PHI <_14(11), _140(36)>
  # prephitmp_2616 = PHI <_20(11), _2615(36)>
  # DEBUG this => D#85
  # DEBUG this => NULL
  if (prephitmp_2616 <= 2147483646)
    goto <bb 39>;
  else
    goto <bb 38>;

  <bb 38>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 922, &__PRETTY_FUNCTION__, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");

  <bb 39>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _88 = -_85;
  _89 = prephitmp_2605 + _88;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _89;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_85 == 0)
    goto <bb 44>;
  else
    goto <bb 40>;

  <bb 40>:

  <bb 41>:
  # i_2484 = PHI <0(40), i_93(42)>
  # prephitmp_2619 = PHI <_89(40), pretmp_2618(42)>
  # DEBUG i => i_2484
  _92 = prephitmp_2619 + i_2484;
  *_92 = 0;
  i_93 = i_2484 + 1;
  # DEBUG i => i_93
  # DEBUG i => i_93
  if (_85 <= i_93)
    goto <bb 43>;
  else
    goto <bb 42>;

  <bb 42>:
  pretmp_2618 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;
  goto <bb 41>;

  <bb 43>:
  pretmp_2621 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;

  <bb 44>:
  # prephitmp_2622 = PHI <pretmp_2621(43), _89(39)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#85
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#85
  # DEBUG len => 4
  # DEBUG this => D#85
  # DEBUG len => 4
  _59 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  if (_59 <= prephitmp_2622)
    goto <bb 46>;
  else
    goto <bb 45>;

  <bb 45>:
  goto <bb 10>;

  <bb 46>:
  _60 = MEM[(struct vector_downward *)_fbb_3(D)].buf_;
  if (_59 >= _60)
    goto <bb 47>;
  else
    goto <bb 45>;

  <bb 47>:
  _61 = (int) prephitmp_2622;
  _62 = (int) _59;
  _63 = _61 - _62;
  _64 = (unsigned int) _63;
  if (_64 <= 3)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  pretmp_2643 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  goto <bb 73>;

  <bb 49>:
  # DEBUG this => D#85
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_189 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  # DEBUG old_reserved => old_reserved_189
  # DEBUG this => D#85
  _193 = (int) _60;
  _194 = _61 - _193;
  _195 = (unsigned int) _194;
  _196 = old_reserved_189 - _195;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#85
  # DEBUG D#6 => D#85
  # DEBUG this => D#6
  # DEBUG this => D#6
  _199 = _62 - _193;
  _200 = (long unsigned int) _199;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_189 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  iftmp.7_201 = old_reserved_189 >> 1;
  goto <bb 52>;

  <bb 51>:
  iftmp.7_202 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 52>:
  # iftmp.7_203 = PHI <iftmp.7_201(50), iftmp.7_202(51)>
  # DEBUG __a => &len
  # DEBUG __b => &D.227385
  _40 = MAX_EXPR <iftmp.7_203, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _208 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2133 = old_reserved_189 + _208;
  _2098 = _2133 + 4294967295;
  _210 = _40 + _2098;
  _211 = -_208;
  _212 = _210 & _211;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _212;
  if (_60 != 0B)
    goto <bb 53>;
  else
    goto <bb 66>;

  <bb 53>:
  _213 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _213
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  if (_213 != 0B)
    goto <bb 54>;
  else
    goto <bb 63>;

  <bb 54>:
  _222 = _213->_vptr.Allocator;
  _223 = MEM[(int (*__vtbl_ptr_type) () *)_222 + 16B];
  PROF_227 = [obj_type_ref] OBJ_TYPE_REF(_223;(struct Allocator)_213->4);
  if (PROF_227 == reallocate_downward)
    goto <bb 55>;
  else
    goto <bb 62>;

  <bb 55>:
  # DEBUG this => _213
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  if (old_reserved_189 < _212)
    goto <bb 56>;
  else
    goto <bb 19>;

  <bb 56>:
  _232 = MEM[(int (*__vtbl_ptr_type) () *)_222 + 8B];
  PROF_236 = [obj_type_ref] OBJ_TYPE_REF(_232;(struct Allocator)_213->2);
  if (PROF_236 == allocate)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  # DEBUG this => _213
  # DEBUG size => _212
  _242 = operator new [] (_212);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 59>;

  <bb 58>:
  _238 = OBJ_TYPE_REF(_232;(struct Allocator)_213->2) (_213, _212);

  <bb 59>:
  # _233 = PHI <_238(58), _242(57)>
  # DEBUG new_p => _233
  # DEBUG D#2 => _213
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_p => _233
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  # DEBUG this => D#2
  _243 = _212 - _196;
  _244 = _233 + _243;
  memcpy (_244, prephitmp_2622, _196);
  memcpy (_233, _60, _200);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _234 = _213->_vptr.Allocator;
  _235 = MEM[(int (*__vtbl_ptr_type) () *)_234 + 12B];
  PROF_240 = [obj_type_ref] OBJ_TYPE_REF(_235;(struct Allocator)_213->3);
  if (PROF_240 == deallocate)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  # DEBUG this => _213
  # DEBUG p => _60
  # DEBUG D.227419 => old_reserved_189
  operator delete [] (_60);
  goto <bb 65>;

  <bb 61>:
  OBJ_TYPE_REF(_235;(struct Allocator)_213->3) (_213, _60, old_reserved_189);
  goto <bb 65>;

  <bb 62>:
  _229 = OBJ_TYPE_REF(_223;(struct Allocator)_213->4) (_213, _60, old_reserved_189, _212, _196, _200);
  goto <bb 65>;

  <bb 63>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.227433
  # DEBUG D#3 => &D.227433.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.227433.D.58579
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  if (old_reserved_189 < _212)
    goto <bb 64>;
  else
    goto <bb 19>;

  <bb 64>:
  # DEBUG this => &D.227433.D.58579
  # DEBUG size => _212
  _258 = operator new [] (_212);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.227433.D.58579
  # DEBUG old_p => _60
  # DEBUG old_size => old_reserved_189
  # DEBUG new_p => NULL
  # DEBUG new_size => _212
  # DEBUG in_use_back => _196
  # DEBUG in_use_front => _200
  # DEBUG this => D#2
  _254 = _212 - _196;
  _255 = _258 + _254;
  memcpy (_255, prephitmp_2622, _196);
  memcpy (_258, _60, _200);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.227433.D.58579
  # DEBUG p => _60
  # DEBUG D.227447 => old_reserved_189
  operator delete [] (_60);
  # DEBUG p => NULL
  # DEBUG D.227447 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 65>:
  # iftmp.8_226 = PHI <_233(60), _258(64), _229(62), _233(61)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_226;
  goto <bb 72>;

  <bb 66>:
  _215 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _215
  # DEBUG size => _212
  if (_215 != 0B)
    goto <bb 67>;
  else
    goto <bb 70>;

  <bb 67>:
  _259 = _215->_vptr.Allocator;
  _260 = MEM[(int (*__vtbl_ptr_type) () *)_259 + 8B];
  PROF_264 = [obj_type_ref] OBJ_TYPE_REF(_260;(struct Allocator)_215->2);
  if (PROF_264 == allocate)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  # DEBUG this => _215
  # DEBUG size => _212
  _268 = operator new [] (_212);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 71>;

  <bb 69>:
  _266 = OBJ_TYPE_REF(_260;(struct Allocator)_215->2) (_215, _212);
  goto <bb 71>;

  <bb 70>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _212
  _262 = operator new [] (_212);

  <bb 71>:
  # iftmp.11_263 = PHI <_268(68), _262(70), _266(69)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_263;

  <bb 72>:
  # prephitmp_2679 = PHI <iftmp.8_226(65), iftmp.11_263(71)>
  _218 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _219 = _218 - _196;
  _220 = prephitmp_2679 + _219;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _220;
  _221 = prephitmp_2679 + _200;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _221;
  _2646 = (int) _220;

  <bb 73>:
  # prephitmp_2644 = PHI <pretmp_2643(48), _218(72)>
  # prephitmp_2645 = PHI <prephitmp_2622(48), _220(72)>
  # prephitmp_2647 = PHI <_61(48), _2646(72)>
  # prephitmp_2648 = PHI <_60(48), prephitmp_2679(72)>
  # prephitmp_2653 = PHI <_59(48), _221(72)>
  # DEBUG this => D#85
  # DEBUG D#117 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#116 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  _69 = (int) prephitmp_2648;
  _70 = prephitmp_2647 - _69;
  _71 = (unsigned int) _70;
  _72 = prephitmp_2644 - _71;
  # DEBUG this => NULL
  if (_72 <= 2147483646)
    goto <bb 74>;
  else
    goto <bb 38>;

  <bb 74>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _50 = prephitmp_2645 + 4294967292;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _50;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2645 + 4294967292B] = version_4(D);
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _52 = (int) _50;
  _55 = _52 - _69;
  _56 = (unsigned int) _55;
  _57 = prephitmp_2644 - _56;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 8
  # DEBUG field => 8
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 8
  # DEBUG this => D#85
  # DEBUG t => &fl
  # DEBUG this => D#85
  # DEBUG len => 8
  _1 = prephitmp_2648 <= prephitmp_2653;
  _1598 = _50 >= prephitmp_2653;
  _1597 = _1 & _1598;
  if (_1597 != 0)
    goto <bb 75>;
  else
    goto <bb 10>;

  <bb 75>:
  _273 = (int) prephitmp_2653;
  _274 = _52 - _273;
  _275 = (unsigned int) _274;
  if (_275 <= 7)
    goto <bb 76>;
  else
    goto <bb 100>;

  <bb 76>:
  # DEBUG this => D#85
  # DEBUG len => 8
  # DEBUG len => 8
  # DEBUG old_reserved => D#117
  # DEBUG this => D#85
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#85
  # DEBUG D#6 => D#85
  # DEBUG this => D#6
  # DEBUG this => D#6
  _294 = _273 - _69;
  _295 = (long unsigned int) _294;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2644 != 0)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  iftmp.7_296 = prephitmp_2644 >> 1;
  goto <bb 79>;

  <bb 78>:
  iftmp.7_297 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 79>:
  # iftmp.7_298 = PHI <iftmp.7_296(77), iftmp.7_297(78)>
  # DEBUG __a => &len
  # DEBUG __b => &D.227486
  _2148 = MAX_EXPR <iftmp.7_298, 8>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _303 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2135 = _303 + prephitmp_2644;
  _2134 = _2135 + 4294967295;
  _305 = _2134 + _2148;
  _306 = -_303;
  _307 = _305 & _306;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _307;
  if (prephitmp_2648 != 0B)
    goto <bb 80>;
  else
    goto <bb 93>;

  <bb 80>:
  _308 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _308
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  if (_308 != 0B)
    goto <bb 81>;
  else
    goto <bb 90>;

  <bb 81>:
  _317 = _308->_vptr.Allocator;
  _318 = MEM[(int (*__vtbl_ptr_type) () *)_317 + 16B];
  PROF_322 = [obj_type_ref] OBJ_TYPE_REF(_318;(struct Allocator)_308->4);
  if (PROF_322 == reallocate_downward)
    goto <bb 82>;
  else
    goto <bb 89>;

  <bb 82>:
  # DEBUG this => _308
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  if (_307 > prephitmp_2644)
    goto <bb 83>;
  else
    goto <bb 19>;

  <bb 83>:
  _327 = MEM[(int (*__vtbl_ptr_type) () *)_317 + 8B];
  PROF_331 = [obj_type_ref] OBJ_TYPE_REF(_327;(struct Allocator)_308->2);
  if (PROF_331 == allocate)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  # DEBUG this => _308
  # DEBUG size => _307
  _337 = operator new [] (_307);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 86>;

  <bb 85>:
  _333 = OBJ_TYPE_REF(_327;(struct Allocator)_308->2) (_308, _307);

  <bb 86>:
  # _328 = PHI <_333(85), _337(84)>
  # DEBUG new_p => _328
  # DEBUG D#2 => _308
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_p => _328
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  # DEBUG this => D#2
  _338 = _307 - _57;
  _339 = _328 + _338;
  memcpy (_339, _50, _57);
  memcpy (_328, prephitmp_2648, _295);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _329 = _308->_vptr.Allocator;
  _330 = MEM[(int (*__vtbl_ptr_type) () *)_329 + 12B];
  PROF_335 = [obj_type_ref] OBJ_TYPE_REF(_330;(struct Allocator)_308->3);
  if (PROF_335 == deallocate)
    goto <bb 87>;
  else
    goto <bb 88>;

  <bb 87>:
  # DEBUG this => _308
  # DEBUG p => D#116
  # DEBUG D.227520 => D#117
  operator delete [] (prephitmp_2648);
  goto <bb 92>;

  <bb 88>:
  OBJ_TYPE_REF(_330;(struct Allocator)_308->3) (_308, prephitmp_2648, prephitmp_2644);
  goto <bb 92>;

  <bb 89>:
  _324 = OBJ_TYPE_REF(_318;(struct Allocator)_308->4) (_308, prephitmp_2648, prephitmp_2644, _307, _57, _295);
  goto <bb 92>;

  <bb 90>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.227534
  # DEBUG D#3 => &D.227534.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.227534.D.58579
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  if (_307 > prephitmp_2644)
    goto <bb 91>;
  else
    goto <bb 19>;

  <bb 91>:
  # DEBUG this => &D.227534.D.58579
  # DEBUG size => _307
  _353 = operator new [] (_307);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.227534.D.58579
  # DEBUG old_p => D#116
  # DEBUG old_size => D#117
  # DEBUG new_p => NULL
  # DEBUG new_size => _307
  # DEBUG in_use_back => _57
  # DEBUG in_use_front => _295
  # DEBUG this => D#2
  _349 = _307 - _57;
  _350 = _353 + _349;
  memcpy (_350, _50, _57);
  memcpy (_353, prephitmp_2648, _295);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.227534.D.58579
  # DEBUG p => D#116
  # DEBUG D.227548 => D#117
  operator delete [] (prephitmp_2648);
  # DEBUG p => NULL
  # DEBUG D.227548 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 92>:
  # iftmp.8_321 = PHI <_328(87), _353(91), _324(89), _328(88)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_321;
  goto <bb 99>;

  <bb 93>:
  _310 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _310
  # DEBUG size => _307
  if (_310 != 0B)
    goto <bb 94>;
  else
    goto <bb 97>;

  <bb 94>:
  _354 = _310->_vptr.Allocator;
  _355 = MEM[(int (*__vtbl_ptr_type) () *)_354 + 8B];
  PROF_359 = [obj_type_ref] OBJ_TYPE_REF(_355;(struct Allocator)_310->2);
  if (PROF_359 == allocate)
    goto <bb 95>;
  else
    goto <bb 96>;

  <bb 95>:
  # DEBUG this => _310
  # DEBUG size => _307
  _363 = operator new [] (_307);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 98>;

  <bb 96>:
  _361 = OBJ_TYPE_REF(_355;(struct Allocator)_310->2) (_310, _307);
  goto <bb 98>;

  <bb 97>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _307
  _357 = operator new [] (_307);

  <bb 98>:
  # iftmp.11_358 = PHI <_363(95), _357(97), _361(96)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_358;

  <bb 99>:
  # prephitmp_2677 = PHI <iftmp.8_321(92), iftmp.11_358(98)>
  _313 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _314 = _313 - _57;
  _315 = prephitmp_2677 + _314;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _315;
  _316 = prephitmp_2677 + _295;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _316;
  _2663 = (int) _315;
  _2666 = (int) prephitmp_2677;
  _2668 = _2663 - _2666;
  _2670 = (unsigned int) _2668;
  _2672 = _313 - _2670;

  <bb 100>:
  # prephitmp_2661 = PHI <prephitmp_2644(75), _313(99)>
  # prephitmp_2662 = PHI <_50(75), _315(99)>
  # prephitmp_2664 = PHI <_52(75), _2663(99)>
  # prephitmp_2665 = PHI <prephitmp_2648(75), prephitmp_2677(99)>
  # prephitmp_2667 = PHI <_69(75), _2666(99)>
  # prephitmp_2671 = PHI <_56(75), _2670(99)>
  # prephitmp_2673 = PHI <_57(75), _2672(99)>
  # prephitmp_2674 = PHI <prephitmp_2653(75), _316(99)>
  # DEBUG this => D#85
  # DEBUG this => NULL
  if (prephitmp_2673 <= 2147483646)
    goto <bb 101>;
  else
    goto <bb 38>;

  <bb 101>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(struct FieldLoc *)prephitmp_2674] = _57;
  MEM[(struct FieldLoc *)prephitmp_2674 + 4B] = 8;
  _37 = prephitmp_2674 + 8;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _37;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _38 = _fbb_3(D)->num_field_loc;
  _39 = _38 + 1;
  _fbb_3(D)->num_field_loc = _39;
  # DEBUG D#80 => &_fbb_3(D)->max_voffset_
  # DEBUG __a => D#80
  # DEBUG __b => &field
  _41 = MEM[(const short unsigned int &)_fbb_3(D) + 36];
  _42 = (int) _41;
  if (_42 <= 7)
    goto <bb 102>;
  else
    goto <bb 103>;

  <bb 102>:

  <bb 103>:
  # _45 = PHI <8(102), _41(101)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_3(D)->max_voffset_ = _45;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 104>:
  # prephitmp_2682 = PHI <prephitmp_2661(103), _13(7)>
  # prephitmp_2683 = PHI <prephitmp_2662(103), _14(7)>
  # prephitmp_2684 = PHI <prephitmp_2664(103), _15(7)>
  # prephitmp_2685 = PHI <prephitmp_2665(103), _16(7)>
  # prephitmp_2686 = PHI <prephitmp_2667(103), _17(7)>
  # prephitmp_2688 = PHI <prephitmp_2671(103), _19(7)>
  # prephitmp_2689 = PHI <prephitmp_2673(103), _20(7)>
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG version => NULL
  # DEBUG deprecated_builtin_code => 127
  _7 = (int) builtin_code_6(D);
  if (_7 <= 126)
    goto <bb 105>;
  else
    goto <bb 482>;

  <bb 105>:
  deprecated_builtin_code_8 = (int8_t) builtin_code_6(D);
  # DEBUG deprecated_builtin_code => deprecated_builtin_code_8
  # DEBUG deprecated_builtin_code => deprecated_builtin_code_8
  # DEBUG D#66 => &builder_
  # DEBUG deprecated_builtin_code => deprecated_builtin_code_8
  # DEBUG this => D#66
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 4
  # DEBUG e => deprecated_builtin_code_8
  # DEBUG def => 0
  # DEBUG e => deprecated_builtin_code_8
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (deprecated_builtin_code_8 == 0)
    goto <bb 106>;
  else
    goto <bb 482>;

  <bb 106>:
  _436 = _fbb_3(D)->force_defaults_;
  if (_436 != 0)
    goto <bb 482>;
  else
    goto <bb 165>;

  <bb 107>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 1;

  <bb 108>:
  # DEBUG elem_size => NULL
  # DEBUG D#84 => &_fbb_3(D)->buf_
  # DEBUG this => D#84
  # DEBUG D#115 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#114 => MEM[(const struct vector_downward *)_fbb_3(D)].cur_
  # DEBUG D#113 => (int) D#114
  # DEBUG D#112 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  # DEBUG D#111 => (int) D#112
  # DEBUG D#110 => D#113 - D#111
  # DEBUG D#109 => (unsigned int) D#110
  # DEBUG D#108 => D#115 - D#109
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 1
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#84
  # DEBUG zero_pad_bytes => 0
  # DEBUG this => D#84
  # DEBUG len => 0
  # DEBUG this => D#84
  # DEBUG len => 0
  _501 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _1595 = _501 >= prephitmp_2685;
  _371 = _501 <= prephitmp_2683;
  _531 = _371 & _1595;
  if (_531 != 0)
    goto <bb 109>;
  else
    goto <bb 10>;

  <bb 109>:
  _504 = (int) _501;
  # DEBUG this => D#84
  # DEBUG this => NULL
  if (prephitmp_2689 <= 2147483646)
    goto <bb 110>;
  else
    goto <bb 38>;

  <bb 110>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#84
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#84
  # DEBUG len => 1
  # DEBUG this => D#84
  # DEBUG len => 1
  if (_504 == prephitmp_2684)
    goto <bb 111>;
  else
    goto <bb 135>;

  <bb 111>:
  # DEBUG this => D#84
  # DEBUG len => 1
  # DEBUG len => 1
  # DEBUG old_reserved => D#115
  # DEBUG this => D#84
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#84
  # DEBUG D#6 => D#84
  # DEBUG this => D#6
  # DEBUG this => D#6
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2682 != 0)
    goto <bb 112>;
  else
    goto <bb 113>;

  <bb 112>:
  iftmp.7_607 = prephitmp_2682 >> 1;
  goto <bb 114>;

  <bb 113>:
  iftmp.7_608 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 114>:
  # iftmp.7_609 = PHI <iftmp.7_607(112), iftmp.7_608(113)>
  # DEBUG __a => &len
  # DEBUG __b => &D.227804
  _1990 = MAX_EXPR <iftmp.7_609, 1>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _614 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2181 = _614 + prephitmp_2682;
  _2136 = _2181 + 4294967295;
  _616 = _1990 + _2136;
  _617 = -_614;
  _618 = _616 & _617;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _618;
  if (prephitmp_2685 != 0B)
    goto <bb 115>;
  else
    goto <bb 128>;

  <bb 115>:
  _619 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _619
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  if (_619 != 0B)
    goto <bb 116>;
  else
    goto <bb 125>;

  <bb 116>:
  _628 = _619->_vptr.Allocator;
  _629 = MEM[(int (*__vtbl_ptr_type) () *)_628 + 16B];
  PROF_633 = [obj_type_ref] OBJ_TYPE_REF(_629;(struct Allocator)_619->4);
  if (PROF_633 == reallocate_downward)
    goto <bb 117>;
  else
    goto <bb 124>;

  <bb 117>:
  # DEBUG this => _619
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  if (_618 > prephitmp_2682)
    goto <bb 118>;
  else
    goto <bb 19>;

  <bb 118>:
  _638 = MEM[(int (*__vtbl_ptr_type) () *)_628 + 8B];
  PROF_642 = [obj_type_ref] OBJ_TYPE_REF(_638;(struct Allocator)_619->2);
  if (PROF_642 == allocate)
    goto <bb 119>;
  else
    goto <bb 120>;

  <bb 119>:
  # DEBUG this => _619
  # DEBUG size => _618
  _648 = operator new [] (_618);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 121>;

  <bb 120>:
  _644 = OBJ_TYPE_REF(_638;(struct Allocator)_619->2) (_619, _618);

  <bb 121>:
  # _639 = PHI <_644(120), _648(119)>
  # DEBUG new_p => _639
  # DEBUG D#2 => _619
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_p => _639
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  # DEBUG this => D#2
  _649 = _618 - prephitmp_2689;
  _650 = _639 + _649;
  memcpy (_650, prephitmp_2683, prephitmp_2689);
  memcpy (_639, prephitmp_2685, prephitmp_2688);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _640 = _619->_vptr.Allocator;
  _641 = MEM[(int (*__vtbl_ptr_type) () *)_640 + 12B];
  PROF_646 = [obj_type_ref] OBJ_TYPE_REF(_641;(struct Allocator)_619->3);
  if (PROF_646 == deallocate)
    goto <bb 122>;
  else
    goto <bb 123>;

  <bb 122>:
  # DEBUG this => _619
  # DEBUG p => D#112
  # DEBUG D.227838 => D#115
  operator delete [] (prephitmp_2685);
  goto <bb 127>;

  <bb 123>:
  OBJ_TYPE_REF(_641;(struct Allocator)_619->3) (_619, prephitmp_2685, prephitmp_2682);
  goto <bb 127>;

  <bb 124>:
  _635 = OBJ_TYPE_REF(_629;(struct Allocator)_619->4) (_619, prephitmp_2685, prephitmp_2682, _618, prephitmp_2689, prephitmp_2688);
  goto <bb 127>;

  <bb 125>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.227852
  # DEBUG D#3 => &D.227852.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.227852.D.58579
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  if (_618 > prephitmp_2682)
    goto <bb 126>;
  else
    goto <bb 19>;

  <bb 126>:
  # DEBUG this => &D.227852.D.58579
  # DEBUG size => _618
  _664 = operator new [] (_618);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.227852.D.58579
  # DEBUG old_p => D#112
  # DEBUG old_size => D#115
  # DEBUG new_p => NULL
  # DEBUG new_size => _618
  # DEBUG in_use_back => D#108
  # DEBUG in_use_front => D#109
  # DEBUG this => D#2
  _660 = _618 - prephitmp_2689;
  _661 = _664 + _660;
  memcpy (_661, prephitmp_2683, prephitmp_2689);
  memcpy (_664, prephitmp_2685, prephitmp_2688);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.227852.D.58579
  # DEBUG p => D#112
  # DEBUG D.227866 => D#115
  operator delete [] (prephitmp_2685);
  # DEBUG p => NULL
  # DEBUG D.227866 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 127>:
  # iftmp.8_632 = PHI <_639(122), _664(126), _635(124), _639(123)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_632;
  goto <bb 134>;

  <bb 128>:
  _621 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _621
  # DEBUG size => _618
  if (_621 != 0B)
    goto <bb 129>;
  else
    goto <bb 132>;

  <bb 129>:
  _665 = _621->_vptr.Allocator;
  _666 = MEM[(int (*__vtbl_ptr_type) () *)_665 + 8B];
  PROF_670 = [obj_type_ref] OBJ_TYPE_REF(_666;(struct Allocator)_621->2);
  if (PROF_670 == allocate)
    goto <bb 130>;
  else
    goto <bb 131>;

  <bb 130>:
  # DEBUG this => _621
  # DEBUG size => _618
  _674 = operator new [] (_618);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 133>;

  <bb 131>:
  _672 = OBJ_TYPE_REF(_666;(struct Allocator)_621->2) (_621, _618);
  goto <bb 133>;

  <bb 132>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _618
  _668 = operator new [] (_618);

  <bb 133>:
  # iftmp.11_669 = PHI <_674(130), _668(132), _672(131)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_669;

  <bb 134>:
  # prephitmp_2710 = PHI <iftmp.8_632(127), iftmp.11_669(133)>
  _624 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _625 = _624 - prephitmp_2689;
  _626 = prephitmp_2710 + _625;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _626;
  _627 = prephitmp_2710 + prephitmp_2688;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _627;
  # DEBUG this => D#84
  _473 = (int) _626;
  _475 = (int) prephitmp_2710;
  _476 = _473 - _475;
  _477 = (unsigned int) _476;
  _478 = _624 - _477;
  # DEBUG this => NULL
  if (_478 <= 2147483646)
    goto <bb 135>;
  else
    goto <bb 38>;

  <bb 135>:
  # _2259 = PHI <_626(134), prephitmp_2683(110)>
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _455 = _2259 + 4294967295;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _455;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(signed char *)_2259 + 4294967295B] = deprecated_builtin_code_1610;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _456 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  _457 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  _458 = (int) _457;
  _459 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _460 = (int) _459;
  _461 = _458 - _460;
  _462 = (unsigned int) _461;
  _463 = _456 - _462;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#62 => {CLOBBER}
  # DEBUG litle_endian_element => D#62
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 4
  # DEBUG field => 4
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 4
  # DEBUG this => D#84
  # DEBUG t => &fl
  # DEBUG this => D#84
  # DEBUG len => 8
  _676 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _527 = _459 <= _676;
  _1375 = _457 >= _676;
  _1373 = _527 & _1375;
  if (_1373 != 0)
    goto <bb 136>;
  else
    goto <bb 10>;

  <bb 136>:
  _679 = (int) _676;
  _680 = _458 - _679;
  _681 = (unsigned int) _680;
  if (_681 <= 7)
    goto <bb 137>;
  else
    goto <bb 161>;

  <bb 137>:
  # DEBUG this => D#84
  # DEBUG len => 8
  # DEBUG len => 8
  # DEBUG old_reserved => _456
  # DEBUG this => D#84
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#84
  # DEBUG D#6 => D#84
  # DEBUG this => D#6
  # DEBUG this => D#6
  _700 = _679 - _460;
  _701 = (long unsigned int) _700;
  # DEBUG old_scratch_size => NULL
  if (_456 != 0)
    goto <bb 138>;
  else
    goto <bb 139>;

  <bb 138>:
  iftmp.7_702 = _456 >> 1;
  goto <bb 140>;

  <bb 139>:
  iftmp.7_703 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 140>:
  # iftmp.7_704 = PHI <iftmp.7_702(138), iftmp.7_703(139)>
  # DEBUG __a => &len
  # DEBUG __b => &D.227905
  _2406 = MAX_EXPR <iftmp.7_704, 8>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _709 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2183 = _456 + _709;
  _2182 = _2183 + 4294967295;
  _711 = _2182 + _2406;
  _712 = -_709;
  _713 = _711 & _712;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _713;
  if (_459 != 0B)
    goto <bb 141>;
  else
    goto <bb 154>;

  <bb 141>:
  _714 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _714
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  if (_714 != 0B)
    goto <bb 142>;
  else
    goto <bb 151>;

  <bb 142>:
  _723 = _714->_vptr.Allocator;
  _724 = MEM[(int (*__vtbl_ptr_type) () *)_723 + 16B];
  PROF_728 = [obj_type_ref] OBJ_TYPE_REF(_724;(struct Allocator)_714->4);
  if (PROF_728 == reallocate_downward)
    goto <bb 143>;
  else
    goto <bb 150>;

  <bb 143>:
  # DEBUG this => _714
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  if (_456 < _713)
    goto <bb 144>;
  else
    goto <bb 19>;

  <bb 144>:
  _733 = MEM[(int (*__vtbl_ptr_type) () *)_723 + 8B];
  PROF_737 = [obj_type_ref] OBJ_TYPE_REF(_733;(struct Allocator)_714->2);
  if (PROF_737 == allocate)
    goto <bb 145>;
  else
    goto <bb 146>;

  <bb 145>:
  # DEBUG this => _714
  # DEBUG size => _713
  _743 = operator new [] (_713);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 147>;

  <bb 146>:
  _739 = OBJ_TYPE_REF(_733;(struct Allocator)_714->2) (_714, _713);

  <bb 147>:
  # _734 = PHI <_739(146), _743(145)>
  # DEBUG new_p => _734
  # DEBUG D#2 => _714
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_p => _734
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  # DEBUG this => D#2
  _744 = _713 - _463;
  _745 = _734 + _744;
  memcpy (_745, _457, _463);
  memcpy (_734, _459, _701);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _735 = _714->_vptr.Allocator;
  _736 = MEM[(int (*__vtbl_ptr_type) () *)_735 + 12B];
  PROF_741 = [obj_type_ref] OBJ_TYPE_REF(_736;(struct Allocator)_714->3);
  if (PROF_741 == deallocate)
    goto <bb 148>;
  else
    goto <bb 149>;

  <bb 148>:
  # DEBUG this => _714
  # DEBUG p => _459
  # DEBUG D.227939 => _456
  operator delete [] (_459);
  goto <bb 153>;

  <bb 149>:
  OBJ_TYPE_REF(_736;(struct Allocator)_714->3) (_714, _459, _456);
  goto <bb 153>;

  <bb 150>:
  _730 = OBJ_TYPE_REF(_724;(struct Allocator)_714->4) (_714, _459, _456, _713, _463, _701);
  goto <bb 153>;

  <bb 151>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.227953
  # DEBUG D#3 => &D.227953.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.227953.D.58579
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  if (_456 < _713)
    goto <bb 152>;
  else
    goto <bb 19>;

  <bb 152>:
  # DEBUG this => &D.227953.D.58579
  # DEBUG size => _713
  _759 = operator new [] (_713);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.227953.D.58579
  # DEBUG old_p => _459
  # DEBUG old_size => _456
  # DEBUG new_p => NULL
  # DEBUG new_size => _713
  # DEBUG in_use_back => _463
  # DEBUG in_use_front => _701
  # DEBUG this => D#2
  _755 = _713 - _463;
  _756 = _759 + _755;
  memcpy (_756, _457, _463);
  memcpy (_759, _459, _701);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.227953.D.58579
  # DEBUG p => _459
  # DEBUG D.227967 => _456
  operator delete [] (_459);
  # DEBUG p => NULL
  # DEBUG D.227967 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 153>:
  # iftmp.8_727 = PHI <_734(148), _759(152), _730(150), _734(149)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_727;
  goto <bb 160>;

  <bb 154>:
  _716 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _716
  # DEBUG size => _713
  if (_716 != 0B)
    goto <bb 155>;
  else
    goto <bb 158>;

  <bb 155>:
  _760 = _716->_vptr.Allocator;
  _761 = MEM[(int (*__vtbl_ptr_type) () *)_760 + 8B];
  PROF_765 = [obj_type_ref] OBJ_TYPE_REF(_761;(struct Allocator)_716->2);
  if (PROF_765 == allocate)
    goto <bb 156>;
  else
    goto <bb 157>;

  <bb 156>:
  # DEBUG this => _716
  # DEBUG size => _713
  _769 = operator new [] (_713);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 159>;

  <bb 157>:
  _767 = OBJ_TYPE_REF(_761;(struct Allocator)_716->2) (_716, _713);
  goto <bb 159>;

  <bb 158>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _713
  _763 = operator new [] (_713);

  <bb 159>:
  # iftmp.11_764 = PHI <_769(156), _763(158), _767(157)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_764;

  <bb 160>:
  # prephitmp_2708 = PHI <iftmp.8_727(153), iftmp.11_764(159)>
  _719 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _720 = _719 - _463;
  _721 = prephitmp_2708 + _720;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _721;
  _722 = prephitmp_2708 + _701;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _722;
  _2694 = (int) _721;
  _2697 = (int) prephitmp_2708;
  _2699 = _2694 - _2697;
  _2701 = (unsigned int) _2699;
  _2703 = _719 - _2701;

  <bb 161>:
  # prephitmp_2692 = PHI <_456(136), _719(160)>
  # prephitmp_2693 = PHI <_457(136), _721(160)>
  # prephitmp_2695 = PHI <_458(136), _2694(160)>
  # prephitmp_2696 = PHI <_459(136), prephitmp_2708(160)>
  # prephitmp_2698 = PHI <_460(136), _2697(160)>
  # prephitmp_2704 = PHI <_463(136), _2703(160)>
  # prephitmp_2705 = PHI <_676(136), _722(160)>
  # DEBUG this => D#84
  # DEBUG this => NULL
  if (prephitmp_2704 <= 2147483646)
    goto <bb 162>;
  else
    goto <bb 38>;

  <bb 162>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(struct FieldLoc *)prephitmp_2705] = _463;
  MEM[(struct FieldLoc *)prephitmp_2705 + 4B] = 4;
  _442 = prephitmp_2705 + 8;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _442;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _443 = _fbb_3(D)->num_field_loc;
  _444 = _443 + 1;
  _fbb_3(D)->num_field_loc = _444;
  # DEBUG D#81 => &_fbb_3(D)->max_voffset_
  # DEBUG __a => D#81
  # DEBUG __b => &field
  _446 = MEM[(const short unsigned int &)_fbb_3(D) + 36];
  _447 = (int) _446;
  if (_447 <= 3)
    goto <bb 163>;
  else
    goto <bb 164>;

  <bb 163>:

  <bb 164>:
  # _450 = PHI <4(163), _446(162)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_3(D)->max_voffset_ = _450;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 165>:
  # prephitmp_2997 = PHI <prephitmp_2692(164), prephitmp_2682(106)>
  # prephitmp_2998 = PHI <prephitmp_2693(164), prephitmp_2683(106)>
  # prephitmp_2999 = PHI <prephitmp_2695(164), prephitmp_2684(106)>
  # prephitmp_3000 = PHI <prephitmp_2696(164), prephitmp_2685(106)>
  # prephitmp_3001 = PHI <prephitmp_2698(164), prephitmp_2686(106)>
  # prephitmp_3004 = PHI <prephitmp_2704(164), prephitmp_2689(106)>
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG deprecated_builtin_code => NULL
  # DEBUG D#59 => &builder_
  custom_code$o_2518 = MEM[(struct Offset *)&custom_code];
  # DEBUG custom_code$o => custom_code$o_2518
  # DEBUG this => D#59
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 6
  # DEBUG off => custom_code$o_2518
  # DEBUG off$o => custom_code$o_2518
  # DEBUG this => &off
  # DEBUG this => NULL
  if (custom_code$o_2518 == 0)
    goto <bb 240>;
  else
    goto <bb 166>;

  <bb 166>:
  # DEBUG this => _fbb_3(D)
  # DEBUG off => custom_code$o_2518
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _780 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_780 <= 3)
    goto <bb 167>;
  else
    goto <bb 168>;

  <bb 167>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 4;

  <bb 168>:
  # DEBUG elem_size => NULL
  # DEBUG D#119 => &_fbb_3(D)->buf_
  # DEBUG this => D#119
  # DEBUG D#107 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#106 => MEM[(const struct vector_downward *)_fbb_3(D)].cur_
  # DEBUG D#105 => (int) D#106
  # DEBUG D#104 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  # DEBUG D#103 => (int) D#104
  # DEBUG D#102 => D#105 - D#103
  # DEBUG D#101 => (unsigned int) D#102
  # DEBUG D#100 => D#107 - D#101
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _790 = -prephitmp_3004;
  _792 = _790 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#119
  # DEBUG zero_pad_bytes => _792
  # DEBUG this => D#119
  # DEBUG len => _792
  # DEBUG this => D#119
  # DEBUG len => _792
  _802 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _1721 = _802 >= prephitmp_3000;
  _1626 = _802 <= prephitmp_2998;
  _369 = _1626 & _1721;
  if (_369 != 0)
    goto <bb 169>;
  else
    goto <bb 10>;

  <bb 169>:
  _805 = (int) _802;
  _806 = prephitmp_2999 - _805;
  _807 = (unsigned int) _806;
  if (_792 > _807)
    goto <bb 170>;
  else
    goto <bb 194>;

  <bb 170>:
  # DEBUG this => D#119
  # DEBUG len => _792
  # DEBUG len => _792
  # DEBUG old_reserved => D#107
  # DEBUG this => D#119
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#119
  # DEBUG D#6 => D#119
  # DEBUG this => D#6
  # DEBUG this => D#6
  _826 = _805 - prephitmp_3001;
  _827 = (long unsigned int) _826;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2997 != 0)
    goto <bb 171>;
  else
    goto <bb 172>;

  <bb 171>:
  iftmp.7_828 = prephitmp_2997 >> 1;
  goto <bb 173>;

  <bb 172>:
  iftmp.7_829 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 173>:
  # iftmp.7_830 = PHI <iftmp.7_828(171), iftmp.7_829(172)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228024
  _2286 = MAX_EXPR <_792, iftmp.7_830>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _835 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2394 = _835 + prephitmp_2997;
  _2219 = _2394 + 4294967295;
  _837 = _2219 + _2286;
  _838 = -_835;
  _839 = _837 & _838;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _839;
  if (prephitmp_3000 != 0B)
    goto <bb 174>;
  else
    goto <bb 187>;

  <bb 174>:
  _840 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _840
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  if (_840 != 0B)
    goto <bb 175>;
  else
    goto <bb 184>;

  <bb 175>:
  _849 = _840->_vptr.Allocator;
  _850 = MEM[(int (*__vtbl_ptr_type) () *)_849 + 16B];
  PROF_854 = [obj_type_ref] OBJ_TYPE_REF(_850;(struct Allocator)_840->4);
  if (PROF_854 == reallocate_downward)
    goto <bb 176>;
  else
    goto <bb 183>;

  <bb 176>:
  # DEBUG this => _840
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  if (_839 > prephitmp_2997)
    goto <bb 177>;
  else
    goto <bb 19>;

  <bb 177>:
  _859 = MEM[(int (*__vtbl_ptr_type) () *)_849 + 8B];
  PROF_863 = [obj_type_ref] OBJ_TYPE_REF(_859;(struct Allocator)_840->2);
  if (PROF_863 == allocate)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 178>:
  # DEBUG this => _840
  # DEBUG size => _839
  _869 = operator new [] (_839);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 180>;

  <bb 179>:
  _865 = OBJ_TYPE_REF(_859;(struct Allocator)_840->2) (_840, _839);

  <bb 180>:
  # _860 = PHI <_865(179), _869(178)>
  # DEBUG new_p => _860
  # DEBUG D#2 => _840
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_p => _860
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  # DEBUG this => D#2
  _870 = _839 - prephitmp_3004;
  _871 = _860 + _870;
  memcpy (_871, prephitmp_2998, prephitmp_3004);
  memcpy (_860, prephitmp_3000, _827);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _861 = _840->_vptr.Allocator;
  _862 = MEM[(int (*__vtbl_ptr_type) () *)_861 + 12B];
  PROF_867 = [obj_type_ref] OBJ_TYPE_REF(_862;(struct Allocator)_840->3);
  if (PROF_867 == deallocate)
    goto <bb 181>;
  else
    goto <bb 182>;

  <bb 181>:
  # DEBUG this => _840
  # DEBUG p => D#104
  # DEBUG D.228058 => D#107
  operator delete [] (prephitmp_3000);
  goto <bb 186>;

  <bb 182>:
  OBJ_TYPE_REF(_862;(struct Allocator)_840->3) (_840, prephitmp_3000, prephitmp_2997);
  goto <bb 186>;

  <bb 183>:
  _856 = OBJ_TYPE_REF(_850;(struct Allocator)_840->4) (_840, prephitmp_3000, prephitmp_2997, _839, prephitmp_3004, _827);
  goto <bb 186>;

  <bb 184>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228072
  # DEBUG D#3 => &D.228072.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228072.D.58579
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  if (_839 > prephitmp_2997)
    goto <bb 185>;
  else
    goto <bb 19>;

  <bb 185>:
  # DEBUG this => &D.228072.D.58579
  # DEBUG size => _839
  _885 = operator new [] (_839);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228072.D.58579
  # DEBUG old_p => D#104
  # DEBUG old_size => D#107
  # DEBUG new_p => NULL
  # DEBUG new_size => _839
  # DEBUG in_use_back => D#100
  # DEBUG in_use_front => _827
  # DEBUG this => D#2
  _881 = _839 - prephitmp_3004;
  _882 = _885 + _881;
  memcpy (_882, prephitmp_2998, prephitmp_3004);
  memcpy (_885, prephitmp_3000, _827);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228072.D.58579
  # DEBUG p => D#104
  # DEBUG D.228086 => D#107
  operator delete [] (prephitmp_3000);
  # DEBUG p => NULL
  # DEBUG D.228086 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 186>:
  # iftmp.8_853 = PHI <_860(181), _885(185), _856(183), _860(182)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_853;
  goto <bb 193>;

  <bb 187>:
  _842 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _842
  # DEBUG size => _839
  if (_842 != 0B)
    goto <bb 188>;
  else
    goto <bb 191>;

  <bb 188>:
  _886 = _842->_vptr.Allocator;
  _887 = MEM[(int (*__vtbl_ptr_type) () *)_886 + 8B];
  PROF_891 = [obj_type_ref] OBJ_TYPE_REF(_887;(struct Allocator)_842->2);
  if (PROF_891 == allocate)
    goto <bb 189>;
  else
    goto <bb 190>;

  <bb 189>:
  # DEBUG this => _842
  # DEBUG size => _839
  _895 = operator new [] (_839);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 192>;

  <bb 190>:
  _893 = OBJ_TYPE_REF(_887;(struct Allocator)_842->2) (_842, _839);
  goto <bb 192>;

  <bb 191>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _839
  _889 = operator new [] (_839);

  <bb 192>:
  # iftmp.11_890 = PHI <_895(189), _889(191), _893(190)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_890;

  <bb 193>:
  # prephitmp_2996 = PHI <iftmp.8_853(186), iftmp.11_890(192)>
  _845 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _846 = _845 - prephitmp_3004;
  _847 = prephitmp_2996 + _846;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _847;
  _848 = prephitmp_2996 + _827;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _848;
  _2945 = (int) _847;
  _2948 = (int) prephitmp_2996;
  _2950 = _2945 - _2948;
  _2952 = (unsigned int) _2950;
  _2954 = _845 - _2952;

  <bb 194>:
  # prephitmp_2943 = PHI <prephitmp_2997(169), _845(193)>
  # prephitmp_2944 = PHI <prephitmp_2998(169), _847(193)>
  # prephitmp_2947 = PHI <prephitmp_3000(169), prephitmp_2996(193)>
  # prephitmp_2949 = PHI <prephitmp_3001(169), _2948(193)>
  # prephitmp_2955 = PHI <prephitmp_3004(169), _2954(193)>
  # DEBUG this => D#119
  # DEBUG this => NULL
  if (prephitmp_2955 <= 2147483646)
    goto <bb 195>;
  else
    goto <bb 38>;

  <bb 195>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _795 = -_792;
  _796 = prephitmp_2944 + _795;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _796;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_792 == 0)
    goto <bb 200>;
  else
    goto <bb 196>;

  <bb 196>:

  <bb 197>:
  # i_30 = PHI <0(196), i_800(198)>
  # prephitmp_2961 = PHI <_796(196), pretmp_2960(198)>
  # DEBUG i => i_30
  _799 = prephitmp_2961 + i_30;
  *_799 = 0;
  i_800 = i_30 + 1;
  # DEBUG i => i_800
  # DEBUG i => i_800
  if (_792 <= i_800)
    goto <bb 199>;
  else
    goto <bb 198>;

  <bb 198>:
  pretmp_2960 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  goto <bb 197>;

  <bb 199>:
  pretmp_2963 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  pretmp_2965 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  pretmp_2967 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _2969 = (int) pretmp_2967;

  <bb 200>:
  # prephitmp_2964 = PHI <pretmp_2963(199), prephitmp_2943(195)>
  # prephitmp_2966 = PHI <pretmp_2965(199), _796(195)>
  # prephitmp_2968 = PHI <pretmp_2967(199), prephitmp_2947(195)>
  # prephitmp_2970 = PHI <_2969(199), prephitmp_2949(195)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  # DEBUG D#99 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  _772 = (int) prephitmp_2966;
  # DEBUG D#98 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  _775 = _772 - prephitmp_2970;
  _776 = (unsigned int) _775;
  _777 = prephitmp_2964 - _776;
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (_777 >= custom_code$o_2518)
    goto <bb 202>;
  else
    goto <bb 201>;

  <bb 201>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1339, &__PRETTY_FUNCTION__, "off && off <= GetSize()");

  <bb 202>:
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  _2393 = 4 - custom_code$o_2518;
  _779 = _777 + _2393;
  # DEBUG this => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 6
  # DEBUG e => NULL
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (_779 == 0)
    goto <bb 203>;
  else
    goto <bb 483>;

  <bb 203>:
  _433 = _fbb_3(D)->force_defaults_;
  if (_433 != 0)
    goto <bb 483>;
  else
    goto <bb 486>;

  <bb 204>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 4;

  <bb 205>:
  # DEBUG elem_size => NULL
  # DEBUG this => D#119
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _931 = -_777;
  _933 = _931 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#119
  # DEBUG zero_pad_bytes => _933
  # DEBUG this => D#119
  # DEBUG len => _933
  # DEBUG this => D#119
  # DEBUG len => _933
  _943 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _1527 = _943 >= prephitmp_2968;
  _1447 = _943 <= prephitmp_2966;
  _1048 = _1447 & _1527;
  if (_1048 != 0)
    goto <bb 206>;
  else
    goto <bb 10>;

  <bb 206>:
  _946 = (int) _943;
  _947 = _772 - _946;
  _948 = (unsigned int) _947;
  if (_933 > _948)
    goto <bb 207>;
  else
    goto <bb 231>;

  <bb 207>:
  # DEBUG this => D#119
  # DEBUG len => _933
  # DEBUG len => _933
  # DEBUG old_reserved => D#99
  # DEBUG this => D#119
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#119
  # DEBUG D#6 => D#119
  # DEBUG this => D#6
  # DEBUG this => D#6
  _967 = _946 - prephitmp_2970;
  _968 = (long unsigned int) _967;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2964 != 0)
    goto <bb 208>;
  else
    goto <bb 209>;

  <bb 208>:
  iftmp.7_969 = prephitmp_2964 >> 1;
  goto <bb 210>;

  <bb 209>:
  iftmp.7_970 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 210>:
  # iftmp.7_971 = PHI <iftmp.7_969(208), iftmp.7_970(209)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228165
  _445 = MAX_EXPR <_933, iftmp.7_971>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _976 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _1834 = _976 + prephitmp_2964;
  _2392 = _1834 + 4294967295;
  _978 = _445 + _2392;
  _979 = -_976;
  _980 = _978 & _979;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _980;
  if (prephitmp_2968 != 0B)
    goto <bb 211>;
  else
    goto <bb 224>;

  <bb 211>:
  _981 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _981
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  if (_981 != 0B)
    goto <bb 212>;
  else
    goto <bb 221>;

  <bb 212>:
  _990 = _981->_vptr.Allocator;
  _991 = MEM[(int (*__vtbl_ptr_type) () *)_990 + 16B];
  PROF_995 = [obj_type_ref] OBJ_TYPE_REF(_991;(struct Allocator)_981->4);
  if (PROF_995 == reallocate_downward)
    goto <bb 213>;
  else
    goto <bb 220>;

  <bb 213>:
  # DEBUG this => _981
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  if (_980 > prephitmp_2964)
    goto <bb 214>;
  else
    goto <bb 19>;

  <bb 214>:
  _1000 = MEM[(int (*__vtbl_ptr_type) () *)_990 + 8B];
  PROF_1004 = [obj_type_ref] OBJ_TYPE_REF(_1000;(struct Allocator)_981->2);
  if (PROF_1004 == allocate)
    goto <bb 215>;
  else
    goto <bb 216>;

  <bb 215>:
  # DEBUG this => _981
  # DEBUG size => _980
  _1010 = operator new [] (_980);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 217>;

  <bb 216>:
  _1006 = OBJ_TYPE_REF(_1000;(struct Allocator)_981->2) (_981, _980);

  <bb 217>:
  # _1001 = PHI <_1006(216), _1010(215)>
  # DEBUG new_p => _1001
  # DEBUG D#2 => _981
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_p => _1001
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  # DEBUG this => D#2
  _1011 = _980 - _777;
  _1012 = _1001 + _1011;
  memcpy (_1012, prephitmp_2966, _777);
  memcpy (_1001, prephitmp_2968, _968);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1002 = _981->_vptr.Allocator;
  _1003 = MEM[(int (*__vtbl_ptr_type) () *)_1002 + 12B];
  PROF_1008 = [obj_type_ref] OBJ_TYPE_REF(_1003;(struct Allocator)_981->3);
  if (PROF_1008 == deallocate)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  # DEBUG this => _981
  # DEBUG p => D#98
  # DEBUG D.228199 => D#99
  operator delete [] (prephitmp_2968);
  goto <bb 223>;

  <bb 219>:
  OBJ_TYPE_REF(_1003;(struct Allocator)_981->3) (_981, prephitmp_2968, prephitmp_2964);
  goto <bb 223>;

  <bb 220>:
  _997 = OBJ_TYPE_REF(_991;(struct Allocator)_981->4) (_981, prephitmp_2968, prephitmp_2964, _980, _777, _968);
  goto <bb 223>;

  <bb 221>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228213
  # DEBUG D#3 => &D.228213.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228213.D.58579
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  if (_980 > prephitmp_2964)
    goto <bb 222>;
  else
    goto <bb 19>;

  <bb 222>:
  # DEBUG this => &D.228213.D.58579
  # DEBUG size => _980
  _1026 = operator new [] (_980);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228213.D.58579
  # DEBUG old_p => D#98
  # DEBUG old_size => D#99
  # DEBUG new_p => NULL
  # DEBUG new_size => _980
  # DEBUG in_use_back => _777
  # DEBUG in_use_front => _968
  # DEBUG this => D#2
  _1022 = _980 - _777;
  _1023 = _1026 + _1022;
  memcpy (_1023, prephitmp_2966, _777);
  memcpy (_1026, prephitmp_2968, _968);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228213.D.58579
  # DEBUG p => D#98
  # DEBUG D.228227 => D#99
  operator delete [] (prephitmp_2968);
  # DEBUG p => NULL
  # DEBUG D.228227 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 223>:
  # iftmp.8_994 = PHI <_1001(218), _1026(222), _997(220), _1001(219)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_994;
  goto <bb 230>;

  <bb 224>:
  _983 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _983
  # DEBUG size => _980
  if (_983 != 0B)
    goto <bb 225>;
  else
    goto <bb 228>;

  <bb 225>:
  _1027 = _983->_vptr.Allocator;
  _1028 = MEM[(int (*__vtbl_ptr_type) () *)_1027 + 8B];
  PROF_1032 = [obj_type_ref] OBJ_TYPE_REF(_1028;(struct Allocator)_983->2);
  if (PROF_1032 == allocate)
    goto <bb 226>;
  else
    goto <bb 227>;

  <bb 226>:
  # DEBUG this => _983
  # DEBUG size => _980
  _1036 = operator new [] (_980);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 229>;

  <bb 227>:
  _1034 = OBJ_TYPE_REF(_1028;(struct Allocator)_983->2) (_983, _980);
  goto <bb 229>;

  <bb 228>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _980
  _1030 = operator new [] (_980);

  <bb 229>:
  # iftmp.11_1031 = PHI <_1036(226), _1030(228), _1034(227)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1031;

  <bb 230>:
  # prephitmp_2994 = PHI <iftmp.8_994(223), iftmp.11_1031(229)>
  _986 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _987 = _986 - _777;
  _988 = prephitmp_2994 + _987;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _988;
  _989 = prephitmp_2994 + _968;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _989;
  _2978 = (int) _988;
  _2981 = (int) prephitmp_2994;
  _2983 = _2978 - _2981;
  _2985 = (unsigned int) _2983;
  _2987 = _986 - _2985;

  <bb 231>:
  # prephitmp_2977 = PHI <prephitmp_2966(206), _988(230)>
  # prephitmp_2988 = PHI <_777(206), _2987(230)>
  # DEBUG this => D#119
  # DEBUG this => NULL
  if (prephitmp_2988 <= 2147483646)
    goto <bb 232>;
  else
    goto <bb 38>;

  <bb 232>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _936 = -_933;
  _937 = prephitmp_2977 + _936;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _937;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_933 == 0)
    goto <bb 235>;
  else
    goto <bb 233>;

  <bb 233>:
  goto <bb 237>;

  <bb 234>:

  <bb 235>:
  _781 = &_fbb_3(D)->buf_;
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#119
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#119
  # DEBUG len => 4
  _910 = flatbuffers::vector_downward::ensure_space (_781, 4);
  # DEBUG space => _910
  _911 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;
  _912 = -_910;
  _913 = _911 + _912;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _913;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long unsigned int *)_913] = _779;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _914 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  _915 = (int) _913;
  _916 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _917 = (int) _916;
  _918 = _915 - _917;
  _919 = (unsigned int) _918;
  _920 = _914 - _919;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#51 => {CLOBBER}
  # DEBUG litle_endian_element => D#51
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 6
  # DEBUG field => 6
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 6
  # DEBUG this => D#119
  # DEBUG t => &fl
  flatbuffers::vector_downward::ensure_space (_781, 8);
  _899 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  MEM[(struct FieldLoc *)_899] = _920;
  MEM[(struct FieldLoc *)_899 + 4B] = 6;
  _900 = _899 + 8;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _900;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _901 = _fbb_3(D)->num_field_loc;
  _902 = _901 + 1;
  _fbb_3(D)->num_field_loc = _902;
  # DEBUG D#78 => &_fbb_3(D)->max_voffset_
  # DEBUG __a => D#78
  # DEBUG __b => &field
  _904 = MEM[(const short unsigned int &)_fbb_3(D) + 36];
  _905 = (int) _904;
  if (_905 <= 5)
    goto <bb 236>;
  else
    goto <bb 239>;

  <bb 236>:
  goto <bb 239>;

  <bb 237>:
  # i_464 = PHI <0(233), i_941(238)>
  # prephitmp_2991 = PHI <_937(233), pretmp_2990(238)>
  # DEBUG i => i_464
  _940 = prephitmp_2991 + i_464;
  *_940 = 0;
  i_941 = i_464 + 1;
  # DEBUG i => i_941
  # DEBUG i => i_941
  if (_933 <= i_941)
    goto <bb 234>;
  else
    goto <bb 238>;

  <bb 238>:
  pretmp_2990 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;
  goto <bb 237>;

  <bb 239>:
  # _908 = PHI <6(236), _904(235)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_3(D)->max_voffset_ = _908;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 240>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG off$o => NULL
  # DEBUG D#56 => &builder_
  # DEBUG builtin_code => builtin_code_6(D)
  # DEBUG this => D#56
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 10
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (_7 == 0)
    goto <bb 241>;
  else
    goto <bb 484>;

  <bb 241>:
  _429 = _fbb_3(D)->force_defaults_;
  if (_429 != 0)
    goto <bb 484>;
  else
    goto <bb 242>;

  <bb 242>:
  goto <bb 335>;

  <bb 243>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 4;

  <bb 244>:
  # DEBUG elem_size => NULL
  # DEBUG D#83 => &_fbb_3(D)->buf_
  # DEBUG this => D#83
  # DEBUG D#97 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#96 => MEM[(const struct vector_downward *)_fbb_3(D)].cur_
  # DEBUG D#95 => (int) D#96
  # DEBUG D#94 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  # DEBUG D#93 => (int) D#94
  # DEBUG D#92 => D#95 - D#93
  # DEBUG D#91 => (unsigned int) D#92
  # DEBUG D#90 => D#97 - D#91
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _1087 = -prephitmp_2737;
  _1089 = _1087 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#83
  # DEBUG zero_pad_bytes => _1089
  # DEBUG this => D#83
  # DEBUG len => _1089
  # DEBUG this => D#83
  # DEBUG len => _1089
  _1099 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _1304 = _1099 >= prephitmp_2725;
  _1209 = _1099 <= prephitmp_2719;
  _1129 = _1209 & _1304;
  if (_1129 != 0)
    goto <bb 245>;
  else
    goto <bb 10>;

  <bb 245>:
  _1102 = (int) _1099;
  _1103 = prephitmp_2722 - _1102;
  _1104 = (unsigned int) _1103;
  if (_1089 > _1104)
    goto <bb 246>;
  else
    goto <bb 270>;

  <bb 246>:
  # DEBUG this => D#83
  # DEBUG len => _1089
  # DEBUG len => _1089
  # DEBUG old_reserved => D#97
  # DEBUG this => D#83
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#83
  # DEBUG D#6 => D#83
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1123 = _1102 - prephitmp_2728;
  _1124 = (long unsigned int) _1123;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2716 != 0)
    goto <bb 247>;
  else
    goto <bb 248>;

  <bb 247>:
  iftmp.7_1125 = prephitmp_2716 >> 1;
  goto <bb 249>;

  <bb 248>:
  iftmp.7_1126 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 249>:
  # iftmp.7_1127 = PHI <iftmp.7_1125(247), iftmp.7_1126(248)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228310
  _2195 = MAX_EXPR <_1089, iftmp.7_1127>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1132 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2466 = _1132 + prephitmp_2716;
  _2468 = _2466 + 4294967295;
  _1134 = _2195 + _2468;
  _1135 = -_1132;
  _1136 = _1134 & _1135;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1136;
  if (prephitmp_2725 != 0B)
    goto <bb 250>;
  else
    goto <bb 263>;

  <bb 250>:
  _1137 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1137
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  if (_1137 != 0B)
    goto <bb 251>;
  else
    goto <bb 260>;

  <bb 251>:
  _1146 = _1137->_vptr.Allocator;
  _1147 = MEM[(int (*__vtbl_ptr_type) () *)_1146 + 16B];
  PROF_1151 = [obj_type_ref] OBJ_TYPE_REF(_1147;(struct Allocator)_1137->4);
  if (PROF_1151 == reallocate_downward)
    goto <bb 252>;
  else
    goto <bb 259>;

  <bb 252>:
  # DEBUG this => _1137
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  if (_1136 > prephitmp_2716)
    goto <bb 253>;
  else
    goto <bb 19>;

  <bb 253>:
  _1156 = MEM[(int (*__vtbl_ptr_type) () *)_1146 + 8B];
  PROF_1160 = [obj_type_ref] OBJ_TYPE_REF(_1156;(struct Allocator)_1137->2);
  if (PROF_1160 == allocate)
    goto <bb 254>;
  else
    goto <bb 255>;

  <bb 254>:
  # DEBUG this => _1137
  # DEBUG size => _1136
  _1166 = operator new [] (_1136);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 256>;

  <bb 255>:
  _1162 = OBJ_TYPE_REF(_1156;(struct Allocator)_1137->2) (_1137, _1136);

  <bb 256>:
  # _1157 = PHI <_1162(255), _1166(254)>
  # DEBUG new_p => _1157
  # DEBUG D#2 => _1137
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_p => _1157
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  # DEBUG this => D#2
  _1167 = _1136 - prephitmp_2737;
  _1168 = _1157 + _1167;
  memcpy (_1168, prephitmp_2719, prephitmp_2737);
  memcpy (_1157, prephitmp_2725, _1124);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1158 = _1137->_vptr.Allocator;
  _1159 = MEM[(int (*__vtbl_ptr_type) () *)_1158 + 12B];
  PROF_1164 = [obj_type_ref] OBJ_TYPE_REF(_1159;(struct Allocator)_1137->3);
  if (PROF_1164 == deallocate)
    goto <bb 257>;
  else
    goto <bb 258>;

  <bb 257>:
  # DEBUG this => _1137
  # DEBUG p => D#94
  # DEBUG D.228344 => D#97
  operator delete [] (prephitmp_2725);
  goto <bb 262>;

  <bb 258>:
  OBJ_TYPE_REF(_1159;(struct Allocator)_1137->3) (_1137, prephitmp_2725, prephitmp_2716);
  goto <bb 262>;

  <bb 259>:
  _1153 = OBJ_TYPE_REF(_1147;(struct Allocator)_1137->4) (_1137, prephitmp_2725, prephitmp_2716, _1136, prephitmp_2737, _1124);
  goto <bb 262>;

  <bb 260>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228358
  # DEBUG D#3 => &D.228358.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228358.D.58579
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  if (_1136 > prephitmp_2716)
    goto <bb 261>;
  else
    goto <bb 19>;

  <bb 261>:
  # DEBUG this => &D.228358.D.58579
  # DEBUG size => _1136
  _1182 = operator new [] (_1136);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228358.D.58579
  # DEBUG old_p => D#94
  # DEBUG old_size => D#97
  # DEBUG new_p => NULL
  # DEBUG new_size => _1136
  # DEBUG in_use_back => D#90
  # DEBUG in_use_front => _1124
  # DEBUG this => D#2
  _1178 = _1136 - prephitmp_2737;
  _1179 = _1182 + _1178;
  memcpy (_1179, prephitmp_2719, prephitmp_2737);
  memcpy (_1182, prephitmp_2725, _1124);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228358.D.58579
  # DEBUG p => D#94
  # DEBUG D.228372 => D#97
  operator delete [] (prephitmp_2725);
  # DEBUG p => NULL
  # DEBUG D.228372 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 262>:
  # iftmp.8_1150 = PHI <_1157(257), _1182(261), _1153(259), _1157(258)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1150;
  goto <bb 269>;

  <bb 263>:
  _1139 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1139
  # DEBUG size => _1136
  if (_1139 != 0B)
    goto <bb 264>;
  else
    goto <bb 267>;

  <bb 264>:
  _1183 = _1139->_vptr.Allocator;
  _1184 = MEM[(int (*__vtbl_ptr_type) () *)_1183 + 8B];
  PROF_1188 = [obj_type_ref] OBJ_TYPE_REF(_1184;(struct Allocator)_1139->2);
  if (PROF_1188 == allocate)
    goto <bb 265>;
  else
    goto <bb 266>;

  <bb 265>:
  # DEBUG this => _1139
  # DEBUG size => _1136
  _1192 = operator new [] (_1136);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 268>;

  <bb 266>:
  _1190 = OBJ_TYPE_REF(_1184;(struct Allocator)_1139->2) (_1139, _1136);
  goto <bb 268>;

  <bb 267>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1136
  _1186 = operator new [] (_1136);

  <bb 268>:
  # iftmp.11_1187 = PHI <_1192(265), _1186(267), _1190(266)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1187;

  <bb 269>:
  # prephitmp_2815 = PHI <iftmp.8_1150(262), iftmp.11_1187(268)>
  _1142 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1143 = _1142 - prephitmp_2737;
  _1144 = prephitmp_2815 + _1143;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1144;
  _1145 = prephitmp_2815 + _1124;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1145;
  _2740 = (int) _1144;
  _2743 = (int) prephitmp_2815;
  _2745 = _2740 - _2743;
  _2747 = (unsigned int) _2745;
  _2749 = _1142 - _2747;

  <bb 270>:
  # prephitmp_2739 = PHI <prephitmp_2719(245), _1144(269)>
  # prephitmp_2750 = PHI <prephitmp_2737(245), _2749(269)>
  # DEBUG this => D#83
  # DEBUG this => NULL
  if (prephitmp_2750 <= 2147483646)
    goto <bb 271>;
  else
    goto <bb 38>;

  <bb 271>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1092 = -_1089;
  _1093 = prephitmp_2739 + _1092;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1093;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_1089 == 0)
    goto <bb 276>;
  else
    goto <bb 272>;

  <bb 272>:

  <bb 273>:
  # i_1797 = PHI <0(272), i_1097(274)>
  # prephitmp_2753 = PHI <_1093(272), pretmp_2752(274)>
  # DEBUG i => i_1797
  _1096 = prephitmp_2753 + i_1797;
  *_1096 = 0;
  i_1097 = i_1797 + 1;
  # DEBUG i => i_1097
  # DEBUG i => i_1097
  if (_1089 <= i_1097)
    goto <bb 275>;
  else
    goto <bb 274>;

  <bb 274>:
  pretmp_2752 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;
  goto <bb 273>;

  <bb 275>:
  pretmp_2755 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;

  <bb 276>:
  # prephitmp_2756 = PHI <pretmp_2755(275), _1093(271)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#83
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#83
  # DEBUG len => 4
  # DEBUG this => D#83
  # DEBUG len => 4
  _1063 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  if (_1063 <= prephitmp_2756)
    goto <bb 277>;
  else
    goto <bb 45>;

  <bb 277>:
  _1064 = MEM[(struct vector_downward *)_fbb_3(D)].buf_;
  if (_1063 >= _1064)
    goto <bb 278>;
  else
    goto <bb 45>;

  <bb 278>:
  _1065 = (int) prephitmp_2756;
  _1066 = (int) _1063;
  _1067 = _1065 - _1066;
  _1068 = (unsigned int) _1067;
  if (_1068 <= 3)
    goto <bb 280>;
  else
    goto <bb 279>;

  <bb 279>:
  pretmp_2777 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  goto <bb 304>;

  <bb 280>:
  # DEBUG this => D#83
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_1193 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  # DEBUG old_reserved => old_reserved_1193
  # DEBUG this => D#83
  _1197 = (int) _1064;
  _1198 = _1065 - _1197;
  _1199 = (unsigned int) _1198;
  _1200 = old_reserved_1193 - _1199;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#83
  # DEBUG D#6 => D#83
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1203 = _1066 - _1197;
  _1204 = (long unsigned int) _1203;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_1193 != 0)
    goto <bb 281>;
  else
    goto <bb 282>;

  <bb 281>:
  iftmp.7_1205 = old_reserved_1193 >> 1;
  goto <bb 283>;

  <bb 282>:
  iftmp.7_1206 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 283>:
  # iftmp.7_1207 = PHI <iftmp.7_1205(281), iftmp.7_1206(282)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228407
  _2110 = MAX_EXPR <iftmp.7_1207, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1212 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2179 = old_reserved_1193 + _1212;
  _1722 = _2179 + 4294967295;
  _1214 = _1722 + _2110;
  _1215 = -_1212;
  _1216 = _1214 & _1215;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1216;
  if (_1064 != 0B)
    goto <bb 284>;
  else
    goto <bb 297>;

  <bb 284>:
  _1217 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1217
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  if (_1217 != 0B)
    goto <bb 285>;
  else
    goto <bb 294>;

  <bb 285>:
  _1226 = _1217->_vptr.Allocator;
  _1227 = MEM[(int (*__vtbl_ptr_type) () *)_1226 + 16B];
  PROF_1231 = [obj_type_ref] OBJ_TYPE_REF(_1227;(struct Allocator)_1217->4);
  if (PROF_1231 == reallocate_downward)
    goto <bb 286>;
  else
    goto <bb 293>;

  <bb 286>:
  # DEBUG this => _1217
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  if (old_reserved_1193 < _1216)
    goto <bb 287>;
  else
    goto <bb 19>;

  <bb 287>:
  _1236 = MEM[(int (*__vtbl_ptr_type) () *)_1226 + 8B];
  PROF_1240 = [obj_type_ref] OBJ_TYPE_REF(_1236;(struct Allocator)_1217->2);
  if (PROF_1240 == allocate)
    goto <bb 288>;
  else
    goto <bb 289>;

  <bb 288>:
  # DEBUG this => _1217
  # DEBUG size => _1216
  _1246 = operator new [] (_1216);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 290>;

  <bb 289>:
  _1242 = OBJ_TYPE_REF(_1236;(struct Allocator)_1217->2) (_1217, _1216);

  <bb 290>:
  # _1237 = PHI <_1242(289), _1246(288)>
  # DEBUG new_p => _1237
  # DEBUG D#2 => _1217
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_p => _1237
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  # DEBUG this => D#2
  _1247 = _1216 - _1200;
  _1248 = _1237 + _1247;
  memcpy (_1248, prephitmp_2756, _1200);
  memcpy (_1237, _1064, _1204);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1238 = _1217->_vptr.Allocator;
  _1239 = MEM[(int (*__vtbl_ptr_type) () *)_1238 + 12B];
  PROF_1244 = [obj_type_ref] OBJ_TYPE_REF(_1239;(struct Allocator)_1217->3);
  if (PROF_1244 == deallocate)
    goto <bb 291>;
  else
    goto <bb 292>;

  <bb 291>:
  # DEBUG this => _1217
  # DEBUG p => _1064
  # DEBUG D.228441 => old_reserved_1193
  operator delete [] (_1064);
  goto <bb 296>;

  <bb 292>:
  OBJ_TYPE_REF(_1239;(struct Allocator)_1217->3) (_1217, _1064, old_reserved_1193);
  goto <bb 296>;

  <bb 293>:
  _1233 = OBJ_TYPE_REF(_1227;(struct Allocator)_1217->4) (_1217, _1064, old_reserved_1193, _1216, _1200, _1204);
  goto <bb 296>;

  <bb 294>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228455
  # DEBUG D#3 => &D.228455.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228455.D.58579
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  if (old_reserved_1193 < _1216)
    goto <bb 295>;
  else
    goto <bb 19>;

  <bb 295>:
  # DEBUG this => &D.228455.D.58579
  # DEBUG size => _1216
  _1262 = operator new [] (_1216);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228455.D.58579
  # DEBUG old_p => _1064
  # DEBUG old_size => old_reserved_1193
  # DEBUG new_p => NULL
  # DEBUG new_size => _1216
  # DEBUG in_use_back => _1200
  # DEBUG in_use_front => _1204
  # DEBUG this => D#2
  _1258 = _1216 - _1200;
  _1259 = _1262 + _1258;
  memcpy (_1259, prephitmp_2756, _1200);
  memcpy (_1262, _1064, _1204);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228455.D.58579
  # DEBUG p => _1064
  # DEBUG D.228469 => old_reserved_1193
  operator delete [] (_1064);
  # DEBUG p => NULL
  # DEBUG D.228469 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 296>:
  # iftmp.8_1230 = PHI <_1237(291), _1262(295), _1233(293), _1237(292)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1230;
  goto <bb 303>;

  <bb 297>:
  _1219 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1219
  # DEBUG size => _1216
  if (_1219 != 0B)
    goto <bb 298>;
  else
    goto <bb 301>;

  <bb 298>:
  _1263 = _1219->_vptr.Allocator;
  _1264 = MEM[(int (*__vtbl_ptr_type) () *)_1263 + 8B];
  PROF_1268 = [obj_type_ref] OBJ_TYPE_REF(_1264;(struct Allocator)_1219->2);
  if (PROF_1268 == allocate)
    goto <bb 299>;
  else
    goto <bb 300>;

  <bb 299>:
  # DEBUG this => _1219
  # DEBUG size => _1216
  _1272 = operator new [] (_1216);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 302>;

  <bb 300>:
  _1270 = OBJ_TYPE_REF(_1264;(struct Allocator)_1219->2) (_1219, _1216);
  goto <bb 302>;

  <bb 301>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1216
  _1266 = operator new [] (_1216);

  <bb 302>:
  # iftmp.11_1267 = PHI <_1272(299), _1266(301), _1270(300)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1267;

  <bb 303>:
  # prephitmp_2813 = PHI <iftmp.8_1230(296), iftmp.11_1267(302)>
  _1222 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1223 = _1222 - _1200;
  _1224 = prephitmp_2813 + _1223;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1224;
  _1225 = prephitmp_2813 + _1204;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1225;
  _2780 = (int) _1224;

  <bb 304>:
  # prephitmp_2778 = PHI <pretmp_2777(279), _1222(303)>
  # prephitmp_2779 = PHI <prephitmp_2756(279), _1224(303)>
  # prephitmp_2781 = PHI <_1065(279), _2780(303)>
  # prephitmp_2782 = PHI <_1064(279), prephitmp_2813(303)>
  # prephitmp_2789 = PHI <_1063(279), _1225(303)>
  # DEBUG this => D#83
  # DEBUG D#89 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#88 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  _1073 = (int) prephitmp_2782;
  _1074 = prephitmp_2781 - _1073;
  _1075 = (unsigned int) _1074;
  _1076 = prephitmp_2778 - _1075;
  # DEBUG this => NULL
  if (_1076 <= 2147483646)
    goto <bb 305>;
  else
    goto <bb 38>;

  <bb 305>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1054 = prephitmp_2779 + 4294967292;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1054;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2779 + 4294967292B] = _7;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _1056 = (int) _1054;
  _1059 = _1056 - _1073;
  _1060 = (unsigned int) _1059;
  _1061 = prephitmp_2778 - _1060;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 10
  # DEBUG field => 10
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 10
  # DEBUG this => D#83
  # DEBUG t => &fl
  # DEBUG this => D#83
  # DEBUG len => 8
  _907 = prephitmp_2782 <= prephitmp_2789;
  _973 = _1054 >= prephitmp_2789;
  _832 = _907 & _973;
  if (_832 != 0)
    goto <bb 306>;
  else
    goto <bb 10>;

  <bb 306>:
  _1277 = (int) prephitmp_2789;
  _1278 = _1056 - _1277;
  _1279 = (unsigned int) _1278;
  if (_1279 <= 7)
    goto <bb 307>;
  else
    goto <bb 331>;

  <bb 307>:
  # DEBUG this => D#83
  # DEBUG len => 8
  # DEBUG len => 8
  # DEBUG old_reserved => D#89
  # DEBUG this => D#83
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#83
  # DEBUG D#6 => D#83
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1298 = _1277 - _1073;
  _1299 = (long unsigned int) _1298;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2778 != 0)
    goto <bb 308>;
  else
    goto <bb 309>;

  <bb 308>:
  iftmp.7_1300 = prephitmp_2778 >> 1;
  goto <bb 310>;

  <bb 309>:
  iftmp.7_1301 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 310>:
  # iftmp.7_1302 = PHI <iftmp.7_1300(308), iftmp.7_1301(309)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228508
  _1954 = MAX_EXPR <iftmp.7_1302, 8>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1307 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2516 = _1307 + prephitmp_2778;
  _24 = _2516 + 4294967295;
  _1309 = _24 + _1954;
  _1310 = -_1307;
  _1311 = _1309 & _1310;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1311;
  if (prephitmp_2782 != 0B)
    goto <bb 311>;
  else
    goto <bb 324>;

  <bb 311>:
  _1312 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1312
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  if (_1312 != 0B)
    goto <bb 312>;
  else
    goto <bb 321>;

  <bb 312>:
  _1321 = _1312->_vptr.Allocator;
  _1322 = MEM[(int (*__vtbl_ptr_type) () *)_1321 + 16B];
  PROF_1326 = [obj_type_ref] OBJ_TYPE_REF(_1322;(struct Allocator)_1312->4);
  if (PROF_1326 == reallocate_downward)
    goto <bb 313>;
  else
    goto <bb 320>;

  <bb 313>:
  # DEBUG this => _1312
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  if (_1311 > prephitmp_2778)
    goto <bb 314>;
  else
    goto <bb 19>;

  <bb 314>:
  _1331 = MEM[(int (*__vtbl_ptr_type) () *)_1321 + 8B];
  PROF_1335 = [obj_type_ref] OBJ_TYPE_REF(_1331;(struct Allocator)_1312->2);
  if (PROF_1335 == allocate)
    goto <bb 315>;
  else
    goto <bb 316>;

  <bb 315>:
  # DEBUG this => _1312
  # DEBUG size => _1311
  _1341 = operator new [] (_1311);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 317>;

  <bb 316>:
  _1337 = OBJ_TYPE_REF(_1331;(struct Allocator)_1312->2) (_1312, _1311);

  <bb 317>:
  # _1332 = PHI <_1337(316), _1341(315)>
  # DEBUG new_p => _1332
  # DEBUG D#2 => _1312
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_p => _1332
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  # DEBUG this => D#2
  _1342 = _1311 - _1061;
  _1343 = _1332 + _1342;
  memcpy (_1343, _1054, _1061);
  memcpy (_1332, prephitmp_2782, _1299);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1333 = _1312->_vptr.Allocator;
  _1334 = MEM[(int (*__vtbl_ptr_type) () *)_1333 + 12B];
  PROF_1339 = [obj_type_ref] OBJ_TYPE_REF(_1334;(struct Allocator)_1312->3);
  if (PROF_1339 == deallocate)
    goto <bb 318>;
  else
    goto <bb 319>;

  <bb 318>:
  # DEBUG this => _1312
  # DEBUG p => D#88
  # DEBUG D.228542 => D#89
  operator delete [] (prephitmp_2782);
  goto <bb 323>;

  <bb 319>:
  OBJ_TYPE_REF(_1334;(struct Allocator)_1312->3) (_1312, prephitmp_2782, prephitmp_2778);
  goto <bb 323>;

  <bb 320>:
  _1328 = OBJ_TYPE_REF(_1322;(struct Allocator)_1312->4) (_1312, prephitmp_2782, prephitmp_2778, _1311, _1061, _1299);
  goto <bb 323>;

  <bb 321>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228556
  # DEBUG D#3 => &D.228556.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228556.D.58579
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  if (_1311 > prephitmp_2778)
    goto <bb 322>;
  else
    goto <bb 19>;

  <bb 322>:
  # DEBUG this => &D.228556.D.58579
  # DEBUG size => _1311
  _1357 = operator new [] (_1311);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228556.D.58579
  # DEBUG old_p => D#88
  # DEBUG old_size => D#89
  # DEBUG new_p => NULL
  # DEBUG new_size => _1311
  # DEBUG in_use_back => _1061
  # DEBUG in_use_front => _1299
  # DEBUG this => D#2
  _1353 = _1311 - _1061;
  _1354 = _1357 + _1353;
  memcpy (_1354, _1054, _1061);
  memcpy (_1357, prephitmp_2782, _1299);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228556.D.58579
  # DEBUG p => D#88
  # DEBUG D.228570 => D#89
  operator delete [] (prephitmp_2782);
  # DEBUG p => NULL
  # DEBUG D.228570 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 323>:
  # iftmp.8_1325 = PHI <_1332(318), _1357(322), _1328(320), _1332(319)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1325;
  goto <bb 330>;

  <bb 324>:
  _1314 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1314
  # DEBUG size => _1311
  if (_1314 != 0B)
    goto <bb 325>;
  else
    goto <bb 328>;

  <bb 325>:
  _1358 = _1314->_vptr.Allocator;
  _1359 = MEM[(int (*__vtbl_ptr_type) () *)_1358 + 8B];
  PROF_1363 = [obj_type_ref] OBJ_TYPE_REF(_1359;(struct Allocator)_1314->2);
  if (PROF_1363 == allocate)
    goto <bb 326>;
  else
    goto <bb 327>;

  <bb 326>:
  # DEBUG this => _1314
  # DEBUG size => _1311
  _1367 = operator new [] (_1311);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 329>;

  <bb 327>:
  _1365 = OBJ_TYPE_REF(_1359;(struct Allocator)_1314->2) (_1314, _1311);
  goto <bb 329>;

  <bb 328>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1311
  _1361 = operator new [] (_1311);

  <bb 329>:
  # iftmp.11_1362 = PHI <_1367(326), _1361(328), _1365(327)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1362;

  <bb 330>:
  # prephitmp_2811 = PHI <iftmp.8_1325(323), iftmp.11_1362(329)>
  _1317 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1318 = _1317 - _1061;
  _1319 = prephitmp_2811 + _1318;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1319;
  _1320 = prephitmp_2811 + _1299;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1320;
  _2797 = (int) _1319;
  _2800 = (int) prephitmp_2811;
  _2802 = _2797 - _2800;
  _2804 = (unsigned int) _2802;
  _2806 = _1317 - _2804;

  <bb 331>:
  # prephitmp_2807 = PHI <_1061(306), _2806(330)>
  # prephitmp_2808 = PHI <prephitmp_2789(306), _1320(330)>
  # DEBUG this => D#83
  # DEBUG this => NULL
  if (prephitmp_2807 <= 2147483646)
    goto <bb 332>;
  else
    goto <bb 38>;

  <bb 332>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(struct FieldLoc *)prephitmp_2808] = _1061;
  MEM[(struct FieldLoc *)prephitmp_2808 + 4B] = 10;
  _1041 = prephitmp_2808 + 8;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1041;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _1042 = _fbb_3(D)->num_field_loc;
  _1043 = _1042 + 1;
  _fbb_3(D)->num_field_loc = _1043;
  # DEBUG D#79 => &_fbb_3(D)->max_voffset_
  # DEBUG __a => D#79
  # DEBUG __b => &field
  _1045 = MEM[(const short unsigned int &)_fbb_3(D) + 36];
  _1046 = (int) _1045;
  if (_1046 <= 9)
    goto <bb 333>;
  else
    goto <bb 334>;

  <bb 333>:

  <bb 334>:
  # _1049 = PHI <10(333), _1045(332)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_3(D)->max_voffset_ = _1049;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 335>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG builtin_code => NULL
  # DEBUG this => &builder_
  # DEBUG this => _fbb_3(D)
  # DEBUG start => _20
  _364 = _fbb_3(D)->nested;
  if (_364 != 0)
    goto <bb 337>;
  else
    goto <bb 336>;

  <bb 336>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1370, &__PRETTY_FUNCTION__, "nested");

  <bb 337>:
  # DEBUG this => _fbb_3(D)
  # DEBUG element => 0
  # DEBUG D#29 => _fbb_3(D)
  # DEBUG this => D#29
  # DEBUG t => 0
  # DEBUG t => NULL
  # DEBUG litle_endian_element => 0
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _1395 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_1395 <= 3)
    goto <bb 338>;
  else
    goto <bb 339>;

  <bb 338>:
  MEM[(size_t *)_fbb_3(D) + 40B] = 4;

  <bb 339>:
  # DEBUG elem_size => NULL
  # DEBUG D#82 => &_fbb_3(D)->buf_
  # DEBUG this => D#82
  _1397 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  _1398 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  _1399 = (int) _1398;
  _1400 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _1401 = (int) _1400;
  _1402 = _1399 - _1401;
  _1403 = (unsigned int) _1402;
  _1404 = _1397 - _1403;
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _1405 = -_1404;
  _1407 = _1405 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#82
  # DEBUG zero_pad_bytes => _1407
  # DEBUG this => D#82
  # DEBUG len => _1407
  # DEBUG this => D#82
  # DEBUG len => _1407
  _1417 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  _449 = _1400 <= _1417;
  _706 = _1398 >= _1417;
  _611 = _449 & _706;
  if (_611 != 0)
    goto <bb 340>;
  else
    goto <bb 10>;

  <bb 340>:
  _1420 = (int) _1417;
  _1421 = _1399 - _1420;
  _1422 = (unsigned int) _1421;
  if (_1407 > _1422)
    goto <bb 341>;
  else
    goto <bb 365>;

  <bb 341>:
  # DEBUG this => D#82
  # DEBUG len => _1407
  # DEBUG len => _1407
  # DEBUG old_reserved => _1397
  # DEBUG this => D#82
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#82
  # DEBUG D#6 => D#82
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1441 = _1420 - _1401;
  _1442 = (long unsigned int) _1441;
  # DEBUG old_scratch_size => NULL
  if (_1397 != 0)
    goto <bb 342>;
  else
    goto <bb 343>;

  <bb 342>:
  iftmp.7_1443 = _1397 >> 1;
  goto <bb 344>;

  <bb 343>:
  iftmp.7_1444 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 344>:
  # iftmp.7_1445 = PHI <iftmp.7_1443(342), iftmp.7_1444(343)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228637
  _1396 = MAX_EXPR <_1407, iftmp.7_1445>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1450 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2471 = _1397 + _1450;
  _2472 = _2471 + 4294967295;
  _1452 = _1396 + _2472;
  _1453 = -_1450;
  _1454 = _1452 & _1453;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1454;
  if (_1400 != 0B)
    goto <bb 345>;
  else
    goto <bb 358>;

  <bb 345>:
  _1455 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1455
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  if (_1455 != 0B)
    goto <bb 346>;
  else
    goto <bb 355>;

  <bb 346>:
  _1464 = _1455->_vptr.Allocator;
  _1465 = MEM[(int (*__vtbl_ptr_type) () *)_1464 + 16B];
  PROF_1469 = [obj_type_ref] OBJ_TYPE_REF(_1465;(struct Allocator)_1455->4);
  if (PROF_1469 == reallocate_downward)
    goto <bb 347>;
  else
    goto <bb 354>;

  <bb 347>:
  # DEBUG this => _1455
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  if (_1397 < _1454)
    goto <bb 348>;
  else
    goto <bb 19>;

  <bb 348>:
  _1474 = MEM[(int (*__vtbl_ptr_type) () *)_1464 + 8B];
  PROF_1478 = [obj_type_ref] OBJ_TYPE_REF(_1474;(struct Allocator)_1455->2);
  if (PROF_1478 == allocate)
    goto <bb 349>;
  else
    goto <bb 350>;

  <bb 349>:
  # DEBUG this => _1455
  # DEBUG size => _1454
  _1484 = operator new [] (_1454);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 351>;

  <bb 350>:
  _1480 = OBJ_TYPE_REF(_1474;(struct Allocator)_1455->2) (_1455, _1454);

  <bb 351>:
  # _1475 = PHI <_1480(350), _1484(349)>
  # DEBUG new_p => _1475
  # DEBUG D#2 => _1455
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_p => _1475
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  # DEBUG this => D#2
  _1485 = _1454 - _1404;
  _1486 = _1475 + _1485;
  memcpy (_1486, _1398, _1404);
  memcpy (_1475, _1400, _1442);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1476 = _1455->_vptr.Allocator;
  _1477 = MEM[(int (*__vtbl_ptr_type) () *)_1476 + 12B];
  PROF_1482 = [obj_type_ref] OBJ_TYPE_REF(_1477;(struct Allocator)_1455->3);
  if (PROF_1482 == deallocate)
    goto <bb 352>;
  else
    goto <bb 353>;

  <bb 352>:
  # DEBUG this => _1455
  # DEBUG p => _1400
  # DEBUG D.228671 => _1397
  operator delete [] (_1400);
  goto <bb 357>;

  <bb 353>:
  OBJ_TYPE_REF(_1477;(struct Allocator)_1455->3) (_1455, _1400, _1397);
  goto <bb 357>;

  <bb 354>:
  _1471 = OBJ_TYPE_REF(_1465;(struct Allocator)_1455->4) (_1455, _1400, _1397, _1454, _1404, _1442);
  goto <bb 357>;

  <bb 355>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228685
  # DEBUG D#3 => &D.228685.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228685.D.58579
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  if (_1397 < _1454)
    goto <bb 356>;
  else
    goto <bb 19>;

  <bb 356>:
  # DEBUG this => &D.228685.D.58579
  # DEBUG size => _1454
  _1500 = operator new [] (_1454);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228685.D.58579
  # DEBUG old_p => _1400
  # DEBUG old_size => _1397
  # DEBUG new_p => NULL
  # DEBUG new_size => _1454
  # DEBUG in_use_back => _1404
  # DEBUG in_use_front => _1442
  # DEBUG this => D#2
  _1496 = _1454 - _1404;
  _1497 = _1500 + _1496;
  memcpy (_1497, _1398, _1404);
  memcpy (_1500, _1400, _1442);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228685.D.58579
  # DEBUG p => _1400
  # DEBUG D.228699 => _1397
  operator delete [] (_1400);
  # DEBUG p => NULL
  # DEBUG D.228699 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 357>:
  # iftmp.8_1468 = PHI <_1475(352), _1500(356), _1471(354), _1475(353)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1468;
  goto <bb 364>;

  <bb 358>:
  _1457 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1457
  # DEBUG size => _1454
  if (_1457 != 0B)
    goto <bb 359>;
  else
    goto <bb 362>;

  <bb 359>:
  _1501 = _1457->_vptr.Allocator;
  _1502 = MEM[(int (*__vtbl_ptr_type) () *)_1501 + 8B];
  PROF_1506 = [obj_type_ref] OBJ_TYPE_REF(_1502;(struct Allocator)_1457->2);
  if (PROF_1506 == allocate)
    goto <bb 360>;
  else
    goto <bb 361>;

  <bb 360>:
  # DEBUG this => _1457
  # DEBUG size => _1454
  _1510 = operator new [] (_1454);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 363>;

  <bb 361>:
  _1508 = OBJ_TYPE_REF(_1502;(struct Allocator)_1457->2) (_1457, _1454);
  goto <bb 363>;

  <bb 362>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1454
  _1504 = operator new [] (_1454);

  <bb 363>:
  # iftmp.11_1505 = PHI <_1510(360), _1504(362), _1508(361)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1505;

  <bb 364>:
  # prephitmp_2931 = PHI <iftmp.8_1468(357), iftmp.11_1505(363)>
  _1460 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1461 = _1460 - _1404;
  _1462 = prephitmp_2931 + _1461;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1462;
  _1463 = prephitmp_2931 + _1442;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1463;
  _2821 = (int) _1462;
  _2824 = (int) prephitmp_2931;
  _2826 = _2821 - _2824;
  _2828 = (unsigned int) _2826;
  _2830 = _1460 - _2828;

  <bb 365>:
  # prephitmp_2820 = PHI <_1398(340), _1462(364)>
  # prephitmp_2831 = PHI <_1404(340), _2830(364)>
  # DEBUG this => D#82
  # DEBUG this => NULL
  if (prephitmp_2831 <= 2147483646)
    goto <bb 366>;
  else
    goto <bb 38>;

  <bb 366>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1410 = -_1407;
  _1411 = prephitmp_2820 + _1410;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1411;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_1407 == 0)
    goto <bb 371>;
  else
    goto <bb 367>;

  <bb 367>:

  <bb 368>:
  # i_1572 = PHI <0(367), i_1415(369)>
  # prephitmp_2834 = PHI <_1411(367), pretmp_2833(369)>
  # DEBUG i => i_1572
  _1414 = prephitmp_2834 + i_1572;
  *_1414 = 0;
  i_1415 = i_1572 + 1;
  # DEBUG i => i_1415
  # DEBUG i => i_1415
  if (_1407 <= i_1415)
    goto <bb 370>;
  else
    goto <bb 369>;

  <bb 369>:
  pretmp_2833 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;
  goto <bb 368>;

  <bb 370>:
  pretmp_2836 = MEM[(struct vector_downward *)_fbb_3(D)].cur_;

  <bb 371>:
  # prephitmp_2837 = PHI <pretmp_2836(370), _1411(366)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#82
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#82
  # DEBUG len => 4
  # DEBUG this => D#82
  # DEBUG len => 4
  _1381 = MEM[(struct vector_downward *)_fbb_3(D)].scratch_;
  if (_1381 <= prephitmp_2837)
    goto <bb 372>;
  else
    goto <bb 45>;

  <bb 372>:
  _1382 = MEM[(struct vector_downward *)_fbb_3(D)].buf_;
  if (_1381 >= _1382)
    goto <bb 373>;
  else
    goto <bb 45>;

  <bb 373>:
  _1383 = (int) prephitmp_2837;
  _1384 = (int) _1381;
  _1385 = _1383 - _1384;
  _1386 = (unsigned int) _1385;
  if (_1386 <= 3)
    goto <bb 375>;
  else
    goto <bb 374>;

  <bb 374>:
  pretmp_2858 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  goto <bb 399>;

  <bb 375>:
  # DEBUG this => D#82
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_1511 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  # DEBUG old_reserved => old_reserved_1511
  # DEBUG this => D#82
  _1515 = (int) _1382;
  _1516 = _1383 - _1515;
  _1517 = (unsigned int) _1516;
  _1518 = old_reserved_1511 - _1517;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#82
  # DEBUG D#6 => D#82
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1521 = _1384 - _1515;
  _1522 = (long unsigned int) _1521;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_1511 != 0)
    goto <bb 376>;
  else
    goto <bb 377>;

  <bb 376>:
  iftmp.7_1523 = old_reserved_1511 >> 1;
  goto <bb 378>;

  <bb 377>:
  iftmp.7_1524 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 378>:
  # iftmp.7_1525 = PHI <iftmp.7_1523(376), iftmp.7_1524(377)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228734
  _1078 = MAX_EXPR <iftmp.7_1525, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1530 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2469 = old_reserved_1511 + _1530;
  _2470 = _2469 + 4294967295;
  _1532 = _1078 + _2470;
  _1533 = -_1530;
  _1534 = _1532 & _1533;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1534;
  if (_1382 != 0B)
    goto <bb 379>;
  else
    goto <bb 392>;

  <bb 379>:
  _1535 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1535
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  if (_1535 != 0B)
    goto <bb 380>;
  else
    goto <bb 389>;

  <bb 380>:
  _1544 = _1535->_vptr.Allocator;
  _1545 = MEM[(int (*__vtbl_ptr_type) () *)_1544 + 16B];
  PROF_1549 = [obj_type_ref] OBJ_TYPE_REF(_1545;(struct Allocator)_1535->4);
  if (PROF_1549 == reallocate_downward)
    goto <bb 381>;
  else
    goto <bb 388>;

  <bb 381>:
  # DEBUG this => _1535
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  if (old_reserved_1511 < _1534)
    goto <bb 382>;
  else
    goto <bb 19>;

  <bb 382>:
  _1554 = MEM[(int (*__vtbl_ptr_type) () *)_1544 + 8B];
  PROF_1558 = [obj_type_ref] OBJ_TYPE_REF(_1554;(struct Allocator)_1535->2);
  if (PROF_1558 == allocate)
    goto <bb 383>;
  else
    goto <bb 384>;

  <bb 383>:
  # DEBUG this => _1535
  # DEBUG size => _1534
  _1564 = operator new [] (_1534);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 385>;

  <bb 384>:
  _1560 = OBJ_TYPE_REF(_1554;(struct Allocator)_1535->2) (_1535, _1534);

  <bb 385>:
  # _1555 = PHI <_1560(384), _1564(383)>
  # DEBUG new_p => _1555
  # DEBUG D#2 => _1535
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_p => _1555
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  # DEBUG this => D#2
  _1565 = _1534 - _1518;
  _1566 = _1555 + _1565;
  memcpy (_1566, prephitmp_2837, _1518);
  memcpy (_1555, _1382, _1522);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1556 = _1535->_vptr.Allocator;
  _1557 = MEM[(int (*__vtbl_ptr_type) () *)_1556 + 12B];
  PROF_1562 = [obj_type_ref] OBJ_TYPE_REF(_1557;(struct Allocator)_1535->3);
  if (PROF_1562 == deallocate)
    goto <bb 386>;
  else
    goto <bb 387>;

  <bb 386>:
  # DEBUG this => _1535
  # DEBUG p => _1382
  # DEBUG D.228768 => old_reserved_1511
  operator delete [] (_1382);
  goto <bb 391>;

  <bb 387>:
  OBJ_TYPE_REF(_1557;(struct Allocator)_1535->3) (_1535, _1382, old_reserved_1511);
  goto <bb 391>;

  <bb 388>:
  _1551 = OBJ_TYPE_REF(_1545;(struct Allocator)_1535->4) (_1535, _1382, old_reserved_1511, _1534, _1518, _1522);
  goto <bb 391>;

  <bb 389>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228782
  # DEBUG D#3 => &D.228782.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228782.D.58579
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  if (old_reserved_1511 < _1534)
    goto <bb 390>;
  else
    goto <bb 19>;

  <bb 390>:
  # DEBUG this => &D.228782.D.58579
  # DEBUG size => _1534
  _1580 = operator new [] (_1534);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228782.D.58579
  # DEBUG old_p => _1382
  # DEBUG old_size => old_reserved_1511
  # DEBUG new_p => NULL
  # DEBUG new_size => _1534
  # DEBUG in_use_back => _1518
  # DEBUG in_use_front => _1522
  # DEBUG this => D#2
  _1576 = _1534 - _1518;
  _1577 = _1580 + _1576;
  memcpy (_1577, prephitmp_2837, _1518);
  memcpy (_1580, _1382, _1522);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228782.D.58579
  # DEBUG p => _1382
  # DEBUG D.228796 => old_reserved_1511
  operator delete [] (_1382);
  # DEBUG p => NULL
  # DEBUG D.228796 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 391>:
  # iftmp.8_1548 = PHI <_1555(386), _1580(390), _1551(388), _1555(387)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1548;
  goto <bb 398>;

  <bb 392>:
  _1537 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1537
  # DEBUG size => _1534
  if (_1537 != 0B)
    goto <bb 393>;
  else
    goto <bb 396>;

  <bb 393>:
  _1581 = _1537->_vptr.Allocator;
  _1582 = MEM[(int (*__vtbl_ptr_type) () *)_1581 + 8B];
  PROF_1586 = [obj_type_ref] OBJ_TYPE_REF(_1582;(struct Allocator)_1537->2);
  if (PROF_1586 == allocate)
    goto <bb 394>;
  else
    goto <bb 395>;

  <bb 394>:
  # DEBUG this => _1537
  # DEBUG size => _1534
  _1590 = operator new [] (_1534);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 397>;

  <bb 395>:
  _1588 = OBJ_TYPE_REF(_1582;(struct Allocator)_1537->2) (_1537, _1534);
  goto <bb 397>;

  <bb 396>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1534
  _1584 = operator new [] (_1534);

  <bb 397>:
  # iftmp.11_1585 = PHI <_1590(394), _1584(396), _1588(395)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1585;

  <bb 398>:
  # prephitmp_2929 = PHI <iftmp.8_1548(391), iftmp.11_1585(397)>
  _1540 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1541 = _1540 - _1518;
  _1542 = prephitmp_2929 + _1541;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1542;
  _1543 = prephitmp_2929 + _1522;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1543;
  _2861 = (int) _1542;

  <bb 399>:
  # prephitmp_2859 = PHI <pretmp_2858(374), _1540(398)>
  # prephitmp_2860 = PHI <prephitmp_2837(374), _1542(398)>
  # prephitmp_2862 = PHI <_1383(374), _2861(398)>
  # prephitmp_2863 = PHI <_1382(374), prephitmp_2929(398)>
  # prephitmp_2876 = PHI <_1381(374), _1543(398)>
  # DEBUG this => D#82
  # DEBUG D#87 => MEM[(const struct vector_downward *)_fbb_3(D)].reserved_
  # DEBUG D#86 => MEM[(const struct vector_downward *)_fbb_3(D)].buf_
  _1391 = (int) prephitmp_2863;
  _1392 = prephitmp_2862 - _1391;
  _1393 = (unsigned int) _1392;
  _1394 = prephitmp_2859 - _1393;
  # DEBUG this => NULL
  if (_1394 <= 2147483646)
    goto <bb 400>;
  else
    goto <bb 38>;

  <bb 400>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1372 = prephitmp_2860 + 4294967292;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1372;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2860 + 4294967292B] = 0;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _1374 = (int) _1372;
  _1377 = _1374 - _1391;
  _1378 = (unsigned int) _1377;
  _1379 = prephitmp_2859 - _1378;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG vtableoffsetloc => NULL
  _366 = _fbb_3(D)->max_voffset_;
  _367 = _366 + 2;
  # DEBUG field_id => 0
  # DEBUG fixed_fields => 2
  # DEBUG field_id => NULL
  # DEBUG __a => &D.227623
  # DEBUG __b => &D.227622
  _506 = MAX_EXPR <_367, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_3(D)->max_voffset_ = _506;
  _372 = (unsigned int) _506;
  # DEBUG this => D#82
  # DEBUG zero_pad_bytes => _372
  # DEBUG this => D#82
  # DEBUG len => _372
  # DEBUG this => D#82
  # DEBUG len => _372
  _44 = prephitmp_2863 <= prephitmp_2876;
  _300 = _1372 >= prephitmp_2876;
  _205 = _44 & _300;
  if (_205 != 0)
    goto <bb 401>;
  else
    goto <bb 10>;

  <bb 401>:
  _1599 = (int) prephitmp_2876;
  _1600 = _1374 - _1599;
  _1601 = (unsigned int) _1600;
  if (_372 > _1601)
    goto <bb 402>;
  else
    goto <bb 426>;

  <bb 402>:
  # DEBUG this => D#82
  # DEBUG len => _372
  # DEBUG len => _372
  # DEBUG old_reserved => D#87
  # DEBUG this => D#82
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#82
  # DEBUG D#6 => D#82
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1620 = _1599 - _1391;
  _1621 = (long unsigned int) _1620;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2859 != 0)
    goto <bb 403>;
  else
    goto <bb 404>;

  <bb 403>:
  iftmp.7_1622 = prephitmp_2859 >> 1;
  goto <bb 405>;

  <bb 404>:
  iftmp.7_1623 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 405>:
  # iftmp.7_1624 = PHI <iftmp.7_1622(403), iftmp.7_1623(404)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228840
  _505 = MAX_EXPR <_372, iftmp.7_1624>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1629 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2430 = _1629 + prephitmp_2859;
  _2465 = _2430 + 4294967295;
  _1631 = _505 + _2465;
  _1632 = -_1629;
  _1633 = _1631 & _1632;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1633;
  if (prephitmp_2863 != 0B)
    goto <bb 406>;
  else
    goto <bb 419>;

  <bb 406>:
  _1634 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1634
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  if (_1634 != 0B)
    goto <bb 407>;
  else
    goto <bb 416>;

  <bb 407>:
  _1643 = _1634->_vptr.Allocator;
  _1644 = MEM[(int (*__vtbl_ptr_type) () *)_1643 + 16B];
  PROF_1648 = [obj_type_ref] OBJ_TYPE_REF(_1644;(struct Allocator)_1634->4);
  if (PROF_1648 == reallocate_downward)
    goto <bb 408>;
  else
    goto <bb 415>;

  <bb 408>:
  # DEBUG this => _1634
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  if (_1633 > prephitmp_2859)
    goto <bb 409>;
  else
    goto <bb 19>;

  <bb 409>:
  _1653 = MEM[(int (*__vtbl_ptr_type) () *)_1643 + 8B];
  PROF_1657 = [obj_type_ref] OBJ_TYPE_REF(_1653;(struct Allocator)_1634->2);
  if (PROF_1657 == allocate)
    goto <bb 410>;
  else
    goto <bb 411>;

  <bb 410>:
  # DEBUG this => _1634
  # DEBUG size => _1633
  _1663 = operator new [] (_1633);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 412>;

  <bb 411>:
  _1659 = OBJ_TYPE_REF(_1653;(struct Allocator)_1634->2) (_1634, _1633);

  <bb 412>:
  # _1654 = PHI <_1659(411), _1663(410)>
  # DEBUG new_p => _1654
  # DEBUG D#2 => _1634
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_p => _1654
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  # DEBUG this => D#2
  _1664 = _1633 - _1379;
  _1665 = _1654 + _1664;
  memcpy (_1665, _1372, _1379);
  memcpy (_1654, prephitmp_2863, _1621);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1655 = _1634->_vptr.Allocator;
  _1656 = MEM[(int (*__vtbl_ptr_type) () *)_1655 + 12B];
  PROF_1661 = [obj_type_ref] OBJ_TYPE_REF(_1656;(struct Allocator)_1634->3);
  if (PROF_1661 == deallocate)
    goto <bb 413>;
  else
    goto <bb 414>;

  <bb 413>:
  # DEBUG this => _1634
  # DEBUG p => D#86
  # DEBUG D.228874 => D#87
  operator delete [] (prephitmp_2863);
  goto <bb 418>;

  <bb 414>:
  OBJ_TYPE_REF(_1656;(struct Allocator)_1634->3) (_1634, prephitmp_2863, prephitmp_2859);
  goto <bb 418>;

  <bb 415>:
  _1650 = OBJ_TYPE_REF(_1644;(struct Allocator)_1634->4) (_1634, prephitmp_2863, prephitmp_2859, _1633, _1379, _1621);
  goto <bb 418>;

  <bb 416>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228888
  # DEBUG D#3 => &D.228888.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228888.D.58579
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  if (_1633 > prephitmp_2859)
    goto <bb 417>;
  else
    goto <bb 19>;

  <bb 417>:
  # DEBUG this => &D.228888.D.58579
  # DEBUG size => _1633
  _1679 = operator new [] (_1633);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228888.D.58579
  # DEBUG old_p => D#86
  # DEBUG old_size => D#87
  # DEBUG new_p => NULL
  # DEBUG new_size => _1633
  # DEBUG in_use_back => _1379
  # DEBUG in_use_front => _1621
  # DEBUG this => D#2
  _1675 = _1633 - _1379;
  _1676 = _1679 + _1675;
  memcpy (_1676, _1372, _1379);
  memcpy (_1679, prephitmp_2863, _1621);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228888.D.58579
  # DEBUG p => D#86
  # DEBUG D.228902 => D#87
  operator delete [] (prephitmp_2863);
  # DEBUG p => NULL
  # DEBUG D.228902 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 418>:
  # iftmp.8_1647 = PHI <_1654(413), _1679(417), _1650(415), _1654(414)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1647;
  goto <bb 425>;

  <bb 419>:
  _1636 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1636
  # DEBUG size => _1633
  if (_1636 != 0B)
    goto <bb 420>;
  else
    goto <bb 423>;

  <bb 420>:
  _1680 = _1636->_vptr.Allocator;
  _1681 = MEM[(int (*__vtbl_ptr_type) () *)_1680 + 8B];
  PROF_1685 = [obj_type_ref] OBJ_TYPE_REF(_1681;(struct Allocator)_1636->2);
  if (PROF_1685 == allocate)
    goto <bb 421>;
  else
    goto <bb 422>;

  <bb 421>:
  # DEBUG this => _1636
  # DEBUG size => _1633
  _1689 = operator new [] (_1633);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 424>;

  <bb 422>:
  _1687 = OBJ_TYPE_REF(_1681;(struct Allocator)_1636->2) (_1636, _1633);
  goto <bb 424>;

  <bb 423>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1633
  _1683 = operator new [] (_1633);

  <bb 424>:
  # iftmp.11_1684 = PHI <_1689(421), _1683(423), _1687(422)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1684;

  <bb 425>:
  # prephitmp_2927 = PHI <iftmp.8_1647(418), iftmp.11_1684(424)>
  _1639 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1640 = _1639 - _1379;
  _1641 = prephitmp_2927 + _1640;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1641;
  _1642 = prephitmp_2927 + _1621;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1642;
  _2884 = (int) _1641;
  _2887 = (int) prephitmp_2927;
  _2889 = _2884 - _2887;
  _2891 = (unsigned int) _2889;
  _2893 = _1639 - _2891;

  <bb 426>:
  # prephitmp_2883 = PHI <_1372(401), _1641(425)>
  # prephitmp_2894 = PHI <_1379(401), _2893(425)>
  # DEBUG this => D#82
  # DEBUG this => NULL
  if (prephitmp_2894 <= 2147483646)
    goto <bb 427>;
  else
    goto <bb 38>;

  <bb 427>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1593 = -_372;
  _1594 = prephitmp_2883 + _1593;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1594;
  # DEBUG this => NULL
  # DEBUG len => NULL
  memset (_1594, 0, _372);
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  table_object_size_373 = _1379 - _20;
  # DEBUG table_object_size => table_object_size_373
  if (table_object_size_373 <= 65535)
    goto <bb 429>;
  else
    goto <bb 428>;

  <bb 428>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1385, &__PRETTY_FUNCTION__, "table_object_size < 0x10000");

  <bb 429>:
  # DEBUG D#35 => &_fbb_3(D)->buf_
  _374 = MEM[(uint8_t * *)_fbb_3(D) + 24B];
  # DEBUG D#7 => D#35
  # DEBUG this => D#7
  if (_374 != 0B)
    goto <bb 431>;
  else
    goto <bb 430>;

  <bb 430>:
  # DEBUG D#8 => 0B
  flatbuffers::vector_downward::_ZNK11flatbuffers15vector_downward4dataEv.isra.3.part.4 ();

  <bb 431>:
  _375 = (short unsigned int) table_object_size_373;
  # DEBUG p => _374 + 2
  # DEBUG t => _375
  # DEBUG t => _375
  # DEBUG t => NULL
  MEM[(short unsigned int *)_374 + 2B] = _375;
  # DEBUG p => NULL
  # DEBUG t => NULL
  # DEBUG D#36 => &_fbb_3(D)->buf_
  # DEBUG D#7 => D#36
  # DEBUG this => D#7
  _376 = _fbb_3(D)->max_voffset_;
  # DEBUG p => _374
  # DEBUG t => _376
  # DEBUG t => _376
  # DEBUG t => NULL
  MEM[(short unsigned int *)_374] = _376;
  # DEBUG p => NULL
  # DEBUG t => NULL
  # DEBUG D#37 => &_fbb_3(D)->buf_
  _377 = MEM[(uint8_t * *)_fbb_3(D) + 28B];
  # DEBUG D#11 => D#37
  # DEBUG this => D#11
  if (_377 != 0B)
    goto <bb 433>;
  else
    goto <bb 432>;

  <bb 432>:
  # DEBUG D#12 => 0B
  # DEBUG D#13 => D#12
  # DEBUG ISRA.51 => D#13
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 956, &__PRETTY_FUNCTION__, "scratch_");

  <bb 433>:
  _378 = _fbb_3(D)->num_field_loc;
  _379 = _378 * 8;
  _380 = -_379;
  it_381 = _377 + _380;
  # DEBUG it => it_381
  # DEBUG it => it_381
  # DEBUG D#40 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  if (_377 > it_381)
    goto <bb 435>;
  else
    goto <bb 434>;

  <bb 434>:
  # DEBUG this => _fbb_3(D)
  # DEBUG D#24 => &_fbb_3(D)->buf_
  # DEBUG D#16 => D#24
  # DEBUG bytes_to_remove => _379
  # DEBUG this => D#16
  MEM[(uint8_t * *)_fbb_3(D) + 28B] = it_381;
  # DEBUG bytes_to_remove => NULL
  _fbb_3(D)->num_field_loc = 0;
  _fbb_3(D)->max_voffset_ = 0;
  # DEBUG this => NULL
  # DEBUG D#41 => &_fbb_3(D)->buf_
  # DEBUG D#7 => D#41
  # DEBUG this => D#7
  # DEBUG vt1 => _374
  # DEBUG p => _374
  # DEBUG D#118 => MEM[(const short unsigned int *)_374]
  # DEBUG t => D#118
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vt1_size => D#118
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  _393 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  _394 = (int) _374;
  _395 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _396 = (int) _395;
  _397 = _394 - _396;
  _398 = (unsigned int) _397;
  _399 = _393 - _398;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG vt_use => _399
  _400 = _fbb_3(D)->dedup_vtables_;
  if (_400 != 0)
    goto <bb 441>;
  else
    goto <bb 451>;

  <bb 435>:
  # DEBUG field_location => it_381
  _1448 = (short unsigned int) _1379;
  _1305 = MEM[(struct FieldLoc *)it_381].off;
  _1210 = (short unsigned int) _1305;
  pos_1130 = _1448 - _1210;
  # DEBUG pos => pos_1130
  # DEBUG D#38 => &_fbb_3(D)->buf_
  # DEBUG D#7 => D#38
  # DEBUG this => D#7
  _974 = MEM[(struct FieldLoc *)it_381].id;
  _833 = (sizetype) _974;
  _707 = _374 + _833;
  # DEBUG p => _707
  _612 = MEM[(const short unsigned int *)_707];
  # DEBUG t => _612
  # DEBUG t => NULL
  # DEBUG p => NULL
  if (_612 == 0)
    goto <bb 439>;
  else
    goto <bb 436>;

  <bb 436>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1395, &__PRETTY_FUNCTION__, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");

  <bb 437>:
  # DEBUG field_location => it_391
  _384 = MEM[(struct FieldLoc *)it_391].off;
  _385 = (short unsigned int) _384;
  pos_386 = _1448 - _385;
  # DEBUG pos => pos_386
  # DEBUG D#38 => &_fbb_3(D)->buf_
  # DEBUG D#7 => D#38
  # DEBUG this => D#7
  _387 = MEM[(struct FieldLoc *)it_391].id;
  _388 = (sizetype) _387;
  _389 = _374 + _388;
  # DEBUG p => _389
  _390 = MEM[(const short unsigned int *)_389];
  # DEBUG t => _390
  # DEBUG t => NULL
  # DEBUG p => NULL
  if (_390 == 0)
    goto <bb 438>;
  else
    goto <bb 436>;

  <bb 438>:
  goto <bb 440>;

  <bb 439>:

  <bb 440>:
  # it_2530 = PHI <it_381(439), it_391(438)>
  # pos_437 = PHI <pos_1130(439), pos_386(438)>
  # _434 = PHI <_707(439), _389(438)>
  # DEBUG it => it_2530
  # DEBUG D#40 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  # DEBUG field_location => it_2530
  # DEBUG pos => pos_437
  # DEBUG D#38 => &_fbb_3(D)->buf_
  # DEBUG this => D#7
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG D#39 => &_fbb_3(D)->buf_
  # DEBUG D#7 => D#39
  # DEBUG this => D#7
  # DEBUG p => _434
  # DEBUG t => pos_437
  # DEBUG t => pos_437
  # DEBUG t => NULL
  MEM[(short unsigned int *)_434] = pos_437;
  # DEBUG p => NULL
  # DEBUG t => NULL
  it_391 = it_2530 + 8;
  # DEBUG it => it_391
  # DEBUG it => it_391
  # DEBUG D#40 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  if (_377 > it_391)
    goto <bb 437>;
  else
    goto <bb 434>;

  <bb 441>:
  # DEBUG D#42 => &_fbb_3(D)->buf_
  # DEBUG D#10 => D#42
  # DEBUG this => D#10
  if (_395 != 0B)
    goto <bb 442>;
  else
    goto <bb 443>;

  <bb 442>:
  # DEBUG it => _395
  # DEBUG D#43 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  if (it_381 != 0B)
    goto <bb 444>;
  else
    goto <bb 432>;

  <bb 443>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 951, &__PRETTY_FUNCTION__, "buf_");

  <bb 444>:
  if (it_381 > _395)
    goto <bb 445>;
  else
    goto <bb 451>;

  <bb 445>:
  _392 = MEM[(const short unsigned int *)_374];

  <bb 446>:
  # it_430 = PHI <_395(445), it_410(450)>
  # DEBUG it => it_430
  # DEBUG D#43 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  # DEBUG vt_offset_ptr => it_430
  # DEBUG D#44 => &_fbb_3(D)->buf_
  vt_use.24_402 = MEM[(long unsigned int *)it_430];
  # DEBUG D#14 => D#44
  # DEBUG D#14 => D#44
  # DEBUG offset => vt_use.24_402
  # DEBUG this => D#14
  # DEBUG this => D#14
  _403 = _393 - vt_use.24_402;
  _404 = _395 + _403;
  # DEBUG offset => NULL
  # DEBUG vt2 => NULL
  # DEBUG p => NULL
  _405 = MEM[(const short unsigned int *)_404];
  # DEBUG t => _405
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vt2_size => _405
  if (_392 != _405)
    goto <bb 449>;
  else
    goto <bb 447>;

  <bb 447>:
  _406 = (unsigned int) _392;
  _407 = memcmp (_404, _374, _406);
  if (_407 != 0)
    goto <bb 449>;
  else
    goto <bb 448>;

  <bb 448>:
  # vt_use.24_2937 = PHI <vt_use.24_402(447)>
  # DEBUG vt_use => vt_use.24_2937
  # DEBUG D#45 => &_fbb_3(D)->buf_
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  _408 = _399 - _1379;
  # DEBUG D#15 => D#45
  # DEBUG bytes_to_remove => _408
  # DEBUG this => D#15
  _409 = _374 + _408;
  MEM[(uint8_t * *)_fbb_3(D) + 24B] = _409;
  _2896 = (int) _409;
  _2898 = _2896 - _396;
  _2900 = (unsigned int) _2898;
  _2902 = _393 - _2900;
  goto <bb 451>;

  <bb 449>:
  it_410 = it_430 + 4;
  # DEBUG it => it_410
  # DEBUG it => it_410
  # DEBUG D#43 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  # DEBUG it => it_410
  # DEBUG D#43 => &_fbb_3(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  if (it_381 > it_410)
    goto <bb 450>;
  else
    goto <bb 451>;

  <bb 450>:
  goto <bb 446>;

  <bb 451>:
  # vt_use_416 = PHI <_399(434), _399(449), vt_use.24_2937(448), _399(444)>
  # prephitmp_2895 = PHI <_374(434), _374(449), _409(448), _374(444)>
  # prephitmp_2897 = PHI <_394(434), _394(449), _2896(448), _394(444)>
  # prephitmp_2903 = PHI <_399(434), _399(449), _2902(448), _399(444)>
  # DEBUG vt_use => vt_use_416
  # DEBUG this => _fbb_3(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_3(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (vt_use_416 == prephitmp_2903)
    goto <bb 452>;
  else
    goto <bb 480>;

  <bb 452>:
  # DEBUG this => D#82
  # DEBUG t => &vt_use
  # DEBUG this => D#82
  # DEBUG len => 4
  _125 = it_381 >= _395;
  _74 = it_381 <= prephitmp_2895;
  _480 = _74 & _125;
  if (_480 != 0)
    goto <bb 453>;
  else
    goto <bb 10>;

  <bb 453>:
  _1694 = (int) it_381;
  _1695 = prephitmp_2897 - _1694;
  _1696 = (unsigned int) _1695;
  if (_1696 <= 3)
    goto <bb 454>;
  else
    goto <bb 478>;

  <bb 454>:
  # DEBUG this => D#82
  # DEBUG len => 4
  # DEBUG len => 4
  # DEBUG old_reserved => _393
  # DEBUG this => D#82
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#82
  # DEBUG D#6 => D#82
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1715 = _1694 - _396;
  _1716 = (long unsigned int) _1715;
  # DEBUG old_scratch_size => NULL
  if (_393 != 0)
    goto <bb 455>;
  else
    goto <bb 456>;

  <bb 455>:
  iftmp.7_1717 = _393 >> 1;
  goto <bb 457>;

  <bb 456>:
  iftmp.7_1718 = MEM[(struct vector_downward *)_fbb_3(D)].initial_size_;

  <bb 457>:
  # iftmp.7_1719 = PHI <iftmp.7_1717(455), iftmp.7_1718(456)>
  # DEBUG __a => &len
  # DEBUG __b => &D.228945
  _489 = MAX_EXPR <iftmp.7_1719, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1724 = MEM[(struct vector_downward *)_fbb_3(D)].buffer_minalign_;
  _2429 = _393 + _1724;
  _2272 = _2429 + 4294967295;
  _1726 = _489 + _2272;
  _1727 = -_1724;
  _1728 = _1726 & _1727;
  MEM[(struct vector_downward *)_fbb_3(D)].reserved_ = _1728;
  if (_395 != 0B)
    goto <bb 458>;
  else
    goto <bb 471>;

  <bb 458>:
  _1729 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1729
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  if (_1729 != 0B)
    goto <bb 459>;
  else
    goto <bb 468>;

  <bb 459>:
  _1738 = _1729->_vptr.Allocator;
  _1739 = MEM[(int (*__vtbl_ptr_type) () *)_1738 + 16B];
  PROF_1743 = [obj_type_ref] OBJ_TYPE_REF(_1739;(struct Allocator)_1729->4);
  if (PROF_1743 == reallocate_downward)
    goto <bb 460>;
  else
    goto <bb 467>;

  <bb 460>:
  # DEBUG this => _1729
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  if (_393 < _1728)
    goto <bb 461>;
  else
    goto <bb 19>;

  <bb 461>:
  _1748 = MEM[(int (*__vtbl_ptr_type) () *)_1738 + 8B];
  PROF_1752 = [obj_type_ref] OBJ_TYPE_REF(_1748;(struct Allocator)_1729->2);
  if (PROF_1752 == allocate)
    goto <bb 462>;
  else
    goto <bb 463>;

  <bb 462>:
  # DEBUG this => _1729
  # DEBUG size => _1728
  _1758 = operator new [] (_1728);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 464>;

  <bb 463>:
  _1754 = OBJ_TYPE_REF(_1748;(struct Allocator)_1729->2) (_1729, _1728);

  <bb 464>:
  # _1749 = PHI <_1754(463), _1758(462)>
  # DEBUG new_p => _1749
  # DEBUG D#2 => _1729
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_p => _1749
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  # DEBUG this => D#2
  _1759 = _1728 - vt_use_416;
  _1760 = _1749 + _1759;
  memcpy (_1760, prephitmp_2895, vt_use_416);
  memcpy (_1749, _395, _1716);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1750 = _1729->_vptr.Allocator;
  _1751 = MEM[(int (*__vtbl_ptr_type) () *)_1750 + 12B];
  PROF_1756 = [obj_type_ref] OBJ_TYPE_REF(_1751;(struct Allocator)_1729->3);
  if (PROF_1756 == deallocate)
    goto <bb 465>;
  else
    goto <bb 466>;

  <bb 465>:
  # DEBUG this => _1729
  # DEBUG p => _395
  # DEBUG D.228979 => _393
  operator delete [] (_395);
  goto <bb 470>;

  <bb 466>:
  OBJ_TYPE_REF(_1751;(struct Allocator)_1729->3) (_1729, _395, _393);
  goto <bb 470>;

  <bb 467>:
  _1745 = OBJ_TYPE_REF(_1739;(struct Allocator)_1729->4) (_1729, _395, _393, _1728, vt_use_416, _1716);
  goto <bb 470>;

  <bb 468>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.228993
  # DEBUG D#3 => &D.228993.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.228993.D.58579
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  if (_393 < _1728)
    goto <bb 469>;
  else
    goto <bb 19>;

  <bb 469>:
  # DEBUG this => &D.228993.D.58579
  # DEBUG size => _1728
  _1774 = operator new [] (_1728);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.228993.D.58579
  # DEBUG old_p => _395
  # DEBUG old_size => _393
  # DEBUG new_p => NULL
  # DEBUG new_size => _1728
  # DEBUG in_use_back => vt_use_416
  # DEBUG in_use_front => _1716
  # DEBUG this => D#2
  _1770 = _1728 - vt_use_416;
  _1771 = _1774 + _1770;
  memcpy (_1771, prephitmp_2895, vt_use_416);
  memcpy (_1774, _395, _1716);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.228993.D.58579
  # DEBUG p => _395
  # DEBUG D.229007 => _393
  operator delete [] (_395);
  # DEBUG p => NULL
  # DEBUG D.229007 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 470>:
  # iftmp.8_1742 = PHI <_1749(465), _1774(469), _1745(467), _1749(466)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.8_1742;
  goto <bb 477>;

  <bb 471>:
  _1731 = MEM[(struct vector_downward *)_fbb_3(D)].allocator_;
  # DEBUG allocator => _1731
  # DEBUG size => _1728
  if (_1731 != 0B)
    goto <bb 472>;
  else
    goto <bb 475>;

  <bb 472>:
  _1775 = _1731->_vptr.Allocator;
  _1776 = MEM[(int (*__vtbl_ptr_type) () *)_1775 + 8B];
  PROF_1780 = [obj_type_ref] OBJ_TYPE_REF(_1776;(struct Allocator)_1731->2);
  if (PROF_1780 == allocate)
    goto <bb 473>;
  else
    goto <bb 474>;

  <bb 473>:
  # DEBUG this => _1731
  # DEBUG size => _1728
  _1784 = operator new [] (_1728);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 476>;

  <bb 474>:
  _1782 = OBJ_TYPE_REF(_1776;(struct Allocator)_1731->2) (_1731, _1728);
  goto <bb 476>;

  <bb 475>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1728
  _1778 = operator new [] (_1728);

  <bb 476>:
  # iftmp.11_1779 = PHI <_1784(473), _1778(475), _1782(474)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_3(D)].buf_ = iftmp.11_1779;

  <bb 477>:
  # prephitmp_2924 = PHI <iftmp.8_1742(470), iftmp.11_1779(476)>
  _1734 = MEM[(struct vector_downward *)_fbb_3(D)].reserved_;
  _1735 = _1734 - vt_use_416;
  _1736 = prephitmp_2924 + _1735;
  MEM[(struct vector_downward *)_fbb_3(D)].cur_ = _1736;
  _1737 = prephitmp_2924 + _1716;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _1737;
  _2911 = (int) _1736;
  _2914 = (int) prephitmp_2924;
  _2916 = _2911 - _2914;
  _2918 = (unsigned int) _2916;
  _2920 = _1734 - _2918;

  <bb 478>:
  # prephitmp_2909 = PHI <_393(453), _1734(477)>
  # prephitmp_2913 = PHI <_395(453), prephitmp_2924(477)>
  # prephitmp_2921 = PHI <prephitmp_2903(453), _2920(477)>
  # prephitmp_2922 = PHI <it_381(453), _1737(477)>
  # DEBUG this => D#82
  # DEBUG this => NULL
  if (prephitmp_2921 <= 2147483646)
    goto <bb 479>;
  else
    goto <bb 38>;

  <bb 479>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long unsigned int *)prephitmp_2922] = prephitmp_2903;
  _418 = prephitmp_2922 + 4;
  MEM[(struct vector_downward *)_fbb_3(D)].scratch_ = _418;

  <bb 480>:
  # prephitmp_2907 = PHI <_393(451), prephitmp_2909(479)>
  # prephitmp_2908 = PHI <_395(451), prephitmp_2913(479)>
  # DEBUG D#46 => &_fbb_3(D)->buf_
  # DEBUG D#14 => D#46
  # DEBUG D#14 => D#46
  # DEBUG offset => NULL
  # DEBUG this => D#14
  # DEBUG this => D#14
  _421 = prephitmp_2907 - _1379;
  _422 = prephitmp_2908 + _421;
  # DEBUG offset => NULL
  vt_use.27_423 = (long int) vt_use_416;
  vtableoffsetloc.28_424 = (long int) _1379;
  _425 = vt_use.27_423 - vtableoffsetloc.28_424;
  # DEBUG p => NULL
  # DEBUG t => _425
  # DEBUG t => _425
  # DEBUG t => NULL
  MEM[(long int *)_422] = _425;
  # DEBUG p => NULL
  # DEBUG t => NULL
  _fbb_3(D)->nested = 0;
  # DEBUG D#33 => {CLOBBER}
  # DEBUG vt_use => D#33
  # DEBUG this => NULL
  # DEBUG start => NULL
  # DEBUG it => NULL
  # DEBUG pos => NULL
  # DEBUG it => NULL
  # DEBUG vt_use => NULL
  # DEBUG table_object_size => NULL
  # DEBUG end => NULL
  # DEBUG this => &o
  # DEBUG _o => NULL
  # DEBUG D#47 => {CLOBBER}
  # DEBUG o$o => D#47
  # DEBUG o$o => NULL
  # DEBUG this => NULL
  # DEBUG _o => NULL
  # DEBUG D#48 => {CLOBBER}
  # DEBUG o$o => D#48
  MEM[(struct Offset *)&D.225699] = _1379;
  # DEBUG this => NULL
  return D.225699;

  <bb 481>:
  # DEBUG D#53 => 1
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 8
  # DEBUG e => version_4(D)
  # DEBUG D#54 => D#53
  # DEBUG def => D#54
  # DEBUG this => _fbb_3(D)
  # DEBUG element => version_4(D)
  # DEBUG D#29 => _fbb_3(D)
  # DEBUG this => D#29
  # DEBUG t => version_4(D)
  # DEBUG t => NULL
  # DEBUG litle_endian_element => version_4(D)
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _73 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_73 <= 3)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 482>:
  # deprecated_builtin_code_1610 = PHI <0(106), 127(104), deprecated_builtin_code_8(105)>
  # DEBUG D#64 => 0
  # DEBUG this => _fbb_3(D)
  # DEBUG e => deprecated_builtin_code_1610
  # DEBUG field => 4
  # DEBUG D#65 => D#64
  # DEBUG def => D#65
  # DEBUG this => _fbb_3(D)
  # DEBUG element => deprecated_builtin_code_1610
  # DEBUG D#61 => _fbb_3(D)
  # DEBUG this => D#61
  # DEBUG t => deprecated_builtin_code_1610
  # DEBUG t => NULL
  # DEBUG litle_endian_element => deprecated_builtin_code_1610
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 1
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 1
  # DEBUG this => D#18
  _479 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_479 == 0)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 483>:
  # DEBUG D#57 => 0
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 6
  # DEBUG e => _779
  # DEBUG D#58 => D#57
  # DEBUG def => D#58
  # DEBUG this => _fbb_3(D)
  # DEBUG element => _779
  # DEBUG D#50 => _fbb_3(D)
  # DEBUG this => D#50
  # DEBUG t => _779
  # DEBUG t => NULL
  # DEBUG litle_endian_element => _779
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _921 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_921 <= 3)
    goto <bb 204>;
  else
    goto <bb 205>;

  <bb 484>:
  pretmp_2715 = MEM[(const struct vector_downward *)_fbb_3(D)].reserved_;
  pretmp_2718 = MEM[(const struct vector_downward *)_fbb_3(D)].cur_;
  _2721 = (int) pretmp_2718;
  pretmp_2724 = MEM[(const struct vector_downward *)_fbb_3(D)].buf_;
  _2727 = (int) pretmp_2724;
  _2730 = _2721 - _2727;
  _2733 = (unsigned int) _2730;
  _2736 = pretmp_2715 - _2733;

  <bb 485>:
  # prephitmp_2716 = PHI <prephitmp_2964(486), pretmp_2715(484)>
  # prephitmp_2719 = PHI <prephitmp_2966(486), pretmp_2718(484)>
  # prephitmp_2722 = PHI <_772(486), _2721(484)>
  # prephitmp_2725 = PHI <prephitmp_2968(486), pretmp_2724(484)>
  # prephitmp_2728 = PHI <prephitmp_2970(486), _2727(484)>
  # prephitmp_2737 = PHI <_777(486), _2736(484)>
  # DEBUG D#53 => 0
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 10
  # DEBUG e => _7
  # DEBUG D#54 => D#53
  # DEBUG def => D#54
  # DEBUG this => _fbb_3(D)
  # DEBUG element => _7
  # DEBUG D#29 => _fbb_3(D)
  # DEBUG this => D#29
  # DEBUG t => _7
  # DEBUG t => NULL
  # DEBUG litle_endian_element => _7
  # DEBUG this => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_3(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _1077 = MEM[(size_t *)_fbb_3(D) + 40B];
  if (_1077 <= 3)
    goto <bb 243>;
  else
    goto <bb 244>;

  <bb 486>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG off$o => NULL
  # DEBUG D#56 => &builder_
  # DEBUG builtin_code => builtin_code_6(D)
  # DEBUG this => D#56
  # DEBUG this => _fbb_3(D)
  # DEBUG field => 10
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (_7 == 0)
    goto <bb 242>;
  else
    goto <bb 485>;

}



;; Function flatbuffers::Offset<tflite::OperatorCode> tflite::CreateOperatorCodeDirect(flatbuffers::FlatBufferBuilder&, tflite::BuiltinOperator, const char*, int32_t) (_ZN6tflite24CreateOperatorCodeDirectERN11flatbuffers17FlatBufferBuilderENS_15BuiltinOperatorEPKcl, funcdef_no=6274, decl_uid=173780, cgraph_uid=3491, symbol_order=3526)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1406:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:1391:31: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: not vectorized: latch block not empty.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:982:26: note: bad loop form.
../src/tensorflow_lite/src/tensorflow/lite/schema/schema_utils.cpp:96:35: note: vectorized 0 loops in function.
flatbuffers::Offset<tflite::OperatorCode> tflite::CreateOperatorCodeDirect(flatbuffers::FlatBufferBuilder&, tflite::BuiltinOperator, const char*, int32_t) (struct FlatBufferBuilder & _fbb, BuiltinOperator builtin_code, const char * custom_code, int32_t version)
{
  long unsigned int off;
  long unsigned int SR.193;
  long unsigned int custom_code$o;
  long unsigned int custom_code$o;
  long unsigned int custom_code__$o;
  uint8_t * D.231138;
  uint8_t * D.231135;
  uint8_t * D.231124;
  uint8_t * D.231111;
  struct DefaultAllocator D.231100;
  uint8_t * D.231099;
  uint8_t * D.231076;
  uint8_t * D.231073;
  uint8_t * D.231065;
  const unsigned int D.231052;
  unsigned int old_reserved;
  size_t len;
  size_t D.231041;
  uint8_t * D.231032;
  uint8_t * D.231029;
  uint8_t * D.231018;
  uint8_t * D.231005;
  struct DefaultAllocator D.230994;
  uint8_t * D.230993;
  uint8_t * D.230970;
  uint8_t * D.230967;
  uint8_t * D.230959;
  const unsigned int D.230946;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.230935;
  uint8_t * D.230932;
  uint8_t * D.230921;
  uint8_t * D.230908;
  struct DefaultAllocator D.230897;
  uint8_t * D.230896;
  uint8_t * D.230873;
  uint8_t * D.230870;
  uint8_t * D.230862;
  const unsigned int D.230849;
  unsigned int old_reserved;
  size_t len;
  size_t D.230838;
  size_t i;
  size_t D.230821;
  uoffset_t D.230817;
  uint8_t * D.230806;
  uint8_t * D.230803;
  uint8_t * D.230792;
  uint8_t * D.230779;
  struct DefaultAllocator D.230768;
  uint8_t * D.230767;
  uint8_t * D.230744;
  uint8_t * D.230741;
  uint8_t * D.230733;
  const unsigned int D.230720;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.230709;
  uint8_t * D.230706;
  uint8_t * D.230695;
  uint8_t * D.230682;
  struct DefaultAllocator D.230671;
  uint8_t * D.230670;
  uint8_t * D.230647;
  uint8_t * D.230644;
  uint8_t * D.230636;
  const unsigned int D.230623;
  unsigned int old_reserved;
  size_t len;
  size_t D.230612;
  size_t i;
  size_t D.230595;
  uoffset_t D.230591;
  voffset_t field;
  size_t i;
  uoffset_t D.230551;
  voffset_t field;
  uint8_t * D.230524;
  uint8_t * D.230521;
  uint8_t * D.230510;
  uint8_t * D.230497;
  struct DefaultAllocator D.230486;
  uint8_t * D.230485;
  uint8_t * D.230462;
  uint8_t * D.230459;
  uint8_t * D.230451;
  const unsigned int D.230438;
  unsigned int old_reserved;
  size_t len;
  size_t D.230427;
  size_t i;
  uoffset_t D.230410;
  static const char __PRETTY_FUNCTION__[87] = "flatbuffers::uoffset_t flatbuffers::FlatBufferBuilder::ReferTo(flatbuffers::uoffset_t)";
  uint8_t * D.230405;
  uint8_t * D.230402;
  uint8_t * D.230391;
  uint8_t * D.230378;
  struct DefaultAllocator D.230367;
  uint8_t * D.230366;
  uint8_t * D.230343;
  uint8_t * D.230340;
  uint8_t * D.230332;
  const unsigned int D.230319;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.230308;
  uint8_t * D.230305;
  uint8_t * D.230294;
  uint8_t * D.230281;
  struct DefaultAllocator D.230270;
  uint8_t * D.230269;
  uint8_t * D.230246;
  uint8_t * D.230243;
  uint8_t * D.230235;
  const unsigned int D.230222;
  unsigned int old_reserved;
  size_t len;
  size_t D.230211;
  size_t i;
  size_t D.230194;
  uoffset_t D.230190;
  voffset_t field;
  uint8_t * D.230163;
  uint8_t * D.230160;
  uint8_t * D.230149;
  uint8_t * D.230136;
  struct DefaultAllocator D.230125;
  uint8_t * D.230124;
  uint8_t * D.230101;
  uint8_t * D.230098;
  uint8_t * D.230090;
  const unsigned int D.230077;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.230066;
  uint8_t * D.230063;
  uint8_t * D.230052;
  uint8_t * D.230039;
  struct DefaultAllocator D.230028;
  uint8_t * D.230027;
  uint8_t * D.230004;
  uint8_t * D.230001;
  uint8_t * D.229993;
  const unsigned int D.229980;
  unsigned int old_reserved;
  size_t len;
  size_t D.229969;
  size_t i;
  size_t D.229952;
  uoffset_t D.229948;
  voffset_t field;
  long unsigned int off$o;
  struct Offset off;
  const short unsigned int D.229884;
  const short unsigned int D.229883;
  long unsigned int table_object_size;
  long unsigned int vt_use;
  unsigned char * it;
  short unsigned int pos;
  unsigned char * it;
  uoffset_t D.229882;
  static const char __PRETTY_FUNCTION__[88] = "flatbuffers::uoffset_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::uoffset_t)";
  struct Offset D.229833;
  struct Offset custom_code;
  struct Offset custom_code;
  uint8_t * D.229814;
  uint8_t * D.229811;
  uint8_t * D.229800;
  uint8_t * D.229787;
  struct DefaultAllocator D.229776;
  uint8_t * D.229775;
  uint8_t * D.229752;
  uint8_t * D.229749;
  uint8_t * D.229741;
  const unsigned int D.229728;
  unsigned int old_reserved;
  size_t len;
  uint8_t * D.229717;
  uint8_t * D.229714;
  uint8_t * D.229703;
  uint8_t * D.229690;
  struct DefaultAllocator D.229679;
  uint8_t * D.229678;
  uint8_t * D.229655;
  uint8_t * D.229652;
  uint8_t * D.229644;
  const unsigned int D.229631;
  unsigned int old_reserved;
  size_t len;
  size_t D.229620;
  size_t i;
  size_t D.229603;
  uoffset_t D.229599;
  uint8_t * D.229581;
  uint8_t * D.229578;
  uint8_t * D.229567;
  uint8_t * D.229554;
  struct DefaultAllocator D.229543;
  uint8_t * D.229542;
  uint8_t * D.229519;
  uint8_t * D.229516;
  uint8_t * D.229508;
  const unsigned int D.229495;
  unsigned int old_reserved;
  size_t len;
  size_t D.229484;
  uint8_t * D.229480;
  uint8_t * D.229477;
  uint8_t * D.229466;
  uint8_t * D.229453;
  struct DefaultAllocator D.229442;
  uint8_t * D.229441;
  uint8_t * D.229418;
  uint8_t * D.229415;
  uint8_t * D.229407;
  const unsigned int D.229394;
  unsigned int old_reserved;
  size_t len;
  size_t D.229383;
  size_t i;
  size_t i;
  struct Offset D.229354;
  long unsigned int SR.148;
  struct Offset D.226985;
  int8_t deprecated_builtin_code;
  struct Offset custom_code__;
  struct Offset D.226140;
  int _7;
  unsigned int _11;
  unsigned int _12;
  long unsigned int _14;
  unsigned int _15;
  unsigned int _16;
  long unsigned int _18;
  bool _19;
  uint8_t * _33;
  bool _36;
  unsigned int _38;
  struct vector_downward * _39;
  unsigned int _40;
  uint8_t * _41;
  int _42;
  uint8_t * _43;
  int _44;
  int _45;
  unsigned int _46;
  long unsigned int _47;
  long unsigned int _48;
  unsigned int _49;
  unsigned int _51;
  sizetype _56;
  uint8_t * _57;
  uint8_t * _60;
  uint8_t * _63;
  int _66;
  int _67;
  unsigned int _68;
  int _87;
  long unsigned int _88;
  unsigned int iftmp.7_89;
  unsigned int iftmp.7_90;
  unsigned int iftmp.7_91;
  unsigned int _93;
  unsigned int _96;
  unsigned int _98;
  unsigned int _99;
  unsigned int _100;
  struct Allocator * _101;
  struct Allocator * _103;
  unsigned int _106;
  sizetype _107;
  uint8_t * _108;
  uint8_t * _109;
  int (*__vtbl_ptr_type) () * _110;
  int (*__vtbl_ptr_type) () _111;
  uint8_t * iftmp.8_114;
  void * PROF_115;
  uint8_t * _117;
  int (*__vtbl_ptr_type) () _120;
  uint8_t * _121;
  int (*__vtbl_ptr_type) () * _122;
  int (*__vtbl_ptr_type) () _123;
  void * PROF_124;
  uint8_t * _126;
  void * PROF_128;
  uint8_t * _130;
  sizetype _131;
  uint8_t * _132;
  sizetype _142;
  uint8_t * _143;
  uint8_t * _146;
  int (*__vtbl_ptr_type) () * _147;
  int (*__vtbl_ptr_type) () _148;
  uint8_t * _150;
  uint8_t * iftmp.11_151;
  void * PROF_152;
  uint8_t * _154;
  uint8_t * _156;
  uint8_t * _158;
  uint8_t * _159;
  int _160;
  int _161;
  unsigned int _162;
  unsigned int _163;
  int _168;
  int _169;
  unsigned int _170;
  long unsigned int _171;
  int _176;
  int _177;
  unsigned int _178;
  long unsigned int _179;
  int _182;
  long unsigned int _183;
  unsigned int iftmp.7_184;
  unsigned int iftmp.7_185;
  unsigned int iftmp.7_186;
  unsigned int _188;
  unsigned int _191;
  unsigned int _193;
  unsigned int _194;
  unsigned int _195;
  struct Allocator * _196;
  struct Allocator * _198;
  unsigned int _201;
  sizetype _202;
  uint8_t * _203;
  uint8_t * _204;
  int (*__vtbl_ptr_type) () * _205;
  int (*__vtbl_ptr_type) () _206;
  uint8_t * iftmp.8_209;
  void * PROF_210;
  uint8_t * _212;
  int (*__vtbl_ptr_type) () _215;
  uint8_t * _216;
  int (*__vtbl_ptr_type) () * _217;
  int (*__vtbl_ptr_type) () _218;
  void * PROF_219;
  uint8_t * _221;
  void * PROF_223;
  uint8_t * _225;
  sizetype _226;
  uint8_t * _227;
  sizetype _237;
  uint8_t * _238;
  uint8_t * _241;
  int (*__vtbl_ptr_type) () * _242;
  int (*__vtbl_ptr_type) () _243;
  uint8_t * _245;
  uint8_t * iftmp.11_246;
  void * PROF_247;
  uint8_t * _249;
  uint8_t * _251;
  unsigned int _252;
  uint8_t * _253;
  sizetype _254;
  uint8_t * _255;
  uint8_t * _260;
  int _262;
  int _265;
  unsigned int _266;
  long unsigned int _267;
  uint8_t * _269;
  uint8_t * _270;
  int _271;
  int _272;
  int _273;
  unsigned int _274;
  int _279;
  int _280;
  unsigned int _281;
  long unsigned int _282;
  unsigned int _283;
  unsigned int _285;
  uint8_t * _286;
  int _287;
  uint8_t * _288;
  int _289;
  int _290;
  unsigned int _291;
  long unsigned int _292;
  unsigned int _293;
  unsigned int _295;
  sizetype _298;
  uint8_t * _299;
  uint8_t * _302;
  uint8_t * _305;
  int _308;
  int _309;
  unsigned int _310;
  int _329;
  long unsigned int _330;
  unsigned int iftmp.7_331;
  unsigned int iftmp.7_332;
  unsigned int iftmp.7_333;
  unsigned int _335;
  short unsigned int _336;
  unsigned int _338;
  unsigned int _340;
  unsigned int _341;
  unsigned int _342;
  struct Allocator * _343;
  struct Allocator * _345;
  unsigned int _348;
  sizetype _349;
  uint8_t * _350;
  uint8_t * _351;
  int (*__vtbl_ptr_type) () * _352;
  int (*__vtbl_ptr_type) () _353;
  uint8_t * iftmp.8_356;
  void * PROF_357;
  uint8_t * _359;
  int (*__vtbl_ptr_type) () _362;
  uint8_t * _363;
  int (*__vtbl_ptr_type) () * _364;
  int (*__vtbl_ptr_type) () _365;
  void * PROF_366;
  uint8_t * _368;
  void * PROF_370;
  uint8_t * _372;
  sizetype _373;
  uint8_t * _374;
  sizetype _384;
  uint8_t * _385;
  uint8_t * _388;
  int (*__vtbl_ptr_type) () * _389;
  int (*__vtbl_ptr_type) () _390;
  uint8_t * _392;
  uint8_t * iftmp.11_393;
  void * PROF_394;
  uint8_t * _396;
  uint8_t * _398;
  int _403;
  int _404;
  unsigned int _405;
  long unsigned int _406;
  int _409;
  long unsigned int _410;
  unsigned int iftmp.7_411;
  unsigned int iftmp.7_412;
  unsigned int iftmp.7_413;
  unsigned int _415;
  uint8_t * _416;
  unsigned int _418;
  unsigned int _420;
  unsigned int _421;
  unsigned int _422;
  struct Allocator * _423;
  struct Allocator * _425;
  unsigned int _428;
  sizetype _429;
  uint8_t * _430;
  uint8_t * _431;
  int (*__vtbl_ptr_type) () * _432;
  int (*__vtbl_ptr_type) () _433;
  uint8_t * iftmp.8_436;
  void * PROF_437;
  uint8_t * _439;
  int (*__vtbl_ptr_type) () _442;
  uint8_t * _443;
  int (*__vtbl_ptr_type) () * _444;
  int (*__vtbl_ptr_type) () _445;
  void * PROF_446;
  uint8_t * _448;
  void * PROF_450;
  uint8_t * _452;
  sizetype _453;
  uint8_t * _454;
  sizetype _464;
  uint8_t * _465;
  uint8_t * _468;
  int (*__vtbl_ptr_type) () * _469;
  int (*__vtbl_ptr_type) () _470;
  uint8_t * _472;
  uint8_t * iftmp.11_473;
  void * PROF_474;
  uint8_t * _476;
  uint8_t * _478;
  long unsigned int _479;
  bool _480;
  unsigned int _481;
  uint8_t * _482;
  int _483;
  uint8_t * _484;
  int _485;
  int _486;
  unsigned int _487;
  long unsigned int _488;
  bool _490;
  short unsigned int _492;
  short unsigned int _493;
  bool _495;
  unsigned int _498;
  uint8_t * _500;
  short unsigned int _501;
  short unsigned int _502;
  uint8_t * _503;
  long unsigned int _504;
  long unsigned int _505;
  sizetype _506;
  long unsigned int _510;
  short unsigned int _511;
  short unsigned int _513;
  sizetype _514;
  uint8_t * _515;
  short unsigned int _516;
  short unsigned int _518;
  unsigned int _519;
  int _520;
  uint8_t * _521;
  int _522;
  int _523;
  unsigned int _524;
  long unsigned int _525;
  bool _526;
  long unsigned int vt_use.24_528;
  sizetype _529;
  uint8_t * _530;
  short unsigned int _531;
  unsigned int _532;
  int _533;
  long unsigned int _534;
  uint8_t * _535;
  uint8_t * _543;
  uint8_t * _544;
  sizetype _547;
  uint8_t * _548;
  long int vt_use.27_549;
  long int vtableoffsetloc.28_550;
  long int _551;
  bool _554;
  bool _558;
  bool _561;
  bool _565;
  uint8_t * _572;
  uint8_t * _573;
  long unsigned int _574;
  long unsigned int _575;
  short unsigned int _577;
  int _578;
  unsigned int _580;
  short unsigned int _581;
  uint8_t * _586;
  int _588;
  int _591;
  unsigned int _592;
  long unsigned int _593;
  uint8_t * _595;
  uint8_t * _596;
  int _597;
  int _598;
  int _599;
  unsigned int _600;
  int _605;
  int _606;
  unsigned int _607;
  long unsigned int _608;
  unsigned int _609;
  struct vector_downward * _610;
  unsigned int _619;
  unsigned int _621;
  sizetype _624;
  uint8_t * _625;
  uint8_t * _628;
  uint8_t * _631;
  int _634;
  int _635;
  unsigned int _636;
  int _655;
  long unsigned int _656;
  unsigned int iftmp.7_657;
  unsigned int iftmp.7_658;
  unsigned int iftmp.7_659;
  unsigned int _661;
  sizetype _662;
  unsigned int _664;
  unsigned int _666;
  unsigned int _667;
  unsigned int _668;
  struct Allocator * _669;
  struct Allocator * _671;
  unsigned int _674;
  sizetype _675;
  uint8_t * _676;
  uint8_t * _677;
  int (*__vtbl_ptr_type) () * _678;
  int (*__vtbl_ptr_type) () _679;
  uint8_t * iftmp.8_682;
  void * PROF_683;
  uint8_t * _685;
  int (*__vtbl_ptr_type) () _688;
  uint8_t * _689;
  int (*__vtbl_ptr_type) () * _690;
  int (*__vtbl_ptr_type) () _691;
  void * PROF_692;
  uint8_t * _694;
  void * PROF_696;
  uint8_t * _698;
  sizetype _699;
  uint8_t * _700;
  sizetype _710;
  uint8_t * _711;
  uint8_t * _714;
  int (*__vtbl_ptr_type) () * _715;
  int (*__vtbl_ptr_type) () _716;
  uint8_t * _718;
  uint8_t * iftmp.11_719;
  void * PROF_720;
  uint8_t * _722;
  uint8_t * _724;
  int _729;
  int _730;
  unsigned int _731;
  long unsigned int _732;
  int _735;
  long unsigned int _736;
  unsigned int iftmp.7_737;
  unsigned int iftmp.7_738;
  unsigned int iftmp.7_739;
  short unsigned int _741;
  short unsigned int _742;
  unsigned int _744;
  unsigned int _746;
  unsigned int _747;
  unsigned int _748;
  struct Allocator * _749;
  struct Allocator * _751;
  unsigned int _754;
  sizetype _755;
  uint8_t * _756;
  uint8_t * _757;
  int (*__vtbl_ptr_type) () * _758;
  int (*__vtbl_ptr_type) () _759;
  uint8_t * iftmp.8_762;
  void * PROF_763;
  uint8_t * _765;
  int (*__vtbl_ptr_type) () _768;
  uint8_t * _769;
  int (*__vtbl_ptr_type) () * _770;
  int (*__vtbl_ptr_type) () _771;
  void * PROF_772;
  uint8_t * _774;
  void * PROF_776;
  uint8_t * _778;
  sizetype _779;
  uint8_t * _780;
  sizetype _790;
  uint8_t * _791;
  uint8_t * _794;
  int (*__vtbl_ptr_type) () * _795;
  int (*__vtbl_ptr_type) () _796;
  uint8_t * _798;
  uint8_t * iftmp.11_799;
  void * PROF_800;
  uint8_t * _802;
  uint8_t * _804;
  uint8_t * _808;
  uint8_t * _809;
  long unsigned int _810;
  long unsigned int _811;
  short unsigned int _813;
  int _814;
  bool _816;
  short unsigned int _817;
  uint8_t * _822;
  int _824;
  int _827;
  unsigned int _828;
  long unsigned int _829;
  uint8_t * _831;
  uint8_t * _832;
  int _833;
  int _834;
  int _835;
  unsigned int _836;
  int _841;
  int _842;
  unsigned int _843;
  long unsigned int _844;
  unsigned int _845;
  unsigned int _855;
  unsigned int _857;
  sizetype _860;
  uint8_t * _861;
  uint8_t * _864;
  int _870;
  int _871;
  unsigned int _872;
  int _891;
  long unsigned int _892;
  unsigned int iftmp.7_893;
  unsigned int iftmp.7_894;
  unsigned int iftmp.7_895;
  bool _897;
  unsigned int _900;
  unsigned int _902;
  unsigned int _903;
  unsigned int _904;
  struct Allocator * _905;
  struct Allocator * _907;
  unsigned int _910;
  sizetype _911;
  uint8_t * _912;
  uint8_t * _913;
  int (*__vtbl_ptr_type) () * _914;
  int (*__vtbl_ptr_type) () _915;
  uint8_t * iftmp.8_918;
  void * PROF_919;
  uint8_t * _921;
  int (*__vtbl_ptr_type) () _924;
  uint8_t * _925;
  int (*__vtbl_ptr_type) () * _926;
  int (*__vtbl_ptr_type) () _927;
  void * PROF_928;
  uint8_t * _930;
  void * PROF_932;
  uint8_t * _934;
  sizetype _935;
  uint8_t * _936;
  sizetype _946;
  uint8_t * _947;
  uint8_t * _950;
  int (*__vtbl_ptr_type) () * _951;
  int (*__vtbl_ptr_type) () _952;
  uint8_t * _954;
  uint8_t * iftmp.11_955;
  void * PROF_956;
  uint8_t * _958;
  uint8_t * _960;
  int _965;
  int _966;
  unsigned int _967;
  long unsigned int _968;
  int _971;
  long unsigned int _972;
  unsigned int iftmp.7_973;
  unsigned int iftmp.7_974;
  unsigned int iftmp.7_975;
  bool _977;
  short unsigned int _978;
  unsigned int _980;
  unsigned int _982;
  unsigned int _983;
  unsigned int _984;
  struct Allocator * _985;
  struct Allocator * _987;
  unsigned int _990;
  sizetype _991;
  uint8_t * _992;
  uint8_t * _993;
  int (*__vtbl_ptr_type) () * _994;
  int (*__vtbl_ptr_type) () _995;
  uint8_t * iftmp.8_998;
  void * PROF_999;
  uint8_t * _1001;
  int (*__vtbl_ptr_type) () _1004;
  uint8_t * _1005;
  int (*__vtbl_ptr_type) () * _1006;
  int (*__vtbl_ptr_type) () _1007;
  void * PROF_1008;
  uint8_t * _1010;
  void * PROF_1012;
  uint8_t * _1014;
  sizetype _1015;
  uint8_t * _1016;
  sizetype _1026;
  uint8_t * _1027;
  uint8_t * _1030;
  int (*__vtbl_ptr_type) () * _1031;
  int (*__vtbl_ptr_type) () _1032;
  uint8_t * _1034;
  uint8_t * iftmp.11_1035;
  void * PROF_1036;
  uint8_t * _1038;
  uint8_t * _1040;
  int _1043;
  int _1046;
  unsigned int _1047;
  long unsigned int _1048;
  long unsigned int _1050;
  unsigned int _1051;
  struct vector_downward * _1052;
  unsigned int _1053;
  uint8_t * _1054;
  int _1055;
  uint8_t * _1056;
  int _1057;
  int _1058;
  unsigned int _1059;
  long unsigned int _1060;
  unsigned int _1061;
  unsigned int _1063;
  sizetype _1066;
  uint8_t * _1067;
  uint8_t * _1070;
  uint8_t * _1073;
  int _1076;
  int _1077;
  unsigned int _1078;
  int _1097;
  long unsigned int _1098;
  unsigned int iftmp.7_1099;
  unsigned int iftmp.7_1100;
  unsigned int iftmp.7_1101;
  bool _1103;
  long unsigned int _1104;
  unsigned int _1106;
  unsigned int _1108;
  unsigned int _1109;
  unsigned int _1110;
  struct Allocator * _1111;
  struct Allocator * _1113;
  unsigned int _1116;
  sizetype _1117;
  uint8_t * _1118;
  uint8_t * _1119;
  int (*__vtbl_ptr_type) () * _1120;
  int (*__vtbl_ptr_type) () _1121;
  uint8_t * iftmp.8_1124;
  void * PROF_1125;
  uint8_t * _1127;
  int (*__vtbl_ptr_type) () _1130;
  uint8_t * _1131;
  int (*__vtbl_ptr_type) () * _1132;
  int (*__vtbl_ptr_type) () _1133;
  void * PROF_1134;
  uint8_t * _1136;
  void * PROF_1138;
  uint8_t * _1140;
  sizetype _1141;
  uint8_t * _1142;
  sizetype _1152;
  uint8_t * _1153;
  uint8_t * _1156;
  int (*__vtbl_ptr_type) () * _1157;
  int (*__vtbl_ptr_type) () _1158;
  uint8_t * _1160;
  uint8_t * iftmp.11_1161;
  void * PROF_1162;
  uint8_t * _1164;
  uint8_t * _1166;
  uint8_t * _1170;
  uint8_t * _1171;
  long unsigned int _1172;
  long unsigned int _1173;
  short unsigned int _1175;
  int _1176;
  bool _1178;
  short unsigned int _1179;
  unsigned int _1181;
  uint8_t * _1182;
  sizetype _1183;
  uint8_t * _1184;
  unsigned int _1185;
  int _1186;
  uint8_t * _1187;
  int _1188;
  int _1189;
  unsigned int _1190;
  long unsigned int _1191;
  unsigned int _1192;
  unsigned int _1202;
  unsigned int _1204;
  unsigned int _1205;
  uint8_t * _1206;
  sizetype _1207;
  uint8_t * _1208;
  uint8_t * _1211;
  uint8_t * _1216;
  uint8_t * _1217;
  long unsigned int _1218;
  long unsigned int _1219;
  short unsigned int _1221;
  int _1222;
  bool _1224;
  short unsigned int _1225;
  uint8_t * _1230;
  unsigned int _1231;
  uint8_t * _1232;
  int _1233;
  uint8_t * _1234;
  int _1235;
  int _1236;
  unsigned int _1237;
  long unsigned int _1238;
  int _1248;
  int _1250;
  int _1251;
  unsigned int _1252;
  long unsigned int _1253;
  unsigned int _1254;
  unsigned int _1264;
  uint8_t * _1276;
  int _1279;
  unsigned int _1281;
  bool _1310;
  bool _1311;
  unsigned int iftmp.7_1382;
  unsigned int iftmp.7_1383;
  unsigned int iftmp.7_1384;
  bool _1386;
  short unsigned int _1387;
  unsigned int _1389;
  unsigned int _1391;
  unsigned int _1392;
  unsigned int _1393;
  struct Allocator * _1394;
  struct Allocator * _1396;
  unsigned int _1399;
  sizetype _1400;
  uint8_t * _1401;
  uint8_t * _1402;
  int (*__vtbl_ptr_type) () * _1403;
  int (*__vtbl_ptr_type) () _1404;
  uint8_t * iftmp.8_1407;
  void * PROF_1408;
  uint8_t * _1410;
  int (*__vtbl_ptr_type) () _1413;
  uint8_t * _1414;
  int (*__vtbl_ptr_type) () * _1415;
  int (*__vtbl_ptr_type) () _1416;
  void * PROF_1417;
  uint8_t * _1419;
  void * PROF_1421;
  uint8_t * _1423;
  sizetype _1424;
  uint8_t * _1425;
  sizetype _1435;
  uint8_t * _1436;
  uint8_t * _1439;
  int (*__vtbl_ptr_type) () * _1440;
  int (*__vtbl_ptr_type) () _1441;
  uint8_t * _1443;
  uint8_t * iftmp.11_1444;
  void * PROF_1445;
  uint8_t * _1447;
  uint8_t * _1449;
  bool _1452;
  uint8_t * _1454;
  bool _1455;
  int _1456;
  bool _1457;
  int _1459;
  unsigned int _1460;
  long unsigned int _1461;
  uint8_t * _1463;
  uint8_t * _1464;
  int _1465;
  int _1466;
  int _1467;
  unsigned int _1468;
  int _1473;
  int _1474;
  unsigned int _1475;
  long unsigned int _1476;
  unsigned int _1477;
  struct vector_downward * _1478;
  unsigned int _1479;
  uint8_t * _1480;
  int _1481;
  uint8_t * _1482;
  int _1483;
  int _1484;
  unsigned int _1485;
  long unsigned int _1486;
  unsigned int _1487;
  unsigned int _1489;
  sizetype _1492;
  uint8_t * _1493;
  uint8_t * _1496;
  uint8_t * _1499;
  int _1502;
  int _1503;
  unsigned int _1504;
  int _1523;
  long unsigned int _1524;
  unsigned int iftmp.7_1525;
  unsigned int iftmp.7_1526;
  unsigned int iftmp.7_1527;
  bool _1529;
  unsigned int _1532;
  unsigned int _1534;
  unsigned int _1535;
  unsigned int _1536;
  struct Allocator * _1537;
  struct Allocator * _1539;
  unsigned int _1542;
  sizetype _1543;
  uint8_t * _1544;
  uint8_t * _1545;
  int (*__vtbl_ptr_type) () * _1546;
  int (*__vtbl_ptr_type) () _1547;
  uint8_t * iftmp.8_1550;
  void * PROF_1551;
  uint8_t * _1553;
  int (*__vtbl_ptr_type) () _1556;
  uint8_t * _1557;
  int (*__vtbl_ptr_type) () * _1558;
  int (*__vtbl_ptr_type) () _1559;
  void * PROF_1560;
  uint8_t * _1562;
  void * PROF_1564;
  uint8_t * _1566;
  sizetype _1567;
  uint8_t * _1568;
  sizetype _1578;
  uint8_t * _1579;
  uint8_t * _1582;
  int (*__vtbl_ptr_type) () * _1583;
  int (*__vtbl_ptr_type) () _1584;
  uint8_t * _1586;
  uint8_t * iftmp.11_1587;
  void * PROF_1588;
  uint8_t * _1590;
  uint8_t * _1592;
  int _1597;
  int _1598;
  unsigned int _1599;
  long unsigned int _1600;
  unsigned int _1602;
  int _1603;
  long unsigned int _1604;
  unsigned int iftmp.7_1605;
  unsigned int iftmp.7_1606;
  unsigned int iftmp.7_1607;
  unsigned int _1608;
  bool _1609;
  unsigned int _1612;
  unsigned int _1614;
  unsigned int _1615;
  unsigned int _1616;
  struct Allocator * _1617;
  struct Allocator * _1619;
  unsigned int _1622;
  sizetype _1623;
  uint8_t * _1624;
  uint8_t * _1625;
  int (*__vtbl_ptr_type) () * _1626;
  int (*__vtbl_ptr_type) () _1627;
  uint8_t * iftmp.8_1630;
  void * PROF_1631;
  uint8_t * _1633;
  bool _1635;
  int (*__vtbl_ptr_type) () _1636;
  uint8_t * _1637;
  int (*__vtbl_ptr_type) () * _1638;
  int (*__vtbl_ptr_type) () _1639;
  void * PROF_1640;
  uint8_t * _1642;
  void * PROF_1644;
  uint8_t * _1646;
  sizetype _1647;
  uint8_t * _1648;
  bool _1653;
  bool _1654;
  bool _1656;
  bool _1657;
  sizetype _1658;
  uint8_t * _1659;
  uint8_t * _1662;
  int (*__vtbl_ptr_type) () * _1663;
  int (*__vtbl_ptr_type) () _1664;
  uint8_t * _1666;
  uint8_t * iftmp.11_1667;
  void * PROF_1668;
  uint8_t * _1670;
  uint8_t * _1672;
  sizetype _1675;
  uint8_t * _1676;
  int _1681;
  int _1682;
  unsigned int _1683;
  int _1702;
  long unsigned int _1703;
  unsigned int iftmp.7_1704;
  unsigned int iftmp.7_1705;
  unsigned int iftmp.7_1706;
  bool _1708;
  unsigned int _1709;
  unsigned int _1711;
  unsigned int _1713;
  unsigned int _1714;
  unsigned int _1715;
  struct Allocator * _1716;
  struct Allocator * _1718;
  unsigned int _1721;
  sizetype _1722;
  uint8_t * _1723;
  uint8_t * _1724;
  int (*__vtbl_ptr_type) () * _1725;
  int (*__vtbl_ptr_type) () _1726;
  uint8_t * iftmp.8_1729;
  void * PROF_1730;
  uint8_t * _1732;
  int (*__vtbl_ptr_type) () _1735;
  uint8_t * _1736;
  int (*__vtbl_ptr_type) () * _1737;
  int (*__vtbl_ptr_type) () _1738;
  void * PROF_1739;
  uint8_t * _1741;
  void * PROF_1743;
  uint8_t * _1745;
  sizetype _1746;
  uint8_t * _1747;
  sizetype _1757;
  uint8_t * _1758;
  uint8_t * _1761;
  int (*__vtbl_ptr_type) () * _1762;
  int (*__vtbl_ptr_type) () _1763;
  uint8_t * _1765;
  uint8_t * iftmp.11_1766;
  void * PROF_1767;
  uint8_t * _1769;
  uint8_t * _1771;
  bool _1774;
  bool _1775;
  unsigned int _1834;
  unsigned int _1889;
  unsigned int _1938;
  unsigned int _2001;
  unsigned int _2002;
  uint8_t * _2014;
  unsigned int _2036;
  unsigned int _2037;
  unsigned int _2085;
  uint8_t * _2090;
  unsigned int _2210;
  unsigned int _2211;
  unsigned int _2257;
  unsigned int _2258;
  unsigned int _2260;
  unsigned int _2305;
  unsigned int _2352;
  unsigned int _2353;
  unsigned int _2354;
  unsigned int _2389;
  unsigned int _2401;
  unsigned int _2402;
  unsigned int _2403;
  unsigned int _2437;
  unsigned int _2438;
  unsigned int _2531;
  signed char _2583;
  signed char prephitmp_2584;
  struct vector_downward * pretmp_2585;
  struct vector_downward * prephitmp_2586;
  unsigned int pretmp_2587;
  unsigned int pretmp_2588;
  unsigned int prephitmp_2589;
  uint8_t * pretmp_2590;
  uint8_t * pretmp_2591;
  uint8_t * prephitmp_2592;
  int _2593;
  int _2594;
  int prephitmp_2595;
  uint8_t * pretmp_2596;
  uint8_t * pretmp_2597;
  uint8_t * prephitmp_2598;
  int _2599;
  int _2600;
  int prephitmp_2601;
  int _2602;
  int _2603;
  unsigned int _2605;
  unsigned int _2606;
  long unsigned int _2608;
  long unsigned int _2609;
  long unsigned int prephitmp_2610;
  uint8_t * pretmp_2611;
  uint8_t * prephitmp_2612;
  uint8_t * prephitmp_2614;
  int _2615;
  int _2618;
  int _2620;
  unsigned int _2622;
  long unsigned int _2624;
  long unsigned int prephitmp_2625;
  uint8_t * pretmp_2627;
  uint8_t * prephitmp_2628;
  uint8_t * pretmp_2630;
  uint8_t * prephitmp_2631;
  unsigned int pretmp_2652;
  unsigned int prephitmp_2653;
  uint8_t * prephitmp_2654;
  int _2655;
  int prephitmp_2656;
  uint8_t * prephitmp_2657;
  uint8_t * prephitmp_2663;
  uint8_t * prephitmp_2665;
  uint8_t * prephitmp_2667;
  int _2668;
  int _2671;
  int _2673;
  unsigned int _2675;
  long unsigned int _2677;
  long unsigned int prephitmp_2678;
  uint8_t * pretmp_2680;
  uint8_t * prephitmp_2681;
  uint8_t * pretmp_2683;
  uint8_t * prephitmp_2684;
  unsigned int pretmp_2705;
  unsigned int prephitmp_2706;
  uint8_t * prephitmp_2707;
  int _2708;
  int prephitmp_2709;
  uint8_t * prephitmp_2710;
  uint8_t * prephitmp_2716;
  uint8_t * prephitmp_2718;
  struct vector_downward * pretmp_2731;
  struct vector_downward * prephitmp_2732;
  unsigned int pretmp_2734;
  unsigned int prephitmp_2735;
  uint8_t * pretmp_2737;
  uint8_t * prephitmp_2738;
  int _2740;
  int prephitmp_2741;
  uint8_t * pretmp_2743;
  uint8_t * prephitmp_2744;
  int _2746;
  int _2749;
  unsigned int _2752;
  unsigned int prephitmp_2753;
  long unsigned int _2755;
  long unsigned int prephitmp_2756;
  uint8_t * prephitmp_2758;
  uint8_t * prephitmp_2771;
  int _2772;
  int _2775;
  int _2777;
  unsigned int _2779;
  long unsigned int _2781;
  long unsigned int prephitmp_2782;
  uint8_t * pretmp_2784;
  uint8_t * prephitmp_2785;
  uint8_t * pretmp_2787;
  uint8_t * prephitmp_2788;
  unsigned int pretmp_2809;
  unsigned int prephitmp_2810;
  uint8_t * prephitmp_2811;
  int _2812;
  int prephitmp_2813;
  uint8_t * prephitmp_2814;
  uint8_t * prephitmp_2827;
  uint8_t * prephitmp_2834;
  int _2835;
  int _2838;
  int _2840;
  unsigned int _2842;
  long unsigned int _2844;
  long unsigned int prephitmp_2845;
  int _2847;
  int _2849;
  unsigned int _2851;
  long unsigned int _2853;
  long unsigned int prephitmp_2854;
  unsigned int pretmp_2855;
  unsigned int prephitmp_2856;
  uint8_t * pretmp_2857;
  uint8_t * prephitmp_2858;
  uint8_t * prephitmp_2862;
  uint8_t * prephitmp_2864;
  uint8_t * prephitmp_2866;
  unsigned int prephitmp_2876;
  uint8_t * prephitmp_2877;
  int _2878;
  uint8_t * prephitmp_2880;
  int _2881;
  int prephitmp_2882;
  int _2883;
  unsigned int _2885;
  long unsigned int _2887;
  long unsigned int prephitmp_2888;
  uint8_t * pretmp_2893;
  uint8_t * prephitmp_2894;
  unsigned int pretmp_2896;
  unsigned int prephitmp_2897;
  uint8_t * pretmp_2898;
  uint8_t * prephitmp_2899;
  uint8_t * pretmp_2900;
  uint8_t * prephitmp_2901;
  int _2902;
  int prephitmp_2903;
  uint8_t * pretmp_2910;
  uint8_t * prephitmp_2911;
  uint8_t * prephitmp_2914;
  uint8_t * prephitmp_2916;
  int _2917;
  int _2920;
  int _2922;
  unsigned int _2924;
  long unsigned int _2926;
  long unsigned int prephitmp_2927;
  uint8_t * pretmp_2929;
  uint8_t * prephitmp_2930;
  uint8_t * pretmp_2932;
  uint8_t * prephitmp_2933;
  unsigned int pretmp_2954;
  unsigned int prephitmp_2955;
  uint8_t * prephitmp_2956;
  int _2957;
  int prephitmp_2958;
  uint8_t * prephitmp_2959;
  uint8_t * prephitmp_2961;
  int _2962;
  int _2965;
  int _2967;
  unsigned int _2969;
  long unsigned int _2971;
  long unsigned int prephitmp_2972;
  uint8_t * pretmp_2974;
  uint8_t * prephitmp_2975;
  uint8_t * pretmp_2977;
  uint8_t * prephitmp_2978;
  long unsigned int vt_use.24_2983;
  unsigned int pretmp_2999;
  unsigned int prephitmp_3000;
  uint8_t * prephitmp_3001;
  int _3002;
  int prephitmp_3003;
  uint8_t * prephitmp_3004;
  uint8_t * prephitmp_3010;
  uint8_t * prephitmp_3012;
  uint8_t * prephitmp_3014;
  uint8_t * prephitmp_3016;

  <bb 2>:
  if (custom_code_3(D) != 0B)
    goto <bb 3>;
  else
    goto <bb 140>;

  <bb 3>:
  # DEBUG this => _fbb_5(D)
  # DEBUG str => custom_code_3(D)
  _12 = strlen (custom_code_3(D));
  # DEBUG this => _fbb_5(D)
  # DEBUG str => custom_code_3(D)
  # DEBUG len => _12
  _18 = MEM[(long unsigned int *)_fbb_5(D) + 32B];
  # DEBUG D#19 => _fbb_5(D)
  _19 = MEM[(bool *)_fbb_5(D) + 38B];
  # DEBUG D#19 => _fbb_5(D)
  # DEBUG this => D#19
  # DEBUG this => D#19
  if (_19 != 0)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1352, &__PRETTY_FUNCTION__, "!nested");

  <bb 5>:
  if (_18 == 0)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  # DEBUG D#21 => 0
  flatbuffers::FlatBufferBuilder::_ZN11flatbuffers17FlatBufferBuilder9NotNestedEv.isra.12.part.13 ();

  <bb 7>:
  # DEBUG D#167 => _12 + 1
  # DEBUG this => _fbb_5(D)
  # DEBUG len => D#167
  # DEBUG D#50 => _fbb_5(D)
  # DEBUG this => D#50
  # DEBUG this => _fbb_5(D)
  # DEBUG len => D#167
  # DEBUG alignment => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _38 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_38 <= 3)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 9>:
  # DEBUG elem_size => NULL
  # DEBUG D#191 => &_fbb_5(D)->buf_
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _40 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _41 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _42 = (int) _41;
  _43 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _44 = (int) _43;
  _45 = _42 - _44;
  _46 = (unsigned int) _45;
  _47 = _40 - _46;
  _2001 = _47 + 1;
  # DEBUG this => NULL
  # DEBUG this => NULL
  _48 = _12 + _2001;
  # DEBUG buf_size => _48
  # DEBUG scalar_size => 4
  _49 = -_48;
  _51 = _49 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#191
  # DEBUG zero_pad_bytes => _51
  # DEBUG this => D#191
  # DEBUG len => _51
  # DEBUG this => D#191
  # DEBUG len => _51
  _63 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _36 = _43 <= _63;
  _1774 = _41 >= _63;
  _1775 = _36 & _1774;
  if (_1775 != 0)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 918, &__PRETTY_FUNCTION__, "cur_ >= scratch_ && scratch_ >= buf_");

  <bb 11>:
  _66 = (int) _63;
  _67 = _42 - _66;
  _68 = (unsigned int) _67;
  if (_51 > _68)
    goto <bb 12>;
  else
    goto <bb 37>;

  <bb 12>:
  # DEBUG this => D#191
  # DEBUG len => _51
  # DEBUG len => _51
  # DEBUG old_reserved => _40
  # DEBUG this => D#191
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#191
  # DEBUG D#6 => D#191
  # DEBUG this => D#6
  # DEBUG this => D#6
  _87 = _66 - _44;
  _88 = (long unsigned int) _87;
  # DEBUG old_scratch_size => NULL
  if (_40 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  iftmp.7_89 = _40 >> 1;
  goto <bb 15>;

  <bb 14>:
  iftmp.7_90 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 15>:
  # iftmp.7_91 = PHI <iftmp.7_89(13), iftmp.7_90(14)>
  # DEBUG __a => &len
  # DEBUG __b => &D.229394
  _163 = MAX_EXPR <_51, iftmp.7_91>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _96 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2036 = _40 + _96;
  _2002 = _2036 + 4294967295;
  _98 = _163 + _2002;
  _99 = -_96;
  _100 = _98 & _99;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _100;
  if (_43 != 0B)
    goto <bb 16>;
  else
    goto <bb 30>;

  <bb 16>:
  _101 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _101
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  if (_101 != 0B)
    goto <bb 17>;
  else
    goto <bb 27>;

  <bb 17>:
  _110 = _101->_vptr.Allocator;
  _111 = MEM[(int (*__vtbl_ptr_type) () *)_110 + 16B];
  PROF_115 = [obj_type_ref] OBJ_TYPE_REF(_111;(struct Allocator)_101->4);
  if (PROF_115 == reallocate_downward)
    goto <bb 18>;
  else
    goto <bb 26>;

  <bb 18>:
  # DEBUG this => _101
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  if (_40 < _100)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 617, &__PRETTY_FUNCTION__, "new_size > old_size");

  <bb 20>:
  _120 = MEM[(int (*__vtbl_ptr_type) () *)_110 + 8B];
  PROF_124 = [obj_type_ref] OBJ_TYPE_REF(_120;(struct Allocator)_101->2);
  if (PROF_124 == allocate)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  # DEBUG this => _101
  # DEBUG size => _100
  _130 = operator new [] (_100);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 23>;

  <bb 22>:
  _126 = OBJ_TYPE_REF(_120;(struct Allocator)_101->2) (_101, _100);

  <bb 23>:
  # _121 = PHI <_126(22), _130(21)>
  # DEBUG new_p => _121
  # DEBUG D#2 => _101
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_p => _121
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  # DEBUG this => D#2
  _131 = _100 - _47;
  _132 = _121 + _131;
  memcpy (_132, _41, _47);
  memcpy (_121, _43, _88);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _122 = _101->_vptr.Allocator;
  _123 = MEM[(int (*__vtbl_ptr_type) () *)_122 + 12B];
  PROF_128 = [obj_type_ref] OBJ_TYPE_REF(_123;(struct Allocator)_101->3);
  if (PROF_128 == deallocate)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  # DEBUG this => _101
  # DEBUG p => _43
  # DEBUG D.229428 => _40
  operator delete [] (_43);
  goto <bb 29>;

  <bb 25>:
  OBJ_TYPE_REF(_123;(struct Allocator)_101->3) (_101, _43, _40);
  goto <bb 29>;

  <bb 26>:
  _117 = OBJ_TYPE_REF(_111;(struct Allocator)_101->4) (_101, _43, _40, _100, _47, _88);
  goto <bb 29>;

  <bb 27>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.229442
  # DEBUG D#3 => &D.229442.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.229442.D.58579
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  if (_40 < _100)
    goto <bb 28>;
  else
    goto <bb 19>;

  <bb 28>:
  # DEBUG this => &D.229442.D.58579
  # DEBUG size => _100
  _146 = operator new [] (_100);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.229442.D.58579
  # DEBUG old_p => _43
  # DEBUG old_size => _40
  # DEBUG new_p => NULL
  # DEBUG new_size => _100
  # DEBUG in_use_back => _47
  # DEBUG in_use_front => _88
  # DEBUG this => D#2
  _142 = _100 - _47;
  _143 = _146 + _142;
  memcpy (_143, _41, _47);
  memcpy (_146, _43, _88);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.229442.D.58579
  # DEBUG p => _43
  # DEBUG D.229456 => _40
  operator delete [] (_43);
  # DEBUG p => NULL
  # DEBUG D.229456 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 29>:
  # iftmp.8_114 = PHI <_121(24), _146(28), _117(26), _121(25)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_114;
  goto <bb 36>;

  <bb 30>:
  _103 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _103
  # DEBUG size => _100
  if (_103 != 0B)
    goto <bb 31>;
  else
    goto <bb 34>;

  <bb 31>:
  _147 = _103->_vptr.Allocator;
  _148 = MEM[(int (*__vtbl_ptr_type) () *)_147 + 8B];
  PROF_152 = [obj_type_ref] OBJ_TYPE_REF(_148;(struct Allocator)_103->2);
  if (PROF_152 == allocate)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  # DEBUG this => _103
  # DEBUG size => _100
  _156 = operator new [] (_100);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 35>;

  <bb 33>:
  _154 = OBJ_TYPE_REF(_148;(struct Allocator)_103->2) (_103, _100);
  goto <bb 35>;

  <bb 34>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _100
  _150 = operator new [] (_100);

  <bb 35>:
  # iftmp.11_151 = PHI <_156(32), _150(34), _154(33)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_151;

  <bb 36>:
  # prephitmp_3016 = PHI <iftmp.8_114(29), iftmp.11_151(35)>
  _106 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _107 = _106 - _47;
  _108 = prephitmp_3016 + _107;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _108;
  _109 = prephitmp_3016 + _88;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _109;
  _2917 = (int) _108;
  _2920 = (int) prephitmp_3016;
  _2922 = _2917 - _2920;
  _2924 = (unsigned int) _2922;
  _2926 = _106 - _2924;

  <bb 37>:
  # prephitmp_2916 = PHI <_41(11), _108(36)>
  # prephitmp_2927 = PHI <_47(11), _2926(36)>
  # DEBUG this => D#191
  # DEBUG this => NULL
  if (prephitmp_2927 <= 2147483646)
    goto <bb 39>;
  else
    goto <bb 38>;

  <bb 38>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 922, &__PRETTY_FUNCTION__, "size() < FLATBUFFERS_MAX_BUFFER_SIZE");

  <bb 39>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _56 = -_51;
  _57 = prephitmp_2916 + _56;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _57;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_51 == 0)
    goto <bb 44>;
  else
    goto <bb 40>;

  <bb 40>:

  <bb 41>:
  # i_1174 = PHI <0(40), i_61(42)>
  # prephitmp_2930 = PHI <_57(40), pretmp_2929(42)>
  # DEBUG i => i_1174
  _60 = prephitmp_2930 + i_1174;
  *_60 = 0;
  i_61 = i_1174 + 1;
  # DEBUG i => i_61
  # DEBUG i => i_61
  if (_51 <= i_61)
    goto <bb 43>;
  else
    goto <bb 42>;

  <bb 42>:
  pretmp_2929 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 41>;

  <bb 43>:
  pretmp_2932 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;

  <bb 44>:
  # prephitmp_2933 = PHI <pretmp_2932(43), _57(39)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG alignment => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG this => D#191
  # DEBUG zero_pad_bytes => 1
  # DEBUG this => D#191
  # DEBUG len => 1
  # DEBUG this => D#191
  # DEBUG len => 1
  _158 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  if (_158 <= prephitmp_2933)
    goto <bb 46>;
  else
    goto <bb 45>;

  <bb 45>:
  goto <bb 10>;

  <bb 46>:
  _159 = MEM[(struct vector_downward *)_fbb_5(D)].buf_;
  if (_158 >= _159)
    goto <bb 47>;
  else
    goto <bb 45>;

  <bb 47>:
  _160 = (int) prephitmp_2933;
  _161 = (int) _158;
  if (_160 == _161)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  pretmp_2954 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  goto <bb 73>;

  <bb 49>:
  # DEBUG this => D#191
  # DEBUG len => 1
  # DEBUG len => 1
  old_reserved_172 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  # DEBUG old_reserved => old_reserved_172
  # DEBUG this => D#191
  _176 = (int) _159;
  _177 = _161 - _176;
  _178 = (unsigned int) _177;
  _179 = old_reserved_172 - _178;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#191
  # DEBUG D#6 => D#191
  # DEBUG this => D#6
  # DEBUG this => D#6
  _182 = _160 - _176;
  _183 = (long unsigned int) _182;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_172 != 0)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  iftmp.7_184 = old_reserved_172 >> 1;
  goto <bb 52>;

  <bb 51>:
  iftmp.7_185 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 52>:
  # iftmp.7_186 = PHI <iftmp.7_184(50), iftmp.7_185(51)>
  # DEBUG __a => &len
  # DEBUG __b => &D.229495
  _162 = MAX_EXPR <iftmp.7_186, 1>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _191 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2402 = old_reserved_172 + _191;
  _2037 = _2402 + 4294967295;
  _193 = _162 + _2037;
  _194 = -_191;
  _195 = _193 & _194;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _195;
  if (_159 != 0B)
    goto <bb 53>;
  else
    goto <bb 66>;

  <bb 53>:
  _196 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _196
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  if (_196 != 0B)
    goto <bb 54>;
  else
    goto <bb 63>;

  <bb 54>:
  _205 = _196->_vptr.Allocator;
  _206 = MEM[(int (*__vtbl_ptr_type) () *)_205 + 16B];
  PROF_210 = [obj_type_ref] OBJ_TYPE_REF(_206;(struct Allocator)_196->4);
  if (PROF_210 == reallocate_downward)
    goto <bb 55>;
  else
    goto <bb 62>;

  <bb 55>:
  # DEBUG this => _196
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  if (old_reserved_172 < _195)
    goto <bb 56>;
  else
    goto <bb 19>;

  <bb 56>:
  _215 = MEM[(int (*__vtbl_ptr_type) () *)_205 + 8B];
  PROF_219 = [obj_type_ref] OBJ_TYPE_REF(_215;(struct Allocator)_196->2);
  if (PROF_219 == allocate)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  # DEBUG this => _196
  # DEBUG size => _195
  _225 = operator new [] (_195);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 59>;

  <bb 58>:
  _221 = OBJ_TYPE_REF(_215;(struct Allocator)_196->2) (_196, _195);

  <bb 59>:
  # _216 = PHI <_221(58), _225(57)>
  # DEBUG new_p => _216
  # DEBUG D#2 => _196
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_p => _216
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  # DEBUG this => D#2
  _226 = _195 - _179;
  _227 = _216 + _226;
  memcpy (_227, prephitmp_2933, _179);
  memcpy (_216, _159, _183);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _217 = _196->_vptr.Allocator;
  _218 = MEM[(int (*__vtbl_ptr_type) () *)_217 + 12B];
  PROF_223 = [obj_type_ref] OBJ_TYPE_REF(_218;(struct Allocator)_196->3);
  if (PROF_223 == deallocate)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  # DEBUG this => _196
  # DEBUG p => _159
  # DEBUG D.229529 => old_reserved_172
  operator delete [] (_159);
  goto <bb 65>;

  <bb 61>:
  OBJ_TYPE_REF(_218;(struct Allocator)_196->3) (_196, _159, old_reserved_172);
  goto <bb 65>;

  <bb 62>:
  _212 = OBJ_TYPE_REF(_206;(struct Allocator)_196->4) (_196, _159, old_reserved_172, _195, _179, _183);
  goto <bb 65>;

  <bb 63>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.229543
  # DEBUG D#3 => &D.229543.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.229543.D.58579
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  if (old_reserved_172 < _195)
    goto <bb 64>;
  else
    goto <bb 19>;

  <bb 64>:
  # DEBUG this => &D.229543.D.58579
  # DEBUG size => _195
  _241 = operator new [] (_195);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.229543.D.58579
  # DEBUG old_p => _159
  # DEBUG old_size => old_reserved_172
  # DEBUG new_p => NULL
  # DEBUG new_size => _195
  # DEBUG in_use_back => _179
  # DEBUG in_use_front => _183
  # DEBUG this => D#2
  _237 = _195 - _179;
  _238 = _241 + _237;
  memcpy (_238, prephitmp_2933, _179);
  memcpy (_241, _159, _183);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.229543.D.58579
  # DEBUG p => _159
  # DEBUG D.229557 => old_reserved_172
  operator delete [] (_159);
  # DEBUG p => NULL
  # DEBUG D.229557 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 65>:
  # iftmp.8_209 = PHI <_216(60), _241(64), _212(62), _216(61)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_209;
  goto <bb 72>;

  <bb 66>:
  _198 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _198
  # DEBUG size => _195
  if (_198 != 0B)
    goto <bb 67>;
  else
    goto <bb 70>;

  <bb 67>:
  _242 = _198->_vptr.Allocator;
  _243 = MEM[(int (*__vtbl_ptr_type) () *)_242 + 8B];
  PROF_247 = [obj_type_ref] OBJ_TYPE_REF(_243;(struct Allocator)_198->2);
  if (PROF_247 == allocate)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  # DEBUG this => _198
  # DEBUG size => _195
  _251 = operator new [] (_195);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 71>;

  <bb 69>:
  _249 = OBJ_TYPE_REF(_243;(struct Allocator)_198->2) (_198, _195);
  goto <bb 71>;

  <bb 70>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _195
  _245 = operator new [] (_195);

  <bb 71>:
  # iftmp.11_246 = PHI <_251(68), _245(70), _249(69)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_246;

  <bb 72>:
  # prephitmp_3014 = PHI <iftmp.8_209(65), iftmp.11_246(71)>
  _201 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _202 = _201 - _179;
  _203 = prephitmp_3014 + _202;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _203;
  _204 = prephitmp_3014 + _183;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _204;
  _2957 = (int) _203;

  <bb 73>:
  # prephitmp_2955 = PHI <pretmp_2954(48), _201(72)>
  # prephitmp_2956 = PHI <prephitmp_2933(48), _203(72)>
  # prephitmp_2958 = PHI <_160(48), _2957(72)>
  # prephitmp_2959 = PHI <_159(48), prephitmp_3014(72)>
  # DEBUG this => D#191
  _168 = (int) prephitmp_2959;
  _169 = prephitmp_2958 - _168;
  _170 = (unsigned int) _169;
  _171 = prephitmp_2955 - _170;
  # DEBUG this => NULL
  if (_171 <= 2147483646)
    goto <bb 74>;
  else
    goto <bb 38>;

  <bb 74>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _33 = prephitmp_2956 + 4294967295;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _33;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG i => 0
  MEM[(uint8_t *)prephitmp_2956 + 4294967295B] = 0;
  # DEBUG i => 1
  # DEBUG i => 1
  # DEBUG this => NULL
  # DEBUG i => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG bytes => custom_code_3(D)
  # DEBUG size => _12
  # DEBUG this => D#191
  # DEBUG bytes => custom_code_3(D)
  # DEBUG num => _12
  if (_12 != 0)
    goto <bb 75>;
  else
    goto <bb 76>;

  <bb 75>:
  # DEBUG this => D#191
  # DEBUG bytes => custom_code_3(D)
  # DEBUG num => _12
  # DEBUG this => D#191
  # DEBUG len => _12
  _39 = &_fbb_5(D)->buf_;
  _252 = flatbuffers::vector_downward::ensure_space (_39, _12);
  # DEBUG space => _252
  _253 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  _254 = -_252;
  _255 = _253 + _254;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _255;
  # DEBUG this => NULL
  # DEBUG len => NULL
  memcpy (_255, custom_code_3(D), _12);

  <bb 76>:
  # DEBUG this => NULL
  # DEBUG bytes => NULL
  # DEBUG num => NULL
  # DEBUG this => NULL
  # DEBUG bytes => NULL
  # DEBUG size => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG element => _12
  # DEBUG D#50 => _fbb_5(D)
  # DEBUG this => D#50
  # DEBUG t => _12
  # DEBUG t => NULL
  # DEBUG litle_endian_element => _12
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _283 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_283 <= 3)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 78>:
  # DEBUG elem_size => NULL
  # DEBUG this => D#191
  _285 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _286 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _287 = (int) _286;
  _288 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _289 = (int) _288;
  _290 = _287 - _289;
  _291 = (unsigned int) _290;
  _292 = _285 - _291;
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _293 = -_292;
  _295 = _293 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#191
  # DEBUG zero_pad_bytes => _295
  # DEBUG this => D#191
  # DEBUG len => _295
  # DEBUG this => D#191
  # DEBUG len => _295
  _305 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _1457 = _288 <= _305;
  _1455 = _286 >= _305;
  _1452 = _1455 & _1457;
  if (_1452 != 0)
    goto <bb 79>;
  else
    goto <bb 10>;

  <bb 79>:
  _308 = (int) _305;
  _309 = _287 - _308;
  _310 = (unsigned int) _309;
  if (_295 > _310)
    goto <bb 80>;
  else
    goto <bb 104>;

  <bb 80>:
  # DEBUG this => D#191
  # DEBUG len => _295
  # DEBUG len => _295
  # DEBUG old_reserved => _285
  # DEBUG this => D#191
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#191
  # DEBUG D#6 => D#191
  # DEBUG this => D#6
  # DEBUG this => D#6
  _329 = _308 - _289;
  _330 = (long unsigned int) _329;
  # DEBUG old_scratch_size => NULL
  if (_285 != 0)
    goto <bb 81>;
  else
    goto <bb 82>;

  <bb 81>:
  iftmp.7_331 = _285 >> 1;
  goto <bb 83>;

  <bb 82>:
  iftmp.7_332 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 83>:
  # iftmp.7_333 = PHI <iftmp.7_331(81), iftmp.7_332(82)>
  # DEBUG __a => &len
  # DEBUG __b => &D.229631
  _1938 = MAX_EXPR <_295, iftmp.7_333>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _338 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _1834 = _285 + _338;
  _2401 = _1834 + 4294967295;
  _340 = _1938 + _2401;
  _341 = -_338;
  _342 = _340 & _341;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _342;
  if (_288 != 0B)
    goto <bb 84>;
  else
    goto <bb 97>;

  <bb 84>:
  _343 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _343
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  if (_343 != 0B)
    goto <bb 85>;
  else
    goto <bb 94>;

  <bb 85>:
  _352 = _343->_vptr.Allocator;
  _353 = MEM[(int (*__vtbl_ptr_type) () *)_352 + 16B];
  PROF_357 = [obj_type_ref] OBJ_TYPE_REF(_353;(struct Allocator)_343->4);
  if (PROF_357 == reallocate_downward)
    goto <bb 86>;
  else
    goto <bb 93>;

  <bb 86>:
  # DEBUG this => _343
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  if (_285 < _342)
    goto <bb 87>;
  else
    goto <bb 19>;

  <bb 87>:
  _362 = MEM[(int (*__vtbl_ptr_type) () *)_352 + 8B];
  PROF_366 = [obj_type_ref] OBJ_TYPE_REF(_362;(struct Allocator)_343->2);
  if (PROF_366 == allocate)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  # DEBUG this => _343
  # DEBUG size => _342
  _372 = operator new [] (_342);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 90>;

  <bb 89>:
  _368 = OBJ_TYPE_REF(_362;(struct Allocator)_343->2) (_343, _342);

  <bb 90>:
  # _363 = PHI <_368(89), _372(88)>
  # DEBUG new_p => _363
  # DEBUG D#2 => _343
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_p => _363
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  # DEBUG this => D#2
  _373 = _342 - _292;
  _374 = _363 + _373;
  memcpy (_374, _286, _292);
  memcpy (_363, _288, _330);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _364 = _343->_vptr.Allocator;
  _365 = MEM[(int (*__vtbl_ptr_type) () *)_364 + 12B];
  PROF_370 = [obj_type_ref] OBJ_TYPE_REF(_365;(struct Allocator)_343->3);
  if (PROF_370 == deallocate)
    goto <bb 91>;
  else
    goto <bb 92>;

  <bb 91>:
  # DEBUG this => _343
  # DEBUG p => _288
  # DEBUG D.229665 => _285
  operator delete [] (_288);
  goto <bb 96>;

  <bb 92>:
  OBJ_TYPE_REF(_365;(struct Allocator)_343->3) (_343, _288, _285);
  goto <bb 96>;

  <bb 93>:
  _359 = OBJ_TYPE_REF(_353;(struct Allocator)_343->4) (_343, _288, _285, _342, _292, _330);
  goto <bb 96>;

  <bb 94>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.229679
  # DEBUG D#3 => &D.229679.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.229679.D.58579
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  if (_285 < _342)
    goto <bb 95>;
  else
    goto <bb 19>;

  <bb 95>:
  # DEBUG this => &D.229679.D.58579
  # DEBUG size => _342
  _388 = operator new [] (_342);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.229679.D.58579
  # DEBUG old_p => _288
  # DEBUG old_size => _285
  # DEBUG new_p => NULL
  # DEBUG new_size => _342
  # DEBUG in_use_back => _292
  # DEBUG in_use_front => _330
  # DEBUG this => D#2
  _384 = _342 - _292;
  _385 = _388 + _384;
  memcpy (_385, _286, _292);
  memcpy (_388, _288, _330);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.229679.D.58579
  # DEBUG p => _288
  # DEBUG D.229693 => _285
  operator delete [] (_288);
  # DEBUG p => NULL
  # DEBUG D.229693 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 96>:
  # iftmp.8_356 = PHI <_363(91), _388(95), _359(93), _363(92)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_356;
  goto <bb 103>;

  <bb 97>:
  _345 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _345
  # DEBUG size => _342
  if (_345 != 0B)
    goto <bb 98>;
  else
    goto <bb 101>;

  <bb 98>:
  _389 = _345->_vptr.Allocator;
  _390 = MEM[(int (*__vtbl_ptr_type) () *)_389 + 8B];
  PROF_394 = [obj_type_ref] OBJ_TYPE_REF(_390;(struct Allocator)_345->2);
  if (PROF_394 == allocate)
    goto <bb 99>;
  else
    goto <bb 100>;

  <bb 99>:
  # DEBUG this => _345
  # DEBUG size => _342
  _398 = operator new [] (_342);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 102>;

  <bb 100>:
  _396 = OBJ_TYPE_REF(_390;(struct Allocator)_345->2) (_345, _342);
  goto <bb 102>;

  <bb 101>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _342
  _392 = operator new [] (_342);

  <bb 102>:
  # iftmp.11_393 = PHI <_398(99), _392(101), _396(100)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_393;

  <bb 103>:
  # prephitmp_3012 = PHI <iftmp.8_356(96), iftmp.11_393(102)>
  _348 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _349 = _348 - _292;
  _350 = prephitmp_3012 + _349;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _350;
  _351 = prephitmp_3012 + _330;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _351;
  _2962 = (int) _350;
  _2965 = (int) prephitmp_3012;
  _2967 = _2962 - _2965;
  _2969 = (unsigned int) _2967;
  _2971 = _348 - _2969;

  <bb 104>:
  # prephitmp_2961 = PHI <_286(79), _350(103)>
  # prephitmp_2972 = PHI <_292(79), _2971(103)>
  # DEBUG this => D#191
  # DEBUG this => NULL
  if (prephitmp_2972 <= 2147483646)
    goto <bb 105>;
  else
    goto <bb 38>;

  <bb 105>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _298 = -_295;
  _299 = prephitmp_2961 + _298;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _299;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_295 == 0)
    goto <bb 110>;
  else
    goto <bb 106>;

  <bb 106>:

  <bb 107>:
  # i_2223 = PHI <0(106), i_303(108)>
  # prephitmp_2975 = PHI <_299(106), pretmp_2974(108)>
  # DEBUG i => i_2223
  _302 = prephitmp_2975 + i_2223;
  *_302 = 0;
  i_303 = i_2223 + 1;
  # DEBUG i => i_303
  # DEBUG i => i_303
  if (_295 <= i_303)
    goto <bb 109>;
  else
    goto <bb 108>;

  <bb 108>:
  pretmp_2974 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 107>;

  <bb 109>:
  pretmp_2977 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;

  <bb 110>:
  # prephitmp_2978 = PHI <pretmp_2977(109), _299(105)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#191
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#191
  # DEBUG len => 4
  # DEBUG this => D#191
  # DEBUG len => 4
  _269 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  if (_269 <= prephitmp_2978)
    goto <bb 111>;
  else
    goto <bb 45>;

  <bb 111>:
  _270 = MEM[(struct vector_downward *)_fbb_5(D)].buf_;
  if (_269 >= _270)
    goto <bb 112>;
  else
    goto <bb 45>;

  <bb 112>:
  _271 = (int) prephitmp_2978;
  _272 = (int) _269;
  _273 = _271 - _272;
  _274 = (unsigned int) _273;
  if (_274 <= 3)
    goto <bb 114>;
  else
    goto <bb 113>;

  <bb 113>:
  pretmp_2999 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  goto <bb 138>;

  <bb 114>:
  # DEBUG this => D#191
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_399 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  # DEBUG old_reserved => old_reserved_399
  # DEBUG this => D#191
  _403 = (int) _270;
  _404 = _271 - _403;
  _405 = (unsigned int) _404;
  _406 = old_reserved_399 - _405;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#191
  # DEBUG D#6 => D#191
  # DEBUG this => D#6
  # DEBUG this => D#6
  _409 = _272 - _403;
  _410 = (long unsigned int) _409;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_399 != 0)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  iftmp.7_411 = old_reserved_399 >> 1;
  goto <bb 117>;

  <bb 116>:
  iftmp.7_412 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 117>:
  # iftmp.7_413 = PHI <iftmp.7_411(115), iftmp.7_412(116)>
  # DEBUG __a => &len
  # DEBUG __b => &D.229728
  _1281 = MAX_EXPR <iftmp.7_413, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _418 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2354 = old_reserved_399 + _418;
  _2389 = _2354 + 4294967295;
  _420 = _1281 + _2389;
  _421 = -_418;
  _422 = _420 & _421;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _422;
  if (_270 != 0B)
    goto <bb 118>;
  else
    goto <bb 131>;

  <bb 118>:
  _423 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _423
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  if (_423 != 0B)
    goto <bb 119>;
  else
    goto <bb 128>;

  <bb 119>:
  _432 = _423->_vptr.Allocator;
  _433 = MEM[(int (*__vtbl_ptr_type) () *)_432 + 16B];
  PROF_437 = [obj_type_ref] OBJ_TYPE_REF(_433;(struct Allocator)_423->4);
  if (PROF_437 == reallocate_downward)
    goto <bb 120>;
  else
    goto <bb 127>;

  <bb 120>:
  # DEBUG this => _423
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  if (old_reserved_399 < _422)
    goto <bb 121>;
  else
    goto <bb 19>;

  <bb 121>:
  _442 = MEM[(int (*__vtbl_ptr_type) () *)_432 + 8B];
  PROF_446 = [obj_type_ref] OBJ_TYPE_REF(_442;(struct Allocator)_423->2);
  if (PROF_446 == allocate)
    goto <bb 122>;
  else
    goto <bb 123>;

  <bb 122>:
  # DEBUG this => _423
  # DEBUG size => _422
  _452 = operator new [] (_422);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 124>;

  <bb 123>:
  _448 = OBJ_TYPE_REF(_442;(struct Allocator)_423->2) (_423, _422);

  <bb 124>:
  # _443 = PHI <_448(123), _452(122)>
  # DEBUG new_p => _443
  # DEBUG D#2 => _423
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_p => _443
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  # DEBUG this => D#2
  _453 = _422 - _406;
  _454 = _443 + _453;
  memcpy (_454, prephitmp_2978, _406);
  memcpy (_443, _270, _410);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _444 = _423->_vptr.Allocator;
  _445 = MEM[(int (*__vtbl_ptr_type) () *)_444 + 12B];
  PROF_450 = [obj_type_ref] OBJ_TYPE_REF(_445;(struct Allocator)_423->3);
  if (PROF_450 == deallocate)
    goto <bb 125>;
  else
    goto <bb 126>;

  <bb 125>:
  # DEBUG this => _423
  # DEBUG p => _270
  # DEBUG D.229762 => old_reserved_399
  operator delete [] (_270);
  goto <bb 130>;

  <bb 126>:
  OBJ_TYPE_REF(_445;(struct Allocator)_423->3) (_423, _270, old_reserved_399);
  goto <bb 130>;

  <bb 127>:
  _439 = OBJ_TYPE_REF(_433;(struct Allocator)_423->4) (_423, _270, old_reserved_399, _422, _406, _410);
  goto <bb 130>;

  <bb 128>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.229776
  # DEBUG D#3 => &D.229776.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.229776.D.58579
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  if (old_reserved_399 < _422)
    goto <bb 129>;
  else
    goto <bb 19>;

  <bb 129>:
  # DEBUG this => &D.229776.D.58579
  # DEBUG size => _422
  _468 = operator new [] (_422);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.229776.D.58579
  # DEBUG old_p => _270
  # DEBUG old_size => old_reserved_399
  # DEBUG new_p => NULL
  # DEBUG new_size => _422
  # DEBUG in_use_back => _406
  # DEBUG in_use_front => _410
  # DEBUG this => D#2
  _464 = _422 - _406;
  _465 = _468 + _464;
  memcpy (_465, prephitmp_2978, _406);
  memcpy (_468, _270, _410);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.229776.D.58579
  # DEBUG p => _270
  # DEBUG D.229790 => old_reserved_399
  operator delete [] (_270);
  # DEBUG p => NULL
  # DEBUG D.229790 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 130>:
  # iftmp.8_436 = PHI <_443(125), _468(129), _439(127), _443(126)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_436;
  goto <bb 137>;

  <bb 131>:
  _425 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _425
  # DEBUG size => _422
  if (_425 != 0B)
    goto <bb 132>;
  else
    goto <bb 135>;

  <bb 132>:
  _469 = _425->_vptr.Allocator;
  _470 = MEM[(int (*__vtbl_ptr_type) () *)_469 + 8B];
  PROF_474 = [obj_type_ref] OBJ_TYPE_REF(_470;(struct Allocator)_425->2);
  if (PROF_474 == allocate)
    goto <bb 133>;
  else
    goto <bb 134>;

  <bb 133>:
  # DEBUG this => _425
  # DEBUG size => _422
  _478 = operator new [] (_422);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 136>;

  <bb 134>:
  _476 = OBJ_TYPE_REF(_470;(struct Allocator)_425->2) (_425, _422);
  goto <bb 136>;

  <bb 135>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _422
  _472 = operator new [] (_422);

  <bb 136>:
  # iftmp.11_473 = PHI <_478(133), _472(135), _476(134)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_473;

  <bb 137>:
  # prephitmp_3010 = PHI <iftmp.8_436(130), iftmp.11_473(136)>
  _428 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _429 = _428 - _406;
  _430 = prephitmp_3010 + _429;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _430;
  _431 = prephitmp_3010 + _410;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _431;
  _3002 = (int) _430;

  <bb 138>:
  # prephitmp_3000 = PHI <pretmp_2999(113), _428(137)>
  # prephitmp_3001 = PHI <prephitmp_2978(113), _430(137)>
  # prephitmp_3003 = PHI <_271(113), _3002(137)>
  # prephitmp_3004 = PHI <_270(113), prephitmp_3010(137)>
  # DEBUG this => D#191
  _279 = (int) prephitmp_3004;
  _280 = prephitmp_3003 - _279;
  _281 = (unsigned int) _280;
  _282 = prephitmp_3000 - _281;
  # DEBUG this => NULL
  if (_282 <= 2147483646)
    goto <bb 139>;
  else
    goto <bb 38>;

  <bb 139>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _260 = prephitmp_3001 + 4294967292;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _260;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long unsigned int *)prephitmp_3001 + 4294967292B] = _12;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _262 = (int) _260;
  _265 = _262 - _279;
  _266 = (unsigned int) _265;
  _267 = prephitmp_3000 - _266;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#51 => {CLOBBER}
  # DEBUG litle_endian_element => D#51
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG _o => NULL
  # DEBUG this => NULL
  # DEBUG _o => NULL
  # DEBUG this => NULL
  # DEBUG str => NULL
  # DEBUG len => NULL
  # DEBUG this => NULL
  # DEBUG str => NULL
  # DEBUG custom_code__$o => _267

  <bb 140>:
  # custom_code__$o_2481 = PHI <_267(139), 0(2)>
  # DEBUG custom_code__$o => custom_code__$o_2481
  # DEBUG deprecated_builtin_code => 127
  _7 = (int) builtin_code_6(D);
  if (_7 <= 126)
    goto <bb 141>;
  else
    goto <bb 142>;

  <bb 141>:
  # DEBUG deprecated_builtin_code => (int8_t) builtin_code_6(D)
  _2583 = (signed char) builtin_code_6(D);

  <bb 142>:
  # prephitmp_2584 = PHI <127(140), _2583(141)>
  # DEBUG D#188 => NULL
  # DEBUG deprecated_builtin_code => D#188
  # DEBUG _fbb => _fbb_5(D)
  # DEBUG deprecated_builtin_code => D#188
  # DEBUG custom_code$o => custom_code__$o_2481
  # DEBUG version => version_9(D)
  # DEBUG builtin_code => builtin_code_6(D)
  # DEBUG this => &builder_
  # DEBUG _fbb => _fbb_5(D)
  # DEBUG builder_$fbb_ => _fbb_5(D)
  # DEBUG this => _fbb_5(D)
  _479 = MEM[(long unsigned int *)_fbb_5(D) + 32B];
  # DEBUG D#19 => _fbb_5(D)
  _480 = MEM[(bool *)_fbb_5(D) + 38B];
  # DEBUG D#19 => _fbb_5(D)
  # DEBUG this => D#19
  # DEBUG this => D#19
  if (_480 != 0)
    goto <bb 4>;
  else
    goto <bb 143>;

  <bb 143>:
  if (_479 == 0)
    goto <bb 144>;
  else
    goto <bb 6>;

  <bb 144>:
  _fbb_5(D)->nested = 1;
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _481 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _482 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _483 = (int) _482;
  _484 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _485 = (int) _484;
  _486 = _483 - _485;
  _487 = (unsigned int) _486;
  _488 = _481 - _487;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG builder_$start_ => _488
  # DEBUG this => NULL
  # DEBUG _fbb => NULL
  # DEBUG D#56 => &builder_
  # DEBUG builtin_code => builtin_code_6(D)
  # DEBUG this => D#56
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 10
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => _7
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (_7 == 0)
    goto <bb 145>;
  else
    goto <bb 480>;

  <bb 145>:
  _565 = _fbb_5(D)->force_defaults_;
  if (_565 != 0)
    goto <bb 480>;
  else
    goto <bb 486>;

  <bb 146>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 147>:
  # DEBUG elem_size => NULL
  _610 = &_fbb_5(D)->buf_;
  # DEBUG this => _610
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _619 = -_488;
  _621 = _619 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => _610
  # DEBUG zero_pad_bytes => _621
  # DEBUG this => _610
  # DEBUG len => _621
  # DEBUG this => _610
  # DEBUG len => _621
  _631 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _1657 = _484 <= _631;
  _1656 = _482 >= _631;
  _1654 = _1656 & _1657;
  if (_1654 != 0)
    goto <bb 148>;
  else
    goto <bb 10>;

  <bb 148>:
  _634 = (int) _631;
  _635 = _483 - _634;
  _636 = (unsigned int) _635;
  if (_621 > _636)
    goto <bb 149>;
  else
    goto <bb 173>;

  <bb 149>:
  # DEBUG this => _610
  # DEBUG len => _621
  # DEBUG len => _621
  # DEBUG old_reserved => _481
  # DEBUG this => _610
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => _610
  # DEBUG D#6 => _610
  # DEBUG this => D#6
  # DEBUG this => D#6
  _655 = _634 - _485;
  _656 = (long unsigned int) _655;
  # DEBUG old_scratch_size => NULL
  if (_481 != 0)
    goto <bb 150>;
  else
    goto <bb 151>;

  <bb 150>:
  iftmp.7_657 = _481 >> 1;
  goto <bb 152>;

  <bb 151>:
  iftmp.7_658 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 152>:
  # iftmp.7_659 = PHI <iftmp.7_657(150), iftmp.7_658(151)>
  # DEBUG __a => &len
  # DEBUG __b => &D.229980
  _1264 = MAX_EXPR <_621, iftmp.7_659>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _664 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _1889 = _481 + _664;
  _2210 = _1889 + 4294967295;
  _666 = _1264 + _2210;
  _667 = -_664;
  _668 = _666 & _667;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _668;
  if (_484 != 0B)
    goto <bb 153>;
  else
    goto <bb 166>;

  <bb 153>:
  _669 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _669
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  if (_669 != 0B)
    goto <bb 154>;
  else
    goto <bb 163>;

  <bb 154>:
  _678 = _669->_vptr.Allocator;
  _679 = MEM[(int (*__vtbl_ptr_type) () *)_678 + 16B];
  PROF_683 = [obj_type_ref] OBJ_TYPE_REF(_679;(struct Allocator)_669->4);
  if (PROF_683 == reallocate_downward)
    goto <bb 155>;
  else
    goto <bb 162>;

  <bb 155>:
  # DEBUG this => _669
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  if (_481 < _668)
    goto <bb 156>;
  else
    goto <bb 19>;

  <bb 156>:
  _688 = MEM[(int (*__vtbl_ptr_type) () *)_678 + 8B];
  PROF_692 = [obj_type_ref] OBJ_TYPE_REF(_688;(struct Allocator)_669->2);
  if (PROF_692 == allocate)
    goto <bb 157>;
  else
    goto <bb 158>;

  <bb 157>:
  # DEBUG this => _669
  # DEBUG size => _668
  _698 = operator new [] (_668);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 159>;

  <bb 158>:
  _694 = OBJ_TYPE_REF(_688;(struct Allocator)_669->2) (_669, _668);

  <bb 159>:
  # _689 = PHI <_694(158), _698(157)>
  # DEBUG new_p => _689
  # DEBUG D#2 => _669
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_p => _689
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  # DEBUG this => D#2
  _699 = _668 - _488;
  _700 = _689 + _699;
  memcpy (_700, _482, _488);
  memcpy (_689, _484, _656);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _690 = _669->_vptr.Allocator;
  _691 = MEM[(int (*__vtbl_ptr_type) () *)_690 + 12B];
  PROF_696 = [obj_type_ref] OBJ_TYPE_REF(_691;(struct Allocator)_669->3);
  if (PROF_696 == deallocate)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  # DEBUG this => _669
  # DEBUG p => _484
  # DEBUG D.230014 => _481
  operator delete [] (_484);
  goto <bb 165>;

  <bb 161>:
  OBJ_TYPE_REF(_691;(struct Allocator)_669->3) (_669, _484, _481);
  goto <bb 165>;

  <bb 162>:
  _685 = OBJ_TYPE_REF(_679;(struct Allocator)_669->4) (_669, _484, _481, _668, _488, _656);
  goto <bb 165>;

  <bb 163>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230028
  # DEBUG D#3 => &D.230028.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230028.D.58579
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  if (_481 < _668)
    goto <bb 164>;
  else
    goto <bb 19>;

  <bb 164>:
  # DEBUG this => &D.230028.D.58579
  # DEBUG size => _668
  _714 = operator new [] (_668);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230028.D.58579
  # DEBUG old_p => _484
  # DEBUG old_size => _481
  # DEBUG new_p => NULL
  # DEBUG new_size => _668
  # DEBUG in_use_back => _488
  # DEBUG in_use_front => _656
  # DEBUG this => D#2
  _710 = _668 - _488;
  _711 = _714 + _710;
  memcpy (_711, _482, _488);
  memcpy (_714, _484, _656);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230028.D.58579
  # DEBUG p => _484
  # DEBUG D.230042 => _481
  operator delete [] (_484);
  # DEBUG p => NULL
  # DEBUG D.230042 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 165>:
  # iftmp.8_682 = PHI <_689(160), _714(164), _685(162), _689(161)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_682;
  goto <bb 172>;

  <bb 166>:
  _671 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _671
  # DEBUG size => _668
  if (_671 != 0B)
    goto <bb 167>;
  else
    goto <bb 170>;

  <bb 167>:
  _715 = _671->_vptr.Allocator;
  _716 = MEM[(int (*__vtbl_ptr_type) () *)_715 + 8B];
  PROF_720 = [obj_type_ref] OBJ_TYPE_REF(_716;(struct Allocator)_671->2);
  if (PROF_720 == allocate)
    goto <bb 168>;
  else
    goto <bb 169>;

  <bb 168>:
  # DEBUG this => _671
  # DEBUG size => _668
  _724 = operator new [] (_668);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 171>;

  <bb 169>:
  _722 = OBJ_TYPE_REF(_716;(struct Allocator)_671->2) (_671, _668);
  goto <bb 171>;

  <bb 170>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _668
  _718 = operator new [] (_668);

  <bb 171>:
  # iftmp.11_719 = PHI <_724(168), _718(170), _722(169)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_719;

  <bb 172>:
  # prephitmp_2718 = PHI <iftmp.8_682(165), iftmp.11_719(171)>
  _674 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _675 = _674 - _488;
  _676 = prephitmp_2718 + _675;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _676;
  _677 = prephitmp_2718 + _656;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _677;
  _2668 = (int) _676;
  _2671 = (int) prephitmp_2718;
  _2673 = _2668 - _2671;
  _2675 = (unsigned int) _2673;
  _2677 = _674 - _2675;

  <bb 173>:
  # prephitmp_2667 = PHI <_482(148), _676(172)>
  # prephitmp_2678 = PHI <_488(148), _2677(172)>
  # DEBUG this => _610
  # DEBUG this => NULL
  if (prephitmp_2678 <= 2147483646)
    goto <bb 174>;
  else
    goto <bb 38>;

  <bb 174>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _624 = -_621;
  _625 = prephitmp_2667 + _624;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _625;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_621 == 0)
    goto <bb 179>;
  else
    goto <bb 175>;

  <bb 175>:

  <bb 176>:
  # i_2073 = PHI <0(175), i_629(177)>
  # prephitmp_2681 = PHI <_625(175), pretmp_2680(177)>
  # DEBUG i => i_2073
  _628 = prephitmp_2681 + i_2073;
  *_628 = 0;
  i_629 = i_2073 + 1;
  # DEBUG i => i_629
  # DEBUG i => i_629
  if (_621 <= i_629)
    goto <bb 178>;
  else
    goto <bb 177>;

  <bb 177>:
  pretmp_2680 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 176>;

  <bb 178>:
  pretmp_2683 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;

  <bb 179>:
  # prephitmp_2684 = PHI <pretmp_2683(178), _625(174)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => _610
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => _610
  # DEBUG len => 4
  # DEBUG this => _610
  # DEBUG len => 4
  _595 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  if (_595 <= prephitmp_2684)
    goto <bb 180>;
  else
    goto <bb 45>;

  <bb 180>:
  _596 = MEM[(struct vector_downward *)_fbb_5(D)].buf_;
  if (_595 >= _596)
    goto <bb 181>;
  else
    goto <bb 45>;

  <bb 181>:
  _597 = (int) prephitmp_2684;
  _598 = (int) _595;
  _599 = _597 - _598;
  _600 = (unsigned int) _599;
  if (_600 <= 3)
    goto <bb 183>;
  else
    goto <bb 182>;

  <bb 182>:
  pretmp_2705 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  goto <bb 207>;

  <bb 183>:
  # DEBUG this => _610
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_725 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  # DEBUG old_reserved => old_reserved_725
  # DEBUG this => _610
  _729 = (int) _596;
  _730 = _597 - _729;
  _731 = (unsigned int) _730;
  _732 = old_reserved_725 - _731;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => _610
  # DEBUG D#6 => _610
  # DEBUG this => D#6
  # DEBUG this => D#6
  _735 = _598 - _729;
  _736 = (long unsigned int) _735;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_725 != 0)
    goto <bb 184>;
  else
    goto <bb 185>;

  <bb 184>:
  iftmp.7_737 = old_reserved_725 >> 1;
  goto <bb 186>;

  <bb 185>:
  iftmp.7_738 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 186>:
  # iftmp.7_739 = PHI <iftmp.7_737(184), iftmp.7_738(185)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230077
  _93 = MAX_EXPR <iftmp.7_739, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _744 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _11 = old_reserved_725 + _744;
  _1709 = _11 + 4294967295;
  _746 = _93 + _1709;
  _747 = -_744;
  _748 = _746 & _747;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _748;
  if (_596 != 0B)
    goto <bb 187>;
  else
    goto <bb 200>;

  <bb 187>:
  _749 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _749
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  if (_749 != 0B)
    goto <bb 188>;
  else
    goto <bb 197>;

  <bb 188>:
  _758 = _749->_vptr.Allocator;
  _759 = MEM[(int (*__vtbl_ptr_type) () *)_758 + 16B];
  PROF_763 = [obj_type_ref] OBJ_TYPE_REF(_759;(struct Allocator)_749->4);
  if (PROF_763 == reallocate_downward)
    goto <bb 189>;
  else
    goto <bb 196>;

  <bb 189>:
  # DEBUG this => _749
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  if (old_reserved_725 < _748)
    goto <bb 190>;
  else
    goto <bb 19>;

  <bb 190>:
  _768 = MEM[(int (*__vtbl_ptr_type) () *)_758 + 8B];
  PROF_772 = [obj_type_ref] OBJ_TYPE_REF(_768;(struct Allocator)_749->2);
  if (PROF_772 == allocate)
    goto <bb 191>;
  else
    goto <bb 192>;

  <bb 191>:
  # DEBUG this => _749
  # DEBUG size => _748
  _778 = operator new [] (_748);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 193>;

  <bb 192>:
  _774 = OBJ_TYPE_REF(_768;(struct Allocator)_749->2) (_749, _748);

  <bb 193>:
  # _769 = PHI <_774(192), _778(191)>
  # DEBUG new_p => _769
  # DEBUG D#2 => _749
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_p => _769
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  # DEBUG this => D#2
  _779 = _748 - _732;
  _780 = _769 + _779;
  memcpy (_780, prephitmp_2684, _732);
  memcpy (_769, _596, _736);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _770 = _749->_vptr.Allocator;
  _771 = MEM[(int (*__vtbl_ptr_type) () *)_770 + 12B];
  PROF_776 = [obj_type_ref] OBJ_TYPE_REF(_771;(struct Allocator)_749->3);
  if (PROF_776 == deallocate)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  # DEBUG this => _749
  # DEBUG p => _596
  # DEBUG D.230111 => old_reserved_725
  operator delete [] (_596);
  goto <bb 199>;

  <bb 195>:
  OBJ_TYPE_REF(_771;(struct Allocator)_749->3) (_749, _596, old_reserved_725);
  goto <bb 199>;

  <bb 196>:
  _765 = OBJ_TYPE_REF(_759;(struct Allocator)_749->4) (_749, _596, old_reserved_725, _748, _732, _736);
  goto <bb 199>;

  <bb 197>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230125
  # DEBUG D#3 => &D.230125.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230125.D.58579
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  if (old_reserved_725 < _748)
    goto <bb 198>;
  else
    goto <bb 19>;

  <bb 198>:
  # DEBUG this => &D.230125.D.58579
  # DEBUG size => _748
  _794 = operator new [] (_748);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230125.D.58579
  # DEBUG old_p => _596
  # DEBUG old_size => old_reserved_725
  # DEBUG new_p => NULL
  # DEBUG new_size => _748
  # DEBUG in_use_back => _732
  # DEBUG in_use_front => _736
  # DEBUG this => D#2
  _790 = _748 - _732;
  _791 = _794 + _790;
  memcpy (_791, prephitmp_2684, _732);
  memcpy (_794, _596, _736);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230125.D.58579
  # DEBUG p => _596
  # DEBUG D.230139 => old_reserved_725
  operator delete [] (_596);
  # DEBUG p => NULL
  # DEBUG D.230139 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 199>:
  # iftmp.8_762 = PHI <_769(194), _794(198), _765(196), _769(195)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_762;
  goto <bb 206>;

  <bb 200>:
  _751 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _751
  # DEBUG size => _748
  if (_751 != 0B)
    goto <bb 201>;
  else
    goto <bb 204>;

  <bb 201>:
  _795 = _751->_vptr.Allocator;
  _796 = MEM[(int (*__vtbl_ptr_type) () *)_795 + 8B];
  PROF_800 = [obj_type_ref] OBJ_TYPE_REF(_796;(struct Allocator)_751->2);
  if (PROF_800 == allocate)
    goto <bb 202>;
  else
    goto <bb 203>;

  <bb 202>:
  # DEBUG this => _751
  # DEBUG size => _748
  _804 = operator new [] (_748);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 205>;

  <bb 203>:
  _802 = OBJ_TYPE_REF(_796;(struct Allocator)_751->2) (_751, _748);
  goto <bb 205>;

  <bb 204>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _748
  _798 = operator new [] (_748);

  <bb 205>:
  # iftmp.11_799 = PHI <_804(202), _798(204), _802(203)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_799;

  <bb 206>:
  # prephitmp_2716 = PHI <iftmp.8_762(199), iftmp.11_799(205)>
  _754 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _755 = _754 - _732;
  _756 = prephitmp_2716 + _755;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _756;
  _757 = prephitmp_2716 + _736;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _757;
  _2708 = (int) _756;

  <bb 207>:
  # prephitmp_2706 = PHI <pretmp_2705(182), _754(206)>
  # prephitmp_2707 = PHI <prephitmp_2684(182), _756(206)>
  # prephitmp_2709 = PHI <_597(182), _2708(206)>
  # prephitmp_2710 = PHI <_596(182), prephitmp_2716(206)>
  # DEBUG this => _610
  _605 = (int) prephitmp_2710;
  _606 = prephitmp_2709 - _605;
  _607 = (unsigned int) _606;
  _608 = prephitmp_2706 - _607;
  # DEBUG this => NULL
  if (_608 <= 2147483646)
    goto <bb 208>;
  else
    goto <bb 38>;

  <bb 208>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _586 = prephitmp_2707 + 4294967292;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _586;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2707 + 4294967292B] = _7;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _588 = (int) _586;
  _591 = _588 - _605;
  _592 = (unsigned int) _591;
  _593 = prephitmp_2706 - _592;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 10
  # DEBUG field => 10
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 10
  # DEBUG this => _610
  # DEBUG t => &fl
  flatbuffers::vector_downward::ensure_space (_610, 8);
  _572 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  MEM[(struct FieldLoc *)_572] = _593;
  MEM[(struct FieldLoc *)_572 + 4B] = 10;
  _573 = _572 + 8;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _573;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _574 = _fbb_5(D)->num_field_loc;
  _575 = _574 + 1;
  _fbb_5(D)->num_field_loc = _575;
  # DEBUG D#163 => &_fbb_5(D)->max_voffset_
  # DEBUG __a => D#163
  # DEBUG __b => &field
  _577 = MEM[(const short unsigned int &)_fbb_5(D) + 36];
  _578 = (int) _577;
  if (_578 <= 9)
    goto <bb 209>;
  else
    goto <bb 210>;

  <bb 209>:

  <bb 210>:
  # _581 = PHI <10(209), _577(208)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_5(D)->max_voffset_ = _581;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG builtin_code => NULL
  # DEBUG D#55 => &builder_
  # DEBUG version => version_9(D)
  # DEBUG this => D#55
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 8
  # DEBUG e => version_9(D)
  # DEBUG def => 1
  # DEBUG e => version_9(D)
  # DEBUG def => 1
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (version_9(D) == 1)
    goto <bb 211>;
  else
    goto <bb 481>;

  <bb 211>:
  _561 = _fbb_5(D)->force_defaults_;
  if (_561 != 0)
    goto <bb 212>;
  else
    goto <bb 213>;

  <bb 212>:
  pretmp_2587 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  pretmp_2590 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _2593 = (int) pretmp_2590;
  pretmp_2596 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _2599 = (int) pretmp_2596;
  _2602 = _2593 - _2599;
  _2605 = (unsigned int) _2602;
  _2608 = pretmp_2587 - _2605;
  goto <bb 482>;

  <bb 213>:
  goto <bb 279>;

  <bb 214>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 215>:
  # DEBUG elem_size => NULL
  # DEBUG D#187 => &_fbb_5(D)->buf_
  # DEBUG this => D#187
  # DEBUG D#186 => MEM[(const struct vector_downward *)_fbb_5(D)].reserved_
  # DEBUG D#185 => MEM[(const struct vector_downward *)_fbb_5(D)].cur_
  # DEBUG D#184 => (int) D#185
  # DEBUG D#183 => MEM[(const struct vector_downward *)_fbb_5(D)].buf_
  # DEBUG D#182 => (int) D#183
  # DEBUG D#181 => D#184 - D#182
  # DEBUG D#180 => (unsigned int) D#181
  # DEBUG D#179 => D#186 - D#180
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _855 = -prephitmp_2610;
  _857 = _855 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#187
  # DEBUG zero_pad_bytes => _857
  # DEBUG this => D#187
  # DEBUG len => _857
  # DEBUG this => D#187
  # DEBUG len => _857
  _1653 = prephitmp_2598 <= prephitmp_2612;
  _1635 = prephitmp_2592 >= prephitmp_2612;
  _1311 = _1635 & _1653;
  if (_1311 != 0)
    goto <bb 216>;
  else
    goto <bb 10>;

  <bb 216>:
  _870 = (int) prephitmp_2612;
  _871 = prephitmp_2595 - _870;
  _872 = (unsigned int) _871;
  if (_857 > _872)
    goto <bb 217>;
  else
    goto <bb 241>;

  <bb 217>:
  # DEBUG this => D#187
  # DEBUG len => _857
  # DEBUG len => _857
  # DEBUG old_reserved => D#186
  # DEBUG this => D#187
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#187
  # DEBUG D#6 => D#187
  # DEBUG this => D#6
  # DEBUG this => D#6
  _891 = _870 - prephitmp_2601;
  _892 = (long unsigned int) _891;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2589 != 0)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  iftmp.7_893 = prephitmp_2589 >> 1;
  goto <bb 220>;

  <bb 219>:
  iftmp.7_894 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 220>:
  # iftmp.7_895 = PHI <iftmp.7_893(218), iftmp.7_894(219)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230222
  _188 = MAX_EXPR <_857, iftmp.7_895>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _900 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2258 = _900 + prephitmp_2589;
  _2531 = _2258 + 4294967295;
  _902 = _188 + _2531;
  _903 = -_900;
  _904 = _902 & _903;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _904;
  if (prephitmp_2598 != 0B)
    goto <bb 221>;
  else
    goto <bb 234>;

  <bb 221>:
  _905 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _905
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  if (_905 != 0B)
    goto <bb 222>;
  else
    goto <bb 231>;

  <bb 222>:
  _914 = _905->_vptr.Allocator;
  _915 = MEM[(int (*__vtbl_ptr_type) () *)_914 + 16B];
  PROF_919 = [obj_type_ref] OBJ_TYPE_REF(_915;(struct Allocator)_905->4);
  if (PROF_919 == reallocate_downward)
    goto <bb 223>;
  else
    goto <bb 230>;

  <bb 223>:
  # DEBUG this => _905
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  if (_904 > prephitmp_2589)
    goto <bb 224>;
  else
    goto <bb 19>;

  <bb 224>:
  _924 = MEM[(int (*__vtbl_ptr_type) () *)_914 + 8B];
  PROF_928 = [obj_type_ref] OBJ_TYPE_REF(_924;(struct Allocator)_905->2);
  if (PROF_928 == allocate)
    goto <bb 225>;
  else
    goto <bb 226>;

  <bb 225>:
  # DEBUG this => _905
  # DEBUG size => _904
  _934 = operator new [] (_904);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 227>;

  <bb 226>:
  _930 = OBJ_TYPE_REF(_924;(struct Allocator)_905->2) (_905, _904);

  <bb 227>:
  # _925 = PHI <_930(226), _934(225)>
  # DEBUG new_p => _925
  # DEBUG D#2 => _905
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_p => _925
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  # DEBUG this => D#2
  _935 = _904 - prephitmp_2610;
  _936 = _925 + _935;
  memcpy (_936, prephitmp_2592, prephitmp_2610);
  memcpy (_925, prephitmp_2598, _892);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _926 = _905->_vptr.Allocator;
  _927 = MEM[(int (*__vtbl_ptr_type) () *)_926 + 12B];
  PROF_932 = [obj_type_ref] OBJ_TYPE_REF(_927;(struct Allocator)_905->3);
  if (PROF_932 == deallocate)
    goto <bb 228>;
  else
    goto <bb 229>;

  <bb 228>:
  # DEBUG this => _905
  # DEBUG p => D#183
  # DEBUG D.230256 => D#186
  operator delete [] (prephitmp_2598);
  goto <bb 233>;

  <bb 229>:
  OBJ_TYPE_REF(_927;(struct Allocator)_905->3) (_905, prephitmp_2598, prephitmp_2589);
  goto <bb 233>;

  <bb 230>:
  _921 = OBJ_TYPE_REF(_915;(struct Allocator)_905->4) (_905, prephitmp_2598, prephitmp_2589, _904, prephitmp_2610, _892);
  goto <bb 233>;

  <bb 231>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230270
  # DEBUG D#3 => &D.230270.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230270.D.58579
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  if (_904 > prephitmp_2589)
    goto <bb 232>;
  else
    goto <bb 19>;

  <bb 232>:
  # DEBUG this => &D.230270.D.58579
  # DEBUG size => _904
  _950 = operator new [] (_904);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230270.D.58579
  # DEBUG old_p => D#183
  # DEBUG old_size => D#186
  # DEBUG new_p => NULL
  # DEBUG new_size => _904
  # DEBUG in_use_back => D#179
  # DEBUG in_use_front => _892
  # DEBUG this => D#2
  _946 = _904 - prephitmp_2610;
  _947 = _950 + _946;
  memcpy (_947, prephitmp_2592, prephitmp_2610);
  memcpy (_950, prephitmp_2598, _892);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230270.D.58579
  # DEBUG p => D#183
  # DEBUG D.230284 => D#186
  operator delete [] (prephitmp_2598);
  # DEBUG p => NULL
  # DEBUG D.230284 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 233>:
  # iftmp.8_918 = PHI <_925(228), _950(232), _921(230), _925(229)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_918;
  goto <bb 240>;

  <bb 234>:
  _907 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _907
  # DEBUG size => _904
  if (_907 != 0B)
    goto <bb 235>;
  else
    goto <bb 238>;

  <bb 235>:
  _951 = _907->_vptr.Allocator;
  _952 = MEM[(int (*__vtbl_ptr_type) () *)_951 + 8B];
  PROF_956 = [obj_type_ref] OBJ_TYPE_REF(_952;(struct Allocator)_907->2);
  if (PROF_956 == allocate)
    goto <bb 236>;
  else
    goto <bb 237>;

  <bb 236>:
  # DEBUG this => _907
  # DEBUG size => _904
  _960 = operator new [] (_904);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 239>;

  <bb 237>:
  _958 = OBJ_TYPE_REF(_952;(struct Allocator)_907->2) (_907, _904);
  goto <bb 239>;

  <bb 238>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _904
  _954 = operator new [] (_904);

  <bb 239>:
  # iftmp.11_955 = PHI <_960(236), _954(238), _958(237)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_955;

  <bb 240>:
  # prephitmp_2665 = PHI <iftmp.8_918(233), iftmp.11_955(239)>
  _910 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _911 = _910 - prephitmp_2610;
  _912 = prephitmp_2665 + _911;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _912;
  _913 = prephitmp_2665 + _892;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _913;
  _2615 = (int) _912;
  _2618 = (int) prephitmp_2665;
  _2620 = _2615 - _2618;
  _2622 = (unsigned int) _2620;
  _2624 = _910 - _2622;

  <bb 241>:
  # prephitmp_2614 = PHI <prephitmp_2592(216), _912(240)>
  # prephitmp_2625 = PHI <prephitmp_2610(216), _2624(240)>
  # DEBUG this => D#187
  # DEBUG this => NULL
  if (prephitmp_2625 <= 2147483646)
    goto <bb 242>;
  else
    goto <bb 38>;

  <bb 242>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _860 = -_857;
  _861 = prephitmp_2614 + _860;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _861;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_857 == 0)
    goto <bb 247>;
  else
    goto <bb 243>;

  <bb 243>:

  <bb 244>:
  # i_2074 = PHI <0(243), i_865(245)>
  # prephitmp_2628 = PHI <_861(243), pretmp_2627(245)>
  # DEBUG i => i_2074
  _864 = prephitmp_2628 + i_2074;
  *_864 = 0;
  i_865 = i_2074 + 1;
  # DEBUG i => i_865
  # DEBUG i => i_865
  if (_857 <= i_865)
    goto <bb 246>;
  else
    goto <bb 245>;

  <bb 245>:
  pretmp_2627 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 244>;

  <bb 246>:
  pretmp_2630 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;

  <bb 247>:
  # prephitmp_2631 = PHI <pretmp_2630(246), _861(242)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#187
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#187
  # DEBUG len => 4
  # DEBUG this => D#187
  # DEBUG len => 4
  _831 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  if (_831 <= prephitmp_2631)
    goto <bb 248>;
  else
    goto <bb 45>;

  <bb 248>:
  _832 = MEM[(struct vector_downward *)_fbb_5(D)].buf_;
  if (_831 >= _832)
    goto <bb 249>;
  else
    goto <bb 45>;

  <bb 249>:
  _833 = (int) prephitmp_2631;
  _834 = (int) _831;
  _835 = _833 - _834;
  _836 = (unsigned int) _835;
  if (_836 <= 3)
    goto <bb 251>;
  else
    goto <bb 250>;

  <bb 250>:
  pretmp_2652 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  goto <bb 275>;

  <bb 251>:
  # DEBUG this => D#187
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_961 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  # DEBUG old_reserved => old_reserved_961
  # DEBUG this => D#187
  _965 = (int) _832;
  _966 = _833 - _965;
  _967 = (unsigned int) _966;
  _968 = old_reserved_961 - _967;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#187
  # DEBUG D#6 => D#187
  # DEBUG this => D#6
  # DEBUG this => D#6
  _971 = _834 - _965;
  _972 = (long unsigned int) _971;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_961 != 0)
    goto <bb 252>;
  else
    goto <bb 253>;

  <bb 252>:
  iftmp.7_973 = old_reserved_961 >> 1;
  goto <bb 254>;

  <bb 253>:
  iftmp.7_974 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 254>:
  # iftmp.7_975 = PHI <iftmp.7_973(252), iftmp.7_974(253)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230319
  _1602 = MAX_EXPR <iftmp.7_975, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _980 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2085 = old_reserved_961 + _980;
  _2257 = _2085 + 4294967295;
  _982 = _1602 + _2257;
  _983 = -_980;
  _984 = _982 & _983;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _984;
  if (_832 != 0B)
    goto <bb 255>;
  else
    goto <bb 268>;

  <bb 255>:
  _985 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _985
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  if (_985 != 0B)
    goto <bb 256>;
  else
    goto <bb 265>;

  <bb 256>:
  _994 = _985->_vptr.Allocator;
  _995 = MEM[(int (*__vtbl_ptr_type) () *)_994 + 16B];
  PROF_999 = [obj_type_ref] OBJ_TYPE_REF(_995;(struct Allocator)_985->4);
  if (PROF_999 == reallocate_downward)
    goto <bb 257>;
  else
    goto <bb 264>;

  <bb 257>:
  # DEBUG this => _985
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  if (old_reserved_961 < _984)
    goto <bb 258>;
  else
    goto <bb 19>;

  <bb 258>:
  _1004 = MEM[(int (*__vtbl_ptr_type) () *)_994 + 8B];
  PROF_1008 = [obj_type_ref] OBJ_TYPE_REF(_1004;(struct Allocator)_985->2);
  if (PROF_1008 == allocate)
    goto <bb 259>;
  else
    goto <bb 260>;

  <bb 259>:
  # DEBUG this => _985
  # DEBUG size => _984
  _1014 = operator new [] (_984);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 261>;

  <bb 260>:
  _1010 = OBJ_TYPE_REF(_1004;(struct Allocator)_985->2) (_985, _984);

  <bb 261>:
  # _1005 = PHI <_1010(260), _1014(259)>
  # DEBUG new_p => _1005
  # DEBUG D#2 => _985
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_p => _1005
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  # DEBUG this => D#2
  _1015 = _984 - _968;
  _1016 = _1005 + _1015;
  memcpy (_1016, prephitmp_2631, _968);
  memcpy (_1005, _832, _972);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1006 = _985->_vptr.Allocator;
  _1007 = MEM[(int (*__vtbl_ptr_type) () *)_1006 + 12B];
  PROF_1012 = [obj_type_ref] OBJ_TYPE_REF(_1007;(struct Allocator)_985->3);
  if (PROF_1012 == deallocate)
    goto <bb 262>;
  else
    goto <bb 263>;

  <bb 262>:
  # DEBUG this => _985
  # DEBUG p => _832
  # DEBUG D.230353 => old_reserved_961
  operator delete [] (_832);
  goto <bb 267>;

  <bb 263>:
  OBJ_TYPE_REF(_1007;(struct Allocator)_985->3) (_985, _832, old_reserved_961);
  goto <bb 267>;

  <bb 264>:
  _1001 = OBJ_TYPE_REF(_995;(struct Allocator)_985->4) (_985, _832, old_reserved_961, _984, _968, _972);
  goto <bb 267>;

  <bb 265>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230367
  # DEBUG D#3 => &D.230367.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230367.D.58579
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  if (old_reserved_961 < _984)
    goto <bb 266>;
  else
    goto <bb 19>;

  <bb 266>:
  # DEBUG this => &D.230367.D.58579
  # DEBUG size => _984
  _1030 = operator new [] (_984);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230367.D.58579
  # DEBUG old_p => _832
  # DEBUG old_size => old_reserved_961
  # DEBUG new_p => NULL
  # DEBUG new_size => _984
  # DEBUG in_use_back => _968
  # DEBUG in_use_front => _972
  # DEBUG this => D#2
  _1026 = _984 - _968;
  _1027 = _1030 + _1026;
  memcpy (_1027, prephitmp_2631, _968);
  memcpy (_1030, _832, _972);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230367.D.58579
  # DEBUG p => _832
  # DEBUG D.230381 => old_reserved_961
  operator delete [] (_832);
  # DEBUG p => NULL
  # DEBUG D.230381 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 267>:
  # iftmp.8_998 = PHI <_1005(262), _1030(266), _1001(264), _1005(263)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_998;
  goto <bb 274>;

  <bb 268>:
  _987 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _987
  # DEBUG size => _984
  if (_987 != 0B)
    goto <bb 269>;
  else
    goto <bb 272>;

  <bb 269>:
  _1031 = _987->_vptr.Allocator;
  _1032 = MEM[(int (*__vtbl_ptr_type) () *)_1031 + 8B];
  PROF_1036 = [obj_type_ref] OBJ_TYPE_REF(_1032;(struct Allocator)_987->2);
  if (PROF_1036 == allocate)
    goto <bb 270>;
  else
    goto <bb 271>;

  <bb 270>:
  # DEBUG this => _987
  # DEBUG size => _984
  _1040 = operator new [] (_984);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 273>;

  <bb 271>:
  _1038 = OBJ_TYPE_REF(_1032;(struct Allocator)_987->2) (_987, _984);
  goto <bb 273>;

  <bb 272>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _984
  _1034 = operator new [] (_984);

  <bb 273>:
  # iftmp.11_1035 = PHI <_1040(270), _1034(272), _1038(271)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1035;

  <bb 274>:
  # prephitmp_2663 = PHI <iftmp.8_998(267), iftmp.11_1035(273)>
  _990 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _991 = _990 - _968;
  _992 = prephitmp_2663 + _991;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _992;
  _993 = prephitmp_2663 + _972;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _993;
  _2655 = (int) _992;

  <bb 275>:
  # prephitmp_2653 = PHI <pretmp_2652(250), _990(274)>
  # prephitmp_2654 = PHI <prephitmp_2631(250), _992(274)>
  # prephitmp_2656 = PHI <_833(250), _2655(274)>
  # prephitmp_2657 = PHI <_832(250), prephitmp_2663(274)>
  # DEBUG this => D#187
  _841 = (int) prephitmp_2657;
  _842 = prephitmp_2656 - _841;
  _843 = (unsigned int) _842;
  _844 = prephitmp_2653 - _843;
  # DEBUG this => NULL
  if (_844 <= 2147483646)
    goto <bb 276>;
  else
    goto <bb 38>;

  <bb 276>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _822 = prephitmp_2654 + 4294967292;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _822;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2654 + 4294967292B] = version_9(D);
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _824 = (int) _822;
  _827 = _824 - _841;
  _828 = (unsigned int) _827;
  _829 = prephitmp_2653 - _828;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 8
  # DEBUG field => 8
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 8
  # DEBUG this => D#187
  # DEBUG t => &fl
  flatbuffers::vector_downward::ensure_space (prephitmp_2586, 8);
  _808 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  MEM[(struct FieldLoc *)_808] = _829;
  MEM[(struct FieldLoc *)_808 + 4B] = 8;
  _809 = _808 + 8;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _809;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _810 = _fbb_5(D)->num_field_loc;
  _811 = _810 + 1;
  _fbb_5(D)->num_field_loc = _811;
  # DEBUG D#162 => &_fbb_5(D)->max_voffset_
  # DEBUG __a => D#162
  # DEBUG __b => &field
  _813 = MEM[(const short unsigned int &)_fbb_5(D) + 36];
  _814 = (int) _813;
  if (_814 <= 7)
    goto <bb 277>;
  else
    goto <bb 278>;

  <bb 277>:

  <bb 278>:
  # _817 = PHI <8(277), _813(276)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_5(D)->max_voffset_ = _817;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 279>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG version => NULL
  # DEBUG D#59 => &builder_
  # DEBUG custom_code$o => custom_code__$o_2481
  # DEBUG this => D#59
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 6
  # DEBUG off => custom_code__$o_2481
  # DEBUG off$o => custom_code__$o_2481
  # DEBUG this => &off
  # DEBUG this => NULL
  if (custom_code__$o_2481 == 0)
    goto <bb 327>;
  else
    goto <bb 280>;

  <bb 280>:
  # DEBUG this => _fbb_5(D)
  # DEBUG off => custom_code__$o_2481
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _1051 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_1051 <= 3)
    goto <bb 281>;
  else
    goto <bb 282>;

  <bb 281>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 282>:
  # DEBUG elem_size => NULL
  _1052 = &_fbb_5(D)->buf_;
  # DEBUG this => _1052
  _1053 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _1054 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _1055 = (int) _1054;
  _1056 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _1057 = (int) _1056;
  _1058 = _1055 - _1057;
  _1059 = (unsigned int) _1058;
  _1060 = _1053 - _1059;
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _1061 = -_1060;
  _1063 = _1061 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => _1052
  # DEBUG zero_pad_bytes => _1063
  # DEBUG this => _1052
  # DEBUG len => _1063
  # DEBUG this => _1052
  # DEBUG len => _1063
  _1073 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _1310 = _1056 <= _1073;
  _1708 = _1054 >= _1073;
  _495 = _1310 & _1708;
  if (_495 != 0)
    goto <bb 283>;
  else
    goto <bb 10>;

  <bb 283>:
  _1076 = (int) _1073;
  _1077 = _1055 - _1076;
  _1078 = (unsigned int) _1077;
  if (_1063 > _1078)
    goto <bb 284>;
  else
    goto <bb 308>;

  <bb 284>:
  # DEBUG this => _1052
  # DEBUG len => _1063
  # DEBUG len => _1063
  # DEBUG old_reserved => _1053
  # DEBUG this => _1052
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => _1052
  # DEBUG D#6 => _1052
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1097 = _1076 - _1057;
  _1098 = (long unsigned int) _1097;
  # DEBUG old_scratch_size => NULL
  if (_1053 != 0)
    goto <bb 285>;
  else
    goto <bb 286>;

  <bb 285>:
  iftmp.7_1099 = _1053 >> 1;
  goto <bb 287>;

  <bb 286>:
  iftmp.7_1100 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 287>:
  # iftmp.7_1101 = PHI <iftmp.7_1099(285), iftmp.7_1100(286)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230438
  _1608 = MAX_EXPR <_1063, iftmp.7_1101>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1106 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _15 = _1053 + _1106;
  _16 = _15 + 4294967295;
  _1108 = _16 + _1608;
  _1109 = -_1106;
  _1110 = _1108 & _1109;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _1110;
  if (_1056 != 0B)
    goto <bb 288>;
  else
    goto <bb 301>;

  <bb 288>:
  _1111 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1111
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  if (_1111 != 0B)
    goto <bb 289>;
  else
    goto <bb 298>;

  <bb 289>:
  _1120 = _1111->_vptr.Allocator;
  _1121 = MEM[(int (*__vtbl_ptr_type) () *)_1120 + 16B];
  PROF_1125 = [obj_type_ref] OBJ_TYPE_REF(_1121;(struct Allocator)_1111->4);
  if (PROF_1125 == reallocate_downward)
    goto <bb 290>;
  else
    goto <bb 297>;

  <bb 290>:
  # DEBUG this => _1111
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  if (_1053 < _1110)
    goto <bb 291>;
  else
    goto <bb 19>;

  <bb 291>:
  _1130 = MEM[(int (*__vtbl_ptr_type) () *)_1120 + 8B];
  PROF_1134 = [obj_type_ref] OBJ_TYPE_REF(_1130;(struct Allocator)_1111->2);
  if (PROF_1134 == allocate)
    goto <bb 292>;
  else
    goto <bb 293>;

  <bb 292>:
  # DEBUG this => _1111
  # DEBUG size => _1110
  _1140 = operator new [] (_1110);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 294>;

  <bb 293>:
  _1136 = OBJ_TYPE_REF(_1130;(struct Allocator)_1111->2) (_1111, _1110);

  <bb 294>:
  # _1131 = PHI <_1136(293), _1140(292)>
  # DEBUG new_p => _1131
  # DEBUG D#2 => _1111
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_p => _1131
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  # DEBUG this => D#2
  _1141 = _1110 - _1060;
  _1142 = _1131 + _1141;
  memcpy (_1142, _1054, _1060);
  memcpy (_1131, _1056, _1098);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1132 = _1111->_vptr.Allocator;
  _1133 = MEM[(int (*__vtbl_ptr_type) () *)_1132 + 12B];
  PROF_1138 = [obj_type_ref] OBJ_TYPE_REF(_1133;(struct Allocator)_1111->3);
  if (PROF_1138 == deallocate)
    goto <bb 295>;
  else
    goto <bb 296>;

  <bb 295>:
  # DEBUG this => _1111
  # DEBUG p => _1056
  # DEBUG D.230472 => _1053
  operator delete [] (_1056);
  goto <bb 300>;

  <bb 296>:
  OBJ_TYPE_REF(_1133;(struct Allocator)_1111->3) (_1111, _1056, _1053);
  goto <bb 300>;

  <bb 297>:
  _1127 = OBJ_TYPE_REF(_1121;(struct Allocator)_1111->4) (_1111, _1056, _1053, _1110, _1060, _1098);
  goto <bb 300>;

  <bb 298>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230486
  # DEBUG D#3 => &D.230486.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230486.D.58579
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  if (_1053 < _1110)
    goto <bb 299>;
  else
    goto <bb 19>;

  <bb 299>:
  # DEBUG this => &D.230486.D.58579
  # DEBUG size => _1110
  _1156 = operator new [] (_1110);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230486.D.58579
  # DEBUG old_p => _1056
  # DEBUG old_size => _1053
  # DEBUG new_p => NULL
  # DEBUG new_size => _1110
  # DEBUG in_use_back => _1060
  # DEBUG in_use_front => _1098
  # DEBUG this => D#2
  _1152 = _1110 - _1060;
  _1153 = _1156 + _1152;
  memcpy (_1153, _1054, _1060);
  memcpy (_1156, _1056, _1098);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230486.D.58579
  # DEBUG p => _1056
  # DEBUG D.230500 => _1053
  operator delete [] (_1056);
  # DEBUG p => NULL
  # DEBUG D.230500 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 300>:
  # iftmp.8_1124 = PHI <_1131(295), _1156(299), _1127(297), _1131(296)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_1124;
  goto <bb 307>;

  <bb 301>:
  _1113 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1113
  # DEBUG size => _1110
  if (_1113 != 0B)
    goto <bb 302>;
  else
    goto <bb 305>;

  <bb 302>:
  _1157 = _1113->_vptr.Allocator;
  _1158 = MEM[(int (*__vtbl_ptr_type) () *)_1157 + 8B];
  PROF_1162 = [obj_type_ref] OBJ_TYPE_REF(_1158;(struct Allocator)_1113->2);
  if (PROF_1162 == allocate)
    goto <bb 303>;
  else
    goto <bb 304>;

  <bb 303>:
  # DEBUG this => _1113
  # DEBUG size => _1110
  _1166 = operator new [] (_1110);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 306>;

  <bb 304>:
  _1164 = OBJ_TYPE_REF(_1158;(struct Allocator)_1113->2) (_1113, _1110);
  goto <bb 306>;

  <bb 305>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1110
  _1160 = operator new [] (_1110);

  <bb 306>:
  # iftmp.11_1161 = PHI <_1166(303), _1160(305), _1164(304)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1161;

  <bb 307>:
  # prephitmp_2914 = PHI <iftmp.8_1124(300), iftmp.11_1161(306)>
  _1116 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _1117 = _1116 - _1060;
  _1118 = prephitmp_2914 + _1117;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1118;
  _1119 = prephitmp_2914 + _1098;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1119;
  _2878 = (int) _1118;
  _2881 = (int) prephitmp_2914;
  _2883 = _2878 - _2881;
  _2885 = (unsigned int) _2883;
  _2887 = _1116 - _2885;

  <bb 308>:
  # prephitmp_2876 = PHI <_1053(283), _1116(307)>
  # prephitmp_2877 = PHI <_1054(283), _1118(307)>
  # prephitmp_2880 = PHI <_1056(283), prephitmp_2914(307)>
  # prephitmp_2882 = PHI <_1057(283), _2881(307)>
  # prephitmp_2888 = PHI <_1060(283), _2887(307)>
  # DEBUG this => _1052
  # DEBUG this => NULL
  if (prephitmp_2888 <= 2147483646)
    goto <bb 309>;
  else
    goto <bb 38>;

  <bb 309>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1066 = -_1063;
  _1067 = prephitmp_2877 + _1066;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1067;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_1063 == 0)
    goto <bb 314>;
  else
    goto <bb 310>;

  <bb 310>:

  <bb 311>:
  # i_2050 = PHI <0(310), i_1071(312)>
  # prephitmp_2894 = PHI <_1067(310), pretmp_2893(312)>
  # DEBUG i => i_2050
  _1070 = prephitmp_2894 + i_2050;
  *_1070 = 0;
  i_1071 = i_2050 + 1;
  # DEBUG i => i_1071
  # DEBUG i => i_1071
  if (_1063 <= i_1071)
    goto <bb 313>;
  else
    goto <bb 312>;

  <bb 312>:
  pretmp_2893 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 311>;

  <bb 313>:
  pretmp_2896 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  pretmp_2898 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  pretmp_2900 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _2902 = (int) pretmp_2900;

  <bb 314>:
  # prephitmp_2897 = PHI <pretmp_2896(313), prephitmp_2876(309)>
  # prephitmp_2899 = PHI <pretmp_2898(313), _1067(309)>
  # prephitmp_2901 = PHI <pretmp_2900(313), prephitmp_2880(309)>
  # prephitmp_2903 = PHI <_2902(313), prephitmp_2882(309)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _1043 = (int) prephitmp_2899;
  _1046 = _1043 - prephitmp_2903;
  _1047 = (unsigned int) _1046;
  _1048 = prephitmp_2897 - _1047;
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (_1048 >= custom_code__$o_2481)
    goto <bb 316>;
  else
    goto <bb 315>;

  <bb 315>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1339, &__PRETTY_FUNCTION__, "off && off <= GetSize()");

  <bb 316>:
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  _14 = _1048 + 4;
  _1050 = _14 - custom_code__$o_2481;
  # DEBUG this => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 6
  # DEBUG e => NULL
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (_1050 == 0)
    goto <bb 317>;
  else
    goto <bb 483>;

  <bb 317>:
  _558 = _fbb_5(D)->force_defaults_;
  if (_558 != 0)
    goto <bb 483>;
  else
    goto <bb 488>;

  <bb 318>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 319>:
  # DEBUG elem_size => NULL
  # DEBUG this => _1052
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _1202 = -_1048;
  _1204 = _1202 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => _1052
  # DEBUG zero_pad_bytes => _1204
  # DEBUG this => _1052
  # DEBUG len => _1204
  _1205 = flatbuffers::vector_downward::ensure_space (_1052, _1204);
  # DEBUG space => _1205
  _1206 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  _1207 = -_1205;
  _1208 = _1206 + _1207;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1208;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_1204 == 0)
    goto <bb 322>;
  else
    goto <bb 320>;

  <bb 320>:
  goto <bb 324>;

  <bb 321>:

  <bb 322>:
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => _1052
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => _1052
  # DEBUG len => 4
  _1181 = flatbuffers::vector_downward::ensure_space (_1052, 4);
  # DEBUG space => _1181
  _1182 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  _1183 = -_1181;
  _1184 = _1182 + _1183;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1184;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long unsigned int *)_1184] = _1050;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _1185 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _1186 = (int) _1184;
  _1187 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _1188 = (int) _1187;
  _1189 = _1186 - _1188;
  _1190 = (unsigned int) _1189;
  _1191 = _1185 - _1190;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#51 => {CLOBBER}
  # DEBUG litle_endian_element => D#51
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 6
  # DEBUG field => 6
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 6
  # DEBUG this => _1052
  # DEBUG t => &fl
  flatbuffers::vector_downward::ensure_space (_1052, 8);
  _1170 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  MEM[(struct FieldLoc *)_1170] = _1191;
  MEM[(struct FieldLoc *)_1170 + 4B] = 6;
  _1171 = _1170 + 8;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1171;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _1172 = _fbb_5(D)->num_field_loc;
  _1173 = _1172 + 1;
  _fbb_5(D)->num_field_loc = _1173;
  # DEBUG D#161 => &_fbb_5(D)->max_voffset_
  # DEBUG __a => D#161
  # DEBUG __b => &field
  _1175 = MEM[(const short unsigned int &)_fbb_5(D) + 36];
  _1176 = (int) _1175;
  if (_1176 <= 5)
    goto <bb 323>;
  else
    goto <bb 326>;

  <bb 323>:
  goto <bb 326>;

  <bb 324>:
  # i_1792 = PHI <0(320), i_1212(325)>
  # prephitmp_2911 = PHI <_1208(320), pretmp_2910(325)>
  # DEBUG i => i_1792
  _1211 = prephitmp_2911 + i_1792;
  *_1211 = 0;
  i_1212 = i_1792 + 1;
  # DEBUG i => i_1212
  # DEBUG i => i_1212
  if (_1204 <= i_1212)
    goto <bb 321>;
  else
    goto <bb 325>;

  <bb 325>:
  pretmp_2910 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 324>;

  <bb 326>:
  # _1179 = PHI <6(323), _1175(322)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_5(D)->max_voffset_ = _1179;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 327>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG off$o => NULL
  # DEBUG D#66 => &builder_
  # DEBUG deprecated_builtin_code => D#188
  # DEBUG this => D#66
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 4
  # DEBUG e => D#188
  # DEBUG def => 0
  # DEBUG e => D#188
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (prephitmp_2584 == 0)
    goto <bb 328>;
  else
    goto <bb 484>;

  <bb 328>:
  _554 = _fbb_5(D)->force_defaults_;
  if (_554 != 0)
    goto <bb 484>;
  else
    goto <bb 329>;

  <bb 329>:
  goto <bb 361>;

  <bb 330>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 1;

  <bb 331>:
  # DEBUG elem_size => NULL
  # DEBUG D#178 => &_fbb_5(D)->buf_
  # DEBUG this => D#178
  # DEBUG D#177 => MEM[(const struct vector_downward *)_fbb_5(D)].reserved_
  # DEBUG D#176 => MEM[(const struct vector_downward *)_fbb_5(D)].cur_
  # DEBUG D#175 => (int) D#176
  # DEBUG D#174 => MEM[(const struct vector_downward *)_fbb_5(D)].buf_
  # DEBUG D#173 => (int) D#174
  # DEBUG D#172 => D#175 - D#173
  # DEBUG D#171 => (unsigned int) D#172
  # DEBUG D#170 => D#177 - D#171
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 1
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#178
  # DEBUG zero_pad_bytes => 0
  # DEBUG this => D#178
  # DEBUG len => 0
  # DEBUG this => D#178
  # DEBUG len => 0
  _1276 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _1609 = _1276 >= prephitmp_2744;
  _1529 = _1276 <= prephitmp_2738;
  _1224 = _1529 & _1609;
  if (_1224 != 0)
    goto <bb 332>;
  else
    goto <bb 10>;

  <bb 332>:
  _1279 = (int) _1276;
  # DEBUG this => D#178
  # DEBUG this => NULL
  if (prephitmp_2756 <= 2147483646)
    goto <bb 333>;
  else
    goto <bb 38>;

  <bb 333>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#178
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#178
  # DEBUG len => 1
  # DEBUG this => D#178
  # DEBUG len => 1
  if (_1279 == prephitmp_2741)
    goto <bb 334>;
  else
    goto <bb 358>;

  <bb 334>:
  # DEBUG this => D#178
  # DEBUG len => 1
  # DEBUG len => 1
  # DEBUG old_reserved => D#177
  # DEBUG this => D#178
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#178
  # DEBUG D#6 => D#178
  # DEBUG this => D#6
  # DEBUG this => D#6
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2735 != 0)
    goto <bb 335>;
  else
    goto <bb 336>;

  <bb 335>:
  iftmp.7_1382 = prephitmp_2735 >> 1;
  goto <bb 337>;

  <bb 336>:
  iftmp.7_1383 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 337>:
  # iftmp.7_1384 = PHI <iftmp.7_1382(335), iftmp.7_1383(336)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230720
  _335 = MAX_EXPR <iftmp.7_1384, 1>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1389 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2211 = _1389 + prephitmp_2735;
  _2438 = _2211 + 4294967295;
  _1391 = _335 + _2438;
  _1392 = -_1389;
  _1393 = _1391 & _1392;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _1393;
  if (prephitmp_2744 != 0B)
    goto <bb 338>;
  else
    goto <bb 351>;

  <bb 338>:
  _1394 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1394
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  if (_1394 != 0B)
    goto <bb 339>;
  else
    goto <bb 348>;

  <bb 339>:
  _1403 = _1394->_vptr.Allocator;
  _1404 = MEM[(int (*__vtbl_ptr_type) () *)_1403 + 16B];
  PROF_1408 = [obj_type_ref] OBJ_TYPE_REF(_1404;(struct Allocator)_1394->4);
  if (PROF_1408 == reallocate_downward)
    goto <bb 340>;
  else
    goto <bb 347>;

  <bb 340>:
  # DEBUG this => _1394
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  if (_1393 > prephitmp_2735)
    goto <bb 341>;
  else
    goto <bb 19>;

  <bb 341>:
  _1413 = MEM[(int (*__vtbl_ptr_type) () *)_1403 + 8B];
  PROF_1417 = [obj_type_ref] OBJ_TYPE_REF(_1413;(struct Allocator)_1394->2);
  if (PROF_1417 == allocate)
    goto <bb 342>;
  else
    goto <bb 343>;

  <bb 342>:
  # DEBUG this => _1394
  # DEBUG size => _1393
  _1423 = operator new [] (_1393);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 344>;

  <bb 343>:
  _1419 = OBJ_TYPE_REF(_1413;(struct Allocator)_1394->2) (_1394, _1393);

  <bb 344>:
  # _1414 = PHI <_1419(343), _1423(342)>
  # DEBUG new_p => _1414
  # DEBUG D#2 => _1394
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_p => _1414
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  # DEBUG this => D#2
  _1424 = _1393 - prephitmp_2756;
  _1425 = _1414 + _1424;
  memcpy (_1425, prephitmp_2738, prephitmp_2756);
  memcpy (_1414, prephitmp_2744, prephitmp_2753);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1415 = _1394->_vptr.Allocator;
  _1416 = MEM[(int (*__vtbl_ptr_type) () *)_1415 + 12B];
  PROF_1421 = [obj_type_ref] OBJ_TYPE_REF(_1416;(struct Allocator)_1394->3);
  if (PROF_1421 == deallocate)
    goto <bb 345>;
  else
    goto <bb 346>;

  <bb 345>:
  # DEBUG this => _1394
  # DEBUG p => D#174
  # DEBUG D.230754 => D#177
  operator delete [] (prephitmp_2744);
  goto <bb 350>;

  <bb 346>:
  OBJ_TYPE_REF(_1416;(struct Allocator)_1394->3) (_1394, prephitmp_2744, prephitmp_2735);
  goto <bb 350>;

  <bb 347>:
  _1410 = OBJ_TYPE_REF(_1404;(struct Allocator)_1394->4) (_1394, prephitmp_2744, prephitmp_2735, _1393, prephitmp_2756, prephitmp_2753);
  goto <bb 350>;

  <bb 348>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230768
  # DEBUG D#3 => &D.230768.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230768.D.58579
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  if (_1393 > prephitmp_2735)
    goto <bb 349>;
  else
    goto <bb 19>;

  <bb 349>:
  # DEBUG this => &D.230768.D.58579
  # DEBUG size => _1393
  _1439 = operator new [] (_1393);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230768.D.58579
  # DEBUG old_p => D#174
  # DEBUG old_size => D#177
  # DEBUG new_p => NULL
  # DEBUG new_size => _1393
  # DEBUG in_use_back => D#170
  # DEBUG in_use_front => D#171
  # DEBUG this => D#2
  _1435 = _1393 - prephitmp_2756;
  _1436 = _1439 + _1435;
  memcpy (_1436, prephitmp_2738, prephitmp_2756);
  memcpy (_1439, prephitmp_2744, prephitmp_2753);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230768.D.58579
  # DEBUG p => D#174
  # DEBUG D.230782 => D#177
  operator delete [] (prephitmp_2744);
  # DEBUG p => NULL
  # DEBUG D.230782 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 350>:
  # iftmp.8_1407 = PHI <_1414(345), _1439(349), _1410(347), _1414(346)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_1407;
  goto <bb 357>;

  <bb 351>:
  _1396 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1396
  # DEBUG size => _1393
  if (_1396 != 0B)
    goto <bb 352>;
  else
    goto <bb 355>;

  <bb 352>:
  _1440 = _1396->_vptr.Allocator;
  _1441 = MEM[(int (*__vtbl_ptr_type) () *)_1440 + 8B];
  PROF_1445 = [obj_type_ref] OBJ_TYPE_REF(_1441;(struct Allocator)_1396->2);
  if (PROF_1445 == allocate)
    goto <bb 353>;
  else
    goto <bb 354>;

  <bb 353>:
  # DEBUG this => _1396
  # DEBUG size => _1393
  _1449 = operator new [] (_1393);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 356>;

  <bb 354>:
  _1447 = OBJ_TYPE_REF(_1441;(struct Allocator)_1396->2) (_1396, _1393);
  goto <bb 356>;

  <bb 355>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1393
  _1443 = operator new [] (_1393);

  <bb 356>:
  # iftmp.11_1444 = PHI <_1449(353), _1443(355), _1447(354)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1444;

  <bb 357>:
  # prephitmp_2758 = PHI <iftmp.8_1407(350), iftmp.11_1444(356)>
  _1399 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _1400 = _1399 - prephitmp_2756;
  _1401 = prephitmp_2758 + _1400;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1401;
  _1402 = prephitmp_2758 + prephitmp_2753;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1402;
  # DEBUG this => D#178
  _1248 = (int) _1401;
  _1250 = (int) prephitmp_2758;
  _1251 = _1248 - _1250;
  _1252 = (unsigned int) _1251;
  _1253 = _1399 - _1252;
  # DEBUG this => NULL
  if (_1253 <= 2147483646)
    goto <bb 358>;
  else
    goto <bb 38>;

  <bb 358>:
  # _2090 = PHI <_1401(357), prephitmp_2738(333)>
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1230 = _2090 + 4294967295;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1230;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(signed char *)_2090 + 4294967295B] = prephitmp_2584;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _1231 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _1232 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _1233 = (int) _1232;
  _1234 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _1235 = (int) _1234;
  _1236 = _1233 - _1235;
  _1237 = (unsigned int) _1236;
  _1238 = _1231 - _1237;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#62 => {CLOBBER}
  # DEBUG litle_endian_element => D#62
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG off => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 4
  # DEBUG field => 4
  # DEBUG off => NULL
  # DEBUG fl$off => NULL
  # DEBUG fl$id => 4
  # DEBUG this => D#178
  # DEBUG t => &fl
  flatbuffers::vector_downward::ensure_space (prephitmp_2732, 8);
  _1216 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  MEM[(struct FieldLoc *)_1216] = _1238;
  MEM[(struct FieldLoc *)_1216 + 4B] = 4;
  _1217 = _1216 + 8;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1217;
  # DEBUG this => NULL
  # DEBUG t => NULL
  _1218 = _fbb_5(D)->num_field_loc;
  _1219 = _1218 + 1;
  _fbb_5(D)->num_field_loc = _1219;
  # DEBUG D#164 => &_fbb_5(D)->max_voffset_
  # DEBUG __a => D#164
  # DEBUG __b => &field
  _1221 = MEM[(const short unsigned int &)_fbb_5(D) + 36];
  _1222 = (int) _1221;
  if (_1222 <= 3)
    goto <bb 359>;
  else
    goto <bb 360>;

  <bb 359>:

  <bb 360>:
  # _1225 = PHI <4(359), _1221(358)>
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_5(D)->max_voffset_ = _1225;
  # DEBUG D#25 => {CLOBBER}
  # DEBUG fl$off => D#25
  # DEBUG D#26 => {CLOBBER}
  # DEBUG fl$id => D#26

  <bb 361>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG deprecated_builtin_code => NULL
  # DEBUG this => &builder_
  # DEBUG this => _fbb_5(D)
  # DEBUG start => _488
  _490 = _fbb_5(D)->nested;
  if (_490 != 0)
    goto <bb 363>;
  else
    goto <bb 362>;

  <bb 362>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1370, &__PRETTY_FUNCTION__, "nested");

  <bb 363>:
  # DEBUG this => _fbb_5(D)
  # DEBUG element => 0
  # DEBUG D#29 => _fbb_5(D)
  # DEBUG this => D#29
  # DEBUG t => 0
  # DEBUG t => NULL
  # DEBUG litle_endian_element => 0
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _1477 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_1477 <= 3)
    goto <bb 364>;
  else
    goto <bb 365>;

  <bb 364>:
  MEM[(size_t *)_fbb_5(D) + 40B] = 4;

  <bb 365>:
  # DEBUG elem_size => NULL
  # DEBUG D#190 => &_fbb_5(D)->buf_
  # DEBUG this => D#190
  _1479 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _1480 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _1481 = (int) _1480;
  _1482 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _1483 = (int) _1482;
  _1484 = _1481 - _1483;
  _1485 = (unsigned int) _1484;
  _1486 = _1479 - _1485;
  # DEBUG this => NULL
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => 4
  _1487 = -_1486;
  _1489 = _1487 & 3;
  # DEBUG buf_size => NULL
  # DEBUG scalar_size => NULL
  # DEBUG this => D#190
  # DEBUG zero_pad_bytes => _1489
  # DEBUG this => D#190
  # DEBUG len => _1489
  # DEBUG this => D#190
  # DEBUG len => _1489
  _1499 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  _1386 = _1482 <= _1499;
  _1178 = _1480 >= _1499;
  _1103 = _1178 & _1386;
  if (_1103 != 0)
    goto <bb 366>;
  else
    goto <bb 10>;

  <bb 366>:
  _1502 = (int) _1499;
  _1503 = _1481 - _1502;
  _1504 = (unsigned int) _1503;
  if (_1489 > _1504)
    goto <bb 367>;
  else
    goto <bb 391>;

  <bb 367>:
  # DEBUG this => D#190
  # DEBUG len => _1489
  # DEBUG len => _1489
  # DEBUG old_reserved => _1479
  # DEBUG this => D#190
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#190
  # DEBUG D#6 => D#190
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1523 = _1502 - _1483;
  _1524 = (long unsigned int) _1523;
  # DEBUG old_scratch_size => NULL
  if (_1479 != 0)
    goto <bb 368>;
  else
    goto <bb 369>;

  <bb 368>:
  iftmp.7_1525 = _1479 >> 1;
  goto <bb 370>;

  <bb 369>:
  iftmp.7_1526 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 370>:
  # iftmp.7_1527 = PHI <iftmp.7_1525(368), iftmp.7_1526(369)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230849
  _415 = MAX_EXPR <_1489, iftmp.7_1527>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1532 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2403 = _1479 + _1532;
  _2437 = _2403 + 4294967295;
  _1534 = _415 + _2437;
  _1535 = -_1532;
  _1536 = _1534 & _1535;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _1536;
  if (_1482 != 0B)
    goto <bb 371>;
  else
    goto <bb 384>;

  <bb 371>:
  _1537 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1537
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  if (_1537 != 0B)
    goto <bb 372>;
  else
    goto <bb 381>;

  <bb 372>:
  _1546 = _1537->_vptr.Allocator;
  _1547 = MEM[(int (*__vtbl_ptr_type) () *)_1546 + 16B];
  PROF_1551 = [obj_type_ref] OBJ_TYPE_REF(_1547;(struct Allocator)_1537->4);
  if (PROF_1551 == reallocate_downward)
    goto <bb 373>;
  else
    goto <bb 380>;

  <bb 373>:
  # DEBUG this => _1537
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  if (_1479 < _1536)
    goto <bb 374>;
  else
    goto <bb 19>;

  <bb 374>:
  _1556 = MEM[(int (*__vtbl_ptr_type) () *)_1546 + 8B];
  PROF_1560 = [obj_type_ref] OBJ_TYPE_REF(_1556;(struct Allocator)_1537->2);
  if (PROF_1560 == allocate)
    goto <bb 375>;
  else
    goto <bb 376>;

  <bb 375>:
  # DEBUG this => _1537
  # DEBUG size => _1536
  _1566 = operator new [] (_1536);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 377>;

  <bb 376>:
  _1562 = OBJ_TYPE_REF(_1556;(struct Allocator)_1537->2) (_1537, _1536);

  <bb 377>:
  # _1557 = PHI <_1562(376), _1566(375)>
  # DEBUG new_p => _1557
  # DEBUG D#2 => _1537
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_p => _1557
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  # DEBUG this => D#2
  _1567 = _1536 - _1486;
  _1568 = _1557 + _1567;
  memcpy (_1568, _1480, _1486);
  memcpy (_1557, _1482, _1524);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1558 = _1537->_vptr.Allocator;
  _1559 = MEM[(int (*__vtbl_ptr_type) () *)_1558 + 12B];
  PROF_1564 = [obj_type_ref] OBJ_TYPE_REF(_1559;(struct Allocator)_1537->3);
  if (PROF_1564 == deallocate)
    goto <bb 378>;
  else
    goto <bb 379>;

  <bb 378>:
  # DEBUG this => _1537
  # DEBUG p => _1482
  # DEBUG D.230883 => _1479
  operator delete [] (_1482);
  goto <bb 383>;

  <bb 379>:
  OBJ_TYPE_REF(_1559;(struct Allocator)_1537->3) (_1537, _1482, _1479);
  goto <bb 383>;

  <bb 380>:
  _1553 = OBJ_TYPE_REF(_1547;(struct Allocator)_1537->4) (_1537, _1482, _1479, _1536, _1486, _1524);
  goto <bb 383>;

  <bb 381>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230897
  # DEBUG D#3 => &D.230897.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230897.D.58579
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  if (_1479 < _1536)
    goto <bb 382>;
  else
    goto <bb 19>;

  <bb 382>:
  # DEBUG this => &D.230897.D.58579
  # DEBUG size => _1536
  _1582 = operator new [] (_1536);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230897.D.58579
  # DEBUG old_p => _1482
  # DEBUG old_size => _1479
  # DEBUG new_p => NULL
  # DEBUG new_size => _1536
  # DEBUG in_use_back => _1486
  # DEBUG in_use_front => _1524
  # DEBUG this => D#2
  _1578 = _1536 - _1486;
  _1579 = _1582 + _1578;
  memcpy (_1579, _1480, _1486);
  memcpy (_1582, _1482, _1524);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230897.D.58579
  # DEBUG p => _1482
  # DEBUG D.230911 => _1479
  operator delete [] (_1482);
  # DEBUG p => NULL
  # DEBUG D.230911 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 383>:
  # iftmp.8_1550 = PHI <_1557(378), _1582(382), _1553(380), _1557(379)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_1550;
  goto <bb 390>;

  <bb 384>:
  _1539 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1539
  # DEBUG size => _1536
  if (_1539 != 0B)
    goto <bb 385>;
  else
    goto <bb 388>;

  <bb 385>:
  _1583 = _1539->_vptr.Allocator;
  _1584 = MEM[(int (*__vtbl_ptr_type) () *)_1583 + 8B];
  PROF_1588 = [obj_type_ref] OBJ_TYPE_REF(_1584;(struct Allocator)_1539->2);
  if (PROF_1588 == allocate)
    goto <bb 386>;
  else
    goto <bb 387>;

  <bb 386>:
  # DEBUG this => _1539
  # DEBUG size => _1536
  _1592 = operator new [] (_1536);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 389>;

  <bb 387>:
  _1590 = OBJ_TYPE_REF(_1584;(struct Allocator)_1539->2) (_1539, _1536);
  goto <bb 389>;

  <bb 388>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1536
  _1586 = operator new [] (_1536);

  <bb 389>:
  # iftmp.11_1587 = PHI <_1592(386), _1586(388), _1590(387)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1587;

  <bb 390>:
  # prephitmp_2866 = PHI <iftmp.8_1550(383), iftmp.11_1587(389)>
  _1542 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _1543 = _1542 - _1486;
  _1544 = prephitmp_2866 + _1543;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1544;
  _1545 = prephitmp_2866 + _1524;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1545;
  _2772 = (int) _1544;
  _2775 = (int) prephitmp_2866;
  _2777 = _2772 - _2775;
  _2779 = (unsigned int) _2777;
  _2781 = _1542 - _2779;

  <bb 391>:
  # prephitmp_2771 = PHI <_1480(366), _1544(390)>
  # prephitmp_2782 = PHI <_1486(366), _2781(390)>
  # DEBUG this => D#190
  # DEBUG this => NULL
  if (prephitmp_2782 <= 2147483646)
    goto <bb 392>;
  else
    goto <bb 38>;

  <bb 392>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1492 = -_1489;
  _1493 = prephitmp_2771 + _1492;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1493;
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG i => 0
  # DEBUG i => 0
  if (_1489 == 0)
    goto <bb 397>;
  else
    goto <bb 393>;

  <bb 393>:

  <bb 394>:
  # i_566 = PHI <0(393), i_1497(395)>
  # prephitmp_2785 = PHI <_1493(393), pretmp_2784(395)>
  # DEBUG i => i_566
  _1496 = prephitmp_2785 + i_566;
  *_1496 = 0;
  i_1497 = i_566 + 1;
  # DEBUG i => i_1497
  # DEBUG i => i_1497
  if (_1489 <= i_1497)
    goto <bb 396>;
  else
    goto <bb 395>;

  <bb 395>:
  pretmp_2784 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;
  goto <bb 394>;

  <bb 396>:
  pretmp_2787 = MEM[(struct vector_downward *)_fbb_5(D)].cur_;

  <bb 397>:
  # prephitmp_2788 = PHI <pretmp_2787(396), _1493(392)>
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  # DEBUG i => NULL
  # DEBUG this => NULL
  # DEBUG elem_size => NULL
  # DEBUG this => D#190
  # DEBUG little_endian_t => &litle_endian_element
  # DEBUG this => D#190
  # DEBUG len => 4
  # DEBUG this => D#190
  # DEBUG len => 4
  _1463 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  if (_1463 <= prephitmp_2788)
    goto <bb 398>;
  else
    goto <bb 45>;

  <bb 398>:
  _1464 = MEM[(struct vector_downward *)_fbb_5(D)].buf_;
  if (_1463 >= _1464)
    goto <bb 399>;
  else
    goto <bb 45>;

  <bb 399>:
  _1465 = (int) prephitmp_2788;
  _1466 = (int) _1463;
  _1467 = _1465 - _1466;
  _1468 = (unsigned int) _1467;
  if (_1468 <= 3)
    goto <bb 401>;
  else
    goto <bb 400>;

  <bb 400>:
  pretmp_2809 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  goto <bb 425>;

  <bb 401>:
  # DEBUG this => D#190
  # DEBUG len => 4
  # DEBUG len => 4
  old_reserved_1593 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  # DEBUG old_reserved => old_reserved_1593
  # DEBUG this => D#190
  _1597 = (int) _1464;
  _1598 = _1465 - _1597;
  _1599 = (unsigned int) _1598;
  _1600 = old_reserved_1593 - _1599;
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#190
  # DEBUG D#6 => D#190
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1603 = _1466 - _1597;
  _1604 = (long unsigned int) _1603;
  # DEBUG old_scratch_size => NULL
  if (old_reserved_1593 != 0)
    goto <bb 402>;
  else
    goto <bb 403>;

  <bb 402>:
  iftmp.7_1605 = old_reserved_1593 >> 1;
  goto <bb 404>;

  <bb 403>:
  iftmp.7_1606 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 404>:
  # iftmp.7_1607 = PHI <iftmp.7_1605(402), iftmp.7_1606(403)>
  # DEBUG __a => &len
  # DEBUG __b => &D.230946
  _661 = MAX_EXPR <iftmp.7_1607, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1612 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2353 = old_reserved_1593 + _1612;
  _2260 = _2353 + 4294967295;
  _1614 = _661 + _2260;
  _1615 = -_1612;
  _1616 = _1614 & _1615;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _1616;
  if (_1464 != 0B)
    goto <bb 405>;
  else
    goto <bb 418>;

  <bb 405>:
  _1617 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1617
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  if (_1617 != 0B)
    goto <bb 406>;
  else
    goto <bb 415>;

  <bb 406>:
  _1626 = _1617->_vptr.Allocator;
  _1627 = MEM[(int (*__vtbl_ptr_type) () *)_1626 + 16B];
  PROF_1631 = [obj_type_ref] OBJ_TYPE_REF(_1627;(struct Allocator)_1617->4);
  if (PROF_1631 == reallocate_downward)
    goto <bb 407>;
  else
    goto <bb 414>;

  <bb 407>:
  # DEBUG this => _1617
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  if (old_reserved_1593 < _1616)
    goto <bb 408>;
  else
    goto <bb 19>;

  <bb 408>:
  _1636 = MEM[(int (*__vtbl_ptr_type) () *)_1626 + 8B];
  PROF_1640 = [obj_type_ref] OBJ_TYPE_REF(_1636;(struct Allocator)_1617->2);
  if (PROF_1640 == allocate)
    goto <bb 409>;
  else
    goto <bb 410>;

  <bb 409>:
  # DEBUG this => _1617
  # DEBUG size => _1616
  _1646 = operator new [] (_1616);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 411>;

  <bb 410>:
  _1642 = OBJ_TYPE_REF(_1636;(struct Allocator)_1617->2) (_1617, _1616);

  <bb 411>:
  # _1637 = PHI <_1642(410), _1646(409)>
  # DEBUG new_p => _1637
  # DEBUG D#2 => _1617
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_p => _1637
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  # DEBUG this => D#2
  _1647 = _1616 - _1600;
  _1648 = _1637 + _1647;
  memcpy (_1648, prephitmp_2788, _1600);
  memcpy (_1637, _1464, _1604);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1638 = _1617->_vptr.Allocator;
  _1639 = MEM[(int (*__vtbl_ptr_type) () *)_1638 + 12B];
  PROF_1644 = [obj_type_ref] OBJ_TYPE_REF(_1639;(struct Allocator)_1617->3);
  if (PROF_1644 == deallocate)
    goto <bb 412>;
  else
    goto <bb 413>;

  <bb 412>:
  # DEBUG this => _1617
  # DEBUG p => _1464
  # DEBUG D.230980 => old_reserved_1593
  operator delete [] (_1464);
  goto <bb 417>;

  <bb 413>:
  OBJ_TYPE_REF(_1639;(struct Allocator)_1617->3) (_1617, _1464, old_reserved_1593);
  goto <bb 417>;

  <bb 414>:
  _1633 = OBJ_TYPE_REF(_1627;(struct Allocator)_1617->4) (_1617, _1464, old_reserved_1593, _1616, _1600, _1604);
  goto <bb 417>;

  <bb 415>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.230994
  # DEBUG D#3 => &D.230994.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.230994.D.58579
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  if (old_reserved_1593 < _1616)
    goto <bb 416>;
  else
    goto <bb 19>;

  <bb 416>:
  # DEBUG this => &D.230994.D.58579
  # DEBUG size => _1616
  _1662 = operator new [] (_1616);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.230994.D.58579
  # DEBUG old_p => _1464
  # DEBUG old_size => old_reserved_1593
  # DEBUG new_p => NULL
  # DEBUG new_size => _1616
  # DEBUG in_use_back => _1600
  # DEBUG in_use_front => _1604
  # DEBUG this => D#2
  _1658 = _1616 - _1600;
  _1659 = _1662 + _1658;
  memcpy (_1659, prephitmp_2788, _1600);
  memcpy (_1662, _1464, _1604);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.230994.D.58579
  # DEBUG p => _1464
  # DEBUG D.231008 => old_reserved_1593
  operator delete [] (_1464);
  # DEBUG p => NULL
  # DEBUG D.231008 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 417>:
  # iftmp.8_1630 = PHI <_1637(412), _1662(416), _1633(414), _1637(413)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_1630;
  goto <bb 424>;

  <bb 418>:
  _1619 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1619
  # DEBUG size => _1616
  if (_1619 != 0B)
    goto <bb 419>;
  else
    goto <bb 422>;

  <bb 419>:
  _1663 = _1619->_vptr.Allocator;
  _1664 = MEM[(int (*__vtbl_ptr_type) () *)_1663 + 8B];
  PROF_1668 = [obj_type_ref] OBJ_TYPE_REF(_1664;(struct Allocator)_1619->2);
  if (PROF_1668 == allocate)
    goto <bb 420>;
  else
    goto <bb 421>;

  <bb 420>:
  # DEBUG this => _1619
  # DEBUG size => _1616
  _1672 = operator new [] (_1616);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 423>;

  <bb 421>:
  _1670 = OBJ_TYPE_REF(_1664;(struct Allocator)_1619->2) (_1619, _1616);
  goto <bb 423>;

  <bb 422>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1616
  _1666 = operator new [] (_1616);

  <bb 423>:
  # iftmp.11_1667 = PHI <_1672(420), _1666(422), _1670(421)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1667;

  <bb 424>:
  # prephitmp_2864 = PHI <iftmp.8_1630(417), iftmp.11_1667(423)>
  _1622 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _1623 = _1622 - _1600;
  _1624 = prephitmp_2864 + _1623;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1624;
  _1625 = prephitmp_2864 + _1604;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1625;
  _2812 = (int) _1624;

  <bb 425>:
  # prephitmp_2810 = PHI <pretmp_2809(400), _1622(424)>
  # prephitmp_2811 = PHI <prephitmp_2788(400), _1624(424)>
  # prephitmp_2813 = PHI <_1465(400), _2812(424)>
  # prephitmp_2814 = PHI <_1464(400), prephitmp_2864(424)>
  # prephitmp_2827 = PHI <_1463(400), _1625(424)>
  # DEBUG this => D#190
  # DEBUG D#169 => MEM[(const struct vector_downward *)_fbb_5(D)].reserved_
  # DEBUG D#168 => MEM[(const struct vector_downward *)_fbb_5(D)].buf_
  _1473 = (int) prephitmp_2814;
  _1474 = prephitmp_2813 - _1473;
  _1475 = (unsigned int) _1474;
  _1476 = prephitmp_2810 - _1475;
  # DEBUG this => NULL
  if (_1476 <= 2147483646)
    goto <bb 426>;
  else
    goto <bb 38>;

  <bb 426>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1454 = prephitmp_2811 + 4294967292;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1454;
  # DEBUG this => NULL
  # DEBUG len => NULL
  MEM[(long int *)prephitmp_2811 + 4294967292B] = 0;
  # DEBUG this => NULL
  # DEBUG little_endian_t => NULL
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _1456 = (int) _1454;
  _1459 = _1456 - _1473;
  _1460 = (unsigned int) _1459;
  _1461 = prephitmp_2810 - _1460;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#30 => {CLOBBER}
  # DEBUG litle_endian_element => D#30
  # DEBUG this => NULL
  # DEBUG element => NULL
  # DEBUG vtableoffsetloc => NULL
  _492 = _fbb_5(D)->max_voffset_;
  _493 = _492 + 2;
  # DEBUG field_id => 0
  # DEBUG fixed_fields => 2
  # DEBUG field_id => NULL
  # DEBUG __a => &D.229884
  # DEBUG __b => &D.229883
  _741 = MAX_EXPR <_493, 4>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _fbb_5(D)->max_voffset_ = _741;
  _498 = (unsigned int) _741;
  # DEBUG this => D#190
  # DEBUG zero_pad_bytes => _498
  # DEBUG this => D#190
  # DEBUG len => _498
  # DEBUG this => D#190
  # DEBUG len => _498
  _816 = prephitmp_2814 <= prephitmp_2827;
  _977 = _1454 >= prephitmp_2827;
  _897 = _816 & _977;
  if (_897 != 0)
    goto <bb 427>;
  else
    goto <bb 10>;

  <bb 427>:
  _1681 = (int) prephitmp_2827;
  _1682 = _1456 - _1681;
  _1683 = (unsigned int) _1682;
  if (_498 > _1683)
    goto <bb 428>;
  else
    goto <bb 452>;

  <bb 428>:
  # DEBUG this => D#190
  # DEBUG len => _498
  # DEBUG len => _498
  # DEBUG old_reserved => D#169
  # DEBUG this => D#190
  # DEBUG this => NULL
  # DEBUG old_size => NULL
  # DEBUG D#6 => D#190
  # DEBUG D#6 => D#190
  # DEBUG this => D#6
  # DEBUG this => D#6
  _1702 = _1681 - _1473;
  _1703 = (long unsigned int) _1702;
  # DEBUG old_scratch_size => NULL
  if (prephitmp_2810 != 0)
    goto <bb 429>;
  else
    goto <bb 430>;

  <bb 429>:
  iftmp.7_1704 = prephitmp_2810 >> 1;
  goto <bb 431>;

  <bb 430>:
  iftmp.7_1705 = MEM[(struct vector_downward *)_fbb_5(D)].initial_size_;

  <bb 431>:
  # iftmp.7_1706 = PHI <iftmp.7_1704(429), iftmp.7_1705(430)>
  # DEBUG __a => &len
  # DEBUG __b => &D.231052
  _580 = MAX_EXPR <_498, iftmp.7_1706>;
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  _1711 = MEM[(struct vector_downward *)_fbb_5(D)].buffer_minalign_;
  _2305 = _1711 + prephitmp_2810;
  _2352 = _2305 + 4294967295;
  _1713 = _580 + _2352;
  _1714 = -_1711;
  _1715 = _1713 & _1714;
  MEM[(struct vector_downward *)_fbb_5(D)].reserved_ = _1715;
  if (prephitmp_2814 != 0B)
    goto <bb 432>;
  else
    goto <bb 445>;

  <bb 432>:
  _1716 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1716
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  if (_1716 != 0B)
    goto <bb 433>;
  else
    goto <bb 442>;

  <bb 433>:
  _1725 = _1716->_vptr.Allocator;
  _1726 = MEM[(int (*__vtbl_ptr_type) () *)_1725 + 16B];
  PROF_1730 = [obj_type_ref] OBJ_TYPE_REF(_1726;(struct Allocator)_1716->4);
  if (PROF_1730 == reallocate_downward)
    goto <bb 434>;
  else
    goto <bb 441>;

  <bb 434>:
  # DEBUG this => _1716
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  if (_1715 > prephitmp_2810)
    goto <bb 435>;
  else
    goto <bb 19>;

  <bb 435>:
  _1735 = MEM[(int (*__vtbl_ptr_type) () *)_1725 + 8B];
  PROF_1739 = [obj_type_ref] OBJ_TYPE_REF(_1735;(struct Allocator)_1716->2);
  if (PROF_1739 == allocate)
    goto <bb 436>;
  else
    goto <bb 437>;

  <bb 436>:
  # DEBUG this => _1716
  # DEBUG size => _1715
  _1745 = operator new [] (_1715);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 438>;

  <bb 437>:
  _1741 = OBJ_TYPE_REF(_1735;(struct Allocator)_1716->2) (_1716, _1715);

  <bb 438>:
  # _1736 = PHI <_1741(437), _1745(436)>
  # DEBUG new_p => _1736
  # DEBUG D#2 => _1716
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_p => _1736
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  # DEBUG this => D#2
  _1746 = _1715 - _1461;
  _1747 = _1736 + _1746;
  memcpy (_1747, _1454, _1461);
  memcpy (_1736, prephitmp_2814, _1703);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  _1737 = _1716->_vptr.Allocator;
  _1738 = MEM[(int (*__vtbl_ptr_type) () *)_1737 + 12B];
  PROF_1743 = [obj_type_ref] OBJ_TYPE_REF(_1738;(struct Allocator)_1716->3);
  if (PROF_1743 == deallocate)
    goto <bb 439>;
  else
    goto <bb 440>;

  <bb 439>:
  # DEBUG this => _1716
  # DEBUG p => D#168
  # DEBUG D.231086 => D#169
  operator delete [] (prephitmp_2814);
  goto <bb 444>;

  <bb 440>:
  OBJ_TYPE_REF(_1738;(struct Allocator)_1716->3) (_1716, prephitmp_2814, prephitmp_2810);
  goto <bb 444>;

  <bb 441>:
  _1732 = OBJ_TYPE_REF(_1726;(struct Allocator)_1716->4) (_1716, prephitmp_2814, prephitmp_2810, _1715, _1461, _1703);
  goto <bb 444>;

  <bb 442>:
  # DEBUG D#4 => 0B
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  # DEBUG D#5 => D#4
  # DEBUG allocator => D#5
  # DEBUG this => &D.231100
  # DEBUG D#3 => &D.231100.D.58579
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.231100.D.58579
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  if (_1715 > prephitmp_2810)
    goto <bb 443>;
  else
    goto <bb 19>;

  <bb 443>:
  # DEBUG this => &D.231100.D.58579
  # DEBUG size => _1715
  _1761 = operator new [] (_1715);
  # DEBUG size => NULL
  # DEBUG new_p => NULL
  # DEBUG D#2 => &D.231100.D.58579
  # DEBUG old_p => D#168
  # DEBUG old_size => D#169
  # DEBUG new_p => NULL
  # DEBUG new_size => _1715
  # DEBUG in_use_back => _1461
  # DEBUG in_use_front => _1703
  # DEBUG this => D#2
  _1757 = _1715 - _1461;
  _1758 = _1761 + _1757;
  memcpy (_1758, _1454, _1461);
  memcpy (_1761, prephitmp_2814, _1703);
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_p => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG this => &D.231100.D.58579
  # DEBUG p => D#168
  # DEBUG D.231114 => D#169
  operator delete [] (prephitmp_2814);
  # DEBUG p => NULL
  # DEBUG D.231114 => NULL
  # DEBUG this => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  # DEBUG allocator => NULL

  <bb 444>:
  # iftmp.8_1729 = PHI <_1736(439), _1761(443), _1732(441), _1736(440)>
  # DEBUG allocator => NULL
  # DEBUG old_p => NULL
  # DEBUG old_size => NULL
  # DEBUG new_size => NULL
  # DEBUG in_use_back => NULL
  # DEBUG in_use_front => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.8_1729;
  goto <bb 451>;

  <bb 445>:
  _1718 = MEM[(struct vector_downward *)_fbb_5(D)].allocator_;
  # DEBUG allocator => _1718
  # DEBUG size => _1715
  if (_1718 != 0B)
    goto <bb 446>;
  else
    goto <bb 449>;

  <bb 446>:
  _1762 = _1718->_vptr.Allocator;
  _1763 = MEM[(int (*__vtbl_ptr_type) () *)_1762 + 8B];
  PROF_1767 = [obj_type_ref] OBJ_TYPE_REF(_1763;(struct Allocator)_1718->2);
  if (PROF_1767 == allocate)
    goto <bb 447>;
  else
    goto <bb 448>;

  <bb 447>:
  # DEBUG this => _1718
  # DEBUG size => _1715
  _1771 = operator new [] (_1715);
  # DEBUG this => NULL
  # DEBUG size => NULL
  goto <bb 450>;

  <bb 448>:
  _1769 = OBJ_TYPE_REF(_1763;(struct Allocator)_1718->2) (_1718, _1715);
  goto <bb 450>;

  <bb 449>:
  # DEBUG D.226306 => 0B
  # DEBUG this => NULL
  # DEBUG this => D#3
  # DEBUG this => NULL
  # DEBUG D.226306 => &MEM[(void *)&_ZTVN11flatbuffers16DefaultAllocatorE + 8B]
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG size => _1715
  _1765 = operator new [] (_1715);

  <bb 450>:
  # iftmp.11_1766 = PHI <_1771(447), _1765(449), _1769(448)>
  # DEBUG allocator => NULL
  # DEBUG size => NULL
  MEM[(struct vector_downward *)_fbb_5(D)].buf_ = iftmp.11_1766;

  <bb 451>:
  # prephitmp_2862 = PHI <iftmp.8_1729(444), iftmp.11_1766(450)>
  _1721 = MEM[(struct vector_downward *)_fbb_5(D)].reserved_;
  _1722 = _1721 - _1461;
  _1723 = prephitmp_2862 + _1722;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1723;
  _1724 = prephitmp_2862 + _1703;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _1724;
  _2835 = (int) _1723;
  _2838 = (int) prephitmp_2862;
  _2840 = _2835 - _2838;
  _2842 = (unsigned int) _2840;
  _2844 = _1721 - _2842;

  <bb 452>:
  # prephitmp_2834 = PHI <_1454(427), _1723(451)>
  # prephitmp_2845 = PHI <_1461(427), _2844(451)>
  # DEBUG this => D#190
  # DEBUG this => NULL
  if (prephitmp_2845 <= 2147483646)
    goto <bb 453>;
  else
    goto <bb 38>;

  <bb 453>:
  # DEBUG this => NULL
  # DEBUG len => NULL
  # DEBUG space => NULL
  _1675 = -_498;
  _1676 = prephitmp_2834 + _1675;
  MEM[(struct vector_downward *)_fbb_5(D)].cur_ = _1676;
  # DEBUG this => NULL
  # DEBUG len => NULL
  memset (_1676, 0, _498);
  # DEBUG this => NULL
  # DEBUG zero_pad_bytes => NULL
  table_object_size_499 = _1461 - _488;
  # DEBUG table_object_size => table_object_size_499
  if (table_object_size_499 <= 65535)
    goto <bb 455>;
  else
    goto <bb 454>;

  <bb 454>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1385, &__PRETTY_FUNCTION__, "table_object_size < 0x10000");

  <bb 455>:
  # DEBUG D#35 => &_fbb_5(D)->buf_
  _500 = MEM[(uint8_t * *)_fbb_5(D) + 24B];
  # DEBUG D#7 => D#35
  # DEBUG this => D#7
  if (_500 != 0B)
    goto <bb 457>;
  else
    goto <bb 456>;

  <bb 456>:
  # DEBUG D#8 => 0B
  flatbuffers::vector_downward::_ZNK11flatbuffers15vector_downward4dataEv.isra.3.part.4 ();

  <bb 457>:
  _501 = (short unsigned int) table_object_size_499;
  # DEBUG p => _500 + 2
  # DEBUG t => _501
  # DEBUG t => _501
  # DEBUG t => NULL
  MEM[(short unsigned int *)_500 + 2B] = _501;
  # DEBUG p => NULL
  # DEBUG t => NULL
  # DEBUG D#36 => &_fbb_5(D)->buf_
  # DEBUG D#7 => D#36
  # DEBUG this => D#7
  _502 = _fbb_5(D)->max_voffset_;
  # DEBUG p => _500
  # DEBUG t => _502
  # DEBUG t => _502
  # DEBUG t => NULL
  MEM[(short unsigned int *)_500] = _502;
  # DEBUG p => NULL
  # DEBUG t => NULL
  # DEBUG D#37 => &_fbb_5(D)->buf_
  _503 = MEM[(uint8_t * *)_fbb_5(D) + 28B];
  # DEBUG D#11 => D#37
  # DEBUG this => D#11
  if (_503 != 0B)
    goto <bb 459>;
  else
    goto <bb 458>;

  <bb 458>:
  # DEBUG D#12 => 0B
  # DEBUG D#13 => D#12
  # DEBUG ISRA.51 => D#13
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 956, &__PRETTY_FUNCTION__, "scratch_");

  <bb 459>:
  _504 = _fbb_5(D)->num_field_loc;
  _505 = _504 * 8;
  _506 = -_505;
  it_507 = _503 + _506;
  # DEBUG it => it_507
  # DEBUG it => it_507
  # DEBUG D#40 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  if (_503 > it_507)
    goto <bb 461>;
  else
    goto <bb 460>;

  <bb 460>:
  # DEBUG this => _fbb_5(D)
  # DEBUG D#24 => &_fbb_5(D)->buf_
  # DEBUG D#16 => D#24
  # DEBUG bytes_to_remove => _505
  # DEBUG this => D#16
  MEM[(uint8_t * *)_fbb_5(D) + 28B] = it_507;
  # DEBUG bytes_to_remove => NULL
  _fbb_5(D)->num_field_loc = 0;
  _fbb_5(D)->max_voffset_ = 0;
  # DEBUG this => NULL
  # DEBUG D#41 => &_fbb_5(D)->buf_
  # DEBUG D#7 => D#41
  # DEBUG this => D#7
  # DEBUG vt1 => _500
  # DEBUG p => _500
  # DEBUG D#189 => MEM[(const short unsigned int *)_500]
  # DEBUG t => D#189
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vt1_size => D#189
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  _519 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  _520 = (int) _500;
  _521 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _522 = (int) _521;
  _523 = _520 - _522;
  _524 = (unsigned int) _523;
  _525 = _519 - _524;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG vt_use => _525
  _526 = _fbb_5(D)->dedup_vtables_;
  if (_526 != 0)
    goto <bb 467>;
  else
    goto <bb 477>;

  <bb 461>:
  # DEBUG field_location => it_507
  _1387 = (short unsigned int) _1461;
  _1104 = MEM[(struct FieldLoc *)it_507].off;
  _978 = (short unsigned int) _1104;
  pos_898 = _1387 - _978;
  # DEBUG pos => pos_898
  # DEBUG D#38 => &_fbb_5(D)->buf_
  # DEBUG D#7 => D#38
  # DEBUG this => D#7
  _742 = MEM[(struct FieldLoc *)it_507].id;
  _662 = (sizetype) _742;
  _416 = _500 + _662;
  # DEBUG p => _416
  _336 = MEM[(const short unsigned int *)_416];
  # DEBUG t => _336
  # DEBUG t => NULL
  # DEBUG p => NULL
  if (_336 == 0)
    goto <bb 465>;
  else
    goto <bb 462>;

  <bb 462>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 1395, &__PRETTY_FUNCTION__, "!ReadScalar<voffset_t>(buf_.data() + field_location->id)");

  <bb 463>:
  # DEBUG field_location => it_517
  _510 = MEM[(struct FieldLoc *)it_517].off;
  _511 = (short unsigned int) _510;
  pos_512 = _1387 - _511;
  # DEBUG pos => pos_512
  # DEBUG D#38 => &_fbb_5(D)->buf_
  # DEBUG D#7 => D#38
  # DEBUG this => D#7
  _513 = MEM[(struct FieldLoc *)it_517].id;
  _514 = (sizetype) _513;
  _515 = _500 + _514;
  # DEBUG p => _515
  _516 = MEM[(const short unsigned int *)_515];
  # DEBUG t => _516
  # DEBUG t => NULL
  # DEBUG p => NULL
  if (_516 == 0)
    goto <bb 464>;
  else
    goto <bb 462>;

  <bb 464>:
  goto <bb 466>;

  <bb 465>:

  <bb 466>:
  # it_494 = PHI <it_507(465), it_517(464)>
  # pos_2451 = PHI <pos_898(465), pos_512(464)>
  # _2014 = PHI <_416(465), _515(464)>
  # DEBUG it => it_494
  # DEBUG D#40 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  # DEBUG field_location => it_494
  # DEBUG pos => pos_2451
  # DEBUG D#38 => &_fbb_5(D)->buf_
  # DEBUG this => D#7
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG D#39 => &_fbb_5(D)->buf_
  # DEBUG D#7 => D#39
  # DEBUG this => D#7
  # DEBUG p => _2014
  # DEBUG t => pos_2451
  # DEBUG t => pos_2451
  # DEBUG t => NULL
  MEM[(short unsigned int *)_2014] = pos_2451;
  # DEBUG p => NULL
  # DEBUG t => NULL
  it_517 = it_494 + 8;
  # DEBUG it => it_517
  # DEBUG it => it_517
  # DEBUG D#40 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#40
  # DEBUG this => D#11
  if (_503 > it_517)
    goto <bb 463>;
  else
    goto <bb 460>;

  <bb 467>:
  # DEBUG D#42 => &_fbb_5(D)->buf_
  # DEBUG D#10 => D#42
  # DEBUG this => D#10
  if (_521 != 0B)
    goto <bb 468>;
  else
    goto <bb 469>;

  <bb 468>:
  # DEBUG it => _521
  # DEBUG D#43 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  if (it_507 != 0B)
    goto <bb 470>;
  else
    goto <bb 458>;

  <bb 469>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/src/tensorflow_lite/src/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 951, &__PRETTY_FUNCTION__, "buf_");

  <bb 470>:
  if (it_507 > _521)
    goto <bb 471>;
  else
    goto <bb 477>;

  <bb 471>:
  _518 = MEM[(const short unsigned int *)_500];

  <bb 472>:
  # it_2493 = PHI <_521(471), it_536(476)>
  # DEBUG it => it_2493
  # DEBUG D#43 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  # DEBUG vt_offset_ptr => it_2493
  # DEBUG D#44 => &_fbb_5(D)->buf_
  vt_use.24_528 = MEM[(long unsigned int *)it_2493];
  # DEBUG D#14 => D#44
  # DEBUG D#14 => D#44
  # DEBUG offset => vt_use.24_528
  # DEBUG this => D#14
  # DEBUG this => D#14
  _529 = _519 - vt_use.24_528;
  _530 = _521 + _529;
  # DEBUG offset => NULL
  # DEBUG vt2 => NULL
  # DEBUG p => NULL
  _531 = MEM[(const short unsigned int *)_530];
  # DEBUG t => _531
  # DEBUG t => NULL
  # DEBUG p => NULL
  # DEBUG vt2_size => _531
  if (_518 != _531)
    goto <bb 475>;
  else
    goto <bb 473>;

  <bb 473>:
  _532 = (unsigned int) _518;
  _533 = memcmp (_530, _500, _532);
  if (_533 != 0)
    goto <bb 475>;
  else
    goto <bb 474>;

  <bb 474>:
  # vt_use.24_2983 = PHI <vt_use.24_528(473)>
  # DEBUG vt_use => vt_use.24_2983
  # DEBUG D#45 => &_fbb_5(D)->buf_
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  _534 = _525 - _1461;
  # DEBUG D#15 => D#45
  # DEBUG bytes_to_remove => _534
  # DEBUG this => D#15
  _535 = _500 + _534;
  MEM[(uint8_t * *)_fbb_5(D) + 24B] = _535;
  _2847 = (int) _535;
  _2849 = _2847 - _522;
  _2851 = (unsigned int) _2849;
  _2853 = _519 - _2851;
  goto <bb 477>;

  <bb 475>:
  it_536 = it_2493 + 4;
  # DEBUG it => it_536
  # DEBUG it => it_536
  # DEBUG D#43 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  # DEBUG it => it_536
  # DEBUG D#43 => &_fbb_5(D)->buf_
  # DEBUG D#11 => D#43
  # DEBUG this => D#11
  if (it_507 > it_536)
    goto <bb 476>;
  else
    goto <bb 477>;

  <bb 476>:
  goto <bb 472>;

  <bb 477>:
  # vt_use_542 = PHI <_525(460), _525(475), vt_use.24_2983(474), _525(470)>
  # prephitmp_2854 = PHI <_525(460), _525(475), _2853(474), _525(470)>
  # DEBUG vt_use => vt_use_542
  # DEBUG this => _fbb_5(D)
  # DEBUG D#17 => &MEM[(const struct FlatBufferBuilder *)_fbb_5(D)].buf_
  # DEBUG this => D#17
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (vt_use_542 == prephitmp_2854)
    goto <bb 478>;
  else
    goto <bb 479>;

  <bb 478>:
  # DEBUG this => D#190
  # DEBUG t => &vt_use
  _1478 = &_fbb_5(D)->buf_;
  flatbuffers::vector_downward::ensure_space (_1478, 4);
  _543 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  MEM[(long unsigned int *)_543] = prephitmp_2854;
  _544 = _543 + 4;
  MEM[(struct vector_downward *)_fbb_5(D)].scratch_ = _544;
  pretmp_2855 = MEM[(unsigned int *)_fbb_5(D) + 16B];
  pretmp_2857 = MEM[(uint8_t * *)_fbb_5(D) + 20B];

  <bb 479>:
  # prephitmp_2856 = PHI <_519(477), pretmp_2855(478)>
  # prephitmp_2858 = PHI <_521(477), pretmp_2857(478)>
  # DEBUG D#46 => &_fbb_5(D)->buf_
  # DEBUG D#14 => D#46
  # DEBUG D#14 => D#46
  # DEBUG offset => NULL
  # DEBUG this => D#14
  # DEBUG this => D#14
  _547 = prephitmp_2856 - _1461;
  _548 = prephitmp_2858 + _547;
  # DEBUG offset => NULL
  vt_use.27_549 = (long int) vt_use_542;
  vtableoffsetloc.28_550 = (long int) _1461;
  _551 = vt_use.27_549 - vtableoffsetloc.28_550;
  # DEBUG p => NULL
  # DEBUG t => _551
  # DEBUG t => _551
  # DEBUG t => NULL
  MEM[(long int *)_548] = _551;
  # DEBUG p => NULL
  # DEBUG t => NULL
  _fbb_5(D)->nested = 0;
  # DEBUG D#33 => {CLOBBER}
  # DEBUG vt_use => D#33
  # DEBUG this => NULL
  # DEBUG start => NULL
  # DEBUG it => NULL
  # DEBUG pos => NULL
  # DEBUG it => NULL
  # DEBUG vt_use => NULL
  # DEBUG table_object_size => NULL
  # DEBUG end => NULL
  # DEBUG this => &o
  # DEBUG _o => NULL
  # DEBUG D#47 => {CLOBBER}
  # DEBUG o$o => D#47
  # DEBUG o$o => NULL
  # DEBUG this => NULL
  # DEBUG _o => NULL
  # DEBUG D#48 => {CLOBBER}
  # DEBUG o$o => D#48
  # DEBUG this => NULL
  MEM[(struct Offset *)&D.226140] = _1461;
  # DEBUG _fbb => NULL
  # DEBUG deprecated_builtin_code => NULL
  # DEBUG version => NULL
  # DEBUG builtin_code => NULL
  # DEBUG D#166 => {CLOBBER}
  # DEBUG custom_code__$o => D#166
  return D.226140;

  <bb 480>:
  # DEBUG D#53 => 0
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 10
  # DEBUG e => _7
  # DEBUG D#54 => D#53
  # DEBUG def => D#54
  # DEBUG this => _fbb_5(D)
  # DEBUG element => _7
  # DEBUG D#29 => _fbb_5(D)
  # DEBUG this => D#29
  # DEBUG t => _7
  # DEBUG t => NULL
  # DEBUG litle_endian_element => _7
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _609 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_609 <= 3)
    goto <bb 146>;
  else
    goto <bb 147>;

  <bb 481>:
  pretmp_2588 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  pretmp_2591 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _2594 = (int) pretmp_2591;
  pretmp_2597 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _2600 = (int) pretmp_2597;
  _2603 = _2594 - _2600;
  _2606 = (unsigned int) _2603;
  _2609 = pretmp_2588 - _2606;

  <bb 482>:
  # prephitmp_2586 = PHI <_610(212), _610(481), pretmp_2585(487)>
  # prephitmp_2589 = PHI <pretmp_2587(212), pretmp_2588(481), _481(487)>
  # prephitmp_2592 = PHI <pretmp_2590(212), pretmp_2591(481), _482(487)>
  # prephitmp_2595 = PHI <_2593(212), _2594(481), _483(487)>
  # prephitmp_2598 = PHI <pretmp_2596(212), pretmp_2597(481), _484(487)>
  # prephitmp_2601 = PHI <_2599(212), _2600(481), _485(487)>
  # prephitmp_2610 = PHI <_2608(212), _2609(481), _488(487)>
  # prephitmp_2612 = PHI <_573(212), _573(481), pretmp_2611(487)>
  # DEBUG D#53 => 1
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 8
  # DEBUG e => version_9(D)
  # DEBUG D#54 => D#53
  # DEBUG def => D#54
  # DEBUG this => _fbb_5(D)
  # DEBUG element => version_9(D)
  # DEBUG D#29 => _fbb_5(D)
  # DEBUG this => D#29
  # DEBUG t => version_9(D)
  # DEBUG t => NULL
  # DEBUG litle_endian_element => version_9(D)
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _845 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_845 <= 3)
    goto <bb 214>;
  else
    goto <bb 215>;

  <bb 483>:
  # DEBUG D#57 => 0
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 6
  # DEBUG e => _1050
  # DEBUG D#58 => D#57
  # DEBUG def => D#58
  # DEBUG this => _fbb_5(D)
  # DEBUG element => _1050
  # DEBUG D#50 => _fbb_5(D)
  # DEBUG this => D#50
  # DEBUG t => _1050
  # DEBUG t => NULL
  # DEBUG litle_endian_element => _1050
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 4
  # DEBUG this => D#18
  _1192 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_1192 <= 3)
    goto <bb 318>;
  else
    goto <bb 319>;

  <bb 484>:
  pretmp_2731 = &_fbb_5(D)->buf_;
  pretmp_2734 = MEM[(const struct vector_downward *)_fbb_5(D)].reserved_;
  pretmp_2737 = MEM[(const struct vector_downward *)_fbb_5(D)].cur_;
  _2740 = (int) pretmp_2737;
  pretmp_2743 = MEM[(const struct vector_downward *)_fbb_5(D)].buf_;
  _2746 = (int) pretmp_2743;
  _2749 = _2740 - _2746;
  _2752 = (unsigned int) _2749;
  _2755 = pretmp_2734 - _2752;

  <bb 485>:
  # prephitmp_2732 = PHI <_1052(488), pretmp_2731(484)>
  # prephitmp_2735 = PHI <prephitmp_2897(488), pretmp_2734(484)>
  # prephitmp_2738 = PHI <prephitmp_2899(488), pretmp_2737(484)>
  # prephitmp_2741 = PHI <_1043(488), _2740(484)>
  # prephitmp_2744 = PHI <prephitmp_2901(488), pretmp_2743(484)>
  # prephitmp_2753 = PHI <_1047(488), _2752(484)>
  # prephitmp_2756 = PHI <_1048(488), _2755(484)>
  # DEBUG D#64 => 0
  # DEBUG this => _fbb_5(D)
  # DEBUG e => D#188
  # DEBUG field => 4
  # DEBUG D#65 => D#64
  # DEBUG def => D#65
  # DEBUG this => _fbb_5(D)
  # DEBUG element => D#188
  # DEBUG D#61 => _fbb_5(D)
  # DEBUG this => D#61
  # DEBUG t => D#188
  # DEBUG t => NULL
  # DEBUG litle_endian_element => D#188
  # DEBUG this => _fbb_5(D)
  # DEBUG elem_size => 1
  # DEBUG D#18 => _fbb_5(D)
  # DEBUG elem_size => 1
  # DEBUG this => D#18
  _1254 = MEM[(size_t *)_fbb_5(D) + 40B];
  if (_1254 == 0)
    goto <bb 330>;
  else
    goto <bb 331>;

  <bb 486>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG e => NULL
  # DEBUG def => NULL
  # DEBUG builtin_code => NULL
  # DEBUG D#55 => &builder_
  # DEBUG version => version_9(D)
  # DEBUG this => D#55
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 8
  # DEBUG e => version_9(D)
  # DEBUG def => 1
  # DEBUG e => version_9(D)
  # DEBUG def => 1
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (version_9(D) == 1)
    goto <bb 213>;
  else
    goto <bb 487>;

  <bb 487>:
  pretmp_2585 = &_fbb_5(D)->buf_;
  pretmp_2611 = MEM[(struct vector_downward *)_fbb_5(D)].scratch_;
  goto <bb 482>;

  <bb 488>:
  # DEBUG this => NULL
  # DEBUG field => NULL
  # DEBUG off$o => NULL
  # DEBUG D#66 => &builder_
  # DEBUG deprecated_builtin_code => D#188
  # DEBUG this => D#66
  # DEBUG this => _fbb_5(D)
  # DEBUG field => 4
  # DEBUG e => D#188
  # DEBUG def => 0
  # DEBUG e => D#188
  # DEBUG def => 0
  # DEBUG e => NULL
  # DEBUG def => NULL
  if (prephitmp_2584 == 0)
    goto <bb 329>;
  else
    goto <bb 485>;

}


