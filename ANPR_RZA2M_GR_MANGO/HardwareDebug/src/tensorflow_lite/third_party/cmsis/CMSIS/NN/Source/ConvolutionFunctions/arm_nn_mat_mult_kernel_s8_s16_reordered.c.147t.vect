
;; Function arm_nn_mat_mult_kernel_s8_s16_reordered (arm_nn_mat_mult_kernel_s8_s16_reordered, funcdef_no=122, decl_uid=7145, cgraph_uid=122, symbol_order=122)


Analyzing loop at ../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149:15: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149:15: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149:15: note: === get_loop_niters ===
Applying pattern match.pd:2179, generic-match.c:6504
Analyzing # of iterations of loop 2
  exit condition [(int32_t) _104 + -1, + , -1](no_overflow) != 0
  bounds on difference of bases: -2147483646 ... 2147483648
Applying pattern match.pd:83, generic-match.c:10121
Applying pattern match.pd:1771, generic-match.c:1258
Applying pattern match.pd:2179, generic-match.c:6504
Applying pattern match.pd:2363, generic-match.c:1541
  result:
    # of iterations (unsigned int) ((int32_t) _104 + -1), bounded by 4294967295
Applying pattern match.pd:1505, generic-match.c:7235
Applying pattern match.pd:83, generic-match.c:9008
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149:15: note: Symbolic number of iterations is (unsigned int) _104
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:149:15: note: not vectorized: loop contains function calls or data references that cannot be analyzed

Analyzing loop at ../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:63
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:63:11: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:63:11: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:63:11: note: not vectorized: control flow in loop.
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:63:11: note: bad loop form.

Analyzing loop at ../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80:15: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80:15: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80:15: note: === get_loop_niters ===
Applying pattern match.pd:2163, generic-match.c:6467
Analyzing # of iterations of loop 3
  exit condition [(uint16_t) _465 + 65535, + , 65535] != 0
  bounds on difference of bases: -65535 ... 0
Applying pattern match.pd:83, generic-match.c:10121
Applying pattern match.pd:2373, generic-match.c:1602
  result:
    # of iterations (uint16_t) _465 + 65535, bounded by 65535
Applying pattern match.pd:1047, generic-match.c:4821
Applying pattern match.pd:83, generic-match.c:9008
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80:15: note: Symbolic number of iterations is (uint16_t) _465
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:80:15: note: not vectorized: loop contains function calls or data references that cannot be analyzed
../src/tensorflow_lite/third_party/cmsis/CMSIS/NN/Source/ConvolutionFunctions/arm_nn_mat_mult_kernel_s8_s16_reordered.c:43:7: note: vectorized 0 loops in function.
arm_nn_mat_mult_kernel_s8_s16_reordered (const q7_t * input_a, const q15_t * input_b, const uint16_t output_ch, const int32_t * out_shift, const int32_t * out_mult, const int32_t out_offset, const int16_t activation_min, const int16_t activation_max, const uint16_t num_col_a, const int32_t * const output_bias, q7_t * out_0)
{
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  q31_t val;
  q31_t val;
  uint32_t result;
  uint32_t result;
  q31_t val;
  uint32_t result;
  uint32_t result;
  q31_t val;
  q31_t val;
  uint32_t result;
  uint32_t result;
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  q31_t threshold;
  int32_t remainder;
  const q31_t remainder_mask;
  q31_t result;
  q31_t val;
  q31_t val;
  uint32_t result;
  uint32_t result;
  q31_t val;
  uint32_t result;
  uint32_t result;
  q31_t val;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  q31_t val;
  q31_t val;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  int32_t col_count;
  q31_t ch_0_out_1;
  q31_t ch_0_out_0;
  const q15_t * ip_b1;
  const q15_t * ip_b0;
  uint16_t col_count;
  q31_t ch_1_out_1;
  q31_t ch_1_out_0;
  q31_t ch_0_out_1;
  q31_t ch_0_out_0;
  const q7_t * ip_a1;
  const q15_t * ip_b1;
  const q15_t * ip_b0;
  const q7_t * ip_a0;
  uint16_t row_count;
  const int32_t * bias;
  q7_t * out_1;
  sizetype _25;
  short unsigned int _29;
  long unsigned int b0.6_45;
  long unsigned int ch_0_out_0.7_46;
  long unsigned int b1.8_47;
  long unsigned int ch_0_out_1.9_48;
  long unsigned int ch_1_out_0.12_49;
  long unsigned int ch_1_out_1.13_50;
  long unsigned int b0.6_51;
  long unsigned int b1.8_53;
  long int _58;
  long int _59;
  const q15_t * _60;
  signed char _69;
  long int _71;
  long int _72;
  signed char _76;
  long int _78;
  long int _79;
  signed char _85;
  long int _87;
  long int _88;
  signed char _94;
  unsigned int _100;
  unsigned int _101;
  const q15_t * ip_b1.25_102;
  short unsigned int _104;
  long unsigned int b0.28_106;
  long unsigned int ch_0_out_0.29_107;
  long unsigned int b1.30_108;
  long unsigned int ch_0_out_1.31_109;
  long unsigned int b0.28_110;
  long unsigned int b1.30_112;
  long int _115;
  long int _116;
  long int _119;
  long int _121;
  signed char _124;
  long int _126;
  long int _127;
  signed char _132;
  long int _135;
  const q15_t * _136;
  long int _137;
  const q7_t * _142;
  long int _143;
  long unsigned int inA.36_144;
  long unsigned int _145;
  const q7_t * _148;
  long int _149;
  long unsigned int inA.36_150;
  long unsigned int _151;
  const q15_t * _154;
  long int _155;
  const q15_t * _156;
  long int _157;
  long int _158;
  long int _159;
  long long int _160;
  long long int _161;
  long long int _162;
  long long int _163;
  long long int _164;
  long long int _165;
  long int iftmp.38_167;
  int _169;
  long int _178;
  long int _179;
  long long int _180;
  long long int _181;
  long long int _182;
  long long int _183;
  long long int _184;
  long long int _185;
  long int iftmp.38_187;
  int _189;
  long int _198;
  long int _199;
  long long int _200;
  long long int _201;
  long long int _202;
  long long int _203;
  long long int _204;
  long long int _205;
  long int iftmp.38_207;
  int _209;
  long int _218;
  long int _219;
  long long int _220;
  long long int _221;
  long long int _222;
  long long int _223;
  long long int _224;
  long long int _225;
  long int iftmp.38_227;
  int _229;
  const q15_t * _240;
  long int _241;
  const q15_t * _242;
  long int _243;
  const q7_t * _246;
  long int _247;
  long unsigned int inA.36_248;
  long unsigned int _249;
  const q15_t * _252;
  long int _253;
  const q15_t * _254;
  long int _255;
  long int _256;
  long int _257;
  long long int _258;
  long long int _259;
  long long int _260;
  long long int _261;
  long long int _262;
  long long int _263;
  long int iftmp.38_265;
  int _267;
  long int _276;
  long int _277;
  long long int _278;
  long long int _279;
  long long int _280;
  long long int _281;
  long long int _282;
  long long int _283;
  long int iftmp.38_285;
  int _287;
  sizetype _380;
  sizetype _431;
  short unsigned int _436;
  sizetype _441;
  sizetype _446;
  short unsigned int _451;
  sizetype _456;
  unsigned int _462;
  unsigned int _463;
  const q15_t * _464;
  short unsigned int _465;
  long int _466;
  long int _467;
  const q7_t * _475;
  const q7_t * prephitmp_476;
  long int _484;
  long int prephitmp_485;
  long int _493;
  long int prephitmp_494;
  const q7_t * prephitmp_496;
  const q7_t * _497;
  long int _502;
  long int prephitmp_503;
  long int _511;
  long int prephitmp_512;
  sizetype _513;
  short unsigned int _514;
  short unsigned int _515;
  sizetype _516;
  sizetype _517;
  sizetype _518;
  short unsigned int _519;
  sizetype _520;
  sizetype _521;
  sizetype _522;
  long int _523;
  long int prephitmp_524;
  sizetype _525;
  sizetype _526;
  sizetype _527;
  sizetype _528;
  short unsigned int _529;
  sizetype _530;
  sizetype _531;
  long int _532;
  long int prephitmp_533;

  <bb 2>:
  _25 = (sizetype) output_ch_24(D);
  out_1_27 = out_0_26(D) + _25;
  # DEBUG out_1 => out_1_27
  # DEBUG bias => output_bias_28(D)
  row_count_30 = output_ch_24(D) >> 1;
  # DEBUG row_count => row_count_30
  # DEBUG ip_a0 => input_a_31(D)
  # DEBUG ip_a0 => input_a_31(D)
  # DEBUG row_count => row_count_30
  # DEBUG bias => output_bias_28(D)
  # DEBUG out_1 => out_1_27
  # DEBUG out_0 => out_0_26(D)
  # DEBUG out_mult => out_mult_33(D)
  # DEBUG out_shift => out_shift_32(D)
  if (row_count_30 != 0)
    goto <bb 3>;
  else
    goto <bb 36>;

  <bb 3>:
  _462 = (unsigned int) num_col_a_36(D);
  _463 = _462 * 2;
  _464 = input_b_35(D) + _463;
  _465 = num_col_a_36(D) >> 2;
  _466 = (long int) activation_min_63(D);
  _467 = (long int) activation_max_66(D);

  <bb 4>:
  # out_shift_367 = PHI <out_shift_32(D)(3), out_shift_97(35)>
  # out_mult_375 = PHI <out_mult_33(D)(3), out_mult_96(35)>
  # out_0_376 = PHI <out_0_26(D)(3), out_0_84(35)>
  # out_1_370 = PHI <out_1_27(3), out_1_93(35)>
  # bias_378 = PHI <output_bias_28(D)(3), bias_43(35)>
  # row_count_369 = PHI <row_count_30(3), row_count_99(35)>
  # ip_a0_381 = PHI <input_a_31(D)(3), prephitmp_476(35)>
  # DEBUG ip_a0 => ip_a0_381
  # DEBUG row_count => row_count_369
  # DEBUG bias => bias_378
  # DEBUG out_1 => out_1_370
  # DEBUG out_0 => out_0_376
  # DEBUG out_mult => out_mult_375
  # DEBUG out_shift => out_shift_367
  # DEBUG ip_b0 => input_b_35(D)
  # DEBUG D#15 => (unsigned int) num_col_a_36(D)
  # DEBUG D#14 => D#15 * 2
  # DEBUG D#13 => input_b_35(D) + D#14
  # DEBUG ip_b1 => D#13
  ip_a1_40 = ip_a0_381 + _462;
  # DEBUG ip_a1 => ip_a1_40
  ch_0_out_0_41 = *bias_378;
  # DEBUG ch_0_out_0 => ch_0_out_0_41
  # DEBUG bias => bias_378 + 4
  # DEBUG ch_0_out_1 => ch_0_out_0_41
  ch_1_out_0_42 = MEM[(const int32_t *)bias_378 + 4B];
  # DEBUG ch_1_out_0 => ch_1_out_0_42
  bias_43 = &MEM[(void *)bias_378 + 8B];
  # DEBUG bias => bias_43
  # DEBUG ch_1_out_1 => ch_1_out_0_42
  # DEBUG D#12 => num_col_a_36(D) >> 2
  # DEBUG col_count => D#12
  # DEBUG ip_b1 => D#13
  # DEBUG ip_b0 => input_b_35(D)
  # DEBUG col_count => D#12
  # DEBUG ch_1_out_1 => ch_1_out_0_42
  # DEBUG ch_1_out_0 => ch_1_out_0_42
  # DEBUG ch_0_out_1 => ch_0_out_0_41
  # DEBUG ch_0_out_0 => ch_0_out_0_41
  # DEBUG ip_a1 => ip_a1_40
  # DEBUG ip_a0 => ip_a0_381
  if (_465 != 0)
    goto <bb 5>;
  else
    goto <bb 9>;

  <bb 5>:

  <bb 6>:
  # ip_a0_359 = PHI <ip_a0_381(5), _148(7)>
  # ip_a1_358 = PHI <ip_a1_40(5), _142(7)>
  # ch_0_out_0_365 = PHI <ch_0_out_0_41(5), ch_0_out_0_52(7)>
  # ch_0_out_1_387 = PHI <ch_0_out_0_41(5), ch_0_out_1_54(7)>
  # ch_1_out_0_366 = PHI <ch_1_out_0_42(5), ch_1_out_0_55(7)>
  # ch_1_out_1_362 = PHI <ch_1_out_0_42(5), ch_1_out_1_56(7)>
  # col_count_394 = PHI <_465(5), col_count_57(7)>
  # ip_b0_406 = PHI <input_b_35(D)(5), _136(7)>
  # ip_b1_407 = PHI <_464(5), _60(7)>
  # DEBUG ip_b1 => ip_b1_407
  # DEBUG ip_b0 => ip_b0_406
  # DEBUG col_count => col_count_394
  # DEBUG ch_1_out_1 => ch_1_out_1_362
  # DEBUG ch_1_out_0 => ch_1_out_0_366
  # DEBUG ch_0_out_1 => ch_0_out_1_387
  # DEBUG ch_0_out_0 => ch_0_out_0_365
  # DEBUG ip_a1 => ip_a1_358
  # DEBUG ip_a0 => ip_a0_359
  # DEBUG in_q15 => &ip_b0
  memcpy (&val, ip_b0_406, 4);
  _156 = ip_b0_406 + 4;
  # DEBUG ip_b0 => _156
  _157 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b0 => NULL
  # DEBUG in_q15 => &ip_b1
  memcpy (&val, ip_b1_407, 4);
  _154 = ip_b1_407 + 4;
  # DEBUG ip_b1 => _154
  _155 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b1 => NULL
  # DEBUG source => ip_a0_359
  # DEBUG out1 => &a01
  # DEBUG out2 => &a02
  # DEBUG in_q7 => &source
  memcpy (&val, ip_a0_359, 4);
  _148 = ip_a0_359 + 4;
  # DEBUG source => _148
  _149 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q7 => NULL
  # DEBUG val => NULL
  # DEBUG inA => NULL
  inA.36_150 = (long unsigned int) _149;
  # DEBUG op1 => inA.36_150
  # DEBUG op2 => 8
  # DEBUG op2 => 8
  _151 = inA.36_150 r>> 8;
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op1 => NULL
  __asm__("sxtb16 %0, %1" : "=r" result_152 : "r" _151);
  # DEBUG result => result_152
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a02 => (long int) result_152
  # DEBUG op1 => inA.36_150
  __asm__("sxtb16 %0, %1" : "=r" result_153 : "r" inA.36_150);
  # DEBUG result => result_153
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a01 => (long int) result_153
  # DEBUG source => NULL
  # DEBUG out1 => NULL
  # DEBUG out2 => NULL
  # DEBUG val => NULL
  # DEBUG result => NULL
  # DEBUG result => NULL
  # DEBUG ip_a0 => NULL
  # DEBUG source => ip_a1_358
  # DEBUG out1 => &a11
  # DEBUG out2 => &a12
  # DEBUG in_q7 => &source
  memcpy (&val, ip_a1_358, 4);
  _142 = ip_a1_358 + 4;
  # DEBUG source => _142
  _143 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q7 => NULL
  # DEBUG val => NULL
  # DEBUG inA => NULL
  inA.36_144 = (long unsigned int) _143;
  # DEBUG op1 => inA.36_144
  # DEBUG op2 => 8
  # DEBUG op2 => 8
  _145 = inA.36_144 r>> 8;
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op1 => NULL
  __asm__("sxtb16 %0, %1" : "=r" result_146 : "r" _145);
  # DEBUG result => result_146
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a12 => (long int) result_146
  # DEBUG op1 => inA.36_144
  __asm__("sxtb16 %0, %1" : "=r" result_147 : "r" inA.36_144);
  # DEBUG result => result_147
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a11 => (long int) result_147
  # DEBUG source => NULL
  # DEBUG out1 => NULL
  # DEBUG out2 => NULL
  # DEBUG val => NULL
  # DEBUG result => NULL
  # DEBUG result => NULL
  # DEBUG ip_a1 => NULL
  b0.6_45 = (long unsigned int) _157;
  ch_0_out_0.7_46 = (long unsigned int) ch_0_out_0_365;
  # DEBUG op1 => result_153
  # DEBUG op2 => b0.6_45
  # DEBUG op3 => ch_0_out_0.7_46
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_141 : "r" result_153, "r" b0.6_45, "r" ch_0_out_0.7_46);
  # DEBUG result => result_141
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_0 => (q31_t) result_141
  b1.8_47 = (long unsigned int) _155;
  ch_0_out_1.9_48 = (long unsigned int) ch_0_out_1_387;
  # DEBUG op1 => result_153
  # DEBUG op2 => b1.8_47
  # DEBUG op3 => ch_0_out_1.9_48
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_140 : "r" result_153, "r" b1.8_47, "r" ch_0_out_1.9_48);
  # DEBUG result => result_140
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_1 => (q31_t) result_140
  ch_1_out_0.12_49 = (long unsigned int) ch_1_out_0_366;
  # DEBUG op1 => result_147
  # DEBUG op2 => b0.6_45
  # DEBUG op3 => ch_1_out_0.12_49
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_139 : "r" result_147, "r" b0.6_45, "r" ch_1_out_0.12_49);
  # DEBUG result => result_139
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_1_out_0 => (q31_t) result_139
  ch_1_out_1.13_50 = (long unsigned int) ch_1_out_1_362;
  # DEBUG op1 => result_147
  # DEBUG op2 => b1.8_47
  # DEBUG op3 => ch_1_out_1.13_50
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_138 : "r" result_147, "r" b1.8_47, "r" ch_1_out_1.13_50);
  # DEBUG result => result_138
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_1_out_1 => (q31_t) result_138
  # DEBUG in_q15 => &ip_b0
  memcpy (&val, _156, 4);
  _136 = &MEM[(void *)ip_b0_406 + 8B];
  # DEBUG ip_b0 => _136
  _137 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b0 => NULL
  # DEBUG in_q15 => &ip_b1
  memcpy (&val, _154, 4);
  _60 = &MEM[(void *)ip_b1_407 + 8B];
  # DEBUG ip_b1 => _60
  _135 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b1 => NULL
  b0.6_51 = (long unsigned int) _137;
  # DEBUG op1 => result_152
  # DEBUG op2 => b0.6_51
  # DEBUG op3 => result_141
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_80 : "r" result_152, "r" b0.6_51, "r" result_141);
  # DEBUG result => result_80
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_0_out_0_52 = (q31_t) result_80;
  # DEBUG ch_0_out_0 => ch_0_out_0_52
  b1.8_53 = (long unsigned int) _135;
  # DEBUG op1 => result_152
  # DEBUG op2 => b1.8_53
  # DEBUG op3 => result_140
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_89 : "r" result_152, "r" b1.8_53, "r" result_140);
  # DEBUG result => result_89
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_0_out_1_54 = (q31_t) result_89;
  # DEBUG ch_0_out_1 => ch_0_out_1_54
  # DEBUG op1 => result_146
  # DEBUG op2 => b0.6_51
  # DEBUG op3 => result_139
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_117 : "r" result_146, "r" b0.6_51, "r" result_139);
  # DEBUG result => result_117
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_1_out_0_55 = (q31_t) result_117;
  # DEBUG ch_1_out_0 => ch_1_out_0_55
  # DEBUG op1 => result_146
  # DEBUG op2 => b1.8_53
  # DEBUG op3 => result_138
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_128 : "r" result_146, "r" b1.8_53, "r" result_138);
  # DEBUG result => result_128
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_1_out_1_56 = (q31_t) result_128;
  # DEBUG ch_1_out_1 => ch_1_out_1_56
  col_count_57 = col_count_394 + 65535;
  # DEBUG col_count => col_count_57
  # DEBUG D#1 => {CLOBBER}
  # DEBUG a01 => D#1
  # DEBUG D#2 => {CLOBBER}
  # DEBUG a02 => D#2
  # DEBUG D#3 => {CLOBBER}
  # DEBUG a11 => D#3
  # DEBUG D#4 => {CLOBBER}
  # DEBUG a12 => D#4
  # DEBUG ip_b1 => _60
  # DEBUG ip_b0 => _136
  # DEBUG col_count => col_count_57
  # DEBUG ch_1_out_1 => ch_1_out_1_56
  # DEBUG ch_1_out_0 => ch_1_out_0_55
  # DEBUG ch_0_out_1 => ch_0_out_1_54
  # DEBUG ch_0_out_0 => ch_0_out_0_52
  # DEBUG ip_a1 => _142
  # DEBUG ip_a0 => _148
  if (col_count_57 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # ch_0_out_0_509 = PHI <ch_0_out_0_52(6)>
  # ch_0_out_1_508 = PHI <ch_0_out_1_54(6)>
  # ch_1_out_0_507 = PHI <ch_1_out_0_55(6)>
  # ch_1_out_1_506 = PHI <ch_1_out_1_56(6)>
  _451 = _465 + 65535;
  _456 = (sizetype) _451;
  _527 = _456 + 1;
  _431 = _527 * 4;
  _497 = ip_a0_381 + _431;
  _475 = _497 + _462;

  <bb 9>:
  # ch_0_out_0_363 = PHI <ch_0_out_0_509(8), ch_0_out_0_41(4)>
  # ch_0_out_1_386 = PHI <ch_0_out_1_508(8), ch_0_out_0_41(4)>
  # ch_1_out_0_361 = PHI <ch_1_out_0_507(8), ch_1_out_0_42(4)>
  # ch_1_out_1_393 = PHI <ch_1_out_1_506(8), ch_1_out_0_42(4)>
  # prephitmp_476 = PHI <_475(8), ip_a1_40(4)>
  _58 = *out_mult_375;
  _59 = *out_shift_367;
  # DEBUG val => ch_0_out_0_363
  # DEBUG multiplier => _58
  # DEBUG shift => _59
  _218 = MAX_EXPR <_59, 0>;
  _219 = ch_0_out_0_363 << _218;
  # DEBUG m1 => _219
  # DEBUG m2 => _58
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _220 = mult.long_long;
  _221 = (long long int) _219;
  _222 = (long long int) _58;
  _223 = _221 * _222;
  _224 = _220 + _223;
  _225 = _224 >> 31;
  result_226 = (q31_t) _225;
  # DEBUG result => result_226
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_59 <= 0)
    goto <bb 10>;
  else
    goto <bb 56>;

  <bb 10>:
  iftmp.38_227 = -_59;
  # DEBUG dividend => result_226
  # DEBUG exponent => iftmp.38_227
  # DEBUG result => 0
  _229 = 1 << iftmp.38_227;
  remainder_mask_230 = _229 + -1;
  # DEBUG remainder_mask => remainder_mask_230
  remainder_231 = result_226 & remainder_mask_230;
  # DEBUG remainder => remainder_231
  result_232 = result_226 >> iftmp.38_227;
  # DEBUG result => result_232
  threshold_233 = remainder_mask_230 >> 1;
  # DEBUG threshold => threshold_233
  if (result_232 < 0)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  _511 = threshold_233 + 1;

  <bb 12>:
  # remainder_442 = PHI <remainder_231(11), 0(56)>
  # result_444 = PHI <result_232(11), result_226(56)>
  # prephitmp_512 = PHI <_511(11), 1(56)>
  # DEBUG threshold => NULL

  <bb 13>:
  # threshold_235 = PHI <threshold_233(10), prephitmp_512(12)>
  # remainder_443 = PHI <remainder_231(10), remainder_442(12)>
  # result_445 = PHI <result_232(10), result_444(12)>
  # DEBUG threshold => threshold_235
  if (threshold_235 < remainder_443)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  result_236 = result_445 + 1;
  # DEBUG result => result_236

  <bb 15>:
  # result_237 = PHI <result_445(13), result_236(14), result_226(56)>
  # DEBUG result => result_237
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_0 => NULL
  ch_0_out_0_62 = out_offset_61(D) + result_237;
  # DEBUG ch_0_out_0 => ch_0_out_0_62
  ch_0_out_0_65 = MAX_EXPR <ch_0_out_0_62, _466>;
  # DEBUG ch_0_out_0 => ch_0_out_0_65
  ch_0_out_0_68 = MIN_EXPR <ch_0_out_0_65, _467>;
  # DEBUG ch_0_out_0 => ch_0_out_0_68
  # DEBUG out_0 => out_0_376 + 1
  _69 = (signed char) ch_0_out_0_68;
  *out_0_376 = _69;
  _71 = *out_mult_375;
  _72 = *out_shift_367;
  # DEBUG val => ch_0_out_1_386
  # DEBUG multiplier => _71
  # DEBUG shift => _72
  _198 = MAX_EXPR <_72, 0>;
  _199 = ch_0_out_1_386 << _198;
  # DEBUG m1 => _199
  # DEBUG m2 => _71
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _200 = mult.long_long;
  _201 = (long long int) _199;
  _202 = (long long int) _71;
  _203 = _201 * _202;
  _204 = _200 + _203;
  _205 = _204 >> 31;
  result_206 = (q31_t) _205;
  # DEBUG result => result_206
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_72 <= 0)
    goto <bb 16>;
  else
    goto <bb 57>;

  <bb 16>:
  iftmp.38_207 = -_72;
  # DEBUG dividend => result_206
  # DEBUG exponent => iftmp.38_207
  # DEBUG result => 0
  _209 = 1 << iftmp.38_207;
  remainder_mask_210 = _209 + -1;
  # DEBUG remainder_mask => remainder_mask_210
  remainder_211 = result_206 & remainder_mask_210;
  # DEBUG remainder => remainder_211
  result_212 = result_206 >> iftmp.38_207;
  # DEBUG result => result_212
  threshold_213 = remainder_mask_210 >> 1;
  # DEBUG threshold => threshold_213
  if (result_212 < 0)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 17>:
  _502 = threshold_213 + 1;

  <bb 18>:
  # remainder_437 = PHI <remainder_211(17), 0(57)>
  # result_439 = PHI <result_212(17), result_206(57)>
  # prephitmp_503 = PHI <_502(17), 1(57)>
  # DEBUG threshold => NULL

  <bb 19>:
  # threshold_215 = PHI <threshold_213(16), prephitmp_503(18)>
  # remainder_438 = PHI <remainder_211(16), remainder_437(18)>
  # result_440 = PHI <result_212(16), result_439(18)>
  # DEBUG threshold => threshold_215
  if (threshold_215 < remainder_438)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  result_216 = result_440 + 1;
  # DEBUG result => result_216

  <bb 21>:
  # result_217 = PHI <result_440(19), result_216(20), result_206(57)>
  # DEBUG result => result_217
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_1 => NULL
  ch_0_out_1_73 = out_offset_61(D) + result_217;
  # DEBUG ch_0_out_1 => ch_0_out_1_73
  ch_0_out_1_74 = MAX_EXPR <ch_0_out_1_73, _466>;
  # DEBUG ch_0_out_1 => ch_0_out_1_74
  ch_0_out_1_75 = MIN_EXPR <ch_0_out_1_74, _467>;
  # DEBUG ch_0_out_1 => ch_0_out_1_75
  # DEBUG out_1 => out_1_370 + 1
  _76 = (signed char) ch_0_out_1_75;
  *out_1_370 = _76;
  # DEBUG out_mult => out_mult_375 + 4
  # DEBUG out_shift => out_shift_367 + 4
  _78 = MEM[(const int32_t *)out_mult_375 + 4B];
  _79 = MEM[(const int32_t *)out_shift_367 + 4B];
  # DEBUG val => ch_1_out_0_361
  # DEBUG multiplier => _78
  # DEBUG shift => _79
  _178 = MAX_EXPR <_79, 0>;
  _179 = ch_1_out_0_361 << _178;
  # DEBUG m1 => _179
  # DEBUG m2 => _78
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _180 = mult.long_long;
  _181 = (long long int) _179;
  _182 = (long long int) _78;
  _183 = _181 * _182;
  _184 = _180 + _183;
  _185 = _184 >> 31;
  result_186 = (q31_t) _185;
  # DEBUG result => result_186
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_79 <= 0)
    goto <bb 22>;
  else
    goto <bb 58>;

  <bb 22>:
  iftmp.38_187 = -_79;
  # DEBUG dividend => result_186
  # DEBUG exponent => iftmp.38_187
  # DEBUG result => 0
  _189 = 1 << iftmp.38_187;
  remainder_mask_190 = _189 + -1;
  # DEBUG remainder_mask => remainder_mask_190
  remainder_191 = result_186 & remainder_mask_190;
  # DEBUG remainder => remainder_191
  result_192 = result_186 >> iftmp.38_187;
  # DEBUG result => result_192
  threshold_193 = remainder_mask_190 >> 1;
  # DEBUG threshold => threshold_193
  if (result_192 < 0)
    goto <bb 23>;
  else
    goto <bb 25>;

  <bb 23>:
  _493 = threshold_193 + 1;

  <bb 24>:
  # remainder_432 = PHI <remainder_191(23), 0(58)>
  # result_434 = PHI <result_192(23), result_186(58)>
  # prephitmp_494 = PHI <_493(23), 1(58)>
  # DEBUG threshold => NULL

  <bb 25>:
  # threshold_195 = PHI <threshold_193(22), prephitmp_494(24)>
  # remainder_433 = PHI <remainder_191(22), remainder_432(24)>
  # result_435 = PHI <result_192(22), result_434(24)>
  # DEBUG threshold => threshold_195
  if (threshold_195 < remainder_433)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  result_196 = result_435 + 1;
  # DEBUG result => result_196

  <bb 27>:
  # result_197 = PHI <result_435(25), result_196(26), result_186(58)>
  # DEBUG result => result_197
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_1_out_0 => NULL
  ch_1_out_0_81 = out_offset_61(D) + result_197;
  # DEBUG ch_1_out_0 => ch_1_out_0_81
  ch_1_out_0_82 = MAX_EXPR <ch_1_out_0_81, _466>;
  # DEBUG ch_1_out_0 => ch_1_out_0_82
  ch_1_out_0_83 = MIN_EXPR <ch_1_out_0_82, _467>;
  # DEBUG ch_1_out_0 => ch_1_out_0_83
  out_0_84 = &MEM[(void *)out_0_376 + 2B];
  # DEBUG out_0 => out_0_84
  _85 = (signed char) ch_1_out_0_83;
  MEM[(q7_t *)out_0_376 + 1B] = _85;
  _87 = MEM[(const int32_t *)out_mult_375 + 4B];
  _88 = MEM[(const int32_t *)out_shift_367 + 4B];
  # DEBUG val => ch_1_out_1_393
  # DEBUG multiplier => _87
  # DEBUG shift => _88
  _158 = MAX_EXPR <_88, 0>;
  _159 = ch_1_out_1_393 << _158;
  # DEBUG m1 => _159
  # DEBUG m2 => _87
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _160 = mult.long_long;
  _161 = (long long int) _159;
  _162 = (long long int) _87;
  _163 = _161 * _162;
  _164 = _160 + _163;
  _165 = _164 >> 31;
  result_166 = (q31_t) _165;
  # DEBUG result => result_166
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_88 <= 0)
    goto <bb 28>;
  else
    goto <bb 59>;

  <bb 28>:
  iftmp.38_167 = -_88;
  # DEBUG dividend => result_166
  # DEBUG exponent => iftmp.38_167
  # DEBUG result => 0
  _169 = 1 << iftmp.38_167;
  remainder_mask_170 = _169 + -1;
  # DEBUG remainder_mask => remainder_mask_170
  remainder_171 = result_166 & remainder_mask_170;
  # DEBUG remainder => remainder_171
  result_172 = result_166 >> iftmp.38_167;
  # DEBUG result => result_172
  threshold_173 = remainder_mask_170 >> 1;
  # DEBUG threshold => threshold_173
  if (result_172 < 0)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 29>:
  _484 = threshold_173 + 1;

  <bb 30>:
  # remainder_427 = PHI <remainder_171(29), 0(59)>
  # result_429 = PHI <result_172(29), result_166(59)>
  # prephitmp_485 = PHI <_484(29), 1(59)>
  # DEBUG threshold => NULL

  <bb 31>:
  # threshold_175 = PHI <threshold_173(28), prephitmp_485(30)>
  # remainder_428 = PHI <remainder_171(28), remainder_427(30)>
  # result_430 = PHI <result_172(28), result_429(30)>
  # DEBUG threshold => threshold_175
  if (threshold_175 < remainder_428)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  result_176 = result_430 + 1;
  # DEBUG result => result_176

  <bb 33>:
  # result_177 = PHI <result_430(31), result_176(32), result_166(59)>
  # DEBUG result => result_177
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_1_out_1 => NULL
  ch_1_out_1_90 = out_offset_61(D) + result_177;
  # DEBUG ch_1_out_1 => ch_1_out_1_90
  ch_1_out_1_91 = MAX_EXPR <ch_1_out_1_90, _466>;
  # DEBUG ch_1_out_1 => ch_1_out_1_91
  ch_1_out_1_92 = MIN_EXPR <ch_1_out_1_91, _467>;
  # DEBUG ch_1_out_1 => ch_1_out_1_92
  out_1_93 = &MEM[(void *)out_1_370 + 2B];
  # DEBUG out_1 => out_1_93
  _94 = (signed char) ch_1_out_1_92;
  MEM[(q7_t *)out_1_370 + 1B] = _94;
  out_mult_96 = &MEM[(void *)out_mult_375 + 8B];
  # DEBUG out_mult => out_mult_96
  out_shift_97 = &MEM[(void *)out_shift_367 + 8B];
  # DEBUG out_shift => out_shift_97
  # DEBUG D#11 => NULL
  # DEBUG ip_a0 => D#11
  row_count_99 = row_count_369 + 65535;
  # DEBUG row_count => row_count_99
  # DEBUG D#5 => {CLOBBER}
  # DEBUG ip_b0 => D#5
  # DEBUG D#6 => {CLOBBER}
  # DEBUG ip_b1 => D#6
  # DEBUG ip_a0 => D#11
  # DEBUG row_count => row_count_99
  # DEBUG bias => bias_43
  # DEBUG out_1 => out_1_93
  # DEBUG out_0 => out_0_84
  # DEBUG out_mult => out_mult_96
  # DEBUG out_shift => out_shift_97
  if (row_count_99 != 0)
    goto <bb 35>;
  else
    goto <bb 34>;

  <bb 34>:
  # prephitmp_496 = PHI <prephitmp_476(33)>
  _436 = row_count_30 + 65535;
  _441 = (sizetype) _436;
  _446 = _441 + 1;
  _380 = _446 * 8;
  bias_510 = output_bias_28(D) + _380;
  _515 = row_count_30 + 65535;
  _522 = (sizetype) _515;
  _521 = _522 + 1;
  _520 = _521 * 2;
  out_0_505 = out_0_26(D) + _520;
  _519 = row_count_30 + 65535;
  _518 = (sizetype) _519;
  _517 = _518 + 1;
  _516 = _517 * 2;
  out_1_504 = out_1_27 + _516;
  _514 = row_count_30 + 65535;
  _513 = (sizetype) _514;
  _531 = _513 + 1;
  _530 = _531 * 8;
  out_mult_501 = out_mult_33(D) + _530;
  _529 = row_count_30 + 65535;
  _528 = (sizetype) _529;
  _526 = _528 + 1;
  _525 = _526 * 8;
  out_shift_500 = out_shift_32(D) + _525;
  goto <bb 36>;

  <bb 35>:
  goto <bb 4>;

  <bb 36>:
  # out_shift_374 = PHI <out_shift_500(34), out_shift_32(D)(2)>
  # out_mult_371 = PHI <out_mult_501(34), out_mult_33(D)(2)>
  # out_0_377 = PHI <out_0_505(34), out_0_26(D)(2)>
  # out_1_360 = PHI <out_1_504(34), out_1_27(2)>
  # bias_379 = PHI <bias_510(34), output_bias_28(D)(2)>
  # ip_a0_368 = PHI <prephitmp_496(34), input_a_31(D)(2)>
  _29 = output_ch_24(D) & 1;
  if (_29 != 0)
    goto <bb 37>;
  else
    goto <bb 55>;

  <bb 37>:
  # DEBUG ip_b0 => input_b_35(D)
  _100 = (unsigned int) num_col_a_36(D);
  _101 = _100 * 2;
  ip_b1.25_102 = input_b_35(D) + _101;
  # DEBUG ip_b1 => ip_b1.25_102
  ch_0_out_0_103 = *bias_379;
  # DEBUG ch_0_out_0 => ch_0_out_0_103
  # DEBUG ch_0_out_1 => ch_0_out_0_103
  _104 = num_col_a_36(D) >> 2;
  col_count_105 = (int32_t) _104;
  # DEBUG col_count => col_count_105
  # DEBUG ip_b1 => ip_b1.25_102
  # DEBUG ip_b0 => input_b_35(D)
  # DEBUG col_count => col_count_105
  # DEBUG ch_0_out_1 => ch_0_out_0_103
  # DEBUG ch_0_out_0 => ch_0_out_0_103
  # DEBUG ip_a0 => ip_a0_368
  if (col_count_105 != 0)
    goto <bb 38>;
  else
    goto <bb 42>;

  <bb 38>:

  <bb 39>:
  # ip_a0_357 = PHI <ip_a0_368(38), _246(41)>
  # ch_0_out_0_395 = PHI <ch_0_out_0_103(38), ch_0_out_0_111(41)>
  # ch_0_out_1_397 = PHI <ch_0_out_0_103(38), ch_0_out_1_113(41)>
  # col_count_399 = PHI <col_count_105(38), col_count_114(41)>
  # ip_b0_408 = PHI <input_b_35(D)(38), _242(41)>
  # ip_b1_409 = PHI <ip_b1.25_102(38), _240(41)>
  # DEBUG ip_b1 => ip_b1_409
  # DEBUG ip_b0 => ip_b0_408
  # DEBUG col_count => col_count_399
  # DEBUG ch_0_out_1 => ch_0_out_1_397
  # DEBUG ch_0_out_0 => ch_0_out_0_395
  # DEBUG ip_a0 => ip_a0_357
  # DEBUG in_q15 => &ip_b0
  memcpy (&val, ip_b0_408, 4);
  _254 = ip_b0_408 + 4;
  # DEBUG ip_b0 => _254
  _255 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b0 => NULL
  # DEBUG in_q15 => &ip_b1
  memcpy (&val, ip_b1_409, 4);
  _252 = ip_b1_409 + 4;
  # DEBUG ip_b1 => _252
  _253 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b1 => NULL
  # DEBUG source => ip_a0_357
  # DEBUG out1 => &a01
  # DEBUG out2 => &a02
  # DEBUG in_q7 => &source
  memcpy (&val, ip_a0_357, 4);
  _246 = ip_a0_357 + 4;
  # DEBUG source => _246
  _247 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q7 => NULL
  # DEBUG val => NULL
  # DEBUG inA => NULL
  inA.36_248 = (long unsigned int) _247;
  # DEBUG op1 => inA.36_248
  # DEBUG op2 => 8
  # DEBUG op2 => 8
  _249 = inA.36_248 r>> 8;
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op1 => NULL
  __asm__("sxtb16 %0, %1" : "=r" result_250 : "r" _249);
  # DEBUG result => result_250
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a02 => (long int) result_250
  # DEBUG op1 => inA.36_248
  __asm__("sxtb16 %0, %1" : "=r" result_251 : "r" inA.36_248);
  # DEBUG result => result_251
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a01 => (long int) result_251
  # DEBUG source => NULL
  # DEBUG out1 => NULL
  # DEBUG out2 => NULL
  # DEBUG val => NULL
  # DEBUG result => NULL
  # DEBUG result => NULL
  # DEBUG ip_a0 => NULL
  b0.28_106 = (long unsigned int) _255;
  ch_0_out_0.29_107 = (long unsigned int) ch_0_out_0_395;
  # DEBUG op1 => result_251
  # DEBUG op2 => b0.28_106
  # DEBUG op3 => ch_0_out_0.29_107
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_245 : "r" result_251, "r" b0.28_106, "r" ch_0_out_0.29_107);
  # DEBUG result => result_245
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_0 => (q31_t) result_245
  b1.30_108 = (long unsigned int) _253;
  ch_0_out_1.31_109 = (long unsigned int) ch_0_out_1_397;
  # DEBUG op1 => result_251
  # DEBUG op2 => b1.30_108
  # DEBUG op3 => ch_0_out_1.31_109
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_244 : "r" result_251, "r" b1.30_108, "r" ch_0_out_1.31_109);
  # DEBUG result => result_244
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_1 => (q31_t) result_244
  # DEBUG in_q15 => &ip_b0
  memcpy (&val, _254, 4);
  _242 = &MEM[(void *)ip_b0_408 + 8B];
  # DEBUG ip_b0 => _242
  _243 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b0 => NULL
  # DEBUG in_q15 => &ip_b1
  memcpy (&val, _252, 4);
  _240 = &MEM[(void *)ip_b1_409 + 8B];
  # DEBUG ip_b1 => _240
  _241 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q15 => NULL
  # DEBUG val => NULL
  # DEBUG b1 => NULL
  b0.28_110 = (long unsigned int) _243;
  # DEBUG op1 => result_250
  # DEBUG op2 => b0.28_110
  # DEBUG op3 => result_245
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_239 : "r" result_250, "r" b0.28_110, "r" result_245);
  # DEBUG result => result_239
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_0_out_0_111 = (q31_t) result_239;
  # DEBUG ch_0_out_0 => ch_0_out_0_111
  b1.30_112 = (long unsigned int) _241;
  # DEBUG op1 => result_250
  # DEBUG op2 => b1.30_112
  # DEBUG op3 => result_244
  __asm__ __volatile__("smlad %0, %1, %2, %3" : "=r" result_238 : "r" result_250, "r" b1.30_112, "r" result_244);
  # DEBUG result => result_238
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op3 => NULL
  # DEBUG result => NULL
  ch_0_out_1_113 = (q31_t) result_238;
  # DEBUG ch_0_out_1 => ch_0_out_1_113
  col_count_114 = col_count_399 + -1;
  # DEBUG col_count => col_count_114
  # DEBUG D#7 => {CLOBBER}
  # DEBUG a01 => D#7
  # DEBUG D#8 => {CLOBBER}
  # DEBUG a02 => D#8
  # DEBUG ip_b1 => _240
  # DEBUG ip_b0 => _242
  # DEBUG col_count => col_count_114
  # DEBUG ch_0_out_1 => ch_0_out_1_113
  # DEBUG ch_0_out_0 => ch_0_out_0_111
  # DEBUG ip_a0 => _246
  if (col_count_114 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;

  <bb 40>:
  # ch_0_out_0_499 = PHI <ch_0_out_0_111(39)>
  # ch_0_out_1_498 = PHI <ch_0_out_1_113(39)>
  goto <bb 42>;

  <bb 41>:
  goto <bb 39>;

  <bb 42>:
  # ch_0_out_0_396 = PHI <ch_0_out_0_499(40), ch_0_out_0_103(37)>
  # ch_0_out_1_398 = PHI <ch_0_out_1_498(40), ch_0_out_0_103(37)>
  _115 = *out_mult_371;
  _116 = *out_shift_374;
  # DEBUG val => ch_0_out_0_396
  # DEBUG multiplier => _115
  # DEBUG shift => _116
  _276 = MAX_EXPR <_116, 0>;
  _277 = ch_0_out_0_396 << _276;
  # DEBUG m1 => _277
  # DEBUG m2 => _115
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _278 = mult.long_long;
  _279 = (long long int) _277;
  _280 = (long long int) _115;
  _281 = _279 * _280;
  _282 = _278 + _281;
  _283 = _282 >> 31;
  result_284 = (q31_t) _283;
  # DEBUG result => result_284
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_116 <= 0)
    goto <bb 43>;
  else
    goto <bb 60>;

  <bb 43>:
  iftmp.38_285 = -_116;
  # DEBUG dividend => result_284
  # DEBUG exponent => iftmp.38_285
  # DEBUG result => 0
  _287 = 1 << iftmp.38_285;
  remainder_mask_288 = _287 + -1;
  # DEBUG remainder_mask => remainder_mask_288
  remainder_289 = result_284 & remainder_mask_288;
  # DEBUG remainder => remainder_289
  result_290 = result_284 >> iftmp.38_285;
  # DEBUG result => result_290
  threshold_291 = remainder_mask_288 >> 1;
  # DEBUG threshold => threshold_291
  if (result_290 < 0)
    goto <bb 44>;
  else
    goto <bb 46>;

  <bb 44>:
  _532 = threshold_291 + 1;

  <bb 45>:
  # remainder_452 = PHI <remainder_289(44), 0(60)>
  # result_454 = PHI <result_290(44), result_284(60)>
  # prephitmp_533 = PHI <_532(44), 1(60)>
  # DEBUG threshold => NULL

  <bb 46>:
  # threshold_293 = PHI <threshold_291(43), prephitmp_533(45)>
  # remainder_453 = PHI <remainder_289(43), remainder_452(45)>
  # result_455 = PHI <result_290(43), result_454(45)>
  # DEBUG threshold => threshold_293
  if (threshold_293 < remainder_453)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  result_294 = result_455 + 1;
  # DEBUG result => result_294

  <bb 48>:
  # result_295 = PHI <result_455(46), result_294(47), result_284(60)>
  # DEBUG result => result_295
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_0 => NULL
  ch_0_out_0_118 = out_offset_61(D) + result_295;
  # DEBUG ch_0_out_0 => ch_0_out_0_118
  _119 = (long int) activation_min_63(D);
  ch_0_out_0_120 = MAX_EXPR <ch_0_out_0_118, _119>;
  # DEBUG ch_0_out_0 => ch_0_out_0_120
  _121 = (long int) activation_max_66(D);
  ch_0_out_0_122 = MIN_EXPR <ch_0_out_0_120, _121>;
  # DEBUG ch_0_out_0 => ch_0_out_0_122
  out_0_123 = out_0_377 + 1;
  # DEBUG out_0 => out_0_123
  _124 = (signed char) ch_0_out_0_122;
  *out_0_377 = _124;
  _126 = *out_mult_371;
  _127 = *out_shift_374;
  # DEBUG val => ch_0_out_1_398
  # DEBUG multiplier => _126
  # DEBUG shift => _127
  _256 = MAX_EXPR <_127, 0>;
  _257 = ch_0_out_1_398 << _256;
  # DEBUG m1 => _257
  # DEBUG m2 => _126
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _258 = mult.long_long;
  _259 = (long long int) _257;
  _260 = (long long int) _126;
  _261 = _259 * _260;
  _262 = _258 + _261;
  _263 = _262 >> 31;
  result_264 = (q31_t) _263;
  # DEBUG result => result_264
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  if (_127 <= 0)
    goto <bb 49>;
  else
    goto <bb 61>;

  <bb 49>:
  iftmp.38_265 = -_127;
  # DEBUG dividend => result_264
  # DEBUG exponent => iftmp.38_265
  # DEBUG result => 0
  _267 = 1 << iftmp.38_265;
  remainder_mask_268 = _267 + -1;
  # DEBUG remainder_mask => remainder_mask_268
  remainder_269 = result_264 & remainder_mask_268;
  # DEBUG remainder => remainder_269
  result_270 = result_264 >> iftmp.38_265;
  # DEBUG result => result_270
  threshold_271 = remainder_mask_268 >> 1;
  # DEBUG threshold => threshold_271
  if (result_270 < 0)
    goto <bb 50>;
  else
    goto <bb 52>;

  <bb 50>:
  _523 = threshold_271 + 1;

  <bb 51>:
  # remainder_447 = PHI <remainder_269(50), 0(61)>
  # result_449 = PHI <result_270(50), result_264(61)>
  # prephitmp_524 = PHI <_523(50), 1(61)>
  # DEBUG threshold => NULL

  <bb 52>:
  # threshold_273 = PHI <threshold_271(49), prephitmp_524(51)>
  # remainder_448 = PHI <remainder_269(49), remainder_447(51)>
  # result_450 = PHI <result_270(49), result_449(51)>
  # DEBUG threshold => threshold_273
  if (threshold_273 < remainder_448)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  result_274 = result_450 + 1;
  # DEBUG result => result_274

  <bb 54>:
  # result_275 = PHI <result_450(52), result_274(53), result_264(61)>
  # DEBUG result => result_275
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG val => NULL
  # DEBUG multiplier => NULL
  # DEBUG shift => NULL
  # DEBUG result => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG remainder => NULL
  # DEBUG threshold => NULL
  # DEBUG result => NULL
  # DEBUG ch_0_out_1 => NULL
  ch_0_out_1_129 = out_offset_61(D) + result_275;
  # DEBUG ch_0_out_1 => ch_0_out_1_129
  ch_0_out_1_130 = MAX_EXPR <_119, ch_0_out_1_129>;
  # DEBUG ch_0_out_1 => ch_0_out_1_130
  ch_0_out_1_131 = MIN_EXPR <_121, ch_0_out_1_130>;
  # DEBUG ch_0_out_1 => ch_0_out_1_131
  # DEBUG out_1 => out_1_360 + 1
  _132 = (signed char) ch_0_out_1_131;
  *out_1_360 = _132;
  # DEBUG D#9 => {CLOBBER}
  # DEBUG ip_b0 => D#9
  # DEBUG D#10 => {CLOBBER}
  # DEBUG ip_b1 => D#10

  <bb 55>:
  # out_0_4 = PHI <out_0_377(36), out_0_123(54)>
  # DEBUG out_0 => out_0_4
  out_0_134 = out_0_4 + _25;
  # DEBUG out_0 => out_0_134
  return out_0_134;

  <bb 56>:
  # DEBUG dividend => result_226
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_226
  # DEBUG threshold => 0
  if (result_226 < 0)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 57>:
  # DEBUG dividend => result_206
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_206
  # DEBUG threshold => 0
  if (result_206 < 0)
    goto <bb 18>;
  else
    goto <bb 21>;

  <bb 58>:
  # DEBUG dividend => result_186
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_186
  # DEBUG threshold => 0
  if (result_186 < 0)
    goto <bb 24>;
  else
    goto <bb 27>;

  <bb 59>:
  # DEBUG dividend => result_166
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_166
  # DEBUG threshold => 0
  if (result_166 < 0)
    goto <bb 30>;
  else
    goto <bb 33>;

  <bb 60>:
  # DEBUG dividend => result_284
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_284
  # DEBUG threshold => 0
  if (result_284 < 0)
    goto <bb 45>;
  else
    goto <bb 48>;

  <bb 61>:
  # DEBUG dividend => result_264
  # DEBUG exponent => 0
  # DEBUG result => 0
  # DEBUG remainder_mask => 0
  # DEBUG remainder => 0
  # DEBUG result => result_264
  # DEBUG threshold => 0
  if (result_264 < 0)
    goto <bb 51>;
  else
    goto <bb 54>;

}


