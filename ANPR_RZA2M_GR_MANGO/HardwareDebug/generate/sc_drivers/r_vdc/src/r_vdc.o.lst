   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"r_vdc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ConvertRwProcId2GrId,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	ConvertRwProcId2GrId:
  23              	.LFB23:
  24              		.file 1 "../generate/sc_drivers/r_vdc/src/r_vdc.c"
   1:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************************************
   2:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * DISCLAIMER
   3:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
   4:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prot
   5:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * applicable laws, including copyright laws.
   6:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
   8:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAI
   9:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS A
  10:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY R
  11:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DA
  12:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  13:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * this software. By using this software, you agree to the additional terms and conditions found by
  14:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * following link:
  15:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * http://www.renesas.com/disclaimer
  16:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
  17:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
  18:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  **************************************************************************************************
  19:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
  20:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * File Name :   r_vdc.c
  21:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @file         r_vdc.c
  22:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @version      1.12
  23:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief        RZ/A2M VDC driver API function
  24:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  ******************************************************************************/
  25:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  26:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /******************************************************************************
  27:../generate/sc_drivers/r_vdc/src/r_vdc.c **** Includes   <System Includes> , "Project Includes"
  28:../generate/sc_drivers/r_vdc/src/r_vdc.c **** ******************************************************************************/
  29:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #include    "r_vdc.h"
  30:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  31:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #include    "r_vdc_user.h"
  32:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #include    "r_vdc_register.h"
  33:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #include    "r_vdc_shared_param.h"
  34:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #include    "r_vdc_check_parameter.h"
  35:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  36:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /******************************************************************************
  37:../generate/sc_drivers/r_vdc/src/r_vdc.c **** Macro definitions
  38:../generate/sc_drivers/r_vdc/src/r_vdc.c **** ******************************************************************************/
  39:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  40:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /******************************************************************************
  41:../generate/sc_drivers/r_vdc/src/r_vdc.c **** Typedef definitions
  42:../generate/sc_drivers/r_vdc/src/r_vdc.c **** ******************************************************************************/
  43:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  44:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /******************************************************************************
  45:../generate/sc_drivers/r_vdc/src/r_vdc.c **** Private global variables and functions
  46:../generate/sc_drivers/r_vdc/src/r_vdc.c **** ******************************************************************************/
  47:../generate/sc_drivers/r_vdc/src/r_vdc.c **** static vdc_graphics_type_t ConvertRwProcId2GrId(const vdc_layer_id_t layer_id);
  48:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  49:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
  50:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_Initialize
  51:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       VDC driver initialization
  52:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
  53:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
  54:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
  55:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Initializes the VDC driver's internal variables.
  56:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Calls the user-defined function specified in init_func.
  57:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up and enables the VDC's panel clock.
  58:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up and enables the LVDS only if LVDS is used.
  59:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Disables all the VDC interrupts.
  60:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
  61:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
  62:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Initialization parameter
  63:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   init_func               : Pointer to a user-defined function
  64:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   user_num                : User defined number
  65:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
  66:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
  67:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_Initialize ( 
  68:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t        ch,
  69:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_init_t   * const param,
  70:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     void               (* const init_func)(uint32_t),
  71:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const uint32_t              user_num)
  72:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
  73:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
  74:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
  75:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  76:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
  77:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
  78:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_InitializeCheckPrm(ch, param);
  79:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
  80:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
  81:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
  82:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmInit();
  83:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
  84:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_LVDS_CLK);
  85:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
  86:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The LVDS PLL clock has been already set. */
  87:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (param->lvds != NULL)
  88:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
  89:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_LVDS_CLK;
  90:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
  91:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
  92:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
  93:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
  94:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
  95:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetInitParam(param);
  96:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
  97:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Callback function */
  98:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (init_func != 0)
  99:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 100:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             init_func(user_num);
 101:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 102:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 103:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Initialize(param);
 104:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 105:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Disable all VDC interrupts */
 106:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Int_Disable();
 107:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 108:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetResource(VDC_RESOURCE_PANEL_CLK, VDC_RESOURCE_ST_VALID);
 109:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 110:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* NULL check */
 111:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (param->lvds != NULL)
 112:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 113:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             VDC_ShrdPrmSetResource(VDC_RESOURCE_LVDS_CLK, VDC_RESOURCE_ST_VALID);
 114:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 115:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 116:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 117:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_Initialize() */
 118:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 119:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 120:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_Terminate
 121:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       VDC driver termination
 122:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 123:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 124:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 125:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Disables all the VDC interrupts.
 126:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Disables the VDC panel clock.
 127:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Disables the LVDS if one is used and becomes unnecessary as the result of calling
 128:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Calls the user-defined function specified in quit_func.
 129:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 130:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 131:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   quit_func               : Pointer to a user-defined function
 132:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   user_num                : User defined number
 133:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 134:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 135:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_Terminate 
 136:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, void (* const quit_func)(uint32_t), const uint32_t user_num)
 137:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 138:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t    ret;
 139:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_onoff_t    lvds_ref;
 140:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 141:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 142:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 143:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_TerminateCheckPrm(ch);
 144:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 145:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 146:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 147:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetTerminate();
 148:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 149:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Disable all VDC interrupts */
 150:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Int_Disable();
 151:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 152:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Terminate();
 153:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 154:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetResource(VDC_RESOURCE_PANEL_CLK, VDC_RESOURCE_ST_INVALID);
 155:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 156:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         lvds_ref = VDC_ShrdPrmGetLvdsClkRef();
 157:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (lvds_ref == VDC_OFF)       /* LVDS PLL clock is not referred. */
 158:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 159:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             VDC_ShrdPrmSetResource(VDC_RESOURCE_LVDS_CLK, VDC_RESOURCE_ST_INVALID);
 160:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 161:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 162:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Callback function */
 163:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (quit_func != 0)
 164:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 165:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             quit_func(user_num);
 166:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 167:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 168:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 169:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_Terminate() */
 170:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 171:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 172:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_VideoInput
 173:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Video input setup
 174:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 175:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 176:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 177:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the phase timing of the input signals.
 178:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Performs delay control on the sync signal for the video inputs.
 179:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the parameters for the external input video signals.
 180:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 181:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 182:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Video input setup parameter
 183:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 184:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 185:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_VideoInput 
 186:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_input_t * const param)
 187:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 188:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t ret;
 189:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 190:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 191:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 192:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_VideoInputCheckPrm(ch, param);
 193:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 194:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 195:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 196:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetInputParam(param);
 197:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 198:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 199:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_VideoInput(param);
 200:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 201:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetResource(VDC_RESOURCE_VIDEO_IN, VDC_RESOURCE_ST_VALID);
 202:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 203:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 204:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_VideoInput() */
 205:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 206:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 207:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_SyncControl
 208:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Synchronization control setup
 209:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 210:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 211:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 212:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Selects the vertical sync signal.
 213:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the period of the sync signal.
 214:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the delay of the vertical sync signal.
 215:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the full-screen enable signal.
 216:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the compensation for the vertical sync signal.
 217:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 218:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 219:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Synchronization control parameter
 220:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 221:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 222:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_SyncControl 
 223:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_sync_ctrl_t * const param)
 224:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 225:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 226:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 227:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 228:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 229:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 230:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_SyncControlCheckPrm(ch, param);
 231:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 232:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 233:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 234:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 235:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_PANEL_CLK);
 236:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 237:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 238:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_CLK;
 239:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 240:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 241:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 242:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 243:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (param->res_vs_sel == VDC_OFF)
 244:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* External input Vsync signal is selected. */
 245:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_VIDEO_IN);
 246:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 247:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 248:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_INPUT;
 249:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 250:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 251:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 252:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 253:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 254:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 255:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_SyncControl(param);
 256:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 257:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetResource(VDC_RESOURCE_VSYNC, VDC_RESOURCE_ST_VALID);
 258:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 259:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 260:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_SyncControl() */
 261:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 262:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 263:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_DisplayOutput
 264:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Display output setup
 265:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 266:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 267:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 268:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the timing signals for driving the LCD panel.
 269:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the phase, data sequence, and format of the LCD panel output data.
 270:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the background color.
 271:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 272:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 273:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Display output configuration parameter
 274:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 275:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 276:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_DisplayOutput  
 277:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_output_t * const param)
 278:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 279:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 280:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 281:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 282:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 283:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 284:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_DisplayOutputCheckPrm(ch, param);
 285:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 286:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 287:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 288:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 289:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_PANEL_CLK);
 290:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 291:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 292:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_CLK;
 293:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 294:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
 295:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 296:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_VSYNC);
 297:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 298:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 299:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_VSYNC;
 300:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 301:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 302:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 303:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 304:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 305:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetOutputParam(param);
 306:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 307:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 308:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_DisplayOutput(param);
 309:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 310:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetResource(VDC_RESOURCE_LCD_PANEL, VDC_RESOURCE_ST_VALID);
 311:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 312:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 313:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_DisplayOutput() */
 314:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 315:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 316:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_CallbackISR
 317:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Interrupt callback setup
 318:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 319:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 320:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 321:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Enables the interrupt when the pointer to the corresponding interrupt callback fu
 322:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Registers the specified interrupt callback function.
 323:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Disables the interrupt when the pointer to the corresponding interrupt callback f
 324:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                specified.
 325:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 326:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 327:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Interrupt callback setup parameter
 328:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 329:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 330:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_CallbackISR  
 331:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_int_t * const param)
 332:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 333:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 334:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 335:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 336:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 337:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 338:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_CallbackISRCheckPrm(ch, param);
 339:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 340:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 341:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 342:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 343:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_PANEL_CLK);
 344:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 345:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 346:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_CLK;
 347:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 348:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
 349:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 350:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_VSYNC);
 351:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 352:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 353:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_VSYNC;
 354:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 355:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 356:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 357:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 358:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 359:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 360:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Int_SetInterrupt(param);
 361:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 362:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 363:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_CallbackISR() */
 364:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 365:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 366:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_WriteDataControl
 367:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data write control processing
 368:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 369:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 370:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 371:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the input image area to be captured.
 372:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes input image scale-down/rotation control settings.
 373:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes frame buffer write control settings.
 374:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 375:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 376:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 377:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_WR
 378:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Data write control parameter
 379:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 380:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 381:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_WriteDataControl ( 
 382:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t        ch,
 383:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t       layer_id,
 384:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_write_t  * const param)
 385:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 386:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 387:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 388:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 389:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 390:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 391:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_WriteDataControlCheckPrm(ch, layer_id, param);
 392:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 393:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 394:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 395:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 396:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
 397:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
 398:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is already used. */
 399:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 400:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 401:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
 402:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 403:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_VIDEO_IN);
 404:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 405:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 406:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_INPUT;
 407:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 408:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 409:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 410:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 411:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 412:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetWriteParam(param);
 413:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 414:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 415:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_WriteDataControl(param);
 416:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 417:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetLayerResource(layer_id, VDC_RESOURCE_ST_VALID);
 418:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 419:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 420:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_WriteDataControl() */
 421:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 422:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 423:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ChangeWriteProcess
 424:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data write change processing
 425:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 426:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 427:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 428:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Changes the input image area to be captured.
 429:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes changes with respect to scaling-down/rotation control of the input image.
 430:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 431:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 432:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 433:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_WR
 434:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Data write change parameter
 435:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 436:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 437:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ChangeWriteProcess ( 
 438:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t            ch,
 439:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t           layer_id,
 440:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_write_chg_t   * const param)
 441:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 442:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 443:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 444:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 445:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 446:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 447:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ChangeWriteProcessCheckPrm(ch, layer_id, param);
 448:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 449:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 450:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 451:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 452:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetRwProcEnabled(layer_id);
 453:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 454:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 455:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 456:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 457:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 458:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 459:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 460:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetChgWriteParam(param);
 461:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 462:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 463:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ChangeWriteProcess(param);
 464:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 465:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 466:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ChangeWriteProcess() */
 467:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 468:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 469:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ReadDataControl
 470:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data read control processing
 471:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 472:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 473:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 474:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the display area for graphics images.
 475:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes image scale-up control settings (only layer 0).
 476:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes frame buffer read control settings.
 477:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 478:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 479:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 480:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
 481:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 482:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 483:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Data read control parameter
 484:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 485:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 486:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ReadDataControl ( 
 487:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t        ch,
 488:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t       layer_id,
 489:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_read_t   * const param)
 490:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 491:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 492:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
 493:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 494:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 495:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
 496:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 497:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 498:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 499:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ReadDataControlCheckPrm(ch, layer_id, graphics_id, param);
 500:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 501:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 502:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 503:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 504:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
 505:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
 506:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is already used. */
 507:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 508:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 509:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 510:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 511:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 512:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetReadParam(graphics_id, param);
 513:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 514:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 515:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ReadDataControl(graphics_id, param);
 516:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 517:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetLayerResource(layer_id, VDC_RESOURCE_ST_VALID);
 518:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 519:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 520:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ReadDataControl() */
 521:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 522:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 523:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ChangeReadProcess
 524:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data read change processing
 525:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 526:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 527:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 528:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Changes the frame buffer base address.
 529:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Changes the frame buffer read size (image scale-up control, only layer 0).
 530:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Changes the display area for graphics images.
 531:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Changes the graphics display mode.
 532:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 533:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 534:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 535:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
 536:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 537:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 538:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Data read change parameter
 539:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 540:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 541:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ChangeReadProcess ( 
 542:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t            ch,
 543:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t           layer_id,
 544:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_read_chg_t   * const param)
 545:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 546:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 547:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
 548:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 549:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 550:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
 551:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 552:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 553:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 554:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ChangeReadProcessCheckPrm(ch, layer_id, param);
 555:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 556:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 557:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 558:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 559:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetRwProcEnabled(layer_id);
 560:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 561:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 562:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 563:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 564:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 565:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 566:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 567:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetChgReadParam(graphics_id, param);
 568:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 569:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 570:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ChangeReadProcess(graphics_id, param);
 571:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 572:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 573:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ChangeReadProcess() */
 574:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 575:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 576:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_StartProcess
 577:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data write/read start processing
 578:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 579:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 580:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs layer start processing. If the layer ID specified in layer_i
 581:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              is VDC_LAYER_ID_ALL, the function starts all the layers that are in the stopped sta
 582:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              and also enabled. If the layer ID is not VDC_LAYER_ID_ALL, the function starts only
 583:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              the specified layer.<br>
 584:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              When performing start processing for write, the function starts a write to the fram
 585:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              When performing start processing for read, the function starts a read from the fram
 586:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              and sets the graphics display mode to the specified values for each layer.
 587:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 588:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 589:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 590:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_ALL
 591:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_WR
 592:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
 593:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 594:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 595:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Data write/read start parameter
 596:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 597:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 598:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_StartProcess ( 
 599:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t        ch,
 600:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t       layer_id,
 601:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_start_t  * const param)
 602:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 603:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 604:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 605:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 606:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 607:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 608:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_StartProcessCheckPrm(ch, layer_id, param);
 609:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 610:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 611:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 612:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 613:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (layer_id != VDC_LAYER_ID_ALL)
 614:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 615:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetRwProcReady(layer_id);
 616:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 617:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 618:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_LAYER;
 619:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 620:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 621:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 622:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 623:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 624:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 625:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_StartProcess(layer_id, param);
 626:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 627:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 628:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_StartProcess() */
 629:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 630:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 631:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_StopProcess
 632:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data write/read stop processing
 633:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 634:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 635:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs layer stop processing. If the layer ID specified in layer_id
 636:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              VDC_LAYER_ID_ALL, the function stops all the layers that are enabled and running.
 637:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              If the layer ID is not VDC_LAYER_ID_ALL, the function stops only the specified laye
 638:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              When performing stop processing for write, the function stops the write to the fram
 639:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              When performing stop processing for read, the function stops the read from the fram
 640:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              and resets the graphics display mode to the initial values for each of the layers.
 641:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 642:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 643:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 644:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_ALL
 645:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_WR
 646:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
 647:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 648:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 649:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 650:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 651:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_StopProcess  
 652:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_layer_id_t layer_id)
 653:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 654:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 655:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 656:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 657:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 658:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 659:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_StopProcessCheckPrm(ch, layer_id);
 660:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 661:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 662:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 663:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 664:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (layer_id != VDC_LAYER_ID_ALL)
 665:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 666:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetRwProcEnabled(layer_id);
 667:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 668:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 669:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_LAYER;
 670:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 671:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 672:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 673:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 674:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 675:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 676:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_StopProcess(layer_id);
 677:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 678:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 679:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_StopProcess() */
 680:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 681:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 682:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ReleaseDataControl
 683:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Data write/read control release processing
 684:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 685:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 686:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              If the layer ID specified in layer_id is VDC_LAYER_ID_ALL, the function disables al
 687:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              that are not running and also enabled. If the layer ID is not VDC_LAYER_ID_ALL, the
 688:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              disables only the specified layers.
 689:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 690:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 691:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 692:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_ALL
 693:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_WR
 694:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
 695:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 696:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 697:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 698:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 699:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ReleaseDataControl 
 700:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_layer_id_t layer_id)
 701:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 702:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 703:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 704:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 705:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 706:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 707:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ReleaseDataControlCheckPrm(ch, layer_id);
 708:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 709:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 710:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 711:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 712:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (layer_id != VDC_LAYER_ID_ALL)
 713:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 714:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetRwProcReady(layer_id);
 715:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 716:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 717:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_RESOURCE_LAYER;
 718:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 719:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 720:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 721:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 722:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 723:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ShrdPrmSetLayerResource(layer_id, VDC_RESOURCE_ST_INVALID);
 724:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 725:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 726:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ReleaseDataControl() */
 727:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 728:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 729:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_VideoNoiseReduction
 730:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Noise reduction setup
 731:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 732:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 733:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 734:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off noise reduction processing.
 735:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the noise reduction parameters for the Y/G, Cb/B, and Cr/R signals.
 736:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 737:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 738:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   nr1d_on                 : Noise reduction ON/OFF setting
 739:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Noise reduction setup parameter
 740:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 741:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 742:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_VideoNoiseReduction ( 
 743:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t                    ch,
 744:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t                      nr1d_on,
 745:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_noise_reduction_t    * const param)
 746:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 747:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 748:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 749:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 750:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 751:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 752:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_VideoNoiseReductCheckPrm(ch, param);
 753:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 754:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 755:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 756:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 757:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_VIDEO_IN);
 758:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 759:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 760:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_INPUT;
 761:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 762:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 763:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 764:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 765:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 766:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_VideoNoiseReduction(nr1d_on, param);
 767:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 768:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 769:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_VideoNoiseReduction() */
 770:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 771:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 772:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ImageColorMatrix
 773:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Color matrix setup
 774:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 775:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 776:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function sets up the specified color matrix.
 777:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 778:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 779:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Color matrix setup parameter
 780:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 781:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 782:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ImageColorMatrix 
 783:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_color_matrix_t * const param)
 784:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 785:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 786:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 787:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 788:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 789:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 790:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ImageColorMatrixCheckPrm(ch, param);
 791:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 792:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 793:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 794:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 795:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (param->module == VDC_COLORMTX_IMGCNT)
 796:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 797:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetLayerResource(VDC_LAYER_ID_0_WR);
 798:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 799:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else  /* VDC_COLORMTX_ADJ_0 */
 800:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 801:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             rsrc_state = VDC_ShrdPrmGetLayerResource(VDC_LAYER_ID_0_RD);
 802:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 803:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 804:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 805:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 806:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 807:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 808:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 809:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 810:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 811:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 812:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ImageColorMatrix(param);
 813:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 814:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 815:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ImageColorMatrix() */
 816:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 817:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 818:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ImageEnhancement
 819:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Image enhancement processing
 820:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 821:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 822:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 823:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off sharpness processing.
 824:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the sharpness parameter.
 825:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off LTI processing.
 826:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the LTI parameter.
 827:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the enhancer-enabled area to be subjected to sharpness and LTI processing
 828:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 829:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 830:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   imgimprv_id             : Image quality improver ID
 831:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_IMG_IMPRV_0
 832:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   shp_h_on                : Sharpness ON/OFF setting
 833:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   sharp_param             : Sharpness setup parameter
 834:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   lti_h_on                : LTI ON/OFF setting
 835:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   lti_param               : LTI setup parameter
 836:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   enh_area                : Enhancer-enabled area setup parameter
 837:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 838:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 839:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ImageEnhancement ( 
 840:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t                ch,
 841:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_imgimprv_id_t            imgimprv_id,
 842:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t                  shp_h_on,
 843:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_enhance_sharp_t  * const sharp_param,
 844:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t                  lti_h_on,
 845:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_enhance_lti_t    * const lti_param,
 846:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_period_rect_t    * const enh_area)
 847:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 848:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 849:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 850:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_color_space_t      color_space;
 851:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 852:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 853:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 854:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ImageEnhancementCheckPrm(ch, imgimprv_id, sharp_param, enh_area);
 855:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 856:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 857:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 858:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 859:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(VDC_LAYER_ID_0_RD);
 860:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 861:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The layer is invalid. */
 862:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 863:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 864:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
 865:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 866:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             /* Condition checks */
 867:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             color_space = VDC_ShrdPrmGetColorSpaceFbRd(VDC_GR_TYPE_GR0);
 868:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_GBR)
 869:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The image quality improver does not act on RGB signals. */
 870:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_IF_CONDITION;
 871:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 872:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 873:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 874:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 875:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 876:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 877:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ImageEnhancement(shp_h_on, sharp_param, lti_h_on, lti_param, enh_area);
 878:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 879:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 880:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ImageEnhancement() */
 881:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 882:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 883:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_ImageBlackStretch
 884:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Black stretch setup
 885:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 886:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 887:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 888:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off black stretch processing.
 889:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the black stretch parameters.
 890:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 891:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 892:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   imgimprv_id             : Image quality improver ID
 893:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_IMG_IMPRV_0
 894:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   bkstr_on                : Black stretch ON/OFF setting
 895:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Black stretch setup parameter
 896:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 897:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 898:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_ImageBlackStretch ( 
 899:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t        ch,
 900:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_imgimprv_id_t    imgimprv_id,
 901:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t          bkstr_on,
 902:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_black_t  * const param)
 903:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 904:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 905:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 906:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_color_space_t      color_space;
 907:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 908:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 909:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 910:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ImageBlackStretchCheckPrm(ch, imgimprv_id, param);
 911:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 912:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 913:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 914:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 915:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(VDC_LAYER_ID_0_RD);
 916:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 917:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The layer is invalid. */
 918:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 919:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 920:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
 921:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 922:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             /* Condition checks */
 923:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             color_space = VDC_ShrdPrmGetColorSpaceFbRd(VDC_GR_TYPE_GR0);
 924:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_GBR)
 925:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The image quality improver does not act on RGB signals. */
 926:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_IF_CONDITION;
 927:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 928:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 929:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 930:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 931:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 932:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 933:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_ImageBlackStretch(bkstr_on, param);
 934:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 935:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 936:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_ImageBlackStretch() */
 937:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 938:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 939:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_AlphaBlending
 940:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Alpha blending setup
 941:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 942:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 943:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 944:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the alpha value of the ARGB1555/RGBA5551 formats.
 945:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Make settings for premultiplication processing at alpha blending in one-pixel.
 946:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 947:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 948:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 949:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
 950:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
 951:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Alpha blending setup parameter
 952:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
 953:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
 954:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_AlphaBlending ( 
 955:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t                ch,
 956:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t               layer_id,
 957:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_alpha_blending_t * const param)
 958:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
 959:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 960:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
 961:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
 962:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 963:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
 964:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 965:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
 966:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
 967:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_AlphaBlendingCheckPrm(ch, layer_id, param);
 968:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 969:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 970:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 971:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 972:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
 973:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 974:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 975:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
 976:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 977:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 978:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
 979:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 980:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
 981:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_AlphaBlending(graphics_id, param);
 982:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 983:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
 984:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_AlphaBlending() */
 985:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 986:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
 987:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_AlphaBlendingRect
 988:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Rectangle alpha blending setup
 989:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
 990:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
 991:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
 992:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off alpha blending in a rectangular area.
 993:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the rectangular area subjected to alpha blending.
 994:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the alpha value for alpha blending in a rectangular area.
 995:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes fade-in/-out settings to be applied to rectangle alpha blending.
 996:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
 997:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
 998:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
 999:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
1000:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
1001:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   gr_arc_on               : ON/OFF setting for alpha blending in a rectangular area
1002:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Setup parameter for alpha blending in a rectangular area
1003:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
1004:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1005:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_AlphaBlendingRect ( 
1006:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t                        ch,
1007:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t                       layer_id,
1008:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t                          gr_arc_on,
1009:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_alpha_blending_rect_t    * const param)
1010:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
1011:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
1012:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
1013:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
1014:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1015:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
1016:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1017:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
1018:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
1019:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_AlphaBlendingRectCheckPrm(ch, layer_id, param);
1020:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
1021:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1022:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1023:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
1024:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
1025:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
1026:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
1027:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
1028:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1029:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1030:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1031:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1032:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
1033:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_AlphaBlendingRect(graphics_id, gr_arc_on, param);
1034:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1035:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
1036:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_AlphaBlendingRect() */
1037:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1038:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
1039:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_Chromakey
1040:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Chroma-key setup
1041:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
1042:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
1043:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
1044:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off the chroma-key processing.
1045:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the color signals to be subject to chroma-key processing and
1046:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                the color signals after replacement.
1047:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
1048:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
1049:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
1050:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
1051:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
1052:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
1053:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   gr_ck_on                : Chroma-key ON/OFF setting
1054:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Chroma-key setup parameter
1055:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
1056:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1057:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_Chromakey ( 
1058:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t            ch,
1059:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_layer_id_t           layer_id,
1060:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t              gr_ck_on,
1061:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_chromakey_t  * const param)
1062:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
1063:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
1064:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
1065:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_color_space_t      color_space;
1066:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
1067:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1068:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
1069:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1070:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
1071:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
1072:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_ChromakeyCheckPrm(ch, layer_id, graphics_id, param);
1073:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
1074:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1075:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1076:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
1077:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
1078:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
1079:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
1080:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
1081:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1082:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         else
1083:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
1084:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             /* Condition checks */
1085:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             color_space = VDC_ShrdPrmGetColorSpaceFbRd(graphics_id);
1086:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_YCBCR)
1087:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* Chroma-key processing cannot be used
1088:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                    when the format of the signal read from the frame buffer is YCbCr422 or YCbCr444
1089:../generate/sc_drivers/r_vdc/src/r_vdc.c ****                 ret = VDC_ERR_IF_CONDITION;
1090:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
1091:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1092:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1093:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1094:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1095:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
1096:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_Chromakey(graphics_id, gr_ck_on, param);
1097:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1098:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
1099:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_Chromakey() */
1100:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1101:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
1102:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_CLUT
1103:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       CLUT setup
1104:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
1105:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
1106:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function sets up CLUT for the specified layer.
1107:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
1108:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
1109:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id                : Layer ID
1110:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
1111:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
1112:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
1113:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : CLUT setup parameter
1114:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
1115:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1116:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_CLUT 
1117:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_layer_id_t layer_id, const vdc_clut_t * const param)
1118:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
1119:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
1120:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t    graphics_id;
1121:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
1122:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1123:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     graphics_id = ConvertRwProcId2GrId(layer_id);
1124:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1125:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
1126:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
1127:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_CLUTCheckPrm(ch, layer_id, graphics_id, param);
1128:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
1129:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1130:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1131:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
1132:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetLayerResource(layer_id);
1133:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
1134:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
1135:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_LAYER;
1136:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1137:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1138:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1139:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1140:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
1141:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_CLUT(graphics_id, param);
1142:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1143:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
1144:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_CLUT() */
1145:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1146:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
1147:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_DisplayCalibration
1148:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Display calibration processing
1149:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
1150:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
1151:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
1152:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up panel brightness adjustment.
1153:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up contrast adjustment.
1154:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up panel dithering.
1155:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Makes control settings for the correction circuit sequence.
1156:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
1157:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
1158:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Display calibration parameter
1159:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
1160:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1161:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_DisplayCalibration  
1162:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             (const vdc_channel_t ch, const vdc_disp_calibration_t * const param)
1163:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
1164:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
1165:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
1166:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1167:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
1168:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
1169:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_DisplayCalibrationCheckPrm(ch, param);
1170:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
1171:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1172:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1173:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
1174:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_LCD_PANEL);
1175:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
1176:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
1177:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_OUTPUT;
1178:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1179:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1180:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1181:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1182:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
1183:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_DisplayCalibration(param);
1184:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1185:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
1186:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_DisplayCalibration() */
1187:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1188:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
1189:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          R_VDC_GammaCorrection
1190:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Gamma correction setup
1191:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
1192:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              Description:<br>
1193:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              This function performs the following processing:
1194:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Turns on and off gamma correction processing.
1195:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the gamma correction gain adjustment values for the G/B/R signals.
1196:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *              - Sets up the gamma correction start threshold values for the G/B/R signals.
1197:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   ch                      : Channel
1198:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_CHANNEL_0
1199:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   gam_on                  : Gamma correction ON/OFF setting
1200:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   param                   : Gamma correction setup parameter
1201:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Error code
1202:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1203:../generate/sc_drivers/r_vdc/src/r_vdc.c **** vdc_error_t R_VDC_GammaCorrection ( 
1204:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_channel_t                    ch,
1205:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_onoff_t                      gam_on,
1206:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     const vdc_gamma_correction_t   * const param)
1207:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
1208:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
1209:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_resource_state_t   rsrc_state;
1210:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1211:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_OK;
1212:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #ifdef  R_VDC_CHECK_PARAMETERS
1213:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     ret = VDC_GammaCorrectionCheckPrm(ch, param);
1214:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
1215:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1216:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1217:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
1218:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_LCD_PANEL);
1219:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
1220:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
1221:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             ret = VDC_ERR_RESOURCE_OUTPUT;
1222:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
1223:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1224:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     if (ret == VDC_OK)
1225:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1226:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Setting VDC registers */
1227:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         VDC_GammaCorrection(gam_on, param);
1228:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1229:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return ret;
1230:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function R_VDC_GammaCorrection() */
1231:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1232:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /******************************************************************************
1233:../generate/sc_drivers/r_vdc/src/r_vdc.c **** Local Functions
1234:../generate/sc_drivers/r_vdc/src/r_vdc.c **** ******************************************************************************/
1235:../generate/sc_drivers/r_vdc/src/r_vdc.c **** /**************************************************************************//**
1236:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @fn          ConvertRwProcId2GrId
1237:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @brief       Convert read/write process ID into graphics type ID
1238:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *
1239:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @param[in]   layer_id              : Layer ID
1240:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_0_RD
1241:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_2_RD
1242:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *                                        - VDC_LAYER_ID_3_RD
1243:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  * @retval      Graphics type ID
1244:../generate/sc_drivers/r_vdc/src/r_vdc.c ****  *****************************************************************************/
1245:../generate/sc_drivers/r_vdc/src/r_vdc.c **** static vdc_graphics_type_t ConvertRwProcId2GrId (const vdc_layer_id_t layer_id) 
1246:../generate/sc_drivers/r_vdc/src/r_vdc.c **** {
  25              		.loc 1 1246 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1247:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_graphics_type_t graphics_id;
1248:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
1249:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     switch (layer_id)
  31              		.loc 1 1249 0
  32 0000 020050E3 		cmp	r0, #2
  33 0004 0900000A 		beq	.L6
  34 0008 030050E3 		cmp	r0, #3
  35 000c 0500000A 		beq	.L4
  36 0010 010050E3 		cmp	r0, #1
  37 0014 0100000A 		beq	.L8
  38              	.LVL1:
1250:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
1251:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         case VDC_LAYER_ID_0_RD:                /* Layer 0, read process */
1252:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             graphics_id = VDC_GR_TYPE_GR0;     /* Graphics 0 */
1253:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
1254:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         case VDC_LAYER_ID_2_RD:                /* Layer 2, read process */
1255:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             graphics_id = VDC_GR_TYPE_GR2;     /* Graphics 2 */
1256:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
1257:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         case VDC_LAYER_ID_3_RD:                /* Layer 3, read process */
1258:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             graphics_id = VDC_GR_TYPE_GR3;     /* Graphics 3 */
1259:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
1260:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         default:                                /* Error */
1261:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             graphics_id = VDC_GR_TYPE_NUM;
  39              		.loc 1 1261 0
  40 0018 0300A0E3 		mov	r0, #3
  41              	.LVL2:
1262:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
  42              		.loc 1 1262 0
  43 001c 1EFF2FE1 		bx	lr
  44              	.LVL3:
  45              	.L8:
1252:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
  46              		.loc 1 1252 0
  47 0020 0000A0E3 		mov	r0, #0
  48              	.LVL4:
  49 0024 1EFF2FE1 		bx	lr
  50              	.LVL5:
  51              	.L4:
1258:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
  52              		.loc 1 1258 0
  53 0028 0200A0E3 		mov	r0, #2
  54              	.LVL6:
1259:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         default:                                /* Error */
  55              		.loc 1 1259 0
  56 002c 1EFF2FE1 		bx	lr
  57              	.LVL7:
  58              	.L6:
1255:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         break;
  59              		.loc 1 1255 0
  60 0030 0100A0E3 		mov	r0, #1
  61              	.LVL8:
1263:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
1264:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     return graphics_id;
1265:../generate/sc_drivers/r_vdc/src/r_vdc.c **** }   /* End of function ConvertRwProcId2GrId() */
  62              		.loc 1 1265 0
  63 0034 1EFF2FE1 		bx	lr
  64              		.cfi_endproc
  65              	.LFE23:
  67              		.section	.text.R_VDC_Initialize,"ax",%progbits
  68              		.align	2
  69              		.global	R_VDC_Initialize
  70              		.syntax unified
  71              		.arm
  72              		.fpu neon
  74              	R_VDC_Initialize:
  75              	.LFB0:
  72:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
  76              		.loc 1 72 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              	.LVL9:
  81 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
  82              		.cfi_def_cfa_offset 24
  83              		.cfi_offset 4, -24
  84              		.cfi_offset 5, -20
  85              		.cfi_offset 6, -16
  86              		.cfi_offset 7, -12
  87              		.cfi_offset 8, -8
  88              		.cfi_offset 14, -4
  89 0004 0150A0E1 		mov	r5, r1
  90 0008 0260A0E1 		mov	r6, r2
  91 000c 0370A0E1 		mov	r7, r3
  92              	.LVL10:
  78:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
  93              		.loc 1 78 0
  94 0010 FEFFFFEB 		bl	VDC_InitializeCheckPrm
  95              	.LVL11:
  80:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
  96              		.loc 1 80 0
  97 0014 004050E2 		subs	r4, r0, #0
  98 0018 0300000A 		beq	.L15
  99              	.LVL12:
 100              	.L10:
  93:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 101              		.loc 1 93 0
 102 001c 000054E3 		cmp	r4, #0
 103 0020 0A00000A 		beq	.L16
 104              	.L11:
 117:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 105              		.loc 1 117 0
 106 0024 0400A0E1 		mov	r0, r4
 107 0028 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 108              	.LVL13:
 109              	.L15:
  82:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         /* Resource checks */
 110              		.loc 1 82 0
 111 002c FEFFFFEB 		bl	VDC_ShrdPrmInit
 112              	.LVL14:
  84:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
 113              		.loc 1 84 0
 114 0030 0400A0E3 		mov	r0, #4
 115 0034 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 116              	.LVL15:
  85:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The LVDS PLL clock has been already set. */
 117              		.loc 1 85 0
 118 0038 000050E3 		cmp	r0, #0
 119 003c F6FFFF0A 		beq	.L10
  87:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 120              		.loc 1 87 0
 121 0040 043095E5 		ldr	r3, [r5, #4]
 122 0044 000053E3 		cmp	r3, #0
  89:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 123              		.loc 1 89 0
 124 0048 0D40A013 		movne	r4, #13
 125 004c F2FFFFEA 		b	.L10
 126              	.LVL16:
 127              	.L16:
  95:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 128              		.loc 1 95 0
 129 0050 0500A0E1 		mov	r0, r5
 130 0054 FEFFFFEB 		bl	VDC_ShrdPrmSetInitParam
 131              	.LVL17:
  98:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 132              		.loc 1 98 0
 133 0058 000056E3 		cmp	r6, #0
 134 005c 0100000A 		beq	.L12
 100:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 135              		.loc 1 100 0
 136 0060 0700A0E1 		mov	r0, r7
 137 0064 36FF2FE1 		blx	r6
 138              	.LVL18:
 139              	.L12:
 103:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 140              		.loc 1 103 0
 141 0068 0500A0E1 		mov	r0, r5
 142 006c FEFFFFEB 		bl	VDC_Initialize
 143              	.LVL19:
 106:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 144              		.loc 1 106 0
 145 0070 FEFFFFEB 		bl	VDC_Int_Disable
 146              	.LVL20:
 108:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 147              		.loc 1 108 0
 148 0074 0110A0E3 		mov	r1, #1
 149 0078 0000A0E3 		mov	r0, #0
 150 007c FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 151              	.LVL21:
 111:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 152              		.loc 1 111 0
 153 0080 043095E5 		ldr	r3, [r5, #4]
 154 0084 000053E3 		cmp	r3, #0
 155 0088 E5FFFF0A 		beq	.L11
 113:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 156              		.loc 1 113 0
 157 008c 0110A0E3 		mov	r1, #1
 158 0090 0400A0E3 		mov	r0, #4
 159 0094 FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 160              	.LVL22:
 161 0098 E1FFFFEA 		b	.L11
 162              		.cfi_endproc
 163              	.LFE0:
 165              		.section	.text.R_VDC_Terminate,"ax",%progbits
 166              		.align	2
 167              		.global	R_VDC_Terminate
 168              		.syntax unified
 169              		.arm
 170              		.fpu neon
 172              	R_VDC_Terminate:
 173              	.LFB1:
 137:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t    ret;
 174              		.loc 1 137 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              	.LVL23:
 179 0000 70402DE9 		push	{r4, r5, r6, lr}
 180              		.cfi_def_cfa_offset 16
 181              		.cfi_offset 4, -16
 182              		.cfi_offset 5, -12
 183              		.cfi_offset 6, -8
 184              		.cfi_offset 14, -4
 185 0004 0150A0E1 		mov	r5, r1
 186 0008 0260A0E1 		mov	r6, r2
 187              	.LVL24:
 143:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 188              		.loc 1 143 0
 189 000c FEFFFFEB 		bl	VDC_TerminateCheckPrm
 190              	.LVL25:
 145:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 191              		.loc 1 145 0
 192 0010 004050E2 		subs	r4, r0, #0
 193 0014 0100000A 		beq	.L21
 194              	.LVL26:
 195              	.L18:
 169:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 196              		.loc 1 169 0
 197 0018 0400A0E1 		mov	r0, r4
 198 001c 7080BDE8 		pop	{r4, r5, r6, pc}
 199              	.LVL27:
 200              	.L21:
 147:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 201              		.loc 1 147 0
 202 0020 FEFFFFEB 		bl	VDC_ShrdPrmSetTerminate
 203              	.LVL28:
 150:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 204              		.loc 1 150 0
 205 0024 FEFFFFEB 		bl	VDC_Int_Disable
 206              	.LVL29:
 152:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 207              		.loc 1 152 0
 208 0028 FEFFFFEB 		bl	VDC_Terminate
 209              	.LVL30:
 154:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 210              		.loc 1 154 0
 211 002c 0010A0E3 		mov	r1, #0
 212 0030 0100A0E1 		mov	r0, r1
 213 0034 FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 214              	.LVL31:
 156:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (lvds_ref == VDC_OFF)       /* LVDS PLL clock is not referred. */
 215              		.loc 1 156 0
 216 0038 FEFFFFEB 		bl	VDC_ShrdPrmGetLvdsClkRef
 217              	.LVL32:
 157:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 218              		.loc 1 157 0
 219 003c 000050E3 		cmp	r0, #0
 220 0040 0400000A 		beq	.L22
 221              	.LVL33:
 222              	.L19:
 163:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 223              		.loc 1 163 0
 224 0044 000055E3 		cmp	r5, #0
 225 0048 F2FFFF0A 		beq	.L18
 165:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 226              		.loc 1 165 0
 227 004c 0600A0E1 		mov	r0, r6
 228 0050 35FF2FE1 		blx	r5
 229              	.LVL34:
 230 0054 EFFFFFEA 		b	.L18
 231              	.LVL35:
 232              	.L22:
 159:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 233              		.loc 1 159 0
 234 0058 0010A0E3 		mov	r1, #0
 235 005c 0400A0E3 		mov	r0, #4
 236              	.LVL36:
 237 0060 FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 238              	.LVL37:
 239 0064 F6FFFFEA 		b	.L19
 240              		.cfi_endproc
 241              	.LFE1:
 243              		.section	.text.R_VDC_VideoInput,"ax",%progbits
 244              		.align	2
 245              		.global	R_VDC_VideoInput
 246              		.syntax unified
 247              		.arm
 248              		.fpu neon
 250              	R_VDC_VideoInput:
 251              	.LFB2:
 187:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t ret;
 252              		.loc 1 187 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL38:
 257 0000 70402DE9 		push	{r4, r5, r6, lr}
 258              		.cfi_def_cfa_offset 16
 259              		.cfi_offset 4, -16
 260              		.cfi_offset 5, -12
 261              		.cfi_offset 6, -8
 262              		.cfi_offset 14, -4
 263 0004 0150A0E1 		mov	r5, r1
 264              	.LVL39:
 192:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 265              		.loc 1 192 0
 266 0008 FEFFFFEB 		bl	VDC_VideoInputCheckPrm
 267              	.LVL40:
 194:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 268              		.loc 1 194 0
 269 000c 004050E2 		subs	r4, r0, #0
 270 0010 0100000A 		beq	.L26
 271              	.LVL41:
 272              	.L24:
 204:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 273              		.loc 1 204 0
 274 0014 0400A0E1 		mov	r0, r4
 275 0018 7080BDE8 		pop	{r4, r5, r6, pc}
 276              	.LVL42:
 277              	.L26:
 196:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 278              		.loc 1 196 0
 279 001c 0500A0E1 		mov	r0, r5
 280              	.LVL43:
 281 0020 FEFFFFEB 		bl	VDC_ShrdPrmSetInputParam
 282              	.LVL44:
 199:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 283              		.loc 1 199 0
 284 0024 0500A0E1 		mov	r0, r5
 285 0028 FEFFFFEB 		bl	VDC_VideoInput
 286              	.LVL45:
 201:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 287              		.loc 1 201 0
 288 002c 0110A0E3 		mov	r1, #1
 289 0030 0100A0E1 		mov	r0, r1
 290 0034 FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 291              	.LVL46:
 292 0038 F5FFFFEA 		b	.L24
 293              		.cfi_endproc
 294              	.LFE2:
 296              		.section	.text.R_VDC_SyncControl,"ax",%progbits
 297              		.align	2
 298              		.global	R_VDC_SyncControl
 299              		.syntax unified
 300              		.arm
 301              		.fpu neon
 303              	R_VDC_SyncControl:
 304              	.LFB3:
 224:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 305              		.loc 1 224 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              	.LVL47:
 310 0000 70402DE9 		push	{r4, r5, r6, lr}
 311              		.cfi_def_cfa_offset 16
 312              		.cfi_offset 4, -16
 313              		.cfi_offset 5, -12
 314              		.cfi_offset 6, -8
 315              		.cfi_offset 14, -4
 316 0004 0150A0E1 		mov	r5, r1
 317              	.LVL48:
 230:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 318              		.loc 1 230 0
 319 0008 FEFFFFEB 		bl	VDC_SyncControlCheckPrm
 320              	.LVL49:
 232:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 321              		.loc 1 232 0
 322 000c 004050E2 		subs	r4, r0, #0
 323 0010 0800000A 		beq	.L34
 324              	.LVL50:
 325              	.L28:
 241:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 326              		.loc 1 241 0
 327 0014 000054E3 		cmp	r4, #0
 328 0018 0200001A 		bne	.L29
 243:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* External input Vsync signal is selected. */
 329              		.loc 1 243 0
 330 001c 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 331 0020 000053E3 		cmp	r3, #0
 332 0024 0700000A 		beq	.L35
 333              	.LVL51:
 334              	.L29:
 252:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 335              		.loc 1 252 0
 336 0028 000054E3 		cmp	r4, #0
 337 002c 0A00000A 		beq	.L36
 338              	.L30:
 260:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 339              		.loc 1 260 0
 340 0030 0400A0E1 		mov	r0, r4
 341 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 342              	.LVL52:
 343              	.L34:
 235:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 344              		.loc 1 235 0
 345 0038 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 346              	.LVL53:
 236:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 347              		.loc 1 236 0
 348 003c 010050E3 		cmp	r0, #1
 238:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 349              		.loc 1 238 0
 350 0040 0940A013 		movne	r4, #9
 351 0044 F2FFFFEA 		b	.L28
 352              	.LVL54:
 353              	.L35:
 245:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 354              		.loc 1 245 0
 355 0048 0100A0E3 		mov	r0, #1
 356 004c FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 357              	.LVL55:
 246:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 358              		.loc 1 246 0
 359 0050 010050E3 		cmp	r0, #1
 248:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 360              		.loc 1 248 0
 361 0054 0B40A013 		movne	r4, #11
 362              	.LVL56:
 363 0058 F2FFFFEA 		b	.L29
 364              	.LVL57:
 365              	.L36:
 255:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 366              		.loc 1 255 0
 367 005c 0500A0E1 		mov	r0, r5
 368 0060 FEFFFFEB 		bl	VDC_SyncControl
 369              	.LVL58:
 257:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 370              		.loc 1 257 0
 371 0064 0110A0E3 		mov	r1, #1
 372 0068 0200A0E3 		mov	r0, #2
 373 006c FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 374              	.LVL59:
 375 0070 EEFFFFEA 		b	.L30
 376              		.cfi_endproc
 377              	.LFE3:
 379              		.section	.text.R_VDC_DisplayOutput,"ax",%progbits
 380              		.align	2
 381              		.global	R_VDC_DisplayOutput
 382              		.syntax unified
 383              		.arm
 384              		.fpu neon
 386              	R_VDC_DisplayOutput:
 387              	.LFB4:
 278:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 388              		.loc 1 278 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              	.LVL60:
 393 0000 70402DE9 		push	{r4, r5, r6, lr}
 394              		.cfi_def_cfa_offset 16
 395              		.cfi_offset 4, -16
 396              		.cfi_offset 5, -12
 397              		.cfi_offset 6, -8
 398              		.cfi_offset 14, -4
 399 0004 0150A0E1 		mov	r5, r1
 400              	.LVL61:
 284:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 401              		.loc 1 284 0
 402 0008 FEFFFFEB 		bl	VDC_DisplayOutputCheckPrm
 403              	.LVL62:
 286:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 404              		.loc 1 286 0
 405 000c 004050E2 		subs	r4, r0, #0
 406 0010 0300000A 		beq	.L43
 407              	.LVL63:
 408              	.L38:
 303:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 409              		.loc 1 303 0
 410 0014 000054E3 		cmp	r4, #0
 411 0018 0A00000A 		beq	.L44
 412              	.L39:
 313:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 413              		.loc 1 313 0
 414 001c 0400A0E1 		mov	r0, r4
 415 0020 7080BDE8 		pop	{r4, r5, r6, pc}
 416              	.LVL64:
 417              	.L43:
 289:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 418              		.loc 1 289 0
 419 0024 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 420              	.LVL65:
 290:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 421              		.loc 1 290 0
 422 0028 010050E3 		cmp	r0, #1
 292:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 423              		.loc 1 292 0
 424 002c 0940A013 		movne	r4, #9
 425 0030 F7FFFF1A 		bne	.L38
 426              	.L45:
 296:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 427              		.loc 1 296 0
 428 0034 0200A0E3 		mov	r0, #2
 429              	.LVL66:
 430 0038 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 431              	.LVL67:
 297:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 432              		.loc 1 297 0
 433 003c 010050E3 		cmp	r0, #1
 299:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 434              		.loc 1 299 0
 435 0040 0A40A013 		movne	r4, #10
 436 0044 F2FFFFEA 		b	.L38
 437              	.LVL68:
 438              	.L44:
 305:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 439              		.loc 1 305 0
 440 0048 0500A0E1 		mov	r0, r5
 441 004c FEFFFFEB 		bl	VDC_ShrdPrmSetOutputParam
 442              	.LVL69:
 308:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 443              		.loc 1 308 0
 444 0050 0500A0E1 		mov	r0, r5
 445 0054 FEFFFFEB 		bl	VDC_DisplayOutput
 446              	.LVL70:
 310:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 447              		.loc 1 310 0
 448 0058 0110A0E3 		mov	r1, #1
 449 005c 0300A0E3 		mov	r0, #3
 450 0060 FEFFFFEB 		bl	VDC_ShrdPrmSetResource
 451              	.LVL71:
 452 0064 ECFFFFEA 		b	.L39
 453              		.cfi_endproc
 454              	.LFE4:
 456              		.section	.text.R_VDC_CallbackISR,"ax",%progbits
 457              		.align	2
 458              		.global	R_VDC_CallbackISR
 459              		.syntax unified
 460              		.arm
 461              		.fpu neon
 463              	R_VDC_CallbackISR:
 464              	.LFB5:
 332:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 465              		.loc 1 332 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              	.LVL72:
 470 0000 70402DE9 		push	{r4, r5, r6, lr}
 471              		.cfi_def_cfa_offset 16
 472              		.cfi_offset 4, -16
 473              		.cfi_offset 5, -12
 474              		.cfi_offset 6, -8
 475              		.cfi_offset 14, -4
 476 0004 0150A0E1 		mov	r5, r1
 477              	.LVL73:
 338:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 478              		.loc 1 338 0
 479 0008 FEFFFFEB 		bl	VDC_CallbackISRCheckPrm
 480              	.LVL74:
 340:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 481              		.loc 1 340 0
 482 000c 004050E2 		subs	r4, r0, #0
 483 0010 0300000A 		beq	.L52
 484              	.LVL75:
 485              	.L47:
 357:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 486              		.loc 1 357 0
 487 0014 000054E3 		cmp	r4, #0
 488 0018 0A00000A 		beq	.L53
 489              	.L48:
 363:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 490              		.loc 1 363 0
 491 001c 0400A0E1 		mov	r0, r4
 492 0020 7080BDE8 		pop	{r4, r5, r6, pc}
 493              	.LVL76:
 494              	.L52:
 343:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 495              		.loc 1 343 0
 496 0024 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 497              	.LVL77:
 344:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 498              		.loc 1 344 0
 499 0028 010050E3 		cmp	r0, #1
 346:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 500              		.loc 1 346 0
 501 002c 0940A013 		movne	r4, #9
 502 0030 F7FFFF1A 		bne	.L47
 503              	.L54:
 350:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 504              		.loc 1 350 0
 505 0034 0200A0E3 		mov	r0, #2
 506              	.LVL78:
 507 0038 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 508              	.LVL79:
 351:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 509              		.loc 1 351 0
 510 003c 010050E3 		cmp	r0, #1
 353:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 511              		.loc 1 353 0
 512 0040 0A40A013 		movne	r4, #10
 513 0044 F2FFFFEA 		b	.L47
 514              	.LVL80:
 515              	.L53:
 360:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 516              		.loc 1 360 0
 517 0048 0500A0E1 		mov	r0, r5
 518 004c FEFFFFEB 		bl	VDC_Int_SetInterrupt
 519              	.LVL81:
 520 0050 F1FFFFEA 		b	.L48
 521              		.cfi_endproc
 522              	.LFE5:
 524              		.section	.text.R_VDC_WriteDataControl,"ax",%progbits
 525              		.align	2
 526              		.global	R_VDC_WriteDataControl
 527              		.syntax unified
 528              		.arm
 529              		.fpu neon
 531              	R_VDC_WriteDataControl:
 532              	.LFB6:
 385:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 533              		.loc 1 385 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL82:
 538 0000 70402DE9 		push	{r4, r5, r6, lr}
 539              		.cfi_def_cfa_offset 16
 540              		.cfi_offset 4, -16
 541              		.cfi_offset 5, -12
 542              		.cfi_offset 6, -8
 543              		.cfi_offset 14, -4
 544 0004 0160A0E1 		mov	r6, r1
 545 0008 0250A0E1 		mov	r5, r2
 546              	.LVL83:
 391:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 547              		.loc 1 391 0
 548 000c FEFFFFEB 		bl	VDC_WriteDataControlCheckPrm
 549              	.LVL84:
 393:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 550              		.loc 1 393 0
 551 0010 004050E2 		subs	r4, r0, #0
 552 0014 0300000A 		beq	.L61
 553              	.LVL85:
 554              	.L56:
 410:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 555              		.loc 1 410 0
 556 0018 000054E3 		cmp	r4, #0
 557 001c 0B00000A 		beq	.L62
 558              	.L57:
 420:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 559              		.loc 1 420 0
 560 0020 0400A0E1 		mov	r0, r4
 561 0024 7080BDE8 		pop	{r4, r5, r6, pc}
 562              	.LVL86:
 563              	.L61:
 396:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
 564              		.loc 1 396 0
 565 0028 0600A0E1 		mov	r0, r6
 566              	.LVL87:
 567 002c FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 568              	.LVL88:
 397:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is already used. */
 569              		.loc 1 397 0
 570 0030 000050E3 		cmp	r0, #0
 399:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 571              		.loc 1 399 0
 572 0034 0E40A013 		movne	r4, #14
 573 0038 F6FFFF1A 		bne	.L56
 574              	.L63:
 403:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state != VDC_RESOURCE_ST_VALID)
 575              		.loc 1 403 0
 576 003c 0100A0E3 		mov	r0, #1
 577              	.LVL89:
 578 0040 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 579              	.LVL90:
 404:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {
 580              		.loc 1 404 0
 581 0044 010050E3 		cmp	r0, #1
 406:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 582              		.loc 1 406 0
 583 0048 0B40A013 		movne	r4, #11
 584 004c F1FFFFEA 		b	.L56
 585              	.LVL91:
 586              	.L62:
 412:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 587              		.loc 1 412 0
 588 0050 0500A0E1 		mov	r0, r5
 589 0054 FEFFFFEB 		bl	VDC_ShrdPrmSetWriteParam
 590              	.LVL92:
 415:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 591              		.loc 1 415 0
 592 0058 0500A0E1 		mov	r0, r5
 593 005c FEFFFFEB 		bl	VDC_WriteDataControl
 594              	.LVL93:
 417:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 595              		.loc 1 417 0
 596 0060 0110A0E3 		mov	r1, #1
 597 0064 0600A0E1 		mov	r0, r6
 598 0068 FEFFFFEB 		bl	VDC_ShrdPrmSetLayerResource
 599              	.LVL94:
 600 006c EBFFFFEA 		b	.L57
 601              		.cfi_endproc
 602              	.LFE6:
 604              		.section	.text.R_VDC_ChangeWriteProcess,"ax",%progbits
 605              		.align	2
 606              		.global	R_VDC_ChangeWriteProcess
 607              		.syntax unified
 608              		.arm
 609              		.fpu neon
 611              	R_VDC_ChangeWriteProcess:
 612              	.LFB7:
 441:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 613              		.loc 1 441 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              	.LVL95:
 618 0000 70402DE9 		push	{r4, r5, r6, lr}
 619              		.cfi_def_cfa_offset 16
 620              		.cfi_offset 4, -16
 621              		.cfi_offset 5, -12
 622              		.cfi_offset 6, -8
 623              		.cfi_offset 14, -4
 624 0004 0160A0E1 		mov	r6, r1
 625 0008 0250A0E1 		mov	r5, r2
 626              	.LVL96:
 447:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 627              		.loc 1 447 0
 628 000c FEFFFFEB 		bl	VDC_ChangeWriteProcessCheckPrm
 629              	.LVL97:
 449:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 630              		.loc 1 449 0
 631 0010 004050E2 		subs	r4, r0, #0
 632 0014 0300000A 		beq	.L69
 633              	.LVL98:
 634              	.L65:
 458:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 635              		.loc 1 458 0
 636 0018 000054E3 		cmp	r4, #0
 637 001c 0600000A 		beq	.L70
 638              	.L66:
 466:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 639              		.loc 1 466 0
 640 0020 0400A0E1 		mov	r0, r4
 641 0024 7080BDE8 		pop	{r4, r5, r6, pc}
 642              	.LVL99:
 643              	.L69:
 452:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 644              		.loc 1 452 0
 645 0028 0600A0E1 		mov	r0, r6
 646              	.LVL100:
 647 002c FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcEnabled
 648              	.LVL101:
 453:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 649              		.loc 1 453 0
 650 0030 000050E3 		cmp	r0, #0
 455:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 651              		.loc 1 455 0
 652 0034 0E40A003 		moveq	r4, #14
 653 0038 F6FFFFEA 		b	.L65
 654              	.LVL102:
 655              	.L70:
 460:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 656              		.loc 1 460 0
 657 003c 0500A0E1 		mov	r0, r5
 658 0040 FEFFFFEB 		bl	VDC_ShrdPrmSetChgWriteParam
 659              	.LVL103:
 463:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 660              		.loc 1 463 0
 661 0044 0500A0E1 		mov	r0, r5
 662 0048 FEFFFFEB 		bl	VDC_ChangeWriteProcess
 663              	.LVL104:
 664 004c F3FFFFEA 		b	.L66
 665              		.cfi_endproc
 666              	.LFE7:
 668              		.section	.text.R_VDC_ReadDataControl,"ax",%progbits
 669              		.align	2
 670              		.global	R_VDC_ReadDataControl
 671              		.syntax unified
 672              		.arm
 673              		.fpu neon
 675              	R_VDC_ReadDataControl:
 676              	.LFB8:
 490:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 677              		.loc 1 490 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 0
 680              		@ frame_needed = 0, uses_anonymous_args = 0
 681              	.LVL105:
 682 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 683              		.cfi_def_cfa_offset 24
 684              		.cfi_offset 4, -24
 685              		.cfi_offset 5, -20
 686              		.cfi_offset 6, -16
 687              		.cfi_offset 7, -12
 688              		.cfi_offset 8, -8
 689              		.cfi_offset 14, -4
 690 0004 0050A0E1 		mov	r5, r0
 691 0008 0140A0E1 		mov	r4, r1
 692 000c 0270A0E1 		mov	r7, r2
 495:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 693              		.loc 1 495 0
 694 0010 0100A0E1 		mov	r0, r1
 695              	.LVL106:
 696 0014 FEFFFFEB 		bl	ConvertRwProcId2GrId
 697              	.LVL107:
 698 0018 0060A0E1 		mov	r6, r0
 699              	.LVL108:
 499:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 700              		.loc 1 499 0
 701 001c 0730A0E1 		mov	r3, r7
 702 0020 0020A0E1 		mov	r2, r0
 703 0024 0410A0E1 		mov	r1, r4
 704 0028 0500A0E1 		mov	r0, r5
 705              	.LVL109:
 706 002c FEFFFFEB 		bl	VDC_ReadDataControlCheckPrm
 707              	.LVL110:
 501:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 708              		.loc 1 501 0
 709 0030 005050E2 		subs	r5, r0, #0
 710 0034 0300000A 		beq	.L76
 711              	.LVL111:
 712              	.L72:
 510:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 713              		.loc 1 510 0
 714 0038 000055E3 		cmp	r5, #0
 715 003c 0600000A 		beq	.L77
 716              	.L73:
 520:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 717              		.loc 1 520 0
 718 0040 0500A0E1 		mov	r0, r5
 719 0044 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 720              	.LVL112:
 721              	.L76:
 504:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_INVALID)
 722              		.loc 1 504 0
 723 0048 0400A0E1 		mov	r0, r4
 724              	.LVL113:
 725 004c FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 726              	.LVL114:
 505:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is already used. */
 727              		.loc 1 505 0
 728 0050 000050E3 		cmp	r0, #0
 507:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 729              		.loc 1 507 0
 730 0054 0E50A013 		movne	r5, #14
 731 0058 F6FFFFEA 		b	.L72
 732              	.LVL115:
 733              	.L77:
 512:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 734              		.loc 1 512 0
 735 005c 0710A0E1 		mov	r1, r7
 736 0060 0600A0E1 		mov	r0, r6
 737 0064 FEFFFFEB 		bl	VDC_ShrdPrmSetReadParam
 738              	.LVL116:
 515:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 739              		.loc 1 515 0
 740 0068 0710A0E1 		mov	r1, r7
 741 006c 0600A0E1 		mov	r0, r6
 742 0070 FEFFFFEB 		bl	VDC_ReadDataControl
 743              	.LVL117:
 517:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 744              		.loc 1 517 0
 745 0074 0110A0E3 		mov	r1, #1
 746 0078 0400A0E1 		mov	r0, r4
 747 007c FEFFFFEB 		bl	VDC_ShrdPrmSetLayerResource
 748              	.LVL118:
 749 0080 EEFFFFEA 		b	.L73
 750              		.cfi_endproc
 751              	.LFE8:
 753              		.section	.text.R_VDC_ChangeReadProcess,"ax",%progbits
 754              		.align	2
 755              		.global	R_VDC_ChangeReadProcess
 756              		.syntax unified
 757              		.arm
 758              		.fpu neon
 760              	R_VDC_ChangeReadProcess:
 761              	.LFB9:
 545:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 762              		.loc 1 545 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              	.LVL119:
 767 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 768              		.cfi_def_cfa_offset 24
 769              		.cfi_offset 4, -24
 770              		.cfi_offset 5, -20
 771              		.cfi_offset 6, -16
 772              		.cfi_offset 7, -12
 773              		.cfi_offset 8, -8
 774              		.cfi_offset 14, -4
 775 0004 0050A0E1 		mov	r5, r0
 776 0008 0140A0E1 		mov	r4, r1
 777 000c 0260A0E1 		mov	r6, r2
 550:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 778              		.loc 1 550 0
 779 0010 0100A0E1 		mov	r0, r1
 780              	.LVL120:
 781 0014 FEFFFFEB 		bl	ConvertRwProcId2GrId
 782              	.LVL121:
 783 0018 0070A0E1 		mov	r7, r0
 784              	.LVL122:
 554:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 785              		.loc 1 554 0
 786 001c 0620A0E1 		mov	r2, r6
 787 0020 0410A0E1 		mov	r1, r4
 788 0024 0500A0E1 		mov	r0, r5
 789 0028 FEFFFFEB 		bl	VDC_ChangeReadProcessCheckPrm
 790              	.LVL123:
 556:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 791              		.loc 1 556 0
 792 002c 005050E2 		subs	r5, r0, #0
 793 0030 0300000A 		beq	.L83
 794              	.LVL124:
 795              	.L79:
 565:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 796              		.loc 1 565 0
 797 0034 000055E3 		cmp	r5, #0
 798 0038 0600000A 		beq	.L84
 799              	.L80:
 573:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 800              		.loc 1 573 0
 801 003c 0500A0E1 		mov	r0, r5
 802 0040 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 803              	.LVL125:
 804              	.L83:
 559:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 805              		.loc 1 559 0
 806 0044 0400A0E1 		mov	r0, r4
 807              	.LVL126:
 808 0048 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcEnabled
 809              	.LVL127:
 560:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 810              		.loc 1 560 0
 811 004c 000050E3 		cmp	r0, #0
 562:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 812              		.loc 1 562 0
 813 0050 0E50A003 		moveq	r5, #14
 814 0054 F6FFFFEA 		b	.L79
 815              	.LVL128:
 816              	.L84:
 567:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 817              		.loc 1 567 0
 818 0058 0610A0E1 		mov	r1, r6
 819 005c 0700A0E1 		mov	r0, r7
 820 0060 FEFFFFEB 		bl	VDC_ShrdPrmSetChgReadParam
 821              	.LVL129:
 570:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 822              		.loc 1 570 0
 823 0064 0610A0E1 		mov	r1, r6
 824 0068 0700A0E1 		mov	r0, r7
 825 006c FEFFFFEB 		bl	VDC_ChangeReadProcess
 826              	.LVL130:
 827 0070 F1FFFFEA 		b	.L80
 828              		.cfi_endproc
 829              	.LFE9:
 831              		.section	.text.R_VDC_StartProcess,"ax",%progbits
 832              		.align	2
 833              		.global	R_VDC_StartProcess
 834              		.syntax unified
 835              		.arm
 836              		.fpu neon
 838              	R_VDC_StartProcess:
 839              	.LFB10:
 602:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 840              		.loc 1 602 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL131:
 845 0000 70402DE9 		push	{r4, r5, r6, lr}
 846              		.cfi_def_cfa_offset 16
 847              		.cfi_offset 4, -16
 848              		.cfi_offset 5, -12
 849              		.cfi_offset 6, -8
 850              		.cfi_offset 14, -4
 851 0004 0150A0E1 		mov	r5, r1
 852 0008 0260A0E1 		mov	r6, r2
 853              	.LVL132:
 608:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 854              		.loc 1 608 0
 855 000c FEFFFFEB 		bl	VDC_StartProcessCheckPrm
 856              	.LVL133:
 610:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 857              		.loc 1 610 0
 858 0010 004050E2 		subs	r4, r0, #0
 859 0014 0500001A 		bne	.L86
 613:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 860              		.loc 1 613 0
 861 0018 010075E3 		cmn	r5, #1
 862 001c 0300000A 		beq	.L86
 615:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 863              		.loc 1 615 0
 864 0020 0500A0E1 		mov	r0, r5
 865              	.LVL134:
 866 0024 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcReady
 867              	.LVL135:
 616:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 868              		.loc 1 616 0
 869 0028 000050E3 		cmp	r0, #0
 618:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 870              		.loc 1 618 0
 871 002c 0E40A003 		moveq	r4, #14
 872              	.LVL136:
 873              	.L86:
 622:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 874              		.loc 1 622 0
 875 0030 000054E3 		cmp	r4, #0
 876 0034 0100000A 		beq	.L90
 877              	.L87:
 628:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 878              		.loc 1 628 0
 879 0038 0400A0E1 		mov	r0, r4
 880 003c 7080BDE8 		pop	{r4, r5, r6, pc}
 881              	.L90:
 625:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 882              		.loc 1 625 0
 883 0040 0610A0E1 		mov	r1, r6
 884 0044 0500A0E1 		mov	r0, r5
 885 0048 FEFFFFEB 		bl	VDC_StartProcess
 886              	.LVL137:
 887 004c F9FFFFEA 		b	.L87
 888              		.cfi_endproc
 889              	.LFE10:
 891              		.section	.text.R_VDC_StopProcess,"ax",%progbits
 892              		.align	2
 893              		.global	R_VDC_StopProcess
 894              		.syntax unified
 895              		.arm
 896              		.fpu neon
 898              	R_VDC_StopProcess:
 899              	.LFB11:
 653:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 900              		.loc 1 653 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              	.LVL138:
 905 0000 70402DE9 		push	{r4, r5, r6, lr}
 906              		.cfi_def_cfa_offset 16
 907              		.cfi_offset 4, -16
 908              		.cfi_offset 5, -12
 909              		.cfi_offset 6, -8
 910              		.cfi_offset 14, -4
 911 0004 0150A0E1 		mov	r5, r1
 912              	.LVL139:
 659:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 913              		.loc 1 659 0
 914 0008 FEFFFFEB 		bl	VDC_StopProcessCheckPrm
 915              	.LVL140:
 661:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 916              		.loc 1 661 0
 917 000c 004050E2 		subs	r4, r0, #0
 918 0010 0500001A 		bne	.L92
 664:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 919              		.loc 1 664 0
 920 0014 010075E3 		cmn	r5, #1
 921 0018 0300000A 		beq	.L92
 666:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 922              		.loc 1 666 0
 923 001c 0500A0E1 		mov	r0, r5
 924              	.LVL141:
 925 0020 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcEnabled
 926              	.LVL142:
 667:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 927              		.loc 1 667 0
 928 0024 000050E3 		cmp	r0, #0
 669:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 929              		.loc 1 669 0
 930 0028 0E40A003 		moveq	r4, #14
 931              	.LVL143:
 932              	.L92:
 673:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 933              		.loc 1 673 0
 934 002c 000054E3 		cmp	r4, #0
 935 0030 0100000A 		beq	.L96
 936              	.L93:
 679:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 937              		.loc 1 679 0
 938 0034 0400A0E1 		mov	r0, r4
 939 0038 7080BDE8 		pop	{r4, r5, r6, pc}
 940              	.L96:
 676:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 941              		.loc 1 676 0
 942 003c 0500A0E1 		mov	r0, r5
 943 0040 FEFFFFEB 		bl	VDC_StopProcess
 944              	.LVL144:
 945 0044 FAFFFFEA 		b	.L93
 946              		.cfi_endproc
 947              	.LFE11:
 949              		.section	.text.R_VDC_ReleaseDataControl,"ax",%progbits
 950              		.align	2
 951              		.global	R_VDC_ReleaseDataControl
 952              		.syntax unified
 953              		.arm
 954              		.fpu neon
 956              	R_VDC_ReleaseDataControl:
 957              	.LFB12:
 701:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 958              		.loc 1 701 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL145:
 963 0000 70402DE9 		push	{r4, r5, r6, lr}
 964              		.cfi_def_cfa_offset 16
 965              		.cfi_offset 4, -16
 966              		.cfi_offset 5, -12
 967              		.cfi_offset 6, -8
 968              		.cfi_offset 14, -4
 969 0004 0150A0E1 		mov	r5, r1
 970              	.LVL146:
 707:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 971              		.loc 1 707 0
 972 0008 FEFFFFEB 		bl	VDC_ReleaseDataControlCheckPrm
 973              	.LVL147:
 709:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 974              		.loc 1 709 0
 975 000c 004050E2 		subs	r4, r0, #0
 976 0010 0500001A 		bne	.L98
 712:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 977              		.loc 1 712 0
 978 0014 010075E3 		cmn	r5, #1
 979 0018 0300000A 		beq	.L98
 714:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 980              		.loc 1 714 0
 981 001c 0500A0E1 		mov	r0, r5
 982              	.LVL148:
 983 0020 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcReady
 984              	.LVL149:
 715:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The specified layer is invalid. */
 985              		.loc 1 715 0
 986 0024 000050E3 		cmp	r0, #0
 717:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 987              		.loc 1 717 0
 988 0028 0E40A003 		moveq	r4, #14
 989              	.LVL150:
 990              	.L98:
 721:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 991              		.loc 1 721 0
 992 002c 000054E3 		cmp	r4, #0
 993 0030 0100000A 		beq	.L102
 994              	.L99:
 726:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 995              		.loc 1 726 0
 996 0034 0400A0E1 		mov	r0, r4
 997 0038 7080BDE8 		pop	{r4, r5, r6, pc}
 998              	.L102:
 723:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 999              		.loc 1 723 0
 1000 003c 0010A0E3 		mov	r1, #0
 1001 0040 0500A0E1 		mov	r0, r5
 1002 0044 FEFFFFEB 		bl	VDC_ShrdPrmSetLayerResource
 1003              	.LVL151:
 1004 0048 F9FFFFEA 		b	.L99
 1005              		.cfi_endproc
 1006              	.LFE12:
 1008              		.section	.text.R_VDC_VideoNoiseReduction,"ax",%progbits
 1009              		.align	2
 1010              		.global	R_VDC_VideoNoiseReduction
 1011              		.syntax unified
 1012              		.arm
 1013              		.fpu neon
 1015              	R_VDC_VideoNoiseReduction:
 1016              	.LFB13:
 746:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1017              		.loc 1 746 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              	.LVL152:
 1022 0000 70402DE9 		push	{r4, r5, r6, lr}
 1023              		.cfi_def_cfa_offset 16
 1024              		.cfi_offset 4, -16
 1025              		.cfi_offset 5, -12
 1026              		.cfi_offset 6, -8
 1027              		.cfi_offset 14, -4
 1028 0004 0160A0E1 		mov	r6, r1
 1029 0008 0250A0E1 		mov	r5, r2
 1030              	.LVL153:
 752:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1031              		.loc 1 752 0
 1032 000c 0210A0E1 		mov	r1, r2
 1033              	.LVL154:
 1034 0010 FEFFFFEB 		bl	VDC_VideoNoiseReductCheckPrm
 1035              	.LVL155:
 754:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1036              		.loc 1 754 0
 1037 0014 004050E2 		subs	r4, r0, #0
 1038 0018 0300000A 		beq	.L108
 1039              	.LVL156:
 1040              	.L104:
 763:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1041              		.loc 1 763 0
 1042 001c 000054E3 		cmp	r4, #0
 1043 0020 0600000A 		beq	.L109
 1044              	.L105:
 769:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1045              		.loc 1 769 0
 1046 0024 0400A0E1 		mov	r0, r4
 1047 0028 7080BDE8 		pop	{r4, r5, r6, pc}
 1048              	.LVL157:
 1049              	.L108:
 757:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 1050              		.loc 1 757 0
 1051 002c 0100A0E3 		mov	r0, #1
 1052              	.LVL158:
 1053 0030 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 1054              	.LVL159:
 758:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 1055              		.loc 1 758 0
 1056 0034 010050E3 		cmp	r0, #1
 760:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1057              		.loc 1 760 0
 1058 0038 0B40A013 		movne	r4, #11
 1059 003c F6FFFFEA 		b	.L104
 1060              	.LVL160:
 1061              	.L109:
 766:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1062              		.loc 1 766 0
 1063 0040 0510A0E1 		mov	r1, r5
 1064 0044 0600A0E1 		mov	r0, r6
 1065 0048 FEFFFFEB 		bl	VDC_VideoNoiseReduction
 1066              	.LVL161:
 1067 004c F4FFFFEA 		b	.L105
 1068              		.cfi_endproc
 1069              	.LFE13:
 1071              		.section	.text.R_VDC_ImageColorMatrix,"ax",%progbits
 1072              		.align	2
 1073              		.global	R_VDC_ImageColorMatrix
 1074              		.syntax unified
 1075              		.arm
 1076              		.fpu neon
 1078              	R_VDC_ImageColorMatrix:
 1079              	.LFB14:
 784:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1080              		.loc 1 784 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              	.LVL162:
 1085 0000 70402DE9 		push	{r4, r5, r6, lr}
 1086              		.cfi_def_cfa_offset 16
 1087              		.cfi_offset 4, -16
 1088              		.cfi_offset 5, -12
 1089              		.cfi_offset 6, -8
 1090              		.cfi_offset 14, -4
 1091 0004 0150A0E1 		mov	r5, r1
 1092              	.LVL163:
 790:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1093              		.loc 1 790 0
 1094 0008 FEFFFFEB 		bl	VDC_ImageColorMatrixCheckPrm
 1095              	.LVL164:
 792:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1096              		.loc 1 792 0
 1097 000c 004050E2 		subs	r4, r0, #0
 1098 0010 0500001A 		bne	.L111
 795:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 1099              		.loc 1 795 0
 1100 0014 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 1101 0018 000053E3 		cmp	r3, #0
 1102 001c 0600001A 		bne	.L112
 797:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1103              		.loc 1 797 0
 1104 0020 FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1105              	.LVL165:
 1106              	.L113:
 804:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 1107              		.loc 1 804 0
 1108 0024 000050E3 		cmp	r0, #0
 806:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1109              		.loc 1 806 0
 1110 0028 0E40A003 		moveq	r4, #14
 1111              	.LVL166:
 1112              	.L111:
 809:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1113              		.loc 1 809 0
 1114 002c 000054E3 		cmp	r4, #0
 1115 0030 0400000A 		beq	.L117
 1116              	.L114:
 815:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1117              		.loc 1 815 0
 1118 0034 0400A0E1 		mov	r0, r4
 1119 0038 7080BDE8 		pop	{r4, r5, r6, pc}
 1120              	.LVL167:
 1121              	.L112:
 801:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1122              		.loc 1 801 0
 1123 003c 0100A0E3 		mov	r0, #1
 1124              	.LVL168:
 1125 0040 FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1126              	.LVL169:
 1127 0044 F6FFFFEA 		b	.L113
 1128              	.LVL170:
 1129              	.L117:
 812:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1130              		.loc 1 812 0
 1131 0048 0500A0E1 		mov	r0, r5
 1132 004c FEFFFFEB 		bl	VDC_ImageColorMatrix
 1133              	.LVL171:
 1134 0050 F7FFFFEA 		b	.L114
 1135              		.cfi_endproc
 1136              	.LFE14:
 1138              		.section	.text.R_VDC_ImageEnhancement,"ax",%progbits
 1139              		.align	2
 1140              		.global	R_VDC_ImageEnhancement
 1141              		.syntax unified
 1142              		.arm
 1143              		.fpu neon
 1145              	R_VDC_ImageEnhancement:
 1146              	.LFB15:
 847:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1147              		.loc 1 847 0
 1148              		.cfi_startproc
 1149              		@ args = 12, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              	.LVL172:
 1152 0000 70402DE9 		push	{r4, r5, r6, lr}
 1153              		.cfi_def_cfa_offset 16
 1154              		.cfi_offset 4, -16
 1155              		.cfi_offset 5, -12
 1156              		.cfi_offset 6, -8
 1157              		.cfi_offset 14, -4
 1158 0004 08D04DE2 		sub	sp, sp, #8
 1159              		.cfi_def_cfa_offset 24
 1160 0008 0260A0E1 		mov	r6, r2
 1161 000c 0350A0E1 		mov	r5, r3
 1162              	.LVL173:
 854:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1163              		.loc 1 854 0
 1164 0010 20309DE5 		ldr	r3, [sp, #32]
 1165              	.LVL174:
 1166 0014 0520A0E1 		mov	r2, r5
 1167              	.LVL175:
 1168 0018 FEFFFFEB 		bl	VDC_ImageEnhancementCheckPrm
 1169              	.LVL176:
 856:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1170              		.loc 1 856 0
 1171 001c 004050E2 		subs	r4, r0, #0
 1172 0020 0400000A 		beq	.L124
 1173              	.LVL177:
 1174              	.L119:
 874:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1175              		.loc 1 874 0
 1176 0024 000054E3 		cmp	r4, #0
 1177 0028 0C00000A 		beq	.L125
 1178              	.L120:
 880:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1179              		.loc 1 880 0
 1180 002c 0400A0E1 		mov	r0, r4
 1181 0030 08D08DE2 		add	sp, sp, #8
 1182              		.cfi_remember_state
 1183              		.cfi_def_cfa_offset 16
 1184              		@ sp needed
 1185 0034 7080BDE8 		pop	{r4, r5, r6, pc}
 1186              	.LVL178:
 1187              	.L124:
 1188              		.cfi_restore_state
 859:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1189              		.loc 1 859 0
 1190 0038 0100A0E3 		mov	r0, #1
 1191              	.LVL179:
 1192 003c FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1193              	.LVL180:
 860:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The layer is invalid. */
 1194              		.loc 1 860 0
 1195 0040 000050E3 		cmp	r0, #0
 862:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1196              		.loc 1 862 0
 1197 0044 0E40A003 		moveq	r4, #14
 1198 0048 F5FFFF0A 		beq	.L119
 1199              	.L126:
 867:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_GBR)
 1200              		.loc 1 867 0
 1201 004c 0000A0E3 		mov	r0, #0
 1202              	.LVL181:
 1203 0050 FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpaceFbRd
 1204              	.LVL182:
 868:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The image quality improver does not act on RGB signals. */
 1205              		.loc 1 868 0
 1206 0054 000050E3 		cmp	r0, #0
 870:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 1207              		.loc 1 870 0
 1208 0058 0840A003 		moveq	r4, #8
 1209 005c F0FFFFEA 		b	.L119
 1210              	.LVL183:
 1211              	.L125:
 877:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1212              		.loc 1 877 0
 1213 0060 20309DE5 		ldr	r3, [sp, #32]
 1214 0064 00308DE5 		str	r3, [sp]
 1215 0068 1C309DE5 		ldr	r3, [sp, #28]
 1216 006c 1820DDE5 		ldrb	r2, [sp, #24]	@ zero_extendqisi2
 1217 0070 0510A0E1 		mov	r1, r5
 1218 0074 0600A0E1 		mov	r0, r6
 1219 0078 FEFFFFEB 		bl	VDC_ImageEnhancement
 1220              	.LVL184:
 1221 007c EAFFFFEA 		b	.L120
 1222              		.cfi_endproc
 1223              	.LFE15:
 1225              		.section	.text.R_VDC_ImageBlackStretch,"ax",%progbits
 1226              		.align	2
 1227              		.global	R_VDC_ImageBlackStretch
 1228              		.syntax unified
 1229              		.arm
 1230              		.fpu neon
 1232              	R_VDC_ImageBlackStretch:
 1233              	.LFB16:
 903:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1234              		.loc 1 903 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              	.LVL185:
 1239 0000 70402DE9 		push	{r4, r5, r6, lr}
 1240              		.cfi_def_cfa_offset 16
 1241              		.cfi_offset 4, -16
 1242              		.cfi_offset 5, -12
 1243              		.cfi_offset 6, -8
 1244              		.cfi_offset 14, -4
 1245 0004 0260A0E1 		mov	r6, r2
 1246 0008 0350A0E1 		mov	r5, r3
 1247              	.LVL186:
 910:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1248              		.loc 1 910 0
 1249 000c 0320A0E1 		mov	r2, r3
 1250              	.LVL187:
 1251 0010 FEFFFFEB 		bl	VDC_ImageBlackStretchCheckPrm
 1252              	.LVL188:
 912:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1253              		.loc 1 912 0
 1254 0014 004050E2 		subs	r4, r0, #0
 1255 0018 0300000A 		beq	.L133
 1256              	.LVL189:
 1257              	.L128:
 930:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1258              		.loc 1 930 0
 1259 001c 000054E3 		cmp	r4, #0
 1260 0020 0B00000A 		beq	.L134
 1261              	.L129:
 936:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1262              		.loc 1 936 0
 1263 0024 0400A0E1 		mov	r0, r4
 1264 0028 7080BDE8 		pop	{r4, r5, r6, pc}
 1265              	.LVL190:
 1266              	.L133:
 915:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1267              		.loc 1 915 0
 1268 002c 0100A0E3 		mov	r0, #1
 1269              	.LVL191:
 1270 0030 FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1271              	.LVL192:
 916:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The layer is invalid. */
 1272              		.loc 1 916 0
 1273 0034 000050E3 		cmp	r0, #0
 918:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1274              		.loc 1 918 0
 1275 0038 0E40A003 		moveq	r4, #14
 1276 003c F6FFFF0A 		beq	.L128
 1277              	.L135:
 923:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_GBR)
 1278              		.loc 1 923 0
 1279 0040 0000A0E3 		mov	r0, #0
 1280              	.LVL193:
 1281 0044 FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpaceFbRd
 1282              	.LVL194:
 924:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* The image quality improver does not act on RGB signals. */
 1283              		.loc 1 924 0
 1284 0048 000050E3 		cmp	r0, #0
 926:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 1285              		.loc 1 926 0
 1286 004c 0840A003 		moveq	r4, #8
 1287 0050 F1FFFFEA 		b	.L128
 1288              	.LVL195:
 1289              	.L134:
 933:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1290              		.loc 1 933 0
 1291 0054 0510A0E1 		mov	r1, r5
 1292 0058 0600A0E1 		mov	r0, r6
 1293 005c FEFFFFEB 		bl	VDC_ImageBlackStretch
 1294              	.LVL196:
 1295 0060 EFFFFFEA 		b	.L129
 1296              		.cfi_endproc
 1297              	.LFE16:
 1299              		.section	.text.R_VDC_AlphaBlending,"ax",%progbits
 1300              		.align	2
 1301              		.global	R_VDC_AlphaBlending
 1302              		.syntax unified
 1303              		.arm
 1304              		.fpu neon
 1306              	R_VDC_AlphaBlending:
 1307              	.LFB17:
 958:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1308              		.loc 1 958 0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312              	.LVL197:
 1313 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1314              		.cfi_def_cfa_offset 24
 1315              		.cfi_offset 4, -24
 1316              		.cfi_offset 5, -20
 1317              		.cfi_offset 6, -16
 1318              		.cfi_offset 7, -12
 1319              		.cfi_offset 8, -8
 1320              		.cfi_offset 14, -4
 1321 0004 0050A0E1 		mov	r5, r0
 1322 0008 0140A0E1 		mov	r4, r1
 1323 000c 0260A0E1 		mov	r6, r2
 963:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1324              		.loc 1 963 0
 1325 0010 0100A0E1 		mov	r0, r1
 1326              	.LVL198:
 1327 0014 FEFFFFEB 		bl	ConvertRwProcId2GrId
 1328              	.LVL199:
 1329 0018 0070A0E1 		mov	r7, r0
 1330              	.LVL200:
 967:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1331              		.loc 1 967 0
 1332 001c 0620A0E1 		mov	r2, r6
 1333 0020 0410A0E1 		mov	r1, r4
 1334 0024 0500A0E1 		mov	r0, r5
 1335 0028 FEFFFFEB 		bl	VDC_AlphaBlendingCheckPrm
 1336              	.LVL201:
 969:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1337              		.loc 1 969 0
 1338 002c 005050E2 		subs	r5, r0, #0
 1339 0030 0300000A 		beq	.L141
 1340              	.LVL202:
 1341              	.L137:
 978:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1342              		.loc 1 978 0
 1343 0034 000055E3 		cmp	r5, #0
 1344 0038 0600000A 		beq	.L142
 1345              	.L138:
 984:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1346              		.loc 1 984 0
 1347 003c 0500A0E1 		mov	r0, r5
 1348 0040 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1349              	.LVL203:
 1350              	.L141:
 972:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1351              		.loc 1 972 0
 1352 0044 0400A0E1 		mov	r0, r4
 1353              	.LVL204:
 1354 0048 FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1355              	.LVL205:
 973:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 1356              		.loc 1 973 0
 1357 004c 000050E3 		cmp	r0, #0
 975:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1358              		.loc 1 975 0
 1359 0050 0E50A003 		moveq	r5, #14
 1360 0054 F6FFFFEA 		b	.L137
 1361              	.LVL206:
 1362              	.L142:
 981:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1363              		.loc 1 981 0
 1364 0058 0610A0E1 		mov	r1, r6
 1365 005c 0700A0E1 		mov	r0, r7
 1366 0060 FEFFFFEB 		bl	VDC_AlphaBlending
 1367              	.LVL207:
 1368 0064 F4FFFFEA 		b	.L138
 1369              		.cfi_endproc
 1370              	.LFE17:
 1372              		.section	.text.R_VDC_AlphaBlendingRect,"ax",%progbits
 1373              		.align	2
 1374              		.global	R_VDC_AlphaBlendingRect
 1375              		.syntax unified
 1376              		.arm
 1377              		.fpu neon
 1379              	R_VDC_AlphaBlendingRect:
 1380              	.LFB18:
1010:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1381              		.loc 1 1010 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              	.LVL208:
 1386 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1387              		.cfi_def_cfa_offset 24
 1388              		.cfi_offset 4, -24
 1389              		.cfi_offset 5, -20
 1390              		.cfi_offset 6, -16
 1391              		.cfi_offset 7, -12
 1392              		.cfi_offset 8, -8
 1393              		.cfi_offset 14, -4
 1394 0004 0050A0E1 		mov	r5, r0
 1395 0008 0140A0E1 		mov	r4, r1
 1396 000c 0280A0E1 		mov	r8, r2
 1397 0010 0360A0E1 		mov	r6, r3
1015:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1398              		.loc 1 1015 0
 1399 0014 0100A0E1 		mov	r0, r1
 1400              	.LVL209:
 1401 0018 FEFFFFEB 		bl	ConvertRwProcId2GrId
 1402              	.LVL210:
 1403 001c 0070A0E1 		mov	r7, r0
 1404              	.LVL211:
1019:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1405              		.loc 1 1019 0
 1406 0020 0620A0E1 		mov	r2, r6
 1407 0024 0410A0E1 		mov	r1, r4
 1408 0028 0500A0E1 		mov	r0, r5
 1409 002c FEFFFFEB 		bl	VDC_AlphaBlendingRectCheckPrm
 1410              	.LVL212:
1021:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1411              		.loc 1 1021 0
 1412 0030 005050E2 		subs	r5, r0, #0
 1413 0034 0300000A 		beq	.L148
 1414              	.LVL213:
 1415              	.L144:
1030:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1416              		.loc 1 1030 0
 1417 0038 000055E3 		cmp	r5, #0
 1418 003c 0600000A 		beq	.L149
 1419              	.L145:
1036:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1420              		.loc 1 1036 0
 1421 0040 0500A0E1 		mov	r0, r5
 1422 0044 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1423              	.LVL214:
 1424              	.L148:
1024:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1425              		.loc 1 1024 0
 1426 0048 0400A0E1 		mov	r0, r4
 1427              	.LVL215:
 1428 004c FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1429              	.LVL216:
1025:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 1430              		.loc 1 1025 0
 1431 0050 000050E3 		cmp	r0, #0
1027:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1432              		.loc 1 1027 0
 1433 0054 0E50A003 		moveq	r5, #14
 1434 0058 F6FFFFEA 		b	.L144
 1435              	.LVL217:
 1436              	.L149:
1033:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1437              		.loc 1 1033 0
 1438 005c 0620A0E1 		mov	r2, r6
 1439 0060 0810A0E1 		mov	r1, r8
 1440 0064 0700A0E1 		mov	r0, r7
 1441 0068 FEFFFFEB 		bl	VDC_AlphaBlendingRect
 1442              	.LVL218:
 1443 006c F3FFFFEA 		b	.L145
 1444              		.cfi_endproc
 1445              	.LFE18:
 1447              		.section	.text.R_VDC_Chromakey,"ax",%progbits
 1448              		.align	2
 1449              		.global	R_VDC_Chromakey
 1450              		.syntax unified
 1451              		.arm
 1452              		.fpu neon
 1454              	R_VDC_Chromakey:
 1455              	.LFB19:
1062:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1456              		.loc 1 1062 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460              	.LVL219:
 1461 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1462              		.cfi_def_cfa_offset 24
 1463              		.cfi_offset 4, -24
 1464              		.cfi_offset 5, -20
 1465              		.cfi_offset 6, -16
 1466              		.cfi_offset 7, -12
 1467              		.cfi_offset 8, -8
 1468              		.cfi_offset 14, -4
 1469 0004 0050A0E1 		mov	r5, r0
 1470 0008 0140A0E1 		mov	r4, r1
 1471 000c 0280A0E1 		mov	r8, r2
 1472 0010 0370A0E1 		mov	r7, r3
1068:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1473              		.loc 1 1068 0
 1474 0014 0100A0E1 		mov	r0, r1
 1475              	.LVL220:
 1476 0018 FEFFFFEB 		bl	ConvertRwProcId2GrId
 1477              	.LVL221:
 1478 001c 0060A0E1 		mov	r6, r0
 1479              	.LVL222:
1072:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1480              		.loc 1 1072 0
 1481 0020 0730A0E1 		mov	r3, r7
 1482 0024 0020A0E1 		mov	r2, r0
 1483 0028 0410A0E1 		mov	r1, r4
 1484 002c 0500A0E1 		mov	r0, r5
 1485              	.LVL223:
 1486 0030 FEFFFFEB 		bl	VDC_ChromakeyCheckPrm
 1487              	.LVL224:
1074:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1488              		.loc 1 1074 0
 1489 0034 005050E2 		subs	r5, r0, #0
 1490 0038 0300000A 		beq	.L156
 1491              	.LVL225:
 1492              	.L151:
1093:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1493              		.loc 1 1093 0
 1494 003c 000055E3 		cmp	r5, #0
 1495 0040 0B00000A 		beq	.L157
 1496              	.L152:
1099:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1497              		.loc 1 1099 0
 1498 0044 0500A0E1 		mov	r0, r5
 1499 0048 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1500              	.LVL226:
 1501              	.L156:
1077:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1502              		.loc 1 1077 0
 1503 004c 0400A0E1 		mov	r0, r4
 1504              	.LVL227:
 1505 0050 FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1506              	.LVL228:
1078:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 1507              		.loc 1 1078 0
 1508 0054 000050E3 		cmp	r0, #0
1080:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1509              		.loc 1 1080 0
 1510 0058 0E50A003 		moveq	r5, #14
 1511 005c F6FFFF0A 		beq	.L151
 1512              	.L158:
1085:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             if (color_space == VDC_COLOR_SPACE_YCBCR)
 1513              		.loc 1 1085 0
 1514 0060 0600A0E1 		mov	r0, r6
 1515              	.LVL229:
 1516 0064 FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpaceFbRd
 1517              	.LVL230:
1086:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             {   /* Chroma-key processing cannot be used
 1518              		.loc 1 1086 0
 1519 0068 010050E3 		cmp	r0, #1
1089:../generate/sc_drivers/r_vdc/src/r_vdc.c ****             }
 1520              		.loc 1 1089 0
 1521 006c 0850A003 		moveq	r5, #8
 1522 0070 F1FFFFEA 		b	.L151
 1523              	.LVL231:
 1524              	.L157:
1096:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1525              		.loc 1 1096 0
 1526 0074 0720A0E1 		mov	r2, r7
 1527 0078 0810A0E1 		mov	r1, r8
 1528 007c 0600A0E1 		mov	r0, r6
 1529 0080 FEFFFFEB 		bl	VDC_Chromakey
 1530              	.LVL232:
 1531 0084 EEFFFFEA 		b	.L152
 1532              		.cfi_endproc
 1533              	.LFE19:
 1535              		.section	.text.R_VDC_CLUT,"ax",%progbits
 1536              		.align	2
 1537              		.global	R_VDC_CLUT
 1538              		.syntax unified
 1539              		.arm
 1540              		.fpu neon
 1542              	R_VDC_CLUT:
 1543              	.LFB20:
1118:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1544              		.loc 1 1118 0
 1545              		.cfi_startproc
 1546              		@ args = 0, pretend = 0, frame = 0
 1547              		@ frame_needed = 0, uses_anonymous_args = 0
 1548              	.LVL233:
 1549 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 1550              		.cfi_def_cfa_offset 24
 1551              		.cfi_offset 4, -24
 1552              		.cfi_offset 5, -20
 1553              		.cfi_offset 6, -16
 1554              		.cfi_offset 7, -12
 1555              		.cfi_offset 8, -8
 1556              		.cfi_offset 14, -4
 1557 0004 0050A0E1 		mov	r5, r0
 1558 0008 0140A0E1 		mov	r4, r1
 1559 000c 0270A0E1 		mov	r7, r2
1123:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1560              		.loc 1 1123 0
 1561 0010 0100A0E1 		mov	r0, r1
 1562              	.LVL234:
 1563 0014 FEFFFFEB 		bl	ConvertRwProcId2GrId
 1564              	.LVL235:
 1565 0018 0060A0E1 		mov	r6, r0
 1566              	.LVL236:
1127:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1567              		.loc 1 1127 0
 1568 001c 0730A0E1 		mov	r3, r7
 1569 0020 0020A0E1 		mov	r2, r0
 1570 0024 0410A0E1 		mov	r1, r4
 1571 0028 0500A0E1 		mov	r0, r5
 1572              	.LVL237:
 1573 002c FEFFFFEB 		bl	VDC_CLUTCheckPrm
 1574              	.LVL238:
1129:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1575              		.loc 1 1129 0
 1576 0030 005050E2 		subs	r5, r0, #0
 1577 0034 0300000A 		beq	.L164
 1578              	.LVL239:
 1579              	.L160:
1138:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1580              		.loc 1 1138 0
 1581 0038 000055E3 		cmp	r5, #0
 1582 003c 0600000A 		beq	.L165
 1583              	.L161:
1144:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1584              		.loc 1 1144 0
 1585 0040 0500A0E1 		mov	r0, r5
 1586 0044 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 1587              	.LVL240:
 1588              	.L164:
1132:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state == VDC_RESOURCE_ST_INVALID)
 1589              		.loc 1 1132 0
 1590 0048 0400A0E1 		mov	r0, r4
 1591              	.LVL241:
 1592 004c FEFFFFEB 		bl	VDC_ShrdPrmGetLayerResource
 1593              	.LVL242:
1133:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {   /* The specified layer is invalid. */
 1594              		.loc 1 1133 0
 1595 0050 000050E3 		cmp	r0, #0
1135:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1596              		.loc 1 1135 0
 1597 0054 0E50A003 		moveq	r5, #14
 1598 0058 F6FFFFEA 		b	.L160
 1599              	.LVL243:
 1600              	.L165:
1141:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1601              		.loc 1 1141 0
 1602 005c 0710A0E1 		mov	r1, r7
 1603 0060 0600A0E1 		mov	r0, r6
 1604 0064 FEFFFFEB 		bl	VDC_CLUT
 1605              	.LVL244:
 1606 0068 F4FFFFEA 		b	.L161
 1607              		.cfi_endproc
 1608              	.LFE20:
 1610              		.section	.text.R_VDC_DisplayCalibration,"ax",%progbits
 1611              		.align	2
 1612              		.global	R_VDC_DisplayCalibration
 1613              		.syntax unified
 1614              		.arm
 1615              		.fpu neon
 1617              	R_VDC_DisplayCalibration:
 1618              	.LFB21:
1163:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1619              		.loc 1 1163 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 0
 1622              		@ frame_needed = 0, uses_anonymous_args = 0
 1623              	.LVL245:
 1624 0000 70402DE9 		push	{r4, r5, r6, lr}
 1625              		.cfi_def_cfa_offset 16
 1626              		.cfi_offset 4, -16
 1627              		.cfi_offset 5, -12
 1628              		.cfi_offset 6, -8
 1629              		.cfi_offset 14, -4
 1630 0004 0150A0E1 		mov	r5, r1
 1631              	.LVL246:
1169:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1632              		.loc 1 1169 0
 1633 0008 FEFFFFEB 		bl	VDC_DisplayCalibrationCheckPrm
 1634              	.LVL247:
1171:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1635              		.loc 1 1171 0
 1636 000c 004050E2 		subs	r4, r0, #0
 1637 0010 0300000A 		beq	.L171
 1638              	.LVL248:
 1639              	.L167:
1180:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1640              		.loc 1 1180 0
 1641 0014 000054E3 		cmp	r4, #0
 1642 0018 0600000A 		beq	.L172
 1643              	.L168:
1186:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1644              		.loc 1 1186 0
 1645 001c 0400A0E1 		mov	r0, r4
 1646 0020 7080BDE8 		pop	{r4, r5, r6, pc}
 1647              	.LVL249:
 1648              	.L171:
1174:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 1649              		.loc 1 1174 0
 1650 0024 0300A0E3 		mov	r0, #3
 1651              	.LVL250:
 1652 0028 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 1653              	.LVL251:
1175:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 1654              		.loc 1 1175 0
 1655 002c 010050E3 		cmp	r0, #1
1177:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1656              		.loc 1 1177 0
 1657 0030 0C40A013 		movne	r4, #12
 1658 0034 F6FFFFEA 		b	.L167
 1659              	.LVL252:
 1660              	.L172:
1183:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1661              		.loc 1 1183 0
 1662 0038 0500A0E1 		mov	r0, r5
 1663 003c FEFFFFEB 		bl	VDC_DisplayCalibration
 1664              	.LVL253:
 1665 0040 F5FFFFEA 		b	.L168
 1666              		.cfi_endproc
 1667              	.LFE21:
 1669              		.section	.text.R_VDC_GammaCorrection,"ax",%progbits
 1670              		.align	2
 1671              		.global	R_VDC_GammaCorrection
 1672              		.syntax unified
 1673              		.arm
 1674              		.fpu neon
 1676              	R_VDC_GammaCorrection:
 1677              	.LFB22:
1207:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     vdc_error_t            ret;
 1678              		.loc 1 1207 0
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              	.LVL254:
 1683 0000 70402DE9 		push	{r4, r5, r6, lr}
 1684              		.cfi_def_cfa_offset 16
 1685              		.cfi_offset 4, -16
 1686              		.cfi_offset 5, -12
 1687              		.cfi_offset 6, -8
 1688              		.cfi_offset 14, -4
 1689 0004 0160A0E1 		mov	r6, r1
 1690 0008 0250A0E1 		mov	r5, r2
 1691              	.LVL255:
1213:../generate/sc_drivers/r_vdc/src/r_vdc.c **** #endif  /* R_VDC_CHECK_PARAMETERS */
 1692              		.loc 1 1213 0
 1693 000c 0210A0E1 		mov	r1, r2
 1694              	.LVL256:
 1695 0010 FEFFFFEB 		bl	VDC_GammaCorrectionCheckPrm
 1696              	.LVL257:
1215:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1697              		.loc 1 1215 0
 1698 0014 004050E2 		subs	r4, r0, #0
 1699 0018 0300000A 		beq	.L178
 1700              	.LVL258:
 1701              	.L174:
1224:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     {
 1702              		.loc 1 1224 0
 1703 001c 000054E3 		cmp	r4, #0
 1704 0020 0600000A 		beq	.L179
 1705              	.L175:
1230:../generate/sc_drivers/r_vdc/src/r_vdc.c **** 
 1706              		.loc 1 1230 0
 1707 0024 0400A0E1 		mov	r0, r4
 1708 0028 7080BDE8 		pop	{r4, r5, r6, pc}
 1709              	.LVL259:
 1710              	.L178:
1218:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         if (rsrc_state != VDC_RESOURCE_ST_VALID)
 1711              		.loc 1 1218 0
 1712 002c 0300A0E3 		mov	r0, #3
 1713              	.LVL260:
 1714 0030 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 1715              	.LVL261:
1219:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         {
 1716              		.loc 1 1219 0
 1717 0034 010050E3 		cmp	r0, #1
1221:../generate/sc_drivers/r_vdc/src/r_vdc.c ****         }
 1718              		.loc 1 1221 0
 1719 0038 0C40A013 		movne	r4, #12
 1720 003c F6FFFFEA 		b	.L174
 1721              	.LVL262:
 1722              	.L179:
1227:../generate/sc_drivers/r_vdc/src/r_vdc.c ****     }
 1723              		.loc 1 1227 0
 1724 0040 0510A0E1 		mov	r1, r5
 1725 0044 0600A0E1 		mov	r0, r6
 1726 0048 FEFFFFEB 		bl	VDC_GammaCorrection
 1727              	.LVL263:
 1728 004c F4FFFFEA 		b	.L175
 1729              		.cfi_endproc
 1730              	.LFE22:
 1732              		.text
 1733              	.Letext0:
 1734              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1735              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1736              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1737              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1738              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 1739              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1740              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 1741              		.file 9 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/generate/sc_drivers/
 1742              		.file 10 "../generate/sc_drivers/r_vdc/src/r_vdc_register.h"
 1743              		.file 11 "../generate/sc_drivers/r_vdc/src/r_vdc_shared_param.h"
 1744              		.file 12 "../generate/sc_drivers/r_vdc/src/r_vdc_check_parameter.h"
DEFINED SYMBOLS
                            *ABS*:00000000 r_vdc.c
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:17     .text.ConvertRwProcId2GrId:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:22     .text.ConvertRwProcId2GrId:00000000 ConvertRwProcId2GrId
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:68     .text.R_VDC_Initialize:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:74     .text.R_VDC_Initialize:00000000 R_VDC_Initialize
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:166    .text.R_VDC_Terminate:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:172    .text.R_VDC_Terminate:00000000 R_VDC_Terminate
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:244    .text.R_VDC_VideoInput:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:250    .text.R_VDC_VideoInput:00000000 R_VDC_VideoInput
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:297    .text.R_VDC_SyncControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:303    .text.R_VDC_SyncControl:00000000 R_VDC_SyncControl
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:380    .text.R_VDC_DisplayOutput:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:386    .text.R_VDC_DisplayOutput:00000000 R_VDC_DisplayOutput
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:457    .text.R_VDC_CallbackISR:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:463    .text.R_VDC_CallbackISR:00000000 R_VDC_CallbackISR
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:525    .text.R_VDC_WriteDataControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:531    .text.R_VDC_WriteDataControl:00000000 R_VDC_WriteDataControl
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:605    .text.R_VDC_ChangeWriteProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:611    .text.R_VDC_ChangeWriteProcess:00000000 R_VDC_ChangeWriteProcess
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:669    .text.R_VDC_ReadDataControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:675    .text.R_VDC_ReadDataControl:00000000 R_VDC_ReadDataControl
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:754    .text.R_VDC_ChangeReadProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:760    .text.R_VDC_ChangeReadProcess:00000000 R_VDC_ChangeReadProcess
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:832    .text.R_VDC_StartProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:838    .text.R_VDC_StartProcess:00000000 R_VDC_StartProcess
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:892    .text.R_VDC_StopProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:898    .text.R_VDC_StopProcess:00000000 R_VDC_StopProcess
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:950    .text.R_VDC_ReleaseDataControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:956    .text.R_VDC_ReleaseDataControl:00000000 R_VDC_ReleaseDataControl
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1009   .text.R_VDC_VideoNoiseReduction:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1015   .text.R_VDC_VideoNoiseReduction:00000000 R_VDC_VideoNoiseReduction
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1072   .text.R_VDC_ImageColorMatrix:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1078   .text.R_VDC_ImageColorMatrix:00000000 R_VDC_ImageColorMatrix
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1139   .text.R_VDC_ImageEnhancement:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1145   .text.R_VDC_ImageEnhancement:00000000 R_VDC_ImageEnhancement
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1226   .text.R_VDC_ImageBlackStretch:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1232   .text.R_VDC_ImageBlackStretch:00000000 R_VDC_ImageBlackStretch
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1300   .text.R_VDC_AlphaBlending:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1306   .text.R_VDC_AlphaBlending:00000000 R_VDC_AlphaBlending
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1373   .text.R_VDC_AlphaBlendingRect:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1379   .text.R_VDC_AlphaBlendingRect:00000000 R_VDC_AlphaBlendingRect
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1448   .text.R_VDC_Chromakey:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1454   .text.R_VDC_Chromakey:00000000 R_VDC_Chromakey
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1536   .text.R_VDC_CLUT:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1542   .text.R_VDC_CLUT:00000000 R_VDC_CLUT
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1611   .text.R_VDC_DisplayCalibration:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1617   .text.R_VDC_DisplayCalibration:00000000 R_VDC_DisplayCalibration
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1670   .text.R_VDC_GammaCorrection:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\cc8w18Ue.s:1676   .text.R_VDC_GammaCorrection:00000000 R_VDC_GammaCorrection
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.14fc17be114e5a2cba0959c511ea2aaf
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.e658329a094974ebad41b40c60502de7
                           .group:00000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.adc_iodefine.h.29.14c6f50dce37432a7d004e4b1ce33da7
                           .group:00000000 wm4.bsc_iodefine.h.29.9281d1f3639266933964d6d0c2d42c4f
                           .group:00000000 wm4.ceu_iodefine.h.29.2a669d0b46fdde030a50db9e3c307fbf
                           .group:00000000 wm4.cpg_iodefine.h.29.d6fdc9cb4798723afd88b251d64c2ce2
                           .group:00000000 wm4.csi2link_iodefine.h.29.221c4531636a409f24d307b16341ada8
                           .group:00000000 wm4.dmac_iodefine.h.29.578fccc2cc1da886ec95a029bf874f01
                           .group:00000000 wm4.drpk_iodefine.h.29.580eb8588a2b2d43d2726fbe791e513f
                           .group:00000000 wm4.drw_iodefine.h.29.df30f4a4a34a79f6a86c4df91353dffe
                           .group:00000000 wm4.edmac_iodefine.h.29.33e8759349004a722f42f5429c1353f6
                           .group:00000000 wm4.eptpc_iodefine.h.29.74d8f9fab0f5549b56097fb9e937dde8
                           .group:00000000 wm4.etherc_iodefine.h.29.14602750383a574f1c21f994ad33a366
                           .group:00000000 wm4.gpio_iodefine.h.29.3d0b021c56839cee4ae5149903684e4b
                           .group:00000000 wm4.gpt_iodefine.h.29.557ead75d7b0585b898d3898b64c7f87
                           .group:00000000 wm4.hyper_iodefine.h.29.000caadbb74d881e97db55b39b432154
                           .group:00000000 wm4.imr_iodefine.h.29.77c022f017e711c4d51cc0145db1dad3
                           .group:00000000 wm4.intc_iodefine.h.29.b68f5799a35a7495d63b4cd458e1ba57
                           .group:00000000 wm4.irda_iodefine.h.29.37e67bd2005173d68a74d1cc937d8444
                           .group:00000000 wm4.jcu_iodefine.h.29.3aca452908962e7a7ccf26164751feda
                           .group:00000000 wm4.lvds_iodefine.h.29.c11cbe1900e5209c8dcc76c2336c16bc
                           .group:00000000 wm4.mtu_iodefine.h.29.5498fb974bb53caf05aa143c2deec781
                           .group:00000000 wm4.nandc_iodefine.h.29.e0b343306750f017ee86e169ad98efe9
                           .group:00000000 wm4.octa_iodefine.h.29.4cb0d62e4b9633e173858000dc1c626c
                           .group:00000000 wm4.ostm_iodefine.h.29.6914f7e330a1cf0008b34219adcdfed4
                           .group:00000000 wm4.pl_iodefine.h.29.abbb6d725aed990aa8343242bfe31416
                           .group:00000000 wm4.pmg_iodefine.h.29.8bcfbc4771a6f9b7dd4d6f504427219e
                           .group:00000000 wm4.poeg_iodefine.h.29.0d8e258d10986260cbc70cfb8c0ef273
                           .group:00000000 wm4.poe_iodefine.h.29.fe74e55e7b6b4afbe3596c74ba035e98
                           .group:00000000 wm4.prr_iodefine.h.29.c1f15576f7a27b9c83aa3b40f5b2f988
                           .group:00000000 wm4.ptpedmac_iodefine.h.29.cd24a93374ce35cebc41e26889d619ef
                           .group:00000000 wm4.rcanfd_iodefine.h.29.532dd48b82fcb61d63538aba4b6f1289
                           .group:00000000 wm4.rcan_iodefine.h.29.a47a89db1b35c12b54af48fa1956acba
                           .group:00000000 wm4.riic_iodefine.h.29.f96943d49800d297612c4af3bba5c943
                           .group:00000000 wm4.rspi_iodefine.h.29.7efa041fe34a7d27db66a7b337879dfe
                           .group:00000000 wm4.rtc_iodefine.h.29.6dc76be5ca3df69cecb5a81d06cc46b5
                           .group:00000000 wm4.scifa_iodefine.h.29.b04ccd664d71baaf31c75761c45b9c4d
                           .group:00000000 wm4.scim_iodefine.h.29.87d0760abf94446b00d826c797bf0ff2
                           .group:00000000 wm4.sdmmc_iodefine.h.29.e67e9815445e8057a3262d1566bea0db
                           .group:00000000 wm4.spdif_iodefine.h.29.59f5d70150fa200a4d8ee50be1ee34c8
                           .group:00000000 wm4.spibsc_iodefine.h.29.f4930f8b8da1140200204513a363c76f
                           .group:00000000 wm4.sprite_iodefine.h.29.55796d1fa083a2457fea4ece974a192e
                           .group:00000000 wm4.ssif_iodefine.h.29.054ec6d95f487f631f16aee39c85c47a
                           .group:00000000 wm4.usb_iodefine.h.29.6dc44ea388ba227e8fdcfb33c315887b
                           .group:00000000 wm4.vdc_iodefine.h.29.db282ded1f052d8567fbbd3b61ce8f7a
                           .group:00000000 wm4.vin_iodefine.h.29.9b392e5601347d53e64be3272934e170
                           .group:00000000 wm4.wdt_iodefine.h.29.ed07bb44b797072f8c28b41c64fdca30
                           .group:00000000 wm4.r_vdc_user.h.32.3f3db05b07a24f5c3abdea3809348418
                           .group:00000000 wm4.r_vdc.h.31.7a8e28d4a80bfb6c6b4be0ab3890da8f
                           .group:00000000 wm4.r_vdc_register.h.32.76d2530dc3b12780409c9b9c662462be

UNDEFINED SYMBOLS
VDC_InitializeCheckPrm
VDC_ShrdPrmInit
VDC_ShrdPrmGetResource
VDC_ShrdPrmSetInitParam
VDC_Initialize
VDC_Int_Disable
VDC_ShrdPrmSetResource
VDC_TerminateCheckPrm
VDC_ShrdPrmSetTerminate
VDC_Terminate
VDC_ShrdPrmGetLvdsClkRef
VDC_VideoInputCheckPrm
VDC_ShrdPrmSetInputParam
VDC_VideoInput
VDC_SyncControlCheckPrm
VDC_SyncControl
VDC_DisplayOutputCheckPrm
VDC_ShrdPrmSetOutputParam
VDC_DisplayOutput
VDC_CallbackISRCheckPrm
VDC_Int_SetInterrupt
VDC_WriteDataControlCheckPrm
VDC_ShrdPrmGetLayerResource
VDC_ShrdPrmSetWriteParam
VDC_WriteDataControl
VDC_ShrdPrmSetLayerResource
VDC_ChangeWriteProcessCheckPrm
VDC_ShrdPrmGetRwProcEnabled
VDC_ShrdPrmSetChgWriteParam
VDC_ChangeWriteProcess
VDC_ReadDataControlCheckPrm
VDC_ShrdPrmSetReadParam
VDC_ReadDataControl
VDC_ChangeReadProcessCheckPrm
VDC_ShrdPrmSetChgReadParam
VDC_ChangeReadProcess
VDC_StartProcessCheckPrm
VDC_ShrdPrmGetRwProcReady
VDC_StartProcess
VDC_StopProcessCheckPrm
VDC_StopProcess
VDC_ReleaseDataControlCheckPrm
VDC_VideoNoiseReductCheckPrm
VDC_VideoNoiseReduction
VDC_ImageColorMatrixCheckPrm
VDC_ImageColorMatrix
VDC_ImageEnhancementCheckPrm
VDC_ShrdPrmGetColorSpaceFbRd
VDC_ImageEnhancement
VDC_ImageBlackStretchCheckPrm
VDC_ImageBlackStretch
VDC_AlphaBlendingCheckPrm
VDC_AlphaBlending
VDC_AlphaBlendingRectCheckPrm
VDC_AlphaBlendingRect
VDC_ChromakeyCheckPrm
VDC_Chromakey
VDC_CLUTCheckPrm
VDC_CLUT
VDC_DisplayCalibrationCheckPrm
VDC_DisplayCalibration
VDC_GammaCorrectionCheckPrm
VDC_GammaCorrection
