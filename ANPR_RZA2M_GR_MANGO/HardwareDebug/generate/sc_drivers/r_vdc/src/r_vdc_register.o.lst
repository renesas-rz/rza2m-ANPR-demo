   1              		.cpu cortex-a9
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"r_vdc_register.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.SetVideoExternalInput,"ax",%progbits
  17              		.align	2
  18              		.syntax unified
  19              		.arm
  20              		.fpu neon
  22              	SetVideoExternalInput:
  23              	.LFB21:
  24              		.file 1 "../generate/sc_drivers/r_vdc/src/r_vdc_register.c"
   1:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************************************
   2:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * DISCLAIMER
   3:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * This software is supplied by Renesas Electronics Corporation and is only intended for use with R
   4:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * other uses are authorized. This software is owned by Renesas Electronics Corporation and is prot
   5:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * applicable laws, including copyright laws.
   6:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
   7:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
   8:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAI
   9:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS A
  10:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY R
  11:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DA
  12:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * Renesas reserves the right, without notice, to make changes to this software and to discontinue 
  13:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * this software. By using this software, you agree to the additional terms and conditions found by
  14:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * following link:
  15:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * http://www.renesas.com/disclaimer
  16:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *
  17:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * Copyright (C) 2019 Renesas Electronics Corporation. All rights reserved.
  18:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  **************************************************************************************************
  19:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
  20:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * File Name :   r_vdc_register.c
  21:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @file         r_vdc_register.c
  22:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @version      1.12
  23:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief        RZ/A2M VDC driver register setup processing
  24:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  ******************************************************************************/
  25:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
  26:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /******************************************************************************
  27:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** Includes   <System Includes> , "Project Includes"
  28:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
  29:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #include    "r_vdc_register.h"
  30:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
  31:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #include    "r_vdc.h"
  32:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #include    "r_vdc_user.h"
  33:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #include    "r_vdc_shared_param.h"
  34:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
  35:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
  36:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /******************************************************************************
  37:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** Macro definitions
  38:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
  39:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     INITIAL_SCALING_PHASE          ((uint32_t)2048u)
  40:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     SCALING_RATIO_SAME_SIZE        (4096u)
  41:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Vsync signal delay control for OIR */
  42:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     OIR_VSYNC_DELAY                 ((uint32_t)1u)
  43:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
  44:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Panel clock frequency division ratio */
  45:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_1            (1u)
  46:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_2            (2u)
  47:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_3            (3u)
  48:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_4            (4u)
  49:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_5            (5u)
  50:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_6            (6u)
  51:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_7            (7u)
  52:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_8            (8u)
  53:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_9            (9u)
  54:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_12           (12u)
  55:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_16           (16u)
  56:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_24           (24u)
  57:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_CLKDIV_1_32           (32u)
  58:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Panel clock select */
  59:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ICKSEL_IMG_DV         (0x0000u)
  60:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ICKSEL_EXT_0          (0x1000u)
  61:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ICKSEL_PERI           (0x3000u)
  62:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ICKSEL_LVDS           (0x0400u)
  63:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ICKSEL_LVDS_DIV7      (0x0800u)
  64:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Output pin edge select */
  65:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON0_EDGE            (0x0040u)
  66:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON1_EDGE            (0x0020u)
  67:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON2_EDGE            (0x0010u)
  68:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON3_EDGE            (0x0008u)
  69:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON4_EDGE            (0x0004u)
  70:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON5_EDGE            (0x0002u)
  71:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_TCON6_EDGE            (0x0001u)
  72:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Panel dither output format select */
  73:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_PATH_FORMAT_RGB888    (0x00000000u)
  74:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_PATH_FORMAT_RGB666    (0x00010000u)
  75:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_PATH_FORMAT_RGB565    (0x00020000u)
  76:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_PATH_FORMAT_NON       (0x00000000u)
  77:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Calculate scaling ratio use value */
  78:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_FLOAT_1_0 (1.0f)
  79:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_FLOAT_0_5 (0.5f)
  80:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* bits per pixel */
  81:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_RGB565    (16u)
  82:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_RGB888    (32u)
  83:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_ARGB1555  (16u)
  84:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_ARGB4444  (16u)
  85:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_ARGB8888  (32u)
  86:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_CLUT8     (8u)
  87:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_CLUT4     (4u)
  88:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_CLUT1     (1u)
  89:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_YCBCR422  (32u)
  90:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_YCBCR444  (32u)
  91:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_RGBA5551  (16u)
  92:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_RGBA8888  (32u)
  93:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT_PER_PIXEL_VALUE_8   (8u)
  94:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Convert the color data from 4 bits value into 8 bits value */
  95:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_EXTENSION_VALUE_17      (17u)
  96:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Convert the color data from 5 bits value into 8 bits value */
  97:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_EXTENSION_VALUE_263     (263u)
  98:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_EXTENSION_VALUE_32      (32u)
  99:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Convert the color data from 6 bits value into 8 bits value */
 100:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_EXTENSION_VALUE_259     (259u)
 101:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_EXTENSION_VALUE_64      (64u)
 102:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Round off */
 103:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ROUND_OFF_VALUE_1       (1u)
 104:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ROUND_OFF_VALUE_2       (2u)
 105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* Color mask data */
 106:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ALPHA_8BIT              (0xFF000000u)
 107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGB_24BIT_MASK          (0x00FFFFFFu)
 108:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_COLOR_8BIT_MASK         (0x000000FFu)
 109:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_COLOR_6BIT_MASK         (0x0000003Fu)
 110:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_COLOR_5BIT_MASK         (0x0000001Fu)
 111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_COLOR_4BIT_MASK         (0x0000000Fu)
 112:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB8888_GB_MASK        (0x00FFFF00u)
 113:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 114:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* RGB565 bits mask data */
 115:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGB565_R_MASK           (0x0000F800u)
 116:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGB565_G_MASK           (0x000007E0u)
 117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGB565_B_MASK           (0x0000001Fu)
 118:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* ARGB4444 bits mask data */
 119:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB4444_R_MASK         (0x00000F00u)
 120:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB4444_G_MASK         (0x000000F0u)
 121:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB4444_B_MASK         (0x0000000Fu)
 122:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* ARGB1555 bits mask data */
 123:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB1555_R_MASK         (0x00007C00u)
 124:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB1555_G_MASK         (0x000003E0u)
 125:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_ARGB1555_B_MASK         (0x0000001Fu)
 126:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* RGBA5551 bits mask data */
 127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGBA5551_R_MASK         (0x0000F800u)
 128:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGBA5551_G_MASK         (0x000007C0u)
 129:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_RGBA5551_B_MASK         (0x0000003Eu)
 130:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 131:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* bit pattern */
 132:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT31          (0x80000000u)
 133:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT29          (0x20000000u)
 134:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT28          (0x10000000u)
 135:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT24          (0x01000000u)
 136:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT20          (0x00100000u)
 137:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT16          (0x00010000u)
 138:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT15          (0x00008000u)
 139:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT14          (0x00004000u)
 140:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT13          (0x00002000u)
 141:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT12          (0x00001000u)
 142:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT8           (0x00000100u)
 143:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT4           (0x00000010u)
 144:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT2           (0x00000004u)
 145:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT1           (0x00000002u)
 146:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_BIT0           (0x00000001u)
 147:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 148:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* shift value */
 149:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_28       (28u)
 150:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_24       (24u)
 151:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_20       (20u)
 152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_16       (16u)
 153:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_13       (13u)
 154:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_12       (12u)
 155:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_11       (11u)
 156:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_10       (10u)
 157:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_8        (8u)
 158:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_6        (6u)
 159:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_5        (5u)
 160:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_4        (4u)
 161:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_2        (2u)
 162:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define     VDC_REG_SHIFT_1        (1u)
 163:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 164:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* register set value */
 165:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_BIT_0XFFFF0000     (0xFFFF0000u) /* scaler_0->scl0_frc2                     */
 166:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /* register mask value */
 167:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0XF7FF1C3F    (0xF7FF1C3Fu) /* mask img_synthesizer->gr_flm6           */
 168:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0000D000    (0x0000D000u) /* mask img_synthesizer->gr_ab1            */
 169:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X01FF00FF    (0x01FF00FFu) /* mask img_synthesizer->gr_ab6            */
 170:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0000007F    (0x0000007Fu) /* mask output_ctrl->out_clk_phase         */
 171:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X11003313    (0x11003313u) /* mask output_ctrl->out_set               */
 172:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00030000    (0x00030000u) /* mask output_ctrl->out_pdtha             */
 173:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0007000D    (0x0007000Du) /* mask scaler->scl1_wr1                   */
 174:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000300    (0x00000300u) /* mask scaler->scl1_wr5                   */
 175:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0300FF00    (0x0300FF00u) /* mask regaddr_lvds->lclkselr             */
 176:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X003F0730    (0x003F0730u) /* mask regaddr_lvds->lpllsetr             */
 177:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00010301    (0x00010301u) /* mask img_synthesizer->gr_flm1           */
 178:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X7FFF03FF    (0x7FFF03FFu) /* mask img_synthesizer->gr_flm3           */
 179:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0000E000    (0x0000E000u) /* mask img_synthesizer->gr_flm6           */
 180:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00007F33    (0x00007F33u) /* mask input_ctrl->imgcnt_nr_cnt0         */
 181:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00FF0000    (0x00FF0000u) /* mask img_synthesizer->gr_ab7            */
 182:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00300000    (0x00300000u) /* mask output_ctrl->out_pdtha             */
 183:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00003333    (0x00003333u) /* mask output_ctrl->out_pdtha             */
 184:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00007111    (0x00007111u) /* mask input_ctrl->inp_sel_cnt            */
 185:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X11110113    (0x11110113u) /* mask input_ctrl->inp_ext_sync_cnt       */
 186:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X000007FF    (0x000007FFu) /* mask img_synthesizer->gr_flm5           */
 187:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0000FFFF    (0x0000FFFFu) /* mask scaler->scl0_ds4                   */
 188:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      caler->scl0_us5                    */
 189:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000011    (0x00000011u) /* mask scaler->scl0_ds1                   */
 190:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_us1                   */
 191:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000070    (0x00000070u) /* mask scaler->scl1_wr1                   */
 192:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000080    (0x00000080u) /* mask scaler->scl1_wr1                   */
 193:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00003110    (0x00003110u) /* mask output_ctrl->tcon_tim_pola2        */
 194:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      output_ctrl->tcon_tim_polb2        */
 195:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X000000FF    (0x000000FFu) /* mask scaler_0->scl0_frc5                */
 196:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0000003F    (0x0000003Fu) /* mask img_synthesizer->gr_flm6           */
 197:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_qlty_imp->adj_enh_shp1         */
 198:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0XFF000000    (0xFF000000u) /* mask img_synthesizer->gr_ab10           */
 199:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_synthesizer->gr_ab11           */
 200:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000110    (0x00000110u) /* mask output_ctrl->tcon_tim_sth2         */
 201:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      output_ctrl->tcon_tim_stb2         */
 202:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      output_ctrl->tcon_tim_cpv2         */
 203:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000007    (0x00000007u) /* mask *(output_pin_regaddr[tcon_pin])    */
 204:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_synthesizer->gr_flm2           */
 205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_synthesizer->gr_flm2           */
 206:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X07FF0000    (0x07FF0000u) /* mask scaler_0->scl0_frc4                */
 207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_synthesizer->gr_flm5           */
 208:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      img_synthesizer->gr_flm6           */
 209:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X0FFF0FFF    (0x0FFF0FFFu) /* mask                                    */
 210:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_ds5, scaler->scl0_us6 */
 211:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_ds5, scaler->scl0_us6 */
 212:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_ds5, scaler->scl0_us6 */
 213:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_ds5, scaler->scl0_us6 */
 214:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*      scaler->scl0_ds5, scaler->scl0_us6 */
 215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** #define VDC_REG_MASK_0X00000003    (0x00000003u) /* mask img_synthesizer->gr_ab1            */
 216:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 217:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /******************************************************************************
 218:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** Typedef definitions
 219:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 220:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 221:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /******************************************************************************
 222:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** Private global variables and functions
 223:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 224:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetVideoExternalInput(
 225:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_ext_in_sig_t         * const ext_sig_tmp,
 226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t * const input_ctrl);
 227:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetInitialConnection(void);
 228:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetGrapicsBackgroundColor(void);
 229:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalerBackgroundColor(const vdc_color_space_t color_space);
 230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STVA_VS(
 231:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 232:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 233:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STVB_VE(
 234:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 235:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 236:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STH_HS(
 237:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 238:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STB_HE(
 240:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 241:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 242:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_CPV_GCK(
 243:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 244:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_POLA(
 246:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 247:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 248:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_POLB(
 249:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 250:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 251:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_DE(
 252:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 253:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl);
 254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalingDown(
 255:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_scalingdown_rot_t    * const scldw_rot,
 256:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_res_inter_t                  res_inter,
 257:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t     * const scaler);
 258:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalingUp(
 259:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
 260:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc,
 261:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  adj_sel,
 262:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  ip_conversion,
 263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_wr_md_t                  res_ds_wr_md,
 264:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_ln_off_dir_t          ln_off_dir,
 265:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t * const scaler);
 266:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t CalcScalingRatio(
 267:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t      before_scl,
 268:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t      after_scl,
 269:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t  adj_sel,
 270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t  round_up);
 271:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetInputCntrlColorMtx(void);
 272:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static vdc_onoff_t ConfirmGraphicsEnlargement(
 273:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t          graphics_id,
 274:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_flm_sel_t             gr_flm_sel,
 275:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
 276:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc);
 277:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalerGraphics(
 278:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t          graphics_id,
 279:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
 280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc,
 281:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_flm_sel_t             gr_flm_sel,
 282:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  gr_enlarge);
 283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t DisplayStartPixelSetting(const uint32_t gr_base, const vdc_gr_format_t gr_format);
 284:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImgQaImproverColorMtx(const vdc_color_space_t color_space);
 285:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Write_0(const vdc_onoff_t ability);
 287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_0(const vdc_onoff_t ability);
 288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_2(const vdc_onoff_t ability);
 289:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_3(const vdc_onoff_t ability);
 290:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRegUpdateRwEnable(const vdc_layer_id_t layer_id);
 291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 292:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetGraphicsDisplayMode(const vdc_layer_id_t layer_id, const vdc_gr_disp_sel_t * const g
 293:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetColorMatrix(
 294:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_colormtx_mode_t                  mtx_mode,
 295:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t                      * const offset,
 296:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t                      * const gain,
 297:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_color_matrix_t   * const color_matrix);
 298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImageEnhancementSharpness(
 299:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                          shp_h_on,
 300:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_sharp_t          * const sharp_param,
 301:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t   * const img_qlty_imp);
 302:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImageEnhancementLti(
 303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                          lti_h_on,
 304:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_lti_t            * const lti_param,
 305:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t   * const img_qlty_imp);
 306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetAlphaRectArea(
 307:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_pd_disp_rect_t               * const pd_disp_rect,
 308:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t    * const img_synthesizer);
 309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversion(const vdc_gr_format_t gr_format, const uint32_t input_color);
 310:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom4to8(const uint32_t color_value);
 311:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom5to8(const uint32_t color_value);
 312:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom6to8(const uint32_t color_value);
 313:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionIntoAgbr(const uint32_t color_value);
 314:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_Clut(const vdc_clut_t * const param, volatile uint32_t * regaddr_clut);
 315:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_StartThreshold_Gamma(const uint8_t * gam_th, volatile uint32_t * const * const gam_
 316:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_GainAdjustment_Gamma(const uint16_t * gam_gain, volatile uint32_t * const * const g
 317:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Wait_200_usec(void);
 318:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 319:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*! Color matrix offset (DC) adjustment (YG, B, and R) */
 320:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static const uint16_t colormtx_offset_adj[VDC_COLORMTX_OFFST_NUM] =
 321:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 322:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 323:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (uint16_t)VDC_COLORCONV_DC_OFFSET, (uint16_t)VDC_COLORCONV_DC_OFFSET, (uint16_t)VDC_COLORCONV_D
 324:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** };
 325:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 326:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /*! Color matrix signal gain adjustment (GG, GB, GR, BG, BB, BR, RG, RB, and RR) */
 327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static const uint16_t colormtx_gain_adj[VDC_COLORMTX_MODE_NUM][VDC_COLORMTX_GAIN_NUM] =
 328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 329:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 330:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* GBR to GBR */
 331:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_1TIMES_GAIN, 0, 0,
 332:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 334:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         0, (uint16_t)VDC_COLORCONV_1TIMES_GAIN, 0,
 335:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 337:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         0, 0, (uint16_t)VDC_COLORCONV_1TIMES_GAIN
 338:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     },
 339:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 340:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GBR to YCbCr */
 341:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_Y_G,  (uint16_t)VDC_COLORCONV_Y_B,  (uint16_t)VDC_COLORCONV_Y_R,
 342:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 343:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 344:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_CB_G, (uint16_t)VDC_COLORCONV_CB_B, (uint16_t)VDC_COLORCONV_CB_R,
 345:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 347:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_CR_G, (uint16_t)VDC_COLORCONV_CR_B, (uint16_t)VDC_COLORCONV_CR_R
 348:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     },
 349:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 350:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* YCbCr to GBR */
 351:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_G_Y, (uint16_t)VDC_COLORCONV_G_CB, (uint16_t)VDC_COLORCONV_G_CR,
 352:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 354:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_B_Y, (uint16_t)VDC_COLORCONV_B_CB, (uint16_t)VDC_COLORCONV_B_CR,
 355:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 356:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 357:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_R_Y, (uint16_t)VDC_COLORCONV_R_CB, (uint16_t)VDC_COLORCONV_R_CR
 358:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     },
 359:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 360:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* YCbCr to YCbCr */
 361:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_COLORCONV_1TIMES_GAIN, 0, 0,
 362:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 363:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 364:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         0, (uint16_t)VDC_COLORCONV_1TIMES_GAIN, 0,
 365:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 366:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 367:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         0, 0, (uint16_t)VDC_COLORCONV_1TIMES_GAIN
 368:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 369:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** };
 370:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 371:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void (* const rw_proc_function_tbl[VDC_LAYER_ID_NUM])(const vdc_onoff_t ability) =
 372:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 373:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     &SetRwProcAbility_Write_0,          /* Write scaler 0 */
 374:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     &SetRwProcAbility_Read_0,           /* Read graphics 0 */
 375:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     &SetRwProcAbility_Read_2,           /* Read graphics 2 */
 376:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     &SetRwProcAbility_Read_3            /* Read graphics 3 */
 377:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** };
 378:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 379:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 380:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_Initialize
 381:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for initialization
 382:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Initialization parameter
 383:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 384:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *****************************************************************************/
 385:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_Initialize (const vdc_init_t * const param) 
 386:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 387:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lvds_t         * lvds_tmp; 
 388:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_lvds_t * regaddr_lvds;
 389:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t           counter;
 390:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint16_t                    syscnt_panel_clk_tmp;
 391:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint16_t         * syscnt_panel_clk_reg;
 392:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t         * inp_sel_cnt_reg;
 393:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     static const uint16_t       panel_dcdr_tbl[VDC_PANEL_CLKDIV_NUM] =
 394:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 395:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Panel clock frequency division ratio */
 396:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_1, (uint16_t)VDC_REG_CLKDIV_1_2,
 397:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 398:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 399:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_3,  (uint16_t)VDC_REG_CLKDIV_1_4,
 400:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 401:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 402:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_5, (uint16_t)VDC_REG_CLKDIV_1_6,
 403:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 404:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 405:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_7,  (uint16_t)VDC_REG_CLKDIV_1_8,
 406:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 407:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 408:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_9, (uint16_t)VDC_REG_CLKDIV_1_12,
 409:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 410:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 411:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_16, (uint16_t)VDC_REG_CLKDIV_1_24,
 412:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 413:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 414:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_CLKDIV_1_32
 415:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 416:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     static const uint16_t       panel_icksel_tbl[VDC_PANEL_ICKSEL_NUM] =
 417:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 418:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Panel clock select */
 419:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_ICKSEL_IMG_DV, (uint16_t)VDC_REG_ICKSEL_EXT_0,
 420:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 421:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 422:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (uint16_t)VDC_REG_ICKSEL_PERI, (uint16_t)VDC_REG_ICKSEL_LVDS,   (uint16_t)VDC_REG_ICKSEL_LV
 423:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 424:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_reg = vdc_regaddr_system_ctrl.syscnt_panel_clk;
 426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Disable */
 427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_tmp      = (uint16_t)((uint32_t)*syscnt_panel_clk_reg & (~VDC_REG_BIT8));
 428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 429:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 430:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* LVDS */
 431:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     lvds_tmp = param->lvds;
 432:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
 434:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lvds_tmp != NULL)
 435:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 436:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         regaddr_lvds = &vdc_regaddr_lvds;
 437:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 438:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Output from the LVDS PLL is disabled. */
 439:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lclkselr)) &= (uint32_t)~VDC_REG_BIT4;
 440:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 441:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Controls power-down for the LVDS PLL: Power-down state */
 442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) |= (uint32_t)VDC_REG_BIT0;
 443:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 444:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (counter = 0; counter < (uint32_t)VDC_LVDS_PLL_WAIT_CYCLE; counter++)
 446:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 447:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* This is a delay (1 usec) while waiting for PLL PD to settle. */
 448:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ;
 449:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 450:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 451:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LCLKSELR: LVDS clock select register */
 452:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lclkselr)) &= (uint32_t)~VDC_REG_MASK_0X0300FF00;
 453:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 454:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The clock input to frequency divider 1 */
 455:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lclkselr)) |= (uint32_t)(lvds_tmp->lvds_in_clk_sel << VDC_REG_SHIFT_24);
 456:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 457:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The frequency dividing value (NIDIV) for frequency divider 1 */
 458:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* The frequency dividing value (NODIV) for frequency divider 2 */
 459:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lclkselr)) |= (uint32_t)(lvds_tmp->lvds_odiv_set << VDC_REG_SHIFT_8);
 460:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 461:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LPLLSETR: LVDS PLL setting register */
 462:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) &= (uint32_t)~VDC_REG_MASK_0X003F0730;
 463:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 464:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The frequency dividing value (NFD) for the feedback frequency */
 465:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) |= (uint32_t)(lvds_tmp->lvdspll_fd << VDC_REG_SHIFT_16);
 466:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 467:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The frequency dividing value (NRD) for the input frequency */
 468:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) |= (uint32_t)(lvds_tmp->lvdspll_rd << VDC_REG_SHIFT_8);
 469:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 470:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The frequency dividing value (NOD) for the output frequency */
 471:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) |= (uint32_t)(1u << VDC_REG_SHIFT_4);
 472:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 473:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (counter = 0; counter < (uint32_t)VDC_LVDS_PLL_WAIT_CYCLE; counter++)
 475:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 476:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* This is a delay (1 usec) while waiting for PLL PD to settle. */
 477:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ;
 478:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 479:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 480:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Controls power-down for the LVDS PLL: Normal operation */
 481:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lpllsetr)) &= (uint32_t)~VDC_REG_BIT0;
 482:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 483:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Wait for 200 usec. */
 484:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Wait_200_usec();
 485:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 486:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Output from the LVDS PLL is enabled. */
 487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(regaddr_lvds->lclkselr)) |= (uint32_t)VDC_REG_BIT4;
 488:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 489:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     inp_sel_cnt_reg = vdc_regaddr_input_ctrl.inp_sel_cnt;
 491:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 492:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Input select */
 493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->panel_icksel == VDC_PANEL_ICKSEL_IMG_DV)
 494:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 495:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 496:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*inp_sel_cnt_reg) |= (uint32_t)VDC_REG_BIT20;
 497:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 498:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 499:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 500:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 501:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*inp_sel_cnt_reg) &= (uint32_t)~VDC_REG_BIT20;
 502:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 503:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_tmp    = panel_dcdr_tbl[param->panel_dcdr];
 504:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 505:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 506:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_tmp    = (uint16_t)((uint32_t)syscnt_panel_clk_tmp |
 507:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 508:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
 509:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                                         (uint32_t)panel_icksel_tbl[param->panel_icksel]);
 510:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     *syscnt_panel_clk_reg   = syscnt_panel_clk_tmp;
 511:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 512:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Enable */
 513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_tmp    = (uint16_t)((uint32_t)syscnt_panel_clk_tmp | VDC_REG_BIT8);
 514:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 515:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 516:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_Initialize() */
 517:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 519:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_Terminate
 520:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for termination
 521:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   void
 522:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 523:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 524:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_Terminate (void) 
 525:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 526:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint16_t         * syscnt_panel_clk_reg;
 527:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint16_t                    syscnt_panel_clk_tmp;
 528:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_resource_state_t       rsrc_state;
 529:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t                lvds_ref;
 530:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_lvds_t * regaddr_lvds;
 531:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t           counter;
 532:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 533:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_reg = vdc_regaddr_system_ctrl.syscnt_panel_clk;
 534:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 535:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Disable */
 536:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     syscnt_panel_clk_tmp      = (uint16_t)((uint32_t)*syscnt_panel_clk_reg & (~VDC_REG_BIT8));
 537:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 538:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 539:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     rsrc_state = VDC_ShrdPrmGetResource(VDC_RESOURCE_LVDS_CLK);
 540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (rsrc_state != VDC_RESOURCE_ST_INVALID)         /* LVDS PLL clock is set. */
 541:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 542:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         lvds_ref = VDC_ShrdPrmGetLvdsClkRef();
 543:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (lvds_ref == VDC_OFF)       /* LVDS PLL clock is not referred. */
 544:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 545:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             regaddr_lvds = &vdc_regaddr_lvds;
 546:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 547:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Output from the LVDS PLL is disabled. */
 548:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(regaddr_lvds->lclkselr)) &= (uint32_t)~VDC_REG_BIT4;
 549:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 550:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Controls power-down for the LVDS PLL: Power-down state */
 551:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(regaddr_lvds->lpllsetr)) |= (uint32_t)VDC_REG_BIT0;
 552:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 553:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
 554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             for (counter = 0; counter < (uint32_t)VDC_LVDS_PLL_WAIT_CYCLE; counter++)
 555:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 556:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* This is a delay (1 usec) while waiting for PLL PD to settle. */
 557:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 ;
 558:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 559:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 560:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 561:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_Terminate() */
 562:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 563:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 564:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_VideoInput
 565:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for video input
 566:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Video input setup parameter
 567:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 568:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 569:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_VideoInput (const vdc_input_t * const param) 
 570:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 571:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t   * input_ctrl;
 572:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_sync_delay_t           * dly_tmp;
 573:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_ext_in_sig_t           * ext_sig_tmp;
 574:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 575:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     input_ctrl = &vdc_regaddr_input_ctrl;
 576:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 577:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Input select */
 578:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)VDC_REG_BIT20;
 579:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 580:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Vsync signal 1/2fH and 1/4fH phase timing */
 581:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_vsync_ph_adj))  = (uint32_t)param->inp_fh50 << VDC_REG_SHIFT_16;
 582:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 584:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_vsync_ph_adj)) |= (uint32_t)param->inp_fh25;
 585:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 586:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Sync signal delay adjustment */
 587:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     dly_tmp = param->dly;
 588:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 589:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
 590:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (dly_tmp != NULL)
 591:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 592:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Number of lines for delaying Vsync signal and field differentiation signal */
 593:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_dly_adj))  = (uint32_t)(dly_tmp->inp_vs_dly_l << VDC_REG_SHIFT_24);
 594:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 595:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Field differentiation signal delay amount */
 596:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_dly_adj)) |= (uint32_t)(dly_tmp->inp_fld_dly << VDC_REG_SHIFT_16);
 597:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 598:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Vsync signal delay amount */
 599:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_dly_adj)) |= (uint32_t)(dly_tmp->inp_vs_dly << VDC_REG_SHIFT_8);
 600:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 601:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Hsync signal delay amount */
 602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_dly_adj)) |= (uint32_t)(dly_tmp->inp_hs_dly);
 603:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 604:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 605:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Horizontal noise reduction operating mode, Y/Cb/Cr mode */
 606:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->imgcnt_nr_cnt0)) |= (uint32_t)VDC_REG_BIT20;
 607:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 608:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input signal */
 609:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     ext_sig_tmp = param->ext_sig;
 610:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 611:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
 612:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp != NULL)
 613:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 614:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Setting external input video signal */
 615:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetVideoExternalInput(ext_sig_tmp, input_ctrl);
 616:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 617:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Horizontal noise reduction operating mode, G/B/R mode */
 618:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((ext_sig_tmp->inp_format == VDC_EXTIN_FORMAT_RGB888) ||
 619:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (ext_sig_tmp->inp_format == VDC_EXTIN_FORMAT_RGB666) ||
 620:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (ext_sig_tmp->inp_format == VDC_EXTIN_FORMAT_RGB565))
 621:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 622:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
 623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(input_ctrl->imgcnt_nr_cnt0)) &= (uint32_t)~VDC_REG_BIT20;
 624:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 625:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 626:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 627:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (INP_UPDATE)
 628:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       INP_EXT_UPDATE
 629:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       INP_IMG_UPDATE */
 630:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_update)) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 631:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 632:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (IMGCNT_UPDATE)
 633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       IMGCNT_VEN */
 634:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->imgcnt_update)) |= (uint32_t)VDC_REG_BIT0;
 635:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_VideoInput() */
 636:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 637:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 638:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_SyncControl
 639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for sync control
 640:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Sync signal control parameter
 641:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 643:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_SyncControl (const vdc_sync_ctrl_t * const param) 
 644:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler_0;
 646:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                        full_scr;
 647:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scaler_0    = &vdc_regaddr_scaler;
 649:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 650:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
 651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->vsync_cpmpe != NULL)
 652:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 653:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frequent Vsync signal masking period */
 654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc1)) = (uint32_t)(param->vsync_cpmpe->res_vmask << VDC_REG_SHIFT_16);
 655:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 656:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Missing-Sync compensating pulse output wait time */
 657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc2)) = (uint32_t)(param->vsync_cpmpe->res_vlack << VDC_REG_SHIFT_16);
 658:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 659:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frequent Vsync signal masking and missing Vsync signal compensation */
 660:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc1)) |= (uint32_t)VDC_REG_BIT0;
 661:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 663:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc2)) |= (uint32_t)VDC_REG_BIT0;
 664:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 665:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 666:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 667:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frequent Vsync signal masking and missing Vsync signal compensation are disabled, if unn
 668:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc1)) &= (uint32_t)~VDC_REG_BIT0;
 669:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 670:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc2)) &= (uint32_t)~VDC_REG_BIT0;
 672:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 673:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 674:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc2)) |= (uint32_t)VDC_REG_BIT_0XFFFF0000;
 675:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 677:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Hsync period setting and free-running Vsync period initialization */
 678:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_frc4))      = (uint32_t)param->res_fh;
 679:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 680:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Vsync signal output select (free-running Vsync on/off control) */
 681:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_vs_sel == VDC_OFF)
 682:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 683:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc3)) &= (uint32_t)~VDC_REG_BIT0;
 685:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 686:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 687:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 688:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 689:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc3)) |= (uint32_t)VDC_REG_BIT0;
 690:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 691:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 692:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc4)) &= (uint32_t)~VDC_REG_MASK_0X07FF0000;
 693:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 694:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 695:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler_0->scl0_frc4)) |= (uint32_t)(param->res_fv << VDC_REG_SHIFT_16);
 696:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 697:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 698:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Vsync signal delay control */
 699:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_frc5)) &= (uint32_t)~VDC_REG_MASK_0X000000FF;
 700:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 701:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_frc5)) |= (uint32_t)param->res_vsdly;
 703:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 704:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Full-screen enable signal */
 705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     full_scr  = (uint32_t)param->res_f.vs << VDC_REG_SHIFT_16;
 706:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 707:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 708:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     full_scr |= (uint32_t)param->res_f.vw;
 709:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_frc6))   = full_scr;
 711:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 712:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 713:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     full_scr  = (uint32_t)param->res_f.hs << VDC_REG_SHIFT_16;
 714:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 715:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 716:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     full_scr |= (uint32_t)param->res_f.hw;
 717:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_frc7))   = full_scr;
 719:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 720:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (SC0_SCL0_UPDATE, SC1_SCL0_UPDATE, OIR_SCL0_UPDATE)
 721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b8       SCL0_UPDATE
 722:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL0_VEN_B */
 723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler_0->scl0_update))   |= (uint32_t)(VDC_REG_BIT8|VDC_REG_BIT4);
 724:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetInitialConnection();
 726:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_SyncControl() */
 727:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 728:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 729:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_DisplayOutput
 730:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for display output
 731:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Display output configuration parameter
 732:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 733:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 734:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_DisplayOutput (const vdc_output_t * const param) 
 735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 736:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t      * output_ctrl;
 737:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t                     * output_pin_regaddr[VDC_LCD_TCON_PIN_NUM];
 738:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                                tcon_sig_index;
 739:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t  * const * lcd_tcon_timing;
 740:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     static void                    (* const tcon_function_tbl[VDC_LCD_TCONSIG_NUM])(
 741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         const vdc_lcd_tcon_timing_t        * const lcd_tcon,
 742:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         const vdc_regaddr_output_ctrl_t    * const output_ctrl) =
 743:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 744:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_STVA_VS,    /* STVA/VS */
 745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_STVB_VE,    /* STVB/VE */
 746:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_STH_HS,     /* STH_HS */
 747:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_STB_HE,     /* STB_HE */
 748:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_CPV_GCK,    /* CPV_GCK */
 749:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_POLA,       /* POLA */
 750:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_POLB,       /* POLB */
 751:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         &SetLcdTcon_DE          /* DE */
 752:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 753:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t                      output_pin_edge[VDC_LCD_TCON_PIN_NUM] =
 754:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 755:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_TCON0_EDGE, VDC_REG_TCON1_EDGE, VDC_REG_TCON2_EDGE, VDC_REG_TCON3_EDGE,
 756:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_TCON4_EDGE, VDC_REG_TCON5_EDGE, VDC_REG_TCON6_EDGE
 757:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 758:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_lcd_tcon_pin_t                 tcon_pin_tmp;
 759:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_disp_sel_t            gr_disp_sel_tbl[VDC_GR_TYPE_NUM] =
 760:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 761:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Graphics display mode for initialization */
 762:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_DISPSEL_BACK,              /* Graphics 0 */
 763:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_DISPSEL_LOWER,             /* Graphics 2 */
 764:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_DISPSEL_LOWER              /* Graphics 3 */
 765:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 766:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t                      dither_format[VDC_LCD_OUTFORMAT_NUM] =
 767:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 768:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Panel dither output format select */
 769:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_PATH_FORMAT_RGB888, VDC_REG_PATH_FORMAT_RGB666,
 770:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_PATH_FORMAT_RGB565, VDC_REG_PATH_FORMAT_NON
 771:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
 772:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 773:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_ctrl = &vdc_regaddr_output_ctrl;
 774:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* 1/2fH timing */
 776:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim))  = (uint32_t)param->tcon_half << VDC_REG_SHIFT_16;
 777:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 778:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Offset Hsync signal timing */
 779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim)) |= (uint32_t)param->tcon_offset;
 780:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 781:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Create output pin register address table */
 782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_0] = output_ctrl->tcon_tim_stva2;
 783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_1] = output_ctrl->tcon_tim_stvb2;
 784:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_2] = output_ctrl->tcon_tim_sth2;
 785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_3] = output_ctrl->tcon_tim_stb2;
 786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_4] = output_ctrl->tcon_tim_cpv2;
 787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_5] = output_ctrl->tcon_tim_pola2;
 788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_6] = output_ctrl->tcon_tim_polb2;
 789:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 790:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Clear output phase control of LCT_TCON0~6 pin */
 791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_clk_phase)) &= (uint32_t)~VDC_REG_MASK_0X0000007F;
 792:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* LCD TCON */
 794:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     lcd_tcon_timing = param->outctrl;
 795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (tcon_sig_index = 0; tcon_sig_index < VDC_LCD_TCONSIG_NUM; tcon_sig_index++)
 796:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 797:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* NULL check */
 798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((*lcd_tcon_timing) != NULL)
 799:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 800:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Setting LCD TCON */
 801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             tcon_function_tbl[tcon_sig_index](*lcd_tcon_timing, output_ctrl);
 802:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             tcon_pin_tmp = (*lcd_tcon_timing)->tcon_pin;
 804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (tcon_pin_tmp != VDC_LCD_TCON_PIN_NON)
 805:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 806:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* LCD TCON output pin select */
 807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(output_pin_regaddr[tcon_pin_tmp])) &= (uint32_t)~VDC_REG_MASK_0X00000007;
 808:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(output_pin_regaddr[tcon_pin_tmp])) |= tcon_sig_index;
 809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 810:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Output phase control of LCT_TCON pin */
 811:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 if ((*lcd_tcon_timing)->outcnt_edge != VDC_EDGE_RISING)
 812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 {
 813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(output_ctrl->out_clk_phase)) |= output_pin_edge[tcon_pin_tmp];
 814:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 }
 815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 816:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         lcd_tcon_timing++;
 818:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 819:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 820:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_set)) &= (uint32_t)~VDC_REG_MASK_0X11003313;
 822:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 823:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Bit endian change ON/OFF control */
 824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->out_endian_on != VDC_OFF)
 825:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 826:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_set)) |= (uint32_t)VDC_REG_BIT28;
 828:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 829:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 830:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* B/R signal swap ON/OFF control */
 831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->out_swap_on != VDC_OFF)
 832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 833:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 834:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_set)) |= (uint32_t)VDC_REG_BIT24;
 835:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 836:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 837:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Output format select */
 838:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_set)) |= (uint32_t)(param->out_format << VDC_REG_SHIFT_12);
 839:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Panel dither output format select */
 841:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_pdtha)) &= (uint32_t)~VDC_REG_MASK_0X00030000;
 842:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_pdtha)) |= dither_format[param->out_format];
 843:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 844:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->out_format == VDC_LCD_OUTFORMAT_SERIAL_RGB)
 845:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 846:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Clock frequency control */
 847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_set)) |= (uint32_t)(param->out_frq_sel << VDC_REG_SHIFT_8);
 848:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 849:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Scan direction select */
 850:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->out_dir_sel != VDC_LCD_SERIAL_SCAN_FORWARD)
 851:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 852:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
 853:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_set)) |= (uint32_t)VDC_REG_BIT4;
 854:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 855:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 856:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Clock phase adjustment */
 857:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_set)) |= (uint32_t)param->out_phase;
 858:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 859:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 860:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 861:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Clock frequency control */
 862:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_set)) |= (uint32_t)(VDC_LCD_PARALLEL_CLKFRQ_1 << VDC_REG_SHIFT_8);
 863:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 864:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 865:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Output phase control of LCD_DATA23 to LCD_DATA0 pin */
 866:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->outcnt_lcd_edge == VDC_EDGE_RISING)
 867:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 868:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 869:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_clk_phase)) &= (uint32_t)~VDC_REG_BIT8;
 870:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 871:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 872:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 873:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 874:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_clk_phase)) |= (uint32_t)VDC_REG_BIT8;
 875:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 876:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 877:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Set background color */
 878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetGrapicsBackgroundColor();
 879:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 880:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Initialize graphics display mode */
 881:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetGraphicsDisplayMode(VDC_LAYER_ID_ALL, gr_disp_sel_tbl);
 882:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 883:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* TCON register update control register (TCON_UPDATE)
 884:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       TCON_VEN */
 885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_update)) |= (uint32_t)VDC_REG_BIT0;
 886:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 887:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (OUT_UPDATE)
 888:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       OUTCNT_VEN */
 889:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_update)) |= (uint32_t)VDC_REG_BIT0;
 890:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_DisplayOutput() */
 892:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 893:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
 894:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_WriteDataControl
 895:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data write control processing
 896:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Data write control parameter
 897:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
 898:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
 899:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_WriteDataControl (const vdc_write_t * const param) 
 900:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
 902:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_scalingdown_rot_t  * scldw_rot;
 903:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 904:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scaler      = &vdc_regaddr_scaler;
 905:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scldw_rot   = &param->scalingdown_rot;
 906:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 907:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Image area to be captured */
 908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds2))  = (uint32_t)(scldw_rot->res.vs << VDC_REG_SHIFT_16);
 909:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 910:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 911:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds2)) |= (uint32_t)scldw_rot->res.vw;
 912:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 913:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 914:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds3))  = (uint32_t)(scldw_rot->res.hs << VDC_REG_SHIFT_16);
 915:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 916:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 917:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds3)) |= (uint32_t)scldw_rot->res.hw;
 918:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 919:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) &= (uint32_t)~VDC_REG_MASK_0X0007000D;
 921:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 922:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Swap setting in frame buffer writing */
 923:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) |= (uint32_t)(param->res_wrswa << VDC_REG_SHIFT_16);
 924:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 925:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer video-signal writing format */
 926:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) |= (uint32_t)(param->res_md << VDC_REG_SHIFT_2);
 927:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 928:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Transfer burst length for frame buffer writing */
 929:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_bst_md != VDC_BST_MD_32BYTE)
 930:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 932:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr1)) |= (uint32_t)VDC_REG_BIT0;
 933:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 934:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 935:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer base address */
 936:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr2)) = R_VDC_CPUVAddrToSysPAddr( (uint32_t)param->base) ;
 937:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 938:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer line offset address[byte] */
 939:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr3)) = (param->ln_off << VDC_REG_SHIFT_16);
 940:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of frames of buffer to be written to (res_flm_num + 1) */
 942:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr3)) |= param->flm_num;
 943:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 944:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer frame offset address [byte] */
 945:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->flm_num != 0u)
 946:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr4)) = param->flm_off;
 948:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 949:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 950:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Writing rate */
 951:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr5)) &= (uint32_t)~VDC_REG_MASK_0X00000300;
 952:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 953:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
 954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr5)) |= (uint32_t)(param->res_fs_rate << VDC_REG_SHIFT_8);
 955:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 956:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Dither correction on/off */
 957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_dth_on == VDC_OFF)
 958:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 959:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr6)) &= (uint32_t)~VDC_REG_BIT4;
 961:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 962:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 963:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 964:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 965:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr6)) |= (uint32_t)VDC_REG_BIT4;
 966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 967:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 968:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Bit Reduction */
 969:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_md == VDC_RES_MD_RGB565)
 970:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 971:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* On */
 972:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr6)) |= (uint32_t)VDC_REG_BIT0;
 973:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 974:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 975:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 976:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Off */
 977:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr6)) &= (uint32_t)~VDC_REG_BIT0;
 978:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 979:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 980:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Scaler 0 or 1 */
 981:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Field determination signal delay control */
 982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->flm_num == 0u)
 983:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 984:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer: One plane */
 985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_frc5)) &= (uint32_t)~VDC_REG_BIT8;
 986:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 987:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
 988:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 989:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer: Two planes or more */
 990:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_frc5)) |= (uint32_t)VDC_REG_BIT8;
 991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 992:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 993:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Horizontal prefilter */
 994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (scldw_rot->res_pfil_sel == VDC_OFF)
 995:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 996:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
 997:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) &= (uint32_t)~VDC_REG_BIT29;
 998:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 999:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1000:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1001:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1002:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) |= (uint32_t)VDC_REG_BIT29;
1003:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1004:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1005:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of valid lines in vertical direction output by scaling-down control block */
1006:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds7))  = (uint32_t)(scldw_rot->res_out_vw << VDC_REG_SHIFT_16);
1007:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1008:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of valid horizontal pixels output by scaling-down control block */
1009:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds7)) |= (uint32_t)scldw_rot->res_out_hw;
1010:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1011:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Scaling-down */
1012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetScalingDown(scldw_rot, param->res_inter, scaler);
1013:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1014:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer writing mode for image processing */
1015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) &= (uint32_t)~VDC_REG_MASK_0X00000070;
1016:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1017:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) |= (uint32_t)(scldw_rot->res_ds_wr_md << VDC_REG_SHIFT_4);
1019:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1020:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Field operating mode select */
1021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_inter == VDC_RES_INTER_PROGRESSIVE)
1022:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1023:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Progressive */
1024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) &= (uint32_t)~VDC_REG_BIT12;
1025:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1026:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1027:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1028:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Interlace */
1029:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) |= (uint32_t)VDC_REG_BIT12;
1030:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1032:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Write field select */
1033:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->res_fld_sel == VDC_RES_FLD_SEL_TOP)
1034:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1035:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Top field */
1036:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) &= (uint32_t)~VDC_REG_BIT4;
1037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1038:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1039:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1040:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Bottom field */
1041:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) |= (uint32_t)VDC_REG_BIT4;
1042:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1043:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1044:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer for bottom */
1045:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->btm_base != NULL)
1046:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1047:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* SC_RES_TB_ADD_MOD */
1048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr1)) |= (uint32_t)VDC_REG_MASK_0X00000080;
1049:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1050:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer base address */
1051:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr8)) = (uint32_t)param->btm_base;
1052:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1053:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer line offset address[byte] */
1054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr9))  = (param->ln_off << VDC_REG_SHIFT_16);
1055:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1056:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The number of frames of buffer (defined by res_flm_num + 1) */
1057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr9)) |= param->flm_num;
1058:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1059:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer frame offset address */
1060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->flm_num != 0u)
1061:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1062:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(scaler->scl1_wr10)) = param->flm_off;
1063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1064:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1065:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1067:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* SC_RES_TB_ADD_MOD */
1068:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr1)) &= (uint32_t)~VDC_REG_MASK_0X00000080;
1069:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1070:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1071:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (SC0_SCL0_UPDATE)
1072:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b12      SCL0_VEN_C
1073:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL0_VEN_B
1074:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       SCL0_VEN_A */
1075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_update))   |= (uint32_t)(VDC_REG_BIT12 | VDC_REG_BIT4 | VDC_REG_BIT0);
1076:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1077:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (SC0_SCL1_UPDATE)
1078:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b16      SCL1_UPDATE_A
1079:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL1_VEN_B
1080:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       SCL1_VEN_A */
1081:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_update))   |= (uint32_t)(VDC_REG_BIT16 | VDC_REG_BIT4 | VDC_REG_BIT0);
1082:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1083:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetInputCntrlColorMtx();
1084:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_WriteDataControl() */
1085:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1086:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1087:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ChangeWriteProcess
1088:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data write change processing
1089:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Data write change parameter
1090:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1091:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1092:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ChangeWriteProcess (const vdc_write_chg_t * const param) 
1093:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1094:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
1095:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_scalingdown_rot_t  * scldw_rot;
1096:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_res_inter_t                res_inter_tmp;
1097:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1098:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scaler      = &vdc_regaddr_scaler;
1099:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scldw_rot   = &param->scalingdown_rot;
1100:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1101:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Image area to be captured */
1102:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds2))  = (uint32_t)(scldw_rot->res.vs << VDC_REG_SHIFT_16);
1103:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1104:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds2)) |= (uint32_t)scldw_rot->res.vw;
1106:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1108:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds3))  = (uint32_t)(scldw_rot->res.hs << VDC_REG_SHIFT_16);
1109:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1110:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds3)) |= (uint32_t)scldw_rot->res.hw;
1112:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1113:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Horizontal prefilter */
1114:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (scldw_rot->res_pfil_sel == VDC_OFF)
1115:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1116:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) &= (uint32_t)~VDC_REG_BIT29;
1118:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1119:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1120:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1121:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1122:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) |= (uint32_t)VDC_REG_BIT29;
1123:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1124:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1125:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of valid lines in vertical direction output by scaling-down control block */
1126:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds7))  = (uint32_t)(scldw_rot->res_out_vw << VDC_REG_SHIFT_16);
1127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1128:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of valid horizontal pixels output by scaling-down control block */
1129:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds7)) |= (uint32_t)scldw_rot->res_out_hw;
1130:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1131:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Progressive or interlace */
1132:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     res_inter_tmp = VDC_ShrdPrmGetInterlace();
1133:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1134:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Scaling-down */
1135:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetScalingDown(scldw_rot, res_inter_tmp, scaler);
1136:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1137:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer writing mode for image processing */
1138:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) &= (uint32_t)~VDC_REG_MASK_0X00000070;
1139:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1140:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1141:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_wr1)) |= (uint32_t)(scldw_rot->res_ds_wr_md << VDC_REG_SHIFT_4);
1142:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1143:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (SC0_SCL1_UPDATE)
1144:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL1_VEN_B
1145:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       SCL1_VEN_A */
1146:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl1_update))   |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
1147:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1148:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (SC0_SCL0_UPDATE)
1149:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b12      SCL0_VEN_C
1150:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL0_VEN_B
1151:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       SCL0_VEN_A */
1152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_update))   |= (uint32_t)(VDC_REG_BIT12 | VDC_REG_BIT4 | VDC_REG_BIT0);
1153:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1154:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ChangeWriteProcess() */
1155:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1156:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1157:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ReadDataControl
1158:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data read control processing
1159:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1160:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Data read control parameter
1161:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1162:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1163:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ReadDataControl  
1164:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_graphics_type_t graphics_id, const vdc_read_t * const param)
1165:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1166:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1167:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t     * img_qlty_imp;
1168:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_width_read_fb_t                  * w_read_fb;
1169:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t                            graphics_enlargement;
1170:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_color_space_t                      color_space;
1171:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                                reg_data;
1172:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1173:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_read_fb = VDC_ShrdPrmGetFrBuffWidth_Rd(graphics_id);
1174:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1175:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     graphics_enlargement = ConfirmGraphicsEnlargement(graphics_id, param->gr_flm_sel, w_read_fb, &p
1176:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1177:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (graphics_id == VDC_GR_TYPE_GR0)
1178:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1179:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetScalerGraphics(graphics_id, w_read_fb, &param->gr_grc, param->gr_flm_sel, graphics_enlar
1180:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1181:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1182:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1183:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1184:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1185:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm1)) &= (uint32_t)~VDC_REG_MASK_0X00010301;
1186:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1187:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Line offset address direction of the frame buffer */
1188:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_ln_off_dir != VDC_GR_LN_OFF_DIR_INC)
1189:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1190:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1191:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm1)) |= (uint32_t)VDC_REG_BIT16;
1192:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1193:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1194:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer address setting signal */
1195:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm1)) |= (uint32_t)(param->gr_flm_sel << VDC_REG_SHIFT_8);
1196:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1197:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer burst transfer mode */
1198:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_bst_md != VDC_BST_MD_32BYTE)
1199:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1200:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1201:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm1)) |= (uint32_t)VDC_REG_BIT0;
1202:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1203:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1204:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Sets the frame buffer number for distortion correction */
1205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_flm_sel == VDC_GR_FLM_SEL_DISTORTION)
1206:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->gr_imr_flm_inv == VDC_OFF)
1208:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1209:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1210:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm1)) &= (uint32_t)~VDC_REG_BIT4;
1211:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1212:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1213:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1214:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm1)) |= (uint32_t)VDC_REG_BIT4;
1216:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1217:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1218:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1219:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer base address */
1220:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm2))
1221:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1222:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1223:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         = (uint32_t)(R_VDC_CPUVAddrToSysPAddr((uint32_t)param->gr_base) & (uint32_t)~VDC_REG_MASK_0
1224:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1225:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer line offset address[byte] */
1226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm3)) &= (uint32_t)~VDC_REG_MASK_0X7FFF03FF;
1227:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm3)) |= (param->gr_ln_off << VDC_REG_SHIFT_16);
1228:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1229:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* The number of lines when reading the addresses repeatedly */
1230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm5)) = (uint32_t)VDC_REG_MASK_0X000007FF;
1231:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1232:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of lines in a frame */
1233:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm5)) |= (((uint32_t)w_read_fb->in_vw - 1u) << VDC_REG_SHIFT_16);
1234:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1235:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1236:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm6)) &= (uint32_t)~VDC_REG_MASK_0XF7FF1C3F;
1237:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1238:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Format of the frame buffer read signal */
1239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm6)) |= ((uint32_t)param->gr_format << VDC_REG_SHIFT_28);
1240:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1241:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Width of the horizontal valid period */
1242:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm6)) |= (((uint32_t)w_read_fb->in_hw - 1u) << VDC_REG_SHIFT_16);
1243:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1244:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Swap setting in frame buffer reading */
1245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm6)) |= ((uint32_t)param->gr_rdswa << VDC_REG_SHIFT_10);
1246:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1247:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if ((param->gr_flm_sel == VDC_GR_FLM_SEL_SCALE_DOWN) || (param->gr_flm_sel == VDC_GR_FLM_SEL_FL
1248:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1249:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sets the amount of data to be skipped through */
1250:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm6)) |= DisplayStartPixelSetting((uint32_t)param->gr_base, param->
1251:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1252:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1253:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics display mode */
1254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
1255:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (graphics_id == VDC_GR_TYPE_GR0)
1256:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1257:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1258:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_DISPSEL_BACK;
1259:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1260:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1261:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1262:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_DISPSEL_LOWER;
1264:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1265:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1266:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics display area */
1267:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab2))  = ((uint32_t)param->gr_grc.vs << VDC_REG_SHIFT_16);
1268:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1269:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab2)) |= (uint32_t)param->gr_grc.vw;
1271:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1272:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1273:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab3))  = ((uint32_t)param->gr_grc.hs << VDC_REG_SHIFT_16);
1274:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1275:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
1276:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab3)) |= (uint32_t)param->gr_grc.hw;
1277:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1278:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Initialize alpha blending in a rectangular area */
1279:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if ((graphics_id == VDC_GR_TYPE_GR2) || (graphics_id == VDC_GR_TYPE_GR3))
1280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1281:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Turns off alpha blending in a rectangular area */
1282:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X0000D000;
1283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1284:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* The valid image area for alpha blending in a rectangular area */
1285:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data                     = (*(img_synthesizer->gr_ab2));
1286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab4)) = reg_data;
1287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data                     = (*(img_synthesizer->gr_ab3));
1288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab5)) = reg_data;
1289:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1290:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Disable fade-in and fade-out */
1291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab6)) &= (uint32_t)~VDC_REG_MASK_0X01FF00FF;
1292:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1293:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Set the initial alpha value to '255' */
1294:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab7)) |= (uint32_t)VDC_REG_MASK_0X00FF0000;
1295:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1296:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1297:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Turns off  chroma-key processing */
1298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_ab7)) &= (uint32_t)~VDC_REG_BIT0;
1299:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1300:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (graphics_id == VDC_GR_TYPE_GR0)
1301:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1302:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Alpha value is set to 255. */
1303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab10)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1304:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1305:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab11)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1307:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1308:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Swapping of data read from buffer in the YCbCr422 format */
1309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm6)) &= (uint32_t)~VDC_REG_MASK_0X0000E000;
1310:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->gr_format == VDC_GR_FORMAT_YCBCR422)
1311:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1312:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1313:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm6)) |= ((uint32_t)param->gr_ycc_swap << VDC_REG_SHIFT_13);
1314:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1315:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* The interpolation mode for YCC422 to YCbCr444 conversion is fixed to average interpo
1316:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm6)) |= (uint32_t)VDC_REG_BIT8;
1317:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1318:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1319:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1320:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* If the format of the frame buffer read signal is not YCbCr422,
1321:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                initialize the swapping of data read from buffer in the YCbCr422 format. */
1322:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm6)) |= ((uint32_t)VDC_GR_YCCSWAP_CBY0CRY1 << VDC_REG_SHIFT_13
1323:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1324:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1325:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         color_space = VDC_ShrdPrmGetColorSpaceFbRd(graphics_id);
1326:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetScalerBackgroundColor(color_space);
1328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetImgQaImproverColorMtx(color_space);
1329:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1330:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         img_qlty_imp = &vdc_regaddr_img_qlty_imp;
1331:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1332:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Operating mode */
1333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (color_space == VDC_COLOR_SPACE_GBR)
1334:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1335:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_tim1)) &= (uint32_t)~VDC_REG_BIT4;
1337:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1338:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1339:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1340:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1341:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_tim1)) |= (uint32_t)VDC_REG_BIT4;
1342:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1343:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1344:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register (ADJx_UPDATE)
1345:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       ADJx_VEN */
1346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_update)) |= (uint32_t)VDC_REG_BIT0;
1347:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1348:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1349:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1350:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b8       GRx_UPDATE
1351:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN
1352:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       GRx_IBUS_VEN */
1353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)(VDC_REG_BIT8 | VDC_REG_BIT4 | VDC_REG_BIT0);
1354:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1355:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ReadDataControl() */
1356:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1357:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1358:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ChangeReadProcess
1359:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data read change processing
1360:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1361:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Data read change parameter
1362:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1363:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1364:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ChangeReadProcess  
1365:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_graphics_type_t graphics_id, const vdc_read_chg_t * const param)
1366:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1367:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1368:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_flm_sel_t                       gr_flm_sel_tmp;
1369:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_period_rect_t                    * gr_grc_tmp;
1370:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_width_read_fb_t                  * w_read_fb;
1371:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t                            graphics_enlargement;
1372:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_format_t                        gr_format_tmp;
1373:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1374:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_flm_sel_tmp  = VDC_ShrdPrmGetSelFbAddrSig(graphics_id);
1375:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_grc_tmp      = VDC_ShrdPrmGetDisplayArea(graphics_id);
1376:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_read_fb       = VDC_ShrdPrmGetFrBuffWidth_Rd(graphics_id);
1377:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1378:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     graphics_enlargement = ConfirmGraphicsEnlargement(graphics_id, gr_flm_sel_tmp, w_read_fb, gr_gr
1379:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1380:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (graphics_id == VDC_GR_TYPE_GR0)
1381:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1382:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetScalerGraphics(graphics_id, w_read_fb, gr_grc_tmp, gr_flm_sel_tmp, graphics_enlargement)
1383:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1384:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1385:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1386:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1387:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Frame buffer base address */
1388:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_base != NULL)
1389:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1390:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1391:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm2))
1392:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1393:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1394:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             = (uint32_t)(R_VDC_CPUVAddrToSysPAddr((uint32_t)param->gr_base) & (uint32_t)~VDC_REG_MA
1395:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1396:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_flm_sel_tmp == VDC_GR_FLM_SEL_SCALE_DOWN) || (gr_flm_sel_tmp == VDC_GR_FLM_SEL_FLM_
1397:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1398:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_format_tmp = VDC_ShrdPrmGetGraphicsFormat(graphics_id);
1399:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1400:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Sets the amount of data to be skipped through */
1401:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm6)) &= (uint32_t)~VDC_REG_MASK_0X0000003F;
1402:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1403:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1404:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_flm6)) |= DisplayStartPixelSetting((uint32_t)param->gr_base, gr_
1405:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1406:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1407:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1408:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Size of the frame buffer to be read */
1409:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->width_read_fb != NULL)
1410:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1411:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Number of lines in a frame */
1412:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm5)) &= (uint32_t)~VDC_REG_MASK_0X07FF0000;
1413:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1414:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1415:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm5)) |= (((uint32_t)param->width_read_fb->in_vw - 1u) << VDC_REG_S
1416:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1417:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Width of the horizontal valid period */
1418:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm6)) &= (uint32_t)~VDC_REG_MASK_0X07FF0000;
1419:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1420:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1421:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm6)) |= (((uint32_t)param->width_read_fb->in_hw - 1u) << VDC_REG_S
1422:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1423:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1424:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics display mode */
1425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_disp_sel != NULL)
1426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((*(param->gr_disp_sel)) != VDC_DISPSEL_IGNORED)
1428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1429:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1430:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
1431:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1432:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) |= (uint32_t)*(param->gr_disp_sel);
1434:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1435:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1436:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1437:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics display area */
1438:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_grc != NULL)
1439:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1440:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1441:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab2))  = ((uint32_t)param->gr_grc->vs << VDC_REG_SHIFT_16);
1443:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1444:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab2)) |= (uint32_t)param->gr_grc->vw;
1446:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1447:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1448:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab3))  = ((uint32_t)param->gr_grc->hs << VDC_REG_SHIFT_16);
1449:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1450:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1451:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab3)) |= (uint32_t)param->gr_grc->hw;
1452:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1453:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1454:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1455:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN
1456:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       GRx_IBUS_VEN */
1457:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
1458:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ChangeReadProcess() */
1459:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1460:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1461:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_StartProcess
1462:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data write/read start processing
1463:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   layer_id                : Layer ID
1464:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Data write/read start parameter
1465:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1466:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1467:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_StartProcess  
1468:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_layer_id_t layer_id, const vdc_start_t * const param)
1469:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1470:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                   layer_id_num;
1471:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_resource_state_t       resource_state;
1472:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1473:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
1474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->gr_disp_sel != NULL)
1475:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1476:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Set graphics display mode */
1477:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetGraphicsDisplayMode(layer_id, param->gr_disp_sel);
1478:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1479:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1480:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (layer_id != VDC_LAYER_ID_ALL)
1481:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1482:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         rw_proc_function_tbl[layer_id](VDC_ON);
1483:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1484:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1485:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1486:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (layer_id_num = 0; layer_id_num < (uint32_t)VDC_LAYER_ID_NUM; layer_id_num++)
1488:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1489:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             resource_state = VDC_ShrdPrmGetRwProcReady((vdc_layer_id_t)layer_id_num);
1491:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (resource_state != VDC_RESOURCE_ST_INVALID)
1492:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 rw_proc_function_tbl[layer_id_num](VDC_ON);
1494:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1495:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1496:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1497:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetRegUpdateRwEnable(layer_id);
1498:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_StartProcess() */
1499:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1500:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1501:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_StopProcess
1502:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for data write/read stop processing
1503:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   layer_id                : Layer ID
1504:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1505:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1506:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_StopProcess (const vdc_layer_id_t layer_id) 
1507:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1508:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                   layer_id_num;
1509:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_resource_state_t       resource_state;
1510:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1511:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (layer_id != VDC_LAYER_ID_ALL)
1512:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         rw_proc_function_tbl[layer_id](VDC_OFF);
1514:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1515:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1516:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1517:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (layer_id_num = 0; layer_id_num < (uint32_t)VDC_LAYER_ID_NUM; layer_id_num++)
1519:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1520:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1521:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             resource_state = VDC_ShrdPrmGetRwProcEnabled((vdc_layer_id_t)layer_id_num);
1522:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (resource_state != VDC_RESOURCE_ST_INVALID)
1523:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1524:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 rw_proc_function_tbl[layer_id_num](VDC_OFF);
1525:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1526:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1527:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1528:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetRegUpdateRwEnable(layer_id);
1529:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_StopProcess() */
1530:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1531:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1532:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_VideoNoiseReduction
1533:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for noise reduction
1534:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   nr1d_on                 : Noise reduction ON/OFF setting
1535:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Noise reduction setup parameter
1536:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1537:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1538:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_VideoNoiseReduction  
1539:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_onoff_t nr1d_on, const vdc_noise_reduction_t * const param)
1540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1541:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t   * input_ctrl;
1542:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_nr_param_t             * nr_param;
1543:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1544:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     input_ctrl = &vdc_regaddr_input_ctrl;
1545:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1546:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
1547:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param != NULL)
1548:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1549:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Y/G signal noise reduction parameter */
1550:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         nr_param = &param->y;
1551:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1552:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1553:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) &= (uint32_t)~VDC_REG_MASK_0X00007F33;
1554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1555:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Maximum value of coring (absolute value) */
1556:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) |= (nr_param->nr1d_th << VDC_REG_SHIFT_8);
1557:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1558:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* TAP select */
1559:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) |= ((uint32_t)nr_param->nr1d_tap << VDC_REG_SHIFT_4);
1560:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1561:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Noise reduction gain adjustment */
1562:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) |= (uint32_t)nr_param->nr1d_gain;
1563:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1564:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cb/B signal noise reduction parameter */
1565:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         nr_param = &param->cb;
1566:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1567:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Maximum value of coring (absolute value) */
1568:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1))  = (nr_param->nr1d_th << VDC_REG_SHIFT_24);
1569:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1570:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* TAP select */
1571:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1)) |= ((uint32_t)nr_param->nr1d_tap << VDC_REG_SHIFT_20);
1572:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1573:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Noise reduction gain adjustment */
1574:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1)) |= ((uint32_t)nr_param->nr1d_gain << VDC_REG_SHIFT_16);
1575:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1576:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cr/R signal noise reduction parameter */
1577:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         nr_param = &param->cr;
1578:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1579:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Maximum value of coring (absolute value) */
1580:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1)) |= (nr_param->nr1d_th << VDC_REG_SHIFT_8);
1581:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1582:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* TAP select */
1583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1)) |= ((uint32_t)nr_param->nr1d_tap << VDC_REG_SHIFT_4);
1584:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1585:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Noise reduction gain adjustment */
1586:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt1)) |= (uint32_t)nr_param->nr1d_gain;
1587:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1588:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1589:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (nr1d_on == VDC_OFF)
1590:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1591:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1592:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) &= (uint32_t)~VDC_REG_BIT16;
1593:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1594:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1595:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1596:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1597:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->imgcnt_nr_cnt0)) |= (uint32_t)VDC_REG_BIT16;
1598:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1599:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1600:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (IMGCNT_UPDATE)
1601:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       IMGCNT_VEN */
1602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->imgcnt_update)) |= (uint32_t)VDC_REG_BIT0;
1603:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1604:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_VideoNoiseReduction() */
1605:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1606:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1607:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ImageColorMatrix
1608:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for color matrix
1609:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Color matrix setup parameter
1610:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1611:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1612:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ImageColorMatrix (const vdc_color_matrix_t * const param) 
1613:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1614:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetColorMatrix(param->mtx_mode, param->offset, param->gain, &vdc_regaddr_color_matrix[param->mo
1615:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ImageColorMatrix() */
1616:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1617:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1618:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ImageEnhancement
1619:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for image enhancement processing
1620:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   shp_h_on                : Sharpness ON/OFF setting
1621:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   sharp_param             : Sharpness setup parameter
1622:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lti_h_on                : LTI ON/OFF setting
1623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lti_param               : LTI setup parameter
1624:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   enh_area                : Enhancer-enabled area setup parameter
1625:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1626:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1627:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ImageEnhancement ( 
1628:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  shp_h_on,
1629:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_sharp_t  * const sharp_param,
1630:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  lti_h_on,
1631:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_lti_t    * const lti_param,
1632:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const enh_area)
1633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1634:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t * img_qlty_imp;
1635:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1636:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_qlty_imp = &vdc_regaddr_img_qlty_imp;
1637:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1638:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Sharpness */
1639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetImageEnhancementSharpness(shp_h_on, sharp_param, img_qlty_imp);
1640:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1641:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* LTI */
1642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetImageEnhancementLti(lti_h_on, lti_param, img_qlty_imp);
1643:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1644:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Enhance area */
1645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (enh_area != NULL)
1646:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1647:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_tim2))  = ((uint32_t)enh_area->vs << VDC_REG_SHIFT_16);
1649:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1650:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_tim2)) |= (uint32_t)enh_area->vw;
1652:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1653:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_tim3))  = ((uint32_t)enh_area->hs << VDC_REG_SHIFT_16);
1655:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1656:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_tim3)) |= (uint32_t)enh_area->hw;
1658:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1659:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1660:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (ADJx_UPDATE)
1661:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       ADJx_VEN */
1662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_qlty_imp->adj_update)) |= (uint32_t)VDC_REG_BIT0;
1663:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1664:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ImageEnhancement() */
1665:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1666:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1667:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_ImageBlackStretch
1668:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for black stretch
1669:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   bkstr_on                : Black stretch ON/OFF setting
1670:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Black stretch setup parameter
1671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1672:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1673:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_ImageBlackStretch ( 
1674:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t          bkstr_on,
1675:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_black_t  * const param)
1676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1677:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t * img_qlty_imp;
1678:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1679:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_qlty_imp = &vdc_regaddr_img_qlty_imp;
1680:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1681:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
1682:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param != NULL)
1683:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Black stretch start point */
1685:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set))  = (uint32_t)((uint32_t)param->bkstr_st << VDC_REG_SHIFT_2
1686:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1687:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Black stretch depth */
1688:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set)) |= (uint32_t)((uint32_t)param->bkstr_d << VDC_REG_SHIFT_16
1689:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1690:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Black stretch time constant (T1) */
1691:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set)) |= (uint32_t)((uint32_t)param->bkstr_t1 << VDC_REG_SHIFT_8
1692:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1693:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Black stretch time constant (T2) */
1694:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set)) |= (uint32_t)param->bkstr_t2;
1695:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1696:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1697:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (bkstr_on == VDC_OFF)
1698:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1699:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1700:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set)) &= (uint32_t)~VDC_REG_BIT24;
1701:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1703:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1704:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_bkstr_set)) |= (uint32_t)VDC_REG_BIT24;
1706:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1707:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1708:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (ADJx_UPDATE)
1709:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       ADJx_VEN */
1710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_qlty_imp->adj_update)) |= (uint32_t)VDC_REG_BIT0;
1711:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1712:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ImageBlackStretch() */
1713:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1714:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1715:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_AlphaBlending
1716:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for alpha blending
1717:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Alpha blending setup parameter
1719:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1720:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_AlphaBlending 
1722:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_graphics_type_t graphics_id, const vdc_alpha_blending_t * const param)
1723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1724:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1726:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1727:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1728:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Alpha signal of the ARGB1555/ARGB5551 format */
1729:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->alpha_1bit != NULL)
1730:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1731:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1732:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab10)) &= (uint32_t)~VDC_REG_MASK_0XFF000000;
1733:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1734:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab10)) |= (uint32_t)(param->alpha_1bit->gr_a0 << VDC_REG_SHIFT_24);
1736:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1737:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1738:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab11)) &= (uint32_t)~VDC_REG_MASK_0XFF000000;
1739:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1740:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab11)) |= (uint32_t)(param->alpha_1bit->gr_a1 << VDC_REG_SHIFT_24);
1742:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1743:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1744:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Premultiplication processing at alpha blending in one-pixel */
1745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->alpha_pixel != NULL)
1746:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1747:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->alpha_pixel->gr_acalc_md == VDC_OFF)
1748:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1749:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1750:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_BIT14;
1751:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1752:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1753:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1754:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1755:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_REG_BIT14;
1756:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1757:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1758:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1759:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1760:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN */
1761:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
1762:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1763:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_AlphaBlending() */
1764:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1765:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1766:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_AlphaBlendingRect
1767:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for rectangle alpha blending
1768:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1769:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_arc_on               : ON/OFF setting for alpha blending in a rectangular area
1770:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Setup parameter for alpha blending in a rectangular area
1771:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1772:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1773:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_AlphaBlendingRect ( 
1774:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t                  graphics_id,
1775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                          gr_arc_on,
1776:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_alpha_blending_rect_t    * const param)
1777:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1778:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_alpha_rect_t               * alpha_rect_tmp;
1780:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                                arc_coef;
1781:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1784:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Alpha blending on/off control in a rectangular area */
1785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_arc_on == VDC_OFF)
1786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_BIT12;
1789:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1790:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1792:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_REG_BIT12;
1794:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1796:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
1797:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param != NULL)
1798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1799:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Rectangular area subjected to alpha blending */
1800:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetAlphaRectArea(param->gr_arc, img_synthesizer);
1801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1802:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Alpha blending in a rectangular area */
1803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         alpha_rect_tmp = param->alpha_rect;
1804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1805:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* NULL check */
1806:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (alpha_rect_tmp != NULL)
1807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1808:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Multiplication processing with current alpha at alpha blending in a rectangular area
1809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (alpha_rect_tmp->gr_arc_mul == VDC_OFF)
1810:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1811:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
1812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_BIT15;
1813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1814:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             else
1815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1816:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
1817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_REG_BIT15;
1818:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1819:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1820:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Alpha coefficient for alpha blending in a rectangular area (-255 to 255) */
1821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (alpha_rect_tmp->gr_arc_coef < 0)
1822:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1823:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
1824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 arc_coef = (uint32_t)(alpha_rect_tmp->gr_arc_coef * (-1));  /* Conversion into abso
1825:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1826:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Subtraction of the alpha coefficient */
1827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab6)) = (uint32_t)VDC_REG_BIT24;
1828:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1829:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             else
1830:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
1832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 arc_coef = (uint32_t)alpha_rect_tmp->gr_arc_coef;
1833:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1834:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Addition of the alpha coefficient */
1835:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab6)) = (uint32_t)0x00000000u;
1836:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1837:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab6)) |= (arc_coef << VDC_REG_SHIFT_16);
1838:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1839:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Frame rate for alpha blending in a rectangular area (gr_arc_rate + 1) */
1840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab6)) |= (uint32_t)alpha_rect_tmp->gr_arc_rate;
1841:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1842:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Initial alpha value for alpha blending in a rectangular area */
1843:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab7)) &= (uint32_t)~VDC_REG_MASK_0X00FF0000;
1844:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1845:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1846:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab7)) |= (uint32_t)(alpha_rect_tmp->gr_arc_def << VDC_REG_SHIFT_
1847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1848:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1849:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1850:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1851:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN */
1852:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
1853:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1854:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_AlphaBlendingRect() */
1855:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1856:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1857:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_Chromakey
1858:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for chroma-key
1859:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1860:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_ck_on                : Chroma-key ON/OFF setting
1861:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Chroma-key setup parameter
1862:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1863:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1864:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_Chromakey ( 
1865:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t      graphics_id,
1866:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t              gr_ck_on,
1867:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_chromakey_t  * const param)
1868:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1869:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_format_t                        gr_format_tmp;
1870:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1871:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1872:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1873:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1874:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1875:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
1876:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param != NULL)
1877:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         gr_format_tmp = VDC_ShrdPrmGetGraphicsFormat(graphics_id);
1879:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_format_tmp == VDC_GR_FORMAT_CLUT1) ||
1880:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (gr_format_tmp == VDC_GR_FORMAT_CLUT4) ||
1881:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (gr_format_tmp == VDC_GR_FORMAT_CLUT8))
1882:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1883:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1884:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab8))  = (uint32_t)(param->ck_color << VDC_REG_SHIFT_24);
1885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9))  = ColorConversionIntoAgbr(param->rep_color);
1886:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1887:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1888:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1889:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Color conversion from gr_format_tmp into RGB888 format */
1890:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab8))  = ColorConversion(gr_format_tmp, param->ck_color);
1891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9))  = ColorConversion(gr_format_tmp, param->rep_color);
1892:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1893:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (graphics_id == VDC_GR_TYPE_GR0)
1894:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1895:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Alpha value is set to 255. */
1896:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1897:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1898:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1899:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1900:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
1901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9)) |= (uint32_t)(param->rep_alpha << VDC_REG_SHIFT_24);
1902:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1903:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1904:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1905:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_ck_on == VDC_OFF)
1906:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1907:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab7)) &= (uint32_t)~VDC_REG_BIT0;
1909:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1910:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
1911:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1912:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1913:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab7)) |= (uint32_t)VDC_REG_BIT0;
1914:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1915:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1916:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1917:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN */
1918:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
1919:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_Chromakey() */
1921:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1922:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1923:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_CLUT
1924:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for CLUT
1925:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
1926:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : CLUT setup parameter
1927:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1928:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1929:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_CLUT  
1930:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_graphics_type_t graphics_id, const vdc_clut_t * const param)
1931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1932:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_format_t                        gr_format_tmp;
1933:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
1934:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1935:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
1936:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1937:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_format_tmp = VDC_ShrdPrmGetGraphicsFormat(graphics_id);
1938:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_format_tmp == VDC_GR_FORMAT_CLUT1)
1939:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1940:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
1941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->color_num == ((uint32_t)1u))
1942:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1943:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab10)) = ColorConversionIntoAgbr(param->clut[0]);
1944:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (graphics_id == VDC_GR_TYPE_GR0)
1945:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1946:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Alpha value is set to 255. */
1947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab10)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1948:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1949:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1950:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
1951:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1952:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab10)) = ColorConversionIntoAgbr(param->clut[0]);
1953:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab11)) = ColorConversionIntoAgbr(param->clut[1]);
1954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (graphics_id == VDC_GR_TYPE_GR0)
1955:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
1956:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Alpha value is set to 255. */
1957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab10)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1958:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1959:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
1960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab11)) |= (uint32_t)VDC_REG_ALPHA_8BIT;
1961:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
1962:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1963:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1964:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else        /* CLUT4 or CLUT8 */
1965:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
1966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_Clut(param, vdc_regaddr_clut[graphics_id]);
1967:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1968:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* dummy read*/
1969:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
1970:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             volatile uint32_t wk = (*(vdc_regaddr_clut[graphics_id]));
1971:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
1972:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1973:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* CLUT table control register (GRx_CLUT)
1974:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b16      GRx_CLT_SEL - CLUT table select signal - XOR, flip signal */
1975:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_clut)) ^= (uint32_t)VDC_REG_BIT16;
1976:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
1977:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1978:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GRx_UPDATE)
1979:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN */
1980:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
1981:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_CLUT() */
1983:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1984:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
1985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_DisplayCalibration
1986:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for display calibration
1987:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param                   : Display calibration parameter
1988:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
1989:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
1990:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_DisplayCalibration (const vdc_disp_calibration_t * const param) 
1991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
1992:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_calibr_bright_t        * bright_tmp;
1993:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_calibr_contrast_t      * contrast_tmp;
1994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_calibr_dither_t        * panel_dither_tmp;
1995:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t  * output_ctrl;
1996:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1997:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_ctrl = &vdc_regaddr_output_ctrl;
1998:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
1999:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Correction circuit sequence control */
2000:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param->route == VDC_CALIBR_ROUTE_BCG)
2001:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2002:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2003:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_clk_phase)) &= (uint32_t)~VDC_REG_BIT12;
2004:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2005:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2006:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2007:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2008:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_clk_phase)) |= (uint32_t)VDC_REG_BIT12;
2009:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2010:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2011:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Brightness (DC) adjustment */
2012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bright_tmp = param->bright;
2013:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2014:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
2015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (bright_tmp != NULL)
2016:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2017:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_bright1))  = (uint32_t)bright_tmp->pbrt_g;
2019:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2020:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_bright2))  = (uint32_t)(bright_tmp->pbrt_b << VDC_REG_SHIFT_16);
2022:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2023:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_bright2)) |= (uint32_t)bright_tmp->pbrt_r;
2025:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2026:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2027:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Contrast (gain) adjustment */
2028:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     contrast_tmp = param->contrast;
2029:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2030:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
2031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (contrast_tmp != NULL)
2032:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2033:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2034:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_contrast))  = (uint32_t)(contrast_tmp->cont_g << VDC_REG_SHIFT_16);
2035:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2036:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_contrast)) |= (uint32_t)(contrast_tmp->cont_b << VDC_REG_SHIFT_8);
2038:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2039:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2040:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_contrast)) |= (uint32_t)contrast_tmp->cont_r;
2041:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2042:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2043:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Panel dithering */
2044:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     panel_dither_tmp = param->panel_dither;
2045:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2046:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
2047:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (panel_dither_tmp != NULL)
2048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2049:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2050:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_pdtha)) &= (uint32_t)~VDC_REG_MASK_0X00300000;
2051:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2052:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2053:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->out_pdtha)) |= (uint32_t)(panel_dither_tmp->pdth_sel << VDC_REG_SHIFT_20);
2054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (panel_dither_tmp->pdth_sel == VDC_PDTH_MD_2X2)
2055:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2056:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_pdtha)) &= (uint32_t)~VDC_REG_MASK_0X00003333;
2058:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2059:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_pdtha)) |= (uint32_t)(panel_dither_tmp->pdth_pa << VDC_REG_SHIFT_12
2061:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2062:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_pdtha)) |= (uint32_t)(panel_dither_tmp->pdth_pb << VDC_REG_SHIFT_8)
2064:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2065:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_pdtha)) |= (uint32_t)(panel_dither_tmp->pdth_pc << VDC_REG_SHIFT_4)
2067:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2068:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2069:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(output_ctrl->out_pdtha)) |= (uint32_t)panel_dither_tmp->pdth_pd;
2070:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2071:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2072:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2073:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (OUT_UPDATE)
2074:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       OUTCNT_VEN */
2075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_update)) |= (uint32_t)VDC_REG_BIT0;
2076:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2077:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_DisplayCalibration() */
2078:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2079:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2080:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          VDC_GammaCorrection
2081:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets registers for gamma correction
2082:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gam_on      : Gamma correction ON/OFF setting
2083:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param       : Gamma correction setup parameter
2084:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2085:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2086:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** void VDC_GammaCorrection  
2087:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (const vdc_onoff_t gam_on, const vdc_gamma_correction_t * const param)
2088:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2089:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_gamma_t  * gamma;
2090:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2091:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gamma = &vdc_regaddr_gamma;
2092:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2093:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Gamma correction on/off control */
2094:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(gamma->gam_sw)) = (gam_on == VDC_OFF) ? 0x0000u : 0x0001u;
2095:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2096:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
2097:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (param != NULL)
2098:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2099:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Start threshold of area 1 to 31 of G signal */
2100:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_StartThreshold_Gamma(param->gam_g_th, gamma->gam_g_area);
2101:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2102:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Gain adjustment of area 0 to 31 of G signal */
2103:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_GainAdjustment_Gamma(param->gam_g_gain, gamma->gam_g_lut);
2104:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register G (GAM_G_UPDATE)
2106:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       GAM_G_VEN */
2107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gamma->gam_g_update)) |= (uint32_t)VDC_REG_BIT0;
2108:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2109:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Start threshold of area 1 to 31 of B signal */
2110:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_StartThreshold_Gamma(param->gam_b_th, gamma->gam_b_area);
2111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2112:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Gain adjustment of area 0 to 31 of B signal */
2113:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_GainAdjustment_Gamma(param->gam_b_gain, gamma->gam_b_lut);
2114:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2115:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register B (GAM_B_UPDATE)
2116:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       GAM_B_VEN */
2117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gamma->gam_b_update)) |= (uint32_t)VDC_REG_BIT0;
2118:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2119:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Start threshold of area 1 to 31 of R signal */
2120:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_StartThreshold_Gamma(param->gam_r_th, gamma->gam_r_area);
2121:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2122:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Gain adjustment of area 0 to 31 of R signal */
2123:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         Set_GainAdjustment_Gamma(param->gam_r_gain, gamma->gam_r_lut);
2124:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2125:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register R (GAM_R_UPDATE)
2126:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       GAM_R_VEN */
2127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gamma->gam_r_update)) |= (uint32_t)VDC_REG_BIT0;
2128:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2129:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_GammaCorrection() */
2130:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2131:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /******************************************************************************
2132:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** Local Functions
2133:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2134:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2135:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetVideoExternalInput
2136:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets external input video signal
2137:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ext_sig_tmp             : External input signal parameter
2138:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   input_ctrl              : Input controller registers
2139:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2140:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2141:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetVideoExternalInput ( 
2142:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_ext_in_sig_t         * const ext_sig_tmp,
2143:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t * const input_ctrl)
2144:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
  25              		.loc 1 2144 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
2145:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2146:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_sel_cnt)) &= (uint32_t)~VDC_REG_MASK_0X00007111;
  31              		.loc 1 2146 0
  32 0000 042091E5 		ldr	r2, [r1, #4]
  33 0004 003092E5 		ldr	r3, [r2]
  34 0008 713CC3E3 		bic	r3, r3, #28928
  35 000c 1130C3E3 		bic	r3, r3, #17
  36 0010 003082E5 		str	r3, [r2]
2147:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2148:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input format select */
2149:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_format == VDC_EXTIN_FORMAT_YCBCR444)
  37              		.loc 1 2149 0
  38 0014 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
  39 0018 060052E3 		cmp	r2, #6
  40 001c 4500000A 		beq	.L13
2150:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2151:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)(VDC_EXTIN_FORMAT_RGB888 << VDC_REG_SHIFT_12);
2153:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2154:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2155:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2156:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2157:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)(ext_sig_tmp->inp_format << VDC_REG_SHIFT_12);
  41              		.loc 1 2157 0
  42 0020 04C091E5 		ldr	ip, [r1, #4]
  43 0024 00309CE5 		ldr	r3, [ip]
  44 0028 023683E1 		orr	r3, r3, r2, lsl #12
  45 002c 00308CE5 		str	r3, [ip]
  46              	.L3:
2158:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2159:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2160:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Clock edge select for capturing external input video image signals */
2161:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_pxd_edge != VDC_EDGE_RISING)
  47              		.loc 1 2161 0
  48 0030 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  49 0034 000053E3 		cmp	r3, #0
2162:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2163:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2164:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)VDC_REG_BIT8;
  50              		.loc 1 2164 0
  51 0038 04209115 		ldrne	r2, [r1, #4]
  52 003c 00309215 		ldrne	r3, [r2]
  53 0040 013C8313 		orrne	r3, r3, #256
  54 0044 00308215 		strne	r3, [r2]
  55              	.L4:
2165:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2166:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2167:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Clock edge select for capturing external input Vsync signals */
2168:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_vs_edge != VDC_EDGE_RISING)
  56              		.loc 1 2168 0
  57 0048 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  58 004c 000053E3 		cmp	r3, #0
2169:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2170:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2171:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)VDC_REG_BIT4;
  59              		.loc 1 2171 0
  60 0050 04209115 		ldrne	r2, [r1, #4]
  61 0054 00309215 		ldrne	r3, [r2]
  62 0058 10308313 		orrne	r3, r3, #16
  63 005c 00308215 		strne	r3, [r2]
  64              	.L5:
2172:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2173:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2174:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Clock edge select for capturing external input Hsync signals */
2175:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_hs_edge != VDC_EDGE_RISING)
  65              		.loc 1 2175 0
  66 0060 0330D0E5 		ldrb	r3, [r0, #3]	@ zero_extendqisi2
  67 0064 000053E3 		cmp	r3, #0
2176:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2177:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2178:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_sel_cnt)) |= (uint32_t)VDC_REG_BIT0;
  68              		.loc 1 2178 0
  69 0068 04209115 		ldrne	r2, [r1, #4]
  70 006c 00309215 		ldrne	r3, [r2]
  71 0070 01308313 		orrne	r3, r3, #1
  72 0074 00308215 		strne	r3, [r2]
  73              	.L6:
2179:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2180:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2181:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2182:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_ext_sync_cnt)) &= (uint32_t)~VDC_REG_MASK_0X11110113;
  74              		.loc 1 2182 0
  75 0078 082091E5 		ldr	r2, [r1, #8]
  76 007c 00C092E5 		ldr	ip, [r2]
  77 0080 EC3E0FE3 		movw	r3, #65260
  78 0084 EE3E4EE3 		movt	r3, 61166
  79 0088 0C3003E0 		and	r3, r3, ip
  80 008c 003082E5 		str	r3, [r2]
2183:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     
2184:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input bit endian change on/off control */
2185:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_endian_on != VDC_OFF)
  81              		.loc 1 2185 0
  82 0090 0430D0E5 		ldrb	r3, [r0, #4]	@ zero_extendqisi2
  83 0094 000053E3 		cmp	r3, #0
2186:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2187:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2188:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT28;
  84              		.loc 1 2188 0
  85 0098 08209115 		ldrne	r2, [r1, #8]
  86 009c 00309215 		ldrne	r3, [r2]
  87 00a0 01328313 		orrne	r3, r3, #268435456
  88 00a4 00308215 		strne	r3, [r2]
  89              	.L7:
2189:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2190:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2191:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input B/R signal swap on/off control */
2192:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_swap_on != VDC_OFF)
  90              		.loc 1 2192 0
  91 00a8 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
  92 00ac 000053E3 		cmp	r3, #0
2193:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2194:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2195:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT24;
  93              		.loc 1 2195 0
  94 00b0 08209115 		ldrne	r2, [r1, #8]
  95 00b4 00309215 		ldrne	r3, [r2]
  96 00b8 01348313 		orrne	r3, r3, #16777216
  97 00bc 00308215 		strne	r3, [r2]
  98              	.L8:
2196:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2197:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2198:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input Vsync signal DV_VSYNC inversion control */
2199:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_vs_inv != VDC_SIG_POL_NOT_INVERTED)
  99              		.loc 1 2199 0
 100 00c0 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 101 00c4 000053E3 		cmp	r3, #0
2200:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2201:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2202:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT20;
 102              		.loc 1 2202 0
 103 00c8 08209115 		ldrne	r2, [r1, #8]
 104 00cc 00309215 		ldrne	r3, [r2]
 105 00d0 01368313 		orrne	r3, r3, #1048576
 106 00d4 00308215 		strne	r3, [r2]
 107              	.L9:
2203:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2204:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* External input Hsync signal DV_HSYNC inversion control */
2206:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_hs_inv != VDC_SIG_POL_NOT_INVERTED)
 108              		.loc 1 2206 0
 109 00d8 0730D0E5 		ldrb	r3, [r0, #7]	@ zero_extendqisi2
 110 00dc 000053E3 		cmp	r3, #0
2207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2208:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2209:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT16;
 111              		.loc 1 2209 0
 112 00e0 08209115 		ldrne	r2, [r1, #8]
 113 00e4 00309215 		ldrne	r3, [r2]
 114 00e8 01388313 		orrne	r3, r3, #65536
 115 00ec 00308215 		strne	r3, [r2]
 116              	.L10:
2210:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2211:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2212:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Reference select for external input BT.656 Hsync signal */
2213:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_h_edge_sel != VDC_EXTIN_REF_H_EAV)
 117              		.loc 1 2213 0
 118 00f0 0830D0E5 		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 119 00f4 000053E3 		cmp	r3, #0
2214:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2216:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT8;
 120              		.loc 1 2216 0
 121 00f8 08209115 		ldrne	r2, [r1, #8]
 122 00fc 00309215 		ldrne	r3, [r2]
 123 0100 013C8313 		orrne	r3, r3, #256
 124 0104 00308215 		strne	r3, [r2]
 125              	.L11:
2217:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2218:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2219:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Number of lines for BT.656 external input */
2220:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ext_sig_tmp->inp_f525_625 != VDC_EXTIN_LINE_525)
 126              		.loc 1 2220 0
 127 0108 0930D0E5 		ldrb	r3, [r0, #9]	@ zero_extendqisi2
 128 010c 000053E3 		cmp	r3, #0
2221:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2222:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2223:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)VDC_REG_BIT4;
 129              		.loc 1 2223 0
 130 0110 08209115 		ldrne	r2, [r1, #8]
 131 0114 00309215 		ldrne	r3, [r2]
 132 0118 10308313 		orrne	r3, r3, #16
 133 011c 00308215 		strne	r3, [r2]
 134              	.L12:
2224:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2225:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Y/Cb/Y/Cr data string start timing to Hsync reference */
2227:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(input_ctrl->inp_ext_sync_cnt)) |= (uint32_t)ext_sig_tmp->inp_h_pos;
 135              		.loc 1 2227 0
 136 0120 082091E5 		ldr	r2, [r1, #8]
 137 0124 003092E5 		ldr	r3, [r2]
 138 0128 0A10D0E5 		ldrb	r1, [r0, #10]	@ zero_extendqisi2
 139              	.LVL1:
 140 012c 013083E1 		orr	r3, r3, r1
 141 0130 003082E5 		str	r3, [r2]
 142 0134 1EFF2FE1 		bx	lr
 143              	.LVL2:
 144              	.L13:
2152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 145              		.loc 1 2152 0
 146 0138 043091E5 		ldr	r3, [r1, #4]
 147 013c 002093E5 		ldr	r2, [r3]
 148 0140 002083E5 		str	r2, [r3]
 149 0144 B9FFFFEA 		b	.L3
 150              		.cfi_endproc
 151              	.LFE21:
 153              		.section	.text.SetInitialConnection,"ax",%progbits
 154              		.align	2
 155              		.syntax unified
 156              		.arm
 157              		.fpu neon
 159              	SetInitialConnection:
 160              	.LFB22:
2228:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetVideoExternalInput() */
2229:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2231:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetInitialConnection
2232:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Initializes cascaded connection
2233:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   void
2234:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2235:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2236:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetInitialConnection (void) 
2237:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 161              		.loc 1 2237 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166              	.LVL3:
2238:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * vin_gr_update;
2239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * vin_gr_ab1;
2240:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2241:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2242:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vin_gr_update   = (volatile uint32_t *) &VDC6.GR_VIN_UPDATE;
2243:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2244:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vin_gr_ab1      = (volatile uint32_t *) &VDC6.GR_VIN_AB1;
2246:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2247:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Selection of lower-layer plane in scaler: Selects graphics 0 as lower-layer graphics. */
2248:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(vin_gr_ab1))  &= (uint32_t)~VDC_REG_BIT2;
 167              		.loc 1 2248 0
 168 0000 FF3F07E3 		movw	r3, #32767
 169 0004 FF3C4FE3 		movt	r3, 64767
 170 0008 DF2113E5 		ldr	r2, [r3, #-479]
 171 000c 0420C2E3 		bic	r2, r2, #4
 172 0010 DF2103E5 		str	r2, [r3, #-479]
2249:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2250:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics display mode in VIN */
2251:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(vin_gr_ab1))  &= (uint32_t)~VDC_REG_MASK_0X00000003;
 173              		.loc 1 2251 0
 174 0014 DF2113E5 		ldr	r2, [r3, #-479]
 175 0018 0320C2E3 		bic	r2, r2, #3
 176 001c DF2103E5 		str	r2, [r3, #-479]
2252:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2253:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(vin_gr_ab1))  |= (uint32_t)VDC_DISPSEL_LOWER;
 177              		.loc 1 2254 0
 178 0020 DF2113E5 		ldr	r2, [r3, #-479]
 179 0024 012082E3 		orr	r2, r2, #1
 180 0028 DF2103E5 		str	r2, [r3, #-479]
2255:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2256:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GR_VIN_UPDATE)
2257:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b8       GR_VIN_UPDATE
2258:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GR_VIN_P_VEN */
2259:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(vin_gr_update)) |= (uint32_t)(VDC_REG_BIT8|VDC_REG_BIT4);
 181              		.loc 1 2259 0
 182 002c FF2113E5 		ldr	r2, [r3, #-511]
 183 0030 112E82E3 		orr	r2, r2, #272
 184 0034 FF2103E5 		str	r2, [r3, #-511]
 185 0038 1EFF2FE1 		bx	lr
 186              		.cfi_endproc
 187              	.LFE22:
 189              		.section	.text.SetLcdTcon_STVA_VS,"ax",%progbits
 190              		.align	2
 191              		.syntax unified
 192              		.arm
 193              		.fpu neon
 195              	SetLcdTcon_STVA_VS:
 196              	.LFB25:
2260:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2261:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetInitialConnection() */
2262:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2264:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetGrapicsBackgroundColor
2265:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets background color for graphics
2266:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   void
2267:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2268:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2269:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetGrapicsBackgroundColor (void) 
2270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2271:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                bg_color_tmp;
2272:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                bg_color_conv;
2273:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t     * bg_color_reg;
2274:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t     * update_reg;
2275:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2276:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in 24-bit RGB color format or CrYCb format */
2277:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_tmp = VDC_ShrdPrmGetBgColor(VDC_COLOR_SPACE_GBR);
2278:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2279:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Conversion from RGB into GBR / from CrYCb into YCbCr */
2280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_conv   = ColorConversionIntoAgbr(bg_color_tmp);
2281:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2282:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_conv  &= (uint32_t)VDC_REG_RGB_24BIT_MASK;
2284:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2285:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* GR2, GR3 */
2286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in GBR format (GR2_BASE) */
2287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_reg    = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR2].gr_base;
2288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*bg_color_reg)   = bg_color_conv;
2289:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2290:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GR2_UPDATE)
2291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GR2_P_VEN */
2292:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     update_reg      = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR2].gr_update;
2293:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2294:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2295:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*update_reg)    |= (uint32_t)VDC_REG_BIT4;
2296:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2297:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in GBR format (GR3_BASE) */
2298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_reg    = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR3].gr_base;
2299:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*bg_color_reg)   = bg_color_conv;
2300:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2301:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register (GR3_UPDATE)
2302:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GR3_P_VEN */
2303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     update_reg      = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR3].gr_update;
2304:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2305:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*update_reg)    |= (uint32_t)VDC_REG_BIT4;
2307:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetGrapicsBackgroundColor() */
2308:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2310:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetScalerBackgroundColor
2311:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets background color for scaler 0 (graphics 0)
2312:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *
2313:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              Description:<br>
2314:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              This function should be called only when graphics 0 is selected.
2315:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_space         : Color space (GBR or YCbCr)
2316:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2317:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2318:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalerBackgroundColor (const vdc_color_space_t color_space) 
2319:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2320:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * scl0_update_reg;
2321:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * scl0_ovr1_reg;
2322:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * gr_base_reg;
2323:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * gr_update_reg;
2324:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            bg_color_tmp;
2325:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            bg_color_conv;
2326:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scl0_ovr1_reg   = vdc_regaddr_scaler.scl0_ovr1;
2328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scl0_update_reg = vdc_regaddr_scaler.scl0_update;
2329:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_base_reg     = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_base;
2330:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_update;
2331:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2332:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in 24-bit RGB color format or CrYCb format */
2333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_tmp    = VDC_ShrdPrmGetBgColor(color_space);
2334:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2335:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Conversion from RGB into GBR / from CrYCb into YCbCr */
2336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_conv   = ColorConversionIntoAgbr(bg_color_tmp);
2337:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2338:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2339:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     bg_color_conv  &= (uint32_t)VDC_REG_RGB_24BIT_MASK;
2340:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2341:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in RGB format or CrYCb format */
2342:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*scl0_ovr1_reg)      = bg_color_tmp;
2343:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2344:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register
2345:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       SCL0_VEN_B */
2346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*scl0_update_reg)   |= (uint32_t)VDC_REG_BIT4;
2347:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2348:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Background color in GBR format or YCbCr format */
2349:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*gr_base_reg)        = bg_color_conv;
2350:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2351:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Graphics register update control register
2352:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b4       GRx_P_VEN */
2353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*gr_update_reg)     |= (uint32_t)VDC_REG_BIT4;
2354:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetScalerBackgroundColor() */
2355:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2356:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2357:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_STVA_VS
2358:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - STVA/VS
2359:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2360:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2361:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2362:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2363:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STVA_VS ( 
2364:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2365:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2366:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 197              		.loc 1 2366 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202              	.LVL4:
2367:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2368:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stva1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 203              		.loc 1 2368 0
 204 0000 082091E5 		ldr	r2, [r1, #8]
 205 0004 B030D0E1 		ldrh	r3, [r0]
 206 0008 0338A0E1 		lsl	r3, r3, #16
 207 000c 003082E5 		str	r3, [r2]
2369:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2370:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2371:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stva1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 208              		.loc 1 2371 0
 209 0010 082091E5 		ldr	r2, [r1, #8]
 210 0014 003092E5 		ldr	r3, [r2]
 211 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 212 001c 0C3083E1 		orr	r3, r3, ip
 213 0020 003082E5 		str	r3, [r2]
2372:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2373:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2374:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv == VDC_SIG_POL_NOT_INVERTED)
 214              		.loc 1 2374 0
 215 0024 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 216 0028 000053E3 		cmp	r3, #0
 217 002c 0400000A 		beq	.L18
2375:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2376:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2377:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stva2)) &= (uint32_t)~VDC_REG_BIT4;
2378:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2379:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2380:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2381:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2382:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stva2)) |= (uint32_t)VDC_REG_BIT4;
 218              		.loc 1 2382 0
 219 0030 0C2091E5 		ldr	r2, [r1, #12]
 220 0034 003092E5 		ldr	r3, [r2]
 221 0038 103083E3 		orr	r3, r3, #16
 222 003c 003082E5 		str	r3, [r2]
 223 0040 1EFF2FE1 		bx	lr
 224              	.L18:
2377:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 225              		.loc 1 2377 0
 226 0044 0C2091E5 		ldr	r2, [r1, #12]
 227 0048 003092E5 		ldr	r3, [r2]
 228 004c 1030C3E3 		bic	r3, r3, #16
 229 0050 003082E5 		str	r3, [r2]
 230 0054 1EFF2FE1 		bx	lr
 231              		.cfi_endproc
 232              	.LFE25:
 234              		.section	.text.SetLcdTcon_STVB_VE,"ax",%progbits
 235              		.align	2
 236              		.syntax unified
 237              		.arm
 238              		.fpu neon
 240              	SetLcdTcon_STVB_VE:
 241              	.LFB26:
2383:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2384:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_STVA_VS() */
2385:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2386:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2387:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_STVB_VE
2388:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - STVB/VE
2389:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2390:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2391:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2392:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2393:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STVB_VE ( 
2394:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2395:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2396:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 242              		.loc 1 2396 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247              	.LVL5:
2397:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2398:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stvb1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 248              		.loc 1 2398 0
 249 0000 102091E5 		ldr	r2, [r1, #16]
 250 0004 B030D0E1 		ldrh	r3, [r0]
 251 0008 0338A0E1 		lsl	r3, r3, #16
 252 000c 003082E5 		str	r3, [r2]
2399:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2400:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2401:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stvb1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 253              		.loc 1 2401 0
 254 0010 102091E5 		ldr	r2, [r1, #16]
 255 0014 003092E5 		ldr	r3, [r2]
 256 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 257 001c 0C3083E1 		orr	r3, r3, ip
 258 0020 003082E5 		str	r3, [r2]
2402:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2403:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2404:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv == VDC_SIG_POL_NOT_INVERTED)
 259              		.loc 1 2404 0
 260 0024 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 261 0028 000053E3 		cmp	r3, #0
 262 002c 0400000A 		beq	.L22
2405:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2406:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2407:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stvb2)) &= (uint32_t)~VDC_REG_BIT4;
2408:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2409:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2410:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2411:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2412:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stvb2)) |= (uint32_t)VDC_REG_BIT4;
 263              		.loc 1 2412 0
 264 0030 142091E5 		ldr	r2, [r1, #20]
 265 0034 003092E5 		ldr	r3, [r2]
 266 0038 103083E3 		orr	r3, r3, #16
 267 003c 003082E5 		str	r3, [r2]
 268 0040 1EFF2FE1 		bx	lr
 269              	.L22:
2407:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 270              		.loc 1 2407 0
 271 0044 142091E5 		ldr	r2, [r1, #20]
 272 0048 003092E5 		ldr	r3, [r2]
 273 004c 1030C3E3 		bic	r3, r3, #16
 274 0050 003082E5 		str	r3, [r2]
 275 0054 1EFF2FE1 		bx	lr
 276              		.cfi_endproc
 277              	.LFE26:
 279              		.section	.text.SetLcdTcon_STH_HS,"ax",%progbits
 280              		.align	2
 281              		.syntax unified
 282              		.arm
 283              		.fpu neon
 285              	SetLcdTcon_STH_HS:
 286              	.LFB27:
2413:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2414:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_STVB_VE() */
2415:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2416:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2417:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_STH_HS
2418:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - STH/HS
2419:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2420:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2421:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2422:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2423:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STH_HS ( 
2424:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 287              		.loc 1 2426 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL6:
2427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_sth1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 293              		.loc 1 2428 0
 294 0000 182091E5 		ldr	r2, [r1, #24]
 295 0004 B030D0E1 		ldrh	r3, [r0]
 296 0008 0338A0E1 		lsl	r3, r3, #16
 297 000c 003082E5 		str	r3, [r2]
2429:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2430:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2431:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_sth1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 298              		.loc 1 2431 0
 299 0010 182091E5 		ldr	r2, [r1, #24]
 300 0014 003092E5 		ldr	r3, [r2]
 301 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 302 001c 0C3083E1 		orr	r3, r3, ip
 303 0020 003082E5 		str	r3, [r2]
2432:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2434:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_sth2)) &= (uint32_t)~VDC_REG_MASK_0X00000110;
 304              		.loc 1 2434 0
 305 0024 1C2091E5 		ldr	r2, [r1, #28]
 306 0028 003092E5 		ldr	r3, [r2]
 307 002c 113EC3E3 		bic	r3, r3, #272
 308 0030 003082E5 		str	r3, [r2]
2435:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2436:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal operating reference select */
2437:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_hs_sel != VDC_LCD_TCON_REFSEL_HSYNC)
 309              		.loc 1 2437 0
 310 0034 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 311 0038 000053E3 		cmp	r3, #0
2438:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2439:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2440:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_sth2)) |= (uint32_t)VDC_REG_BIT8;
 312              		.loc 1 2440 0
 313 003c 1C209115 		ldrne	r2, [r1, #28]
 314 0040 00309215 		ldrne	r3, [r2]
 315 0044 013C8313 		orrne	r3, r3, #256
 316 0048 00308215 		strne	r3, [r2]
 317              	.L24:
2441:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2443:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2444:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv != VDC_SIG_POL_NOT_INVERTED)
 318              		.loc 1 2444 0
 319 004c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 320 0050 000053E3 		cmp	r3, #0
2445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2446:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2447:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_sth2)) |= (uint32_t)VDC_REG_BIT4;
 321              		.loc 1 2447 0
 322 0054 1C209115 		ldrne	r2, [r1, #28]
 323 0058 00309215 		ldrne	r3, [r2]
 324 005c 10308313 		orrne	r3, r3, #16
 325 0060 00308215 		strne	r3, [r2]
 326 0064 1EFF2FE1 		bx	lr
 327              		.cfi_endproc
 328              	.LFE27:
 330              		.section	.text.SetLcdTcon_STB_HE,"ax",%progbits
 331              		.align	2
 332              		.syntax unified
 333              		.arm
 334              		.fpu neon
 336              	SetLcdTcon_STB_HE:
 337              	.LFB28:
2448:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2449:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_STH_HS() */
2450:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2451:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2452:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_STB_HE
2453:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - STB/HE
2454:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2455:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2456:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2457:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2458:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_STB_HE ( 
2459:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2460:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2461:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 338              		.loc 1 2461 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		@ link register save eliminated.
 343              	.LVL7:
2462:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2463:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stb1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 344              		.loc 1 2463 0
 345 0000 202091E5 		ldr	r2, [r1, #32]
 346 0004 B030D0E1 		ldrh	r3, [r0]
 347 0008 0338A0E1 		lsl	r3, r3, #16
 348 000c 003082E5 		str	r3, [r2]
2464:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2465:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2466:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stb1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 349              		.loc 1 2466 0
 350 0010 202091E5 		ldr	r2, [r1, #32]
 351 0014 003092E5 		ldr	r3, [r2]
 352 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 353 001c 0C3083E1 		orr	r3, r3, ip
 354 0020 003082E5 		str	r3, [r2]
2467:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2468:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2469:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_stb2)) &= (uint32_t)~VDC_REG_MASK_0X00000110;
 355              		.loc 1 2469 0
 356 0024 242091E5 		ldr	r2, [r1, #36]
 357 0028 003092E5 		ldr	r3, [r2]
 358 002c 113EC3E3 		bic	r3, r3, #272
 359 0030 003082E5 		str	r3, [r2]
2470:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2471:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal operating reference select */
2472:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_hs_sel != VDC_LCD_TCON_REFSEL_HSYNC)
 360              		.loc 1 2472 0
 361 0034 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 362 0038 000053E3 		cmp	r3, #0
2473:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2475:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stb2)) |= (uint32_t)VDC_REG_BIT8;
 363              		.loc 1 2475 0
 364 003c 24209115 		ldrne	r2, [r1, #36]
 365 0040 00309215 		ldrne	r3, [r2]
 366 0044 013C8313 		orrne	r3, r3, #256
 367 0048 00308215 		strne	r3, [r2]
 368              	.L27:
2476:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2477:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2478:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2479:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv != VDC_SIG_POL_NOT_INVERTED)
 369              		.loc 1 2479 0
 370 004c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 371 0050 000053E3 		cmp	r3, #0
2480:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2481:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2482:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_stb2)) |= (uint32_t)VDC_REG_BIT4;
 372              		.loc 1 2482 0
 373 0054 24209115 		ldrne	r2, [r1, #36]
 374 0058 00309215 		ldrne	r3, [r2]
 375 005c 10308313 		orrne	r3, r3, #16
 376 0060 00308215 		strne	r3, [r2]
 377 0064 1EFF2FE1 		bx	lr
 378              		.cfi_endproc
 379              	.LFE28:
 381              		.section	.text.SetLcdTcon_CPV_GCK,"ax",%progbits
 382              		.align	2
 383              		.syntax unified
 384              		.arm
 385              		.fpu neon
 387              	SetLcdTcon_CPV_GCK:
 388              	.LFB29:
2483:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2484:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_STB_HE() */
2485:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2486:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_CPV_GCK
2488:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - CPV/GCK
2489:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2491:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2492:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_CPV_GCK ( 
2494:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2495:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2496:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 389              		.loc 1 2496 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394              	.LVL8:
2497:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2498:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_cpv1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 395              		.loc 1 2498 0
 396 0000 282091E5 		ldr	r2, [r1, #40]
 397 0004 B030D0E1 		ldrh	r3, [r0]
 398 0008 0338A0E1 		lsl	r3, r3, #16
 399 000c 003082E5 		str	r3, [r2]
2499:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2500:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2501:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_cpv1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 400              		.loc 1 2501 0
 401 0010 282091E5 		ldr	r2, [r1, #40]
 402 0014 003092E5 		ldr	r3, [r2]
 403 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 404 001c 0C3083E1 		orr	r3, r3, ip
 405 0020 003082E5 		str	r3, [r2]
2502:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2503:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2504:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_cpv2)) &= (uint32_t)~VDC_REG_MASK_0X00000110;
 406              		.loc 1 2504 0
 407 0024 2C2091E5 		ldr	r2, [r1, #44]
 408 0028 003092E5 		ldr	r3, [r2]
 409 002c 113EC3E3 		bic	r3, r3, #272
 410 0030 003082E5 		str	r3, [r2]
2505:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2506:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal operating reference select */
2507:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_hs_sel != VDC_LCD_TCON_REFSEL_HSYNC)
 411              		.loc 1 2507 0
 412 0034 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 413 0038 000053E3 		cmp	r3, #0
2508:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2509:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2510:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_cpv2)) |= (uint32_t)VDC_REG_BIT8;
 414              		.loc 1 2510 0
 415 003c 2C209115 		ldrne	r2, [r1, #44]
 416 0040 00309215 		ldrne	r3, [r2]
 417 0044 013C8313 		orrne	r3, r3, #256
 418 0048 00308215 		strne	r3, [r2]
 419              	.L30:
2511:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2512:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2514:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv != VDC_SIG_POL_NOT_INVERTED)
 420              		.loc 1 2514 0
 421 004c 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 422 0050 000053E3 		cmp	r3, #0
2515:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2516:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2517:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_cpv2)) |= (uint32_t)VDC_REG_BIT4;
 423              		.loc 1 2517 0
 424 0054 2C209115 		ldrne	r2, [r1, #44]
 425 0058 00309215 		ldrne	r3, [r2]
 426 005c 10308313 		orrne	r3, r3, #16
 427 0060 00308215 		strne	r3, [r2]
 428 0064 1EFF2FE1 		bx	lr
 429              		.cfi_endproc
 430              	.LFE29:
 432              		.section	.text.SetLcdTcon_POLA,"ax",%progbits
 433              		.align	2
 434              		.syntax unified
 435              		.arm
 436              		.fpu neon
 438              	SetLcdTcon_POLA:
 439              	.LFB30:
2518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2519:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_CPV_GCK() */
2520:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2521:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2522:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_POLA
2523:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - POLA
2524:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2525:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2526:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2527:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2528:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_POLA ( 
2529:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2530:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2531:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 440              		.loc 1 2531 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445              	.LVL9:
2532:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2533:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_pola1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 446              		.loc 1 2533 0
 447 0000 302091E5 		ldr	r2, [r1, #48]
 448 0004 B030D0E1 		ldrh	r3, [r0]
 449 0008 0338A0E1 		lsl	r3, r3, #16
 450 000c 003082E5 		str	r3, [r2]
2534:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2535:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2536:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_pola1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 451              		.loc 1 2536 0
 452 0010 302091E5 		ldr	r2, [r1, #48]
 453 0014 003092E5 		ldr	r3, [r2]
 454 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 455 001c 0C3083E1 		orr	r3, r3, ip
 456 0020 003082E5 		str	r3, [r2]
2537:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2538:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2539:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_pola2)) &= (uint32_t)~VDC_REG_MASK_0X00003110;
 457              		.loc 1 2539 0
 458 0024 342091E5 		ldr	r2, [r1, #52]
 459 0028 003092E5 		ldr	r3, [r2]
 460 002c 313CC3E3 		bic	r3, r3, #12544
 461 0030 1030C3E3 		bic	r3, r3, #16
 462 0034 003082E5 		str	r3, [r2]
2540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2541:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* POLA/POLB signal generation mode select */
2542:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_pola2)) |= (uint32_t)(lcd_tcon->tcon_md << VDC_REG_SHIFT_12);
 463              		.loc 1 2542 0
 464 0038 342091E5 		ldr	r2, [r1, #52]
 465 003c 003092E5 		ldr	r3, [r2]
 466 0040 04C0D0E5 		ldrb	ip, [r0, #4]	@ zero_extendqisi2
 467 0044 0C3683E1 		orr	r3, r3, ip, lsl #12
 468 0048 003082E5 		str	r3, [r2]
2543:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2544:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal operating reference select */
2545:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_hs_sel != VDC_LCD_TCON_REFSEL_HSYNC)
 469              		.loc 1 2545 0
 470 004c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 471 0050 000053E3 		cmp	r3, #0
2546:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2547:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2548:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_pola2)) |= (uint32_t)VDC_REG_BIT8;
 472              		.loc 1 2548 0
 473 0054 34209115 		ldrne	r2, [r1, #52]
 474 0058 00309215 		ldrne	r3, [r2]
 475 005c 013C8313 		orrne	r3, r3, #256
 476 0060 00308215 		strne	r3, [r2]
 477              	.L33:
2549:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2550:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2551:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2552:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv != VDC_SIG_POL_NOT_INVERTED)
 478              		.loc 1 2552 0
 479 0064 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 480 0068 000053E3 		cmp	r3, #0
2553:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2555:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_pola2)) |= (uint32_t)VDC_REG_BIT4;
 481              		.loc 1 2555 0
 482 006c 34209115 		ldrne	r2, [r1, #52]
 483 0070 00309215 		ldrne	r3, [r2]
 484 0074 10308313 		orrne	r3, r3, #16
 485 0078 00308215 		strne	r3, [r2]
 486 007c 1EFF2FE1 		bx	lr
 487              		.cfi_endproc
 488              	.LFE30:
 490              		.section	.text.SetLcdTcon_POLB,"ax",%progbits
 491              		.align	2
 492              		.syntax unified
 493              		.arm
 494              		.fpu neon
 496              	SetLcdTcon_POLB:
 497              	.LFB31:
2556:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2557:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_POLA() */
2558:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2559:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2560:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_POLB
2561:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - POLB
2562:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2563:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2564:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2565:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2566:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_POLB ( 
2567:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2568:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2569:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 498              		.loc 1 2569 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503              	.LVL10:
2570:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal pulse start position */
2571:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_polb1))  = (uint32_t)(lcd_tcon->tcon_hsvs << VDC_REG_SHIFT_16);
 504              		.loc 1 2571 0
 505 0000 382091E5 		ldr	r2, [r1, #56]
 506 0004 B030D0E1 		ldrh	r3, [r0]
 507 0008 0338A0E1 		lsl	r3, r3, #16
 508 000c 003082E5 		str	r3, [r2]
2572:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2573:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Pulse width */
2574:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_polb1)) |= (uint32_t)lcd_tcon->tcon_hwvw;
 509              		.loc 1 2574 0
 510 0010 382091E5 		ldr	r2, [r1, #56]
 511 0014 003092E5 		ldr	r3, [r2]
 512 0018 B2C0D0E1 		ldrh	ip, [r0, #2]
 513 001c 0C3083E1 		orr	r3, r3, ip
 514 0020 003082E5 		str	r3, [r2]
2575:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2576:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2577:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_polb2)) &= (uint32_t)~VDC_REG_MASK_0X00003110;
 515              		.loc 1 2577 0
 516 0024 3C2091E5 		ldr	r2, [r1, #60]
 517 0028 003092E5 		ldr	r3, [r2]
 518 002c 313CC3E3 		bic	r3, r3, #12544
 519 0030 1030C3E3 		bic	r3, r3, #16
 520 0034 003082E5 		str	r3, [r2]
2578:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2579:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* POLA/POLB signal generation mode select */
2580:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_polb2)) |= (uint32_t)(lcd_tcon->tcon_md << VDC_REG_SHIFT_12);
 521              		.loc 1 2580 0
 522 0038 3C2091E5 		ldr	r2, [r1, #60]
 523 003c 003092E5 		ldr	r3, [r2]
 524 0040 04C0D0E5 		ldrb	ip, [r0, #4]	@ zero_extendqisi2
 525 0044 0C3683E1 		orr	r3, r3, ip, lsl #12
 526 0048 003082E5 		str	r3, [r2]
2581:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2582:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Signal operating reference select */
2583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_hs_sel != VDC_LCD_TCON_REFSEL_HSYNC)
 527              		.loc 1 2583 0
 528 004c 0530D0E5 		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 529 0050 000053E3 		cmp	r3, #0
2584:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2585:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2586:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_polb2)) |= (uint32_t)VDC_REG_BIT8;
 530              		.loc 1 2586 0
 531 0054 3C209115 		ldrne	r2, [r1, #60]
 532 0058 00309215 		ldrne	r3, [r2]
 533 005c 013C8313 		orrne	r3, r3, #256
 534 0060 00308215 		strne	r3, [r2]
 535              	.L36:
2587:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2588:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2589:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2590:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lcd_tcon->tcon_inv != VDC_SIG_POL_NOT_INVERTED)
 536              		.loc 1 2590 0
 537 0064 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 538 0068 000053E3 		cmp	r3, #0
2591:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2592:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2593:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(output_ctrl->tcon_tim_polb2)) |= (uint32_t)VDC_REG_BIT4;
 539              		.loc 1 2593 0
 540 006c 3C209115 		ldrne	r2, [r1, #60]
 541 0070 00309215 		ldrne	r3, [r2]
 542 0074 10308313 		orrne	r3, r3, #16
 543 0078 00308215 		strne	r3, [r2]
 544 007c 1EFF2FE1 		bx	lr
 545              		.cfi_endproc
 546              	.LFE31:
 548              		.section	.text.SetLcdTcon_DE,"ax",%progbits
 549              		.align	2
 550              		.syntax unified
 551              		.arm
 552              		.fpu neon
 554              	SetLcdTcon_DE:
 555              	.LFB32:
2594:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2595:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_POLB() */
2596:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2597:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2598:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetLcdTcon_DE
2599:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LCD TCON - DE
2600:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lcd_tcon                : LCD TCON timing signal parameter
2601:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   output_ctrl             : Output controller registers
2602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2603:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2604:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetLcdTcon_DE ( 
2605:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lcd_tcon_timing_t        * const lcd_tcon,
2606:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t    * const output_ctrl)
2607:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 556              		.loc 1 2607 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              		@ link register save eliminated.
 561              	.LVL11:
2608:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Polarity inversion control of signal */
2609:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->tcon_tim_de)) = (lcd_tcon->tcon_inv == VDC_SIG_POL_NOT_INVERTED) ? (uint32_t)0u
 562              		.loc 1 2609 0
 563 0000 402091E5 		ldr	r2, [r1, #64]
 564 0004 0630D0E5 		ldrb	r3, [r0, #6]	@ zero_extendqisi2
 565 0008 003093E2 		adds	r3, r3, #0
 566 000c 0130A013 		movne	r3, #1
 567 0010 003082E5 		str	r3, [r2]
 568 0014 1EFF2FE1 		bx	lr
 569              		.cfi_endproc
 570              	.LFE32:
 572              		.section	.text.CalcScalingRatio,"ax",%progbits
 573              		.align	2
 574              		.syntax unified
 575              		.arm
 576              		.fpu neon
 578              	CalcScalingRatio:
 579              	.LFB35:
2610:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2611:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetLcdTcon_DE() */
2612:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2613:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2614:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetScalingDown
2615:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets scaling-down
2616:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   scldw_rot               : Scaling-down and rotation parameter
2617:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   res_inter               : Field operating mode select
2618:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   scaler                  : Scaler registers
2619:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2620:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2621:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalingDown ( 
2622:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_scalingdown_rot_t    * const scldw_rot,
2623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_res_inter_t                  res_inter,
2624:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t     * const scaler)
2625:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2626:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    vw_before_scld;    /* Vertical width before scaling-down */
2627:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    hw_before_scld;    /* Horizontal width before scaling-down */
2628:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    vw_after_scld;     /* Vertical width after scaling-down */
2629:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    hw_after_scld;     /* Horizontal width after scaling-down */
2630:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    scaling_ratio;
2631:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2632:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vw_before_scld = (uint32_t)scldw_rot->res.vw;
2634:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2635:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2636:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     hw_before_scld = (uint32_t)scldw_rot->res.hw;
2637:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2638:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vw_after_scld = (uint32_t)scldw_rot->res_out_vw;
2640:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2641:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     hw_after_scld = (uint32_t)scldw_rot->res_out_hw;
2643:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2644:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Vertical scaling-down: ON, vertical scaling-up: OFF */
2645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds1)) |= (uint32_t)VDC_REG_BIT4;
2646:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2647:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_us1)) &= (uint32_t)~VDC_REG_BIT4;
2649:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (vw_before_scld > vw_after_scld)
2650:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = CalcScalingRatio(vw_before_scld, vw_after_scld, scldw_rot->adj_sel, VDC_OFF
2652:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2653:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds6)) = scaling_ratio;
2654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2655:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2656:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2658:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds6)) = (uint32_t)SCALING_RATIO_SAME_SIZE;
2659:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2660:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2661:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Horizontal scaling-down */
2662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (hw_before_scld > hw_after_scld)
2663:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2664:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* ON */
2665:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds1)) |= (uint32_t)VDC_REG_BIT0;
2666:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2667:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = CalcScalingRatio(hw_before_scld, hw_after_scld, VDC_ON, VDC_ON);
2668:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2669:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2670:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) &= (uint32_t)~VDC_REG_MASK_0X0000FFFF;
2671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) |= scaling_ratio;
2672:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2673:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2674:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2675:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* OFF */
2676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds1)) &= (uint32_t)~VDC_REG_BIT0;
2677:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2678:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2679:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Initial scaling phase */
2680:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2681:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2682:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2683:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (res_inter != VDC_RES_INTER_PROGRESSIVE)
2685:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2686:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Top */
2687:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds5)) |= (INITIAL_SCALING_PHASE << VDC_REG_SHIFT_16);
2688:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2689:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2690:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetScalingDown() */
2691:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2692:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2693:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetScalingUp
2694:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets scaling-up
2695:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   w_read_fb               : Size of the frame buffer to be read
2696:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_grc                  : Graphics display area
2697:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   adj_sel                 : Folding handling (on/off)
2698:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ip_conversion           : IP conversion on/off
2699:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   res_ds_wr_md            : Frame buffer writing mode for image processing
2700:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ln_off_dir              : Line offset address direction of the frame buffer
2701:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   scaler                  : Scaler registers
2702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2703:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2704:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalingUp ( 
2705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
2706:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc,
2707:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  adj_sel,
2708:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  ip_conversion,
2709:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_wr_md_t                  res_ds_wr_md,
2710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_ln_off_dir_t          ln_off_dir,
2711:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t * const scaler)
2712:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2713:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            w_before_scl;       /* Width before scaling-up */
2714:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            w_after_scl;        /* Width after scaling-up */
2715:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            scaling_ratio;
2716:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t         vscl_up;            /* Vertical scaling-up */
2717:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vscl_up = VDC_OFF;
2719:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2720:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Vertical scaling-up */
2721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_before_scl    = (uint32_t)w_read_fb->in_vw;
2722:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2724:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_after_scl     = (uint32_t)gr_grc->vw;
2725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (w_before_scl < w_after_scl)
2726:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2727:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Vertical scaling-down: OFF, vertical scaling-up: ON */
2728:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds1)) &= (uint32_t)~VDC_REG_BIT4;
2729:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2730:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2731:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us1)) |= (uint32_t)VDC_REG_BIT4;
2732:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2733:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = CalcScalingRatio(w_before_scl, w_after_scl, adj_sel, VDC_OFF);
2734:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds6)) = scaling_ratio;
2735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2736:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         vscl_up = VDC_ON;
2737:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2738:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2739:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2740:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Vertical scaling-up: OFF */
2741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us1)) &= (uint32_t)~VDC_REG_BIT4;
2742:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2743:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2744:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Horizontal scaling-up */
2745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_before_scl    = (uint32_t)w_read_fb->in_hw;
2746:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2747:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
2748:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_after_scl     = (uint32_t)gr_grc->hw;
2749:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (w_before_scl < w_after_scl)
2750:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2751:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Horizontal scaling-up: ON */
2752:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us1)) |= (uint32_t)VDC_REG_BIT0;
2753:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2754:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = CalcScalingRatio(w_before_scl, w_after_scl, adj_sel, VDC_OFF);
2755:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2756:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2757:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us5)) &= (uint32_t)~VDC_REG_MASK_0X0000FFFF;
2758:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2759:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2760:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us5)) |= scaling_ratio;
2761:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2762:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2763:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2764:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Horizontal scaling-up: OFF */
2765:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us1)) &= (uint32_t)~VDC_REG_BIT0;
2766:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2767:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2768:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Initial scaling phase */
2769:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ip_conversion == VDC_OFF)
2770:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2771:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2772:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2773:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2774:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2776:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2777:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2778:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (vscl_up != VDC_OFF)
2780:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2781:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             switch (res_ds_wr_md)
2782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
2783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 case VDC_WR_MD_ROT_90DEG:
2784:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* Cast to an appropriate type */
2786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* Cast to an appropriate type */
2789:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2790:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* US_HB */
2792:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_us6)) |= INITIAL_SCALING_PHASE;
2793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
2794:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 case VDC_WR_MD_ROT_180DEG:
2795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     if (ln_off_dir == VDC_GR_LN_OFF_DIR_INC)
2796:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     {
2797:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* Cast to an appropriate type */
2798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2799:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2800:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* Cast to an appropriate type */
2801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2802:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* BTM */
2804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_ds5)) |= INITIAL_SCALING_PHASE;
2805:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     }
2806:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
2807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 case VDC_WR_MD_ROT_270DEG:
2808:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* Cast to an appropriate type */
2809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2810:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2811:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* Cast to an appropriate type */
2812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2814:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     /* US_HT */
2815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     (*(scaler->scl0_us6)) |= (INITIAL_SCALING_PHASE << VDC_REG_SHIFT_16);
2816:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
2817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 default:    /* Normal or horizontal mirroring */
2818:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     if (ln_off_dir == VDC_GR_LN_OFF_DIR_DEC)
2819:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     {
2820:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* Cast to an appropriate type */
2821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_ds5)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2822:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2823:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* Cast to an appropriate type */
2824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_us6)) &= (uint32_t)~VDC_REG_MASK_0X0FFF0FFF;
2825:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2826:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         /* BTM */
2827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                         (*(scaler->scl0_ds5)) |= INITIAL_SCALING_PHASE;
2828:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     }
2829:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
2830:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
2831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2833:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetScalingUp() */
2834:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2835:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2836:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          CalcScalingRatio
2837:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Calculates scaling ratio
2838:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *
2839:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              Description:<br>
2840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              In this function, the overflow in calculation is not considered.
2841:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              before_scl and after_scl are 11bit width, so the overflow does not occur.
2842:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   before_scl              : Size before scaling
2843:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   after_scl               : Size after scaling
2844:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   adj_sel                 : Handling for lack of last-input pixel/line, or folding ha
2845:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   round_up                : Round-up on/off
2846:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      Scaling ratio
2847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2848:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t CalcScalingRatio ( 
2849:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t      before_scl,
2850:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t      after_scl,
2851:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t   adj_sel,
2852:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t   round_up)
2853:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 580              		.loc 1 2853 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 8
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585              	.LVL12:
 586 0000 08D04DE2 		sub	sp, sp, #8
 587              		.cfi_def_cfa_offset 8
 588 0004 04008DE5 		str	r0, [sp, #4]
2854:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     float32_t   ratio;
2855:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     float32_t   sigma;
2856:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     int32_t     ratio_int;
2857:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    scaling_ratio;
2858:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2859:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* When parameter checking is not performed,
2860:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        following checks are necessary to avoid a division by zero exception and a negative number. 
2861:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if ((after_scl == 0u) || (after_scl == 1u))
 589              		.loc 1 2861 0
 590 0008 010051E3 		cmp	r1, #1
 591 000c 2000009A 		bls	.L45
2862:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2863:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2864:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = (uint32_t)SCALING_RATIO_SAME_SIZE;
2865:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2866:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2867:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2868:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* ratio = before_scl * 4096.0 / after_scl */
2869:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ratio  = (float32_t)before_scl * (float32_t)SCALING_RATIO_SAME_SIZE;
 592              		.loc 1 2869 0
 593 0010 900A07EE 		vmov	s15, r0	@ int
 594 0014 677AB8EE 		vcvt.f32.u32	s14, s15
 595 0018 1F6A9FED 		vldr.32	s12, .L48
 596 001c 066A27EE 		vmul.f32	s12, s14, s12
 597              	.LVL13:
2870:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2871:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2872:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ratio /= (float32_t)after_scl;
 598              		.loc 1 2872 0
 599 0020 901A07EE 		vmov	s15, r1	@ int
 600 0024 677AF8EE 		vcvt.f32.u32	s15, s15
 601 0028 276AC6EE 		vdiv.f32	s13, s12, s15
 602              	.LVL14:
2873:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2874:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (adj_sel != VDC_OFF)
 603              		.loc 1 2874 0
 604 002c 000052E3 		cmp	r2, #0
 605 0030 0700000A 		beq	.L41
2875:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2876:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2877:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             sigma  = ratio * ((float32_t)after_scl - (float32_t)VDC_REG_FLOAT_1_0);
 606              		.loc 1 2877 0
 607 0034 006AB7EE 		vmov.f32	s12, #1.0e+0
 608 0038 C67A77EE 		vsub.f32	s15, s15, s12
 609              	.LVL15:
2878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2879:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2880:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             sigma -= (((float32_t)before_scl - (float32_t)VDC_REG_FLOAT_1_0) * (float32_t)SCALING_R
 610              		.loc 1 2880 0
 611 003c 467A37EE 		vsub.f32	s14, s14, s12
 612 0040 156A9FED 		vldr.32	s12, .L48
 613 0044 067A27EE 		vmul.f32	s14, s14, s12
 614 0048 A77A16EE 		vnmls.f32	s14, s13, s15
 615              	.LVL16:
2881:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2882:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2883:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             sigma /= ((float32_t)after_scl - (float32_t)VDC_REG_FLOAT_1_0);
 616              		.loc 1 2883 0
 617 004c 276A87EE 		vdiv.f32	s12, s14, s15
 618              	.LVL17:
2884:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ratio -= sigma;
 619              		.loc 1 2884 0
 620 0050 C66A76EE 		vsub.f32	s13, s13, s12
 621              	.LVL18:
 622              	.L41:
2885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2886:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2887:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (round_up == VDC_OFF)
 623              		.loc 1 2887 0
 624 0054 000053E3 		cmp	r3, #0
 625 0058 0500001A 		bne	.L42
2888:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2889:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Round off */
2890:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ratio    += (float32_t)VDC_REG_FLOAT_0_5;
 626              		.loc 1 2890 0
 627 005c 007AF6EE 		vmov.f32	s15, #5.0e-1
 628 0060 A77A76EE 		vadd.f32	s15, s13, s15
 629              	.LVL19:
2891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2892:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2893:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ratio_int = (int32_t)ratio;
 630              		.loc 1 2893 0
 631 0064 E77AFDEE 		vcvt.s32.f32	s15, s15
 632              	.LVL20:
 633              	.L43:
2894:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2895:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
2896:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2897:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Round up */
2898:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ratio_int = (int32_t)ratio;
2899:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2900:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if ((float32_t)ratio_int < ratio)
2902:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
2903:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 ratio_int++;
2904:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
2905:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2906:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2907:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
2908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         scaling_ratio = (uint32_t)ratio_int;
 634              		.loc 1 2908 0
 635 0068 900A17EE 		vmov	r0, s15	@ int
 636              	.LVL21:
 637              	.L39:
2909:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2910:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return scaling_ratio;
2911:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function CalcScalingRatio() */
 638              		.loc 1 2911 0
 639 006c 08D08DE2 		add	sp, sp, #8
 640              		.cfi_remember_state
 641              		.cfi_def_cfa_offset 0
 642              		@ sp needed
 643 0070 1EFF2FE1 		bx	lr
 644              	.LVL22:
 645              	.L42:
 646              		.cfi_restore_state
2898:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 647              		.loc 1 2898 0
 648 0074 E67AFDEE 		vcvt.s32.f32	s15, s13
 649              	.LVL23:
2901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 650              		.loc 1 2901 0
 651 0078 E77AB8EE 		vcvt.f32.s32	s14, s15
 652 007c C76AF4EE 		vcmpe.f32	s13, s14
 653 0080 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
2903:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 654              		.loc 1 2903 0
 655 0084 903A17CE 		vmovgt	r3, s15	@ int
 656              	.LVL24:
 657 0088 013083C2 		addgt	r3, r3, #1
 658 008c 903A07CE 		vmovgt	s15, r3	@ int
 659              	.LVL25:
 660 0090 F4FFFFEA 		b	.L43
 661              	.LVL26:
 662              	.L45:
2864:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 663              		.loc 1 2864 0
 664 0094 010AA0E3 		mov	r0, #4096
 665              	.LVL27:
2910:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function CalcScalingRatio() */
 666              		.loc 1 2910 0
 667 0098 F3FFFFEA 		b	.L39
 668              	.L49:
 669              		.align	2
 670              	.L48:
 671 009c 00008045 		.word	1166016512
 672              		.cfi_endproc
 673              	.LFE35:
 675              		.section	.text.SetScalingDown,"ax",%progbits
 676              		.align	2
 677              		.syntax unified
 678              		.arm
 679              		.fpu neon
 681              	SetScalingDown:
 682              	.LFB33:
2625:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t    vw_before_scld;    /* Vertical width before scaling-down */
 683              		.loc 1 2625 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LVL28:
 688 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 689              		.cfi_def_cfa_offset 24
 690              		.cfi_offset 4, -24
 691              		.cfi_offset 5, -20
 692              		.cfi_offset 6, -16
 693              		.cfi_offset 7, -12
 694              		.cfi_offset 8, -8
 695              		.cfi_offset 14, -4
 696 0004 0150A0E1 		mov	r5, r1
 697 0008 0240A0E1 		mov	r4, r2
2633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 698              		.loc 1 2633 0
 699 000c B2C0D0E1 		ldrh	ip, [r0, #2]
 700              	.LVL29:
2636:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 701              		.loc 1 2636 0
 702 0010 B660D0E1 		ldrh	r6, [r0, #6]
 703              	.LVL30:
2639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 704              		.loc 1 2639 0
 705 0014 BA10D0E1 		ldrh	r1, [r0, #10]
 706              	.LVL31:
2642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 707              		.loc 1 2642 0
 708 0018 BC70D0E1 		ldrh	r7, [r0, #12]
 709              	.LVL32:
2645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 710              		.loc 1 2645 0
 711 001c 2C2092E5 		ldr	r2, [r2, #44]
 712              	.LVL33:
 713 0020 003092E5 		ldr	r3, [r2]
 714 0024 103083E3 		orr	r3, r3, #16
 715 0028 003082E5 		str	r3, [r2]
2648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (vw_before_scld > vw_after_scld)
 716              		.loc 1 2648 0
 717 002c 482094E5 		ldr	r2, [r4, #72]
 718 0030 003092E5 		ldr	r3, [r2]
 719 0034 1030C3E3 		bic	r3, r3, #16
 720 0038 003082E5 		str	r3, [r2]
2649:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 721              		.loc 1 2649 0
 722 003c 01005CE1 		cmp	ip, r1
 723 0040 2B00009A 		bls	.L51
2651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 724              		.loc 1 2651 0
 725 0044 0030A0E3 		mov	r3, #0
 726 0048 0E20D0E5 		ldrb	r2, [r0, #14]	@ zero_extendqisi2
 727 004c 0C00A0E1 		mov	r0, ip
 728              	.LVL34:
 729 0050 FEFFFFEB 		bl	CalcScalingRatio
 730              	.LVL35:
2653:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 731              		.loc 1 2653 0
 732 0054 403094E5 		ldr	r3, [r4, #64]
 733 0058 000083E5 		str	r0, [r3]
 734              	.LVL36:
 735              	.L52:
2662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 736              		.loc 1 2662 0
 737 005c 070056E1 		cmp	r6, r7
 738 0060 2700009A 		bls	.L53
2665:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 739              		.loc 1 2665 0
 740 0064 2C2094E5 		ldr	r2, [r4, #44]
 741 0068 003092E5 		ldr	r3, [r2]
 742 006c 013083E3 		orr	r3, r3, #1
 743 0070 003082E5 		str	r3, [r2]
2667:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 744              		.loc 1 2667 0
 745 0074 0130A0E3 		mov	r3, #1
 746 0078 0320A0E1 		mov	r2, r3
 747 007c 0710A0E1 		mov	r1, r7
 748 0080 0600A0E1 		mov	r0, r6
 749 0084 FEFFFFEB 		bl	CalcScalingRatio
 750              	.LVL37:
2670:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds4)) |= scaling_ratio;
 751              		.loc 1 2670 0
 752 0088 382094E5 		ldr	r2, [r4, #56]
 753 008c 003092E5 		ldr	r3, [r2]
 754 0090 2338A0E1 		lsr	r3, r3, #16
 755 0094 0338A0E1 		lsl	r3, r3, #16
 756 0098 003082E5 		str	r3, [r2]
2671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 757              		.loc 1 2671 0
 758 009c 382094E5 		ldr	r2, [r4, #56]
 759 00a0 003092E5 		ldr	r3, [r2]
 760 00a4 030080E1 		orr	r0, r0, r3
 761              	.LVL38:
 762 00a8 000082E5 		str	r0, [r2]
 763              	.L54:
2680:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 764              		.loc 1 2680 0
 765 00ac 3C1094E5 		ldr	r1, [r4, #60]
 766 00b0 003091E5 		ldr	r3, [r1]
 767 00b4 0F2AA0E3 		mov	r2, #61440
 768 00b8 1228DFE7 		bfi	r2, r2, #16, #16
 769 00bc 023003E0 		and	r3, r3, r2
 770 00c0 003081E5 		str	r3, [r1]
2683:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (res_inter != VDC_RES_INTER_PROGRESSIVE)
 771              		.loc 1 2683 0
 772 00c4 5C1094E5 		ldr	r1, [r4, #92]
 773 00c8 003091E5 		ldr	r3, [r1]
 774 00cc 0F2AA0E3 		mov	r2, #61440
 775 00d0 1228DFE7 		bfi	r2, r2, #16, #16
 776 00d4 023003E0 		and	r3, r3, r2
 777 00d8 003081E5 		str	r3, [r1]
2684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 778              		.loc 1 2684 0
 779 00dc 000055E3 		cmp	r5, #0
2687:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 780              		.loc 1 2687 0
 781 00e0 3C209415 		ldrne	r2, [r4, #60]
 782 00e4 00309215 		ldrne	r3, [r2]
 783 00e8 02338313 		orrne	r3, r3, #134217728
 784 00ec 00308215 		strne	r3, [r2]
 785 00f0 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 786              	.LVL39:
 787              	.L51:
2658:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 788              		.loc 1 2658 0
 789 00f4 403094E5 		ldr	r3, [r4, #64]
 790 00f8 012AA0E3 		mov	r2, #4096
 791 00fc 002083E5 		str	r2, [r3]
 792 0100 D5FFFFEA 		b	.L52
 793              	.LVL40:
 794              	.L53:
2676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 795              		.loc 1 2676 0
 796 0104 2C2094E5 		ldr	r2, [r4, #44]
 797 0108 003092E5 		ldr	r3, [r2]
 798 010c 0130C3E3 		bic	r3, r3, #1
 799 0110 003082E5 		str	r3, [r2]
 800 0114 E4FFFFEA 		b	.L54
 801              		.cfi_endproc
 802              	.LFE33:
 804              		.section	.text.SetScalingUp,"ax",%progbits
 805              		.align	2
 806              		.syntax unified
 807              		.arm
 808              		.fpu neon
 810              	SetScalingUp:
 811              	.LFB34:
2712:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            w_before_scl;       /* Width before scaling-up */
 812              		.loc 1 2712 0
 813              		.cfi_startproc
 814              		@ args = 12, pretend = 0, frame = 0
 815              		@ frame_needed = 0, uses_anonymous_args = 0
 816              	.LVL41:
 817 0000 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 818              		.cfi_def_cfa_offset 40
 819              		.cfi_offset 3, -40
 820              		.cfi_offset 4, -36
 821              		.cfi_offset 5, -32
 822              		.cfi_offset 6, -28
 823              		.cfi_offset 7, -24
 824              		.cfi_offset 8, -20
 825              		.cfi_offset 9, -16
 826              		.cfi_offset 10, -12
 827              		.cfi_offset 11, -8
 828              		.cfi_offset 14, -4
 829 0004 00A0A0E1 		mov	r10, r0
 830 0008 0150A0E1 		mov	r5, r1
 831 000c 02B0A0E1 		mov	fp, r2
 832 0010 0360A0E1 		mov	r6, r3
 833 0014 2870DDE5 		ldrb	r7, [sp, #40]	@ zero_extendqisi2
 834 0018 2C90DDE5 		ldrb	r9, [sp, #44]	@ zero_extendqisi2
 835 001c 30409DE5 		ldr	r4, [sp, #48]
 836              	.LVL42:
2721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 837              		.loc 1 2721 0
 838 0020 B000D0E1 		ldrh	r0, [r0]
 839              	.LVL43:
2724:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (w_before_scl < w_after_scl)
 840              		.loc 1 2724 0
 841 0024 B210D1E1 		ldrh	r1, [r1, #2]
 842              	.LVL44:
2725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 843              		.loc 1 2725 0
 844 0028 010050E1 		cmp	r0, r1
 845 002c 3E00002A 		bcs	.L58
2728:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 846              		.loc 1 2728 0
 847 0030 2C2094E5 		ldr	r2, [r4, #44]
 848              	.LVL45:
 849 0034 003092E5 		ldr	r3, [r2]
 850              	.LVL46:
 851 0038 1030C3E3 		bic	r3, r3, #16
 852 003c 003082E5 		str	r3, [r2]
2731:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 853              		.loc 1 2731 0
 854 0040 482094E5 		ldr	r2, [r4, #72]
 855 0044 003092E5 		ldr	r3, [r2]
 856 0048 103083E3 		orr	r3, r3, #16
 857 004c 003082E5 		str	r3, [r2]
2733:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_ds6)) = scaling_ratio;
 858              		.loc 1 2733 0
 859 0050 0030A0E3 		mov	r3, #0
 860 0054 0B20A0E1 		mov	r2, fp
 861 0058 FEFFFFEB 		bl	CalcScalingRatio
 862              	.LVL47:
2734:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 863              		.loc 1 2734 0
 864 005c 403094E5 		ldr	r3, [r4, #64]
 865 0060 000083E5 		str	r0, [r3]
 866              	.LVL48:
2736:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 867              		.loc 1 2736 0
 868 0064 0180A0E3 		mov	r8, #1
 869              	.LVL49:
 870              	.L59:
2745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 871              		.loc 1 2745 0
 872 0068 B200DAE1 		ldrh	r0, [r10, #2]
 873              	.LVL50:
2748:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (w_before_scl < w_after_scl)
 874              		.loc 1 2748 0
 875 006c B610D5E1 		ldrh	r1, [r5, #6]
 876              	.LVL51:
2749:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 877              		.loc 1 2749 0
 878 0070 010050E1 		cmp	r0, r1
 879 0074 3200002A 		bcs	.L60
2752:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 880              		.loc 1 2752 0
 881 0078 482094E5 		ldr	r2, [r4, #72]
 882 007c 003092E5 		ldr	r3, [r2]
 883 0080 013083E3 		orr	r3, r3, #1
 884 0084 003082E5 		str	r3, [r2]
2754:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 885              		.loc 1 2754 0
 886 0088 0030A0E3 		mov	r3, #0
 887 008c 0B20A0E1 		mov	r2, fp
 888 0090 FEFFFFEB 		bl	CalcScalingRatio
 889              	.LVL52:
2757:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 890              		.loc 1 2757 0
 891 0094 582094E5 		ldr	r2, [r4, #88]
 892 0098 003092E5 		ldr	r3, [r2]
 893 009c 2338A0E1 		lsr	r3, r3, #16
 894 00a0 0338A0E1 		lsl	r3, r3, #16
 895 00a4 003082E5 		str	r3, [r2]
2760:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 896              		.loc 1 2760 0
 897 00a8 582094E5 		ldr	r2, [r4, #88]
 898 00ac 003092E5 		ldr	r3, [r2]
 899 00b0 030080E1 		orr	r0, r0, r3
 900              	.LVL53:
 901 00b4 000082E5 		str	r0, [r2]
 902              	.L61:
2769:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 903              		.loc 1 2769 0
 904 00b8 000056E3 		cmp	r6, #0
 905 00bc 2500000A 		beq	.L70
2779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 906              		.loc 1 2779 0
 907 00c0 000058E3 		cmp	r8, #0
 908 00c4 F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
2781:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 909              		.loc 1 2781 0
 910 00c8 030057E3 		cmp	r7, #3
 911 00cc 3F00000A 		beq	.L65
 912 00d0 040057E3 		cmp	r7, #4
 913 00d4 5000000A 		beq	.L66
 914 00d8 020057E3 		cmp	r7, #2
 915 00dc 2A00000A 		beq	.L71
2818:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     {
 916              		.loc 1 2818 0
 917 00e0 010059E3 		cmp	r9, #1
 918 00e4 F88FBD18 		popne	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
2821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 919              		.loc 1 2821 0
 920 00e8 3C1094E5 		ldr	r1, [r4, #60]
 921 00ec 003091E5 		ldr	r3, [r1]
 922 00f0 0F2AA0E3 		mov	r2, #61440
 923 00f4 1228DFE7 		bfi	r2, r2, #16, #16
 924 00f8 023003E0 		and	r3, r3, r2
 925 00fc 003081E5 		str	r3, [r1]
2824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 926              		.loc 1 2824 0
 927 0100 5C1094E5 		ldr	r1, [r4, #92]
 928 0104 003091E5 		ldr	r3, [r1]
 929 0108 0F2AA0E3 		mov	r2, #61440
 930 010c 1228DFE7 		bfi	r2, r2, #16, #16
 931 0110 023003E0 		and	r3, r3, r2
 932 0114 003081E5 		str	r3, [r1]
2827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     }
 933              		.loc 1 2827 0
 934 0118 3C2094E5 		ldr	r2, [r4, #60]
 935 011c 003092E5 		ldr	r3, [r2]
 936 0120 023B83E3 		orr	r3, r3, #2048
 937 0124 003082E5 		str	r3, [r2]
 938 0128 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 939              	.LVL54:
 940              	.L58:
2741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 941              		.loc 1 2741 0
 942 012c 482094E5 		ldr	r2, [r4, #72]
 943              	.LVL55:
 944 0130 003092E5 		ldr	r3, [r2]
 945              	.LVL56:
 946 0134 1030C3E3 		bic	r3, r3, #16
 947 0138 003082E5 		str	r3, [r2]
2718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 948              		.loc 1 2718 0
 949 013c 0080A0E3 		mov	r8, #0
 950 0140 C8FFFFEA 		b	.L59
 951              	.LVL57:
 952              	.L60:
2765:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 953              		.loc 1 2765 0
 954 0144 482094E5 		ldr	r2, [r4, #72]
 955 0148 003092E5 		ldr	r3, [r2]
 956 014c 0130C3E3 		bic	r3, r3, #1
 957 0150 003082E5 		str	r3, [r2]
 958 0154 D7FFFFEA 		b	.L61
 959              	.LVL58:
 960              	.L70:
2772:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 961              		.loc 1 2772 0
 962 0158 3C1094E5 		ldr	r1, [r4, #60]
 963 015c 003091E5 		ldr	r3, [r1]
 964 0160 0F2AA0E3 		mov	r2, #61440
 965 0164 1228DFE7 		bfi	r2, r2, #16, #16
 966 0168 023003E0 		and	r3, r3, r2
 967 016c 003081E5 		str	r3, [r1]
2775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 968              		.loc 1 2775 0
 969 0170 5C1094E5 		ldr	r1, [r4, #92]
 970 0174 003091E5 		ldr	r3, [r1]
 971 0178 0F2AA0E3 		mov	r2, #61440
 972 017c 1228DFE7 		bfi	r2, r2, #16, #16
 973 0180 023003E0 		and	r3, r3, r2
 974 0184 003081E5 		str	r3, [r1]
 975 0188 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 976              	.L71:
2786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 977              		.loc 1 2786 0
 978 018c 3C1094E5 		ldr	r1, [r4, #60]
 979 0190 003091E5 		ldr	r3, [r1]
 980 0194 0F2AA0E3 		mov	r2, #61440
 981 0198 1228DFE7 		bfi	r2, r2, #16, #16
 982 019c 023003E0 		and	r3, r3, r2
 983 01a0 003081E5 		str	r3, [r1]
2789:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 984              		.loc 1 2789 0
 985 01a4 5C1094E5 		ldr	r1, [r4, #92]
 986 01a8 003091E5 		ldr	r3, [r1]
 987 01ac 0F2AA0E3 		mov	r2, #61440
 988 01b0 1228DFE7 		bfi	r2, r2, #16, #16
 989 01b4 023003E0 		and	r3, r3, r2
 990 01b8 003081E5 		str	r3, [r1]
2792:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
 991              		.loc 1 2792 0
 992 01bc 5C2094E5 		ldr	r2, [r4, #92]
 993 01c0 003092E5 		ldr	r3, [r2]
 994 01c4 023B83E3 		orr	r3, r3, #2048
 995 01c8 003082E5 		str	r3, [r2]
2793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 case VDC_WR_MD_ROT_180DEG:
 996              		.loc 1 2793 0
 997 01cc F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 998              	.L65:
2795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     {
 999              		.loc 1 2795 0
 1000 01d0 000059E3 		cmp	r9, #0
 1001 01d4 F88FBD18 		popne	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
2798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1002              		.loc 1 2798 0
 1003 01d8 3C1094E5 		ldr	r1, [r4, #60]
 1004 01dc 003091E5 		ldr	r3, [r1]
 1005 01e0 0F2AA0E3 		mov	r2, #61440
 1006 01e4 1228DFE7 		bfi	r2, r2, #16, #16
 1007 01e8 023003E0 		and	r3, r3, r2
 1008 01ec 003081E5 		str	r3, [r1]
2801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1009              		.loc 1 2801 0
 1010 01f0 5C1094E5 		ldr	r1, [r4, #92]
 1011 01f4 003091E5 		ldr	r3, [r1]
 1012 01f8 0F2AA0E3 		mov	r2, #61440
 1013 01fc 1228DFE7 		bfi	r2, r2, #16, #16
 1014 0200 023003E0 		and	r3, r3, r2
 1015 0204 003081E5 		str	r3, [r1]
2804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                     }
 1016              		.loc 1 2804 0
 1017 0208 3C2094E5 		ldr	r2, [r4, #60]
 1018 020c 003092E5 		ldr	r3, [r2]
 1019 0210 023B83E3 		orr	r3, r3, #2048
 1020 0214 003082E5 		str	r3, [r2]
 1021 0218 F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1022              	.L66:
2809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1023              		.loc 1 2809 0
 1024 021c 3C1094E5 		ldr	r1, [r4, #60]
 1025 0220 003091E5 		ldr	r3, [r1]
 1026 0224 0F2AA0E3 		mov	r2, #61440
 1027 0228 1228DFE7 		bfi	r2, r2, #16, #16
 1028 022c 023003E0 		and	r3, r3, r2
 1029 0230 003081E5 		str	r3, [r1]
2812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1030              		.loc 1 2812 0
 1031 0234 5C1094E5 		ldr	r1, [r4, #92]
 1032 0238 003091E5 		ldr	r3, [r1]
 1033 023c 0F2AA0E3 		mov	r2, #61440
 1034 0240 1228DFE7 		bfi	r2, r2, #16, #16
 1035 0244 023003E0 		and	r3, r3, r2
 1036 0248 003081E5 		str	r3, [r1]
2815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 break;
 1037              		.loc 1 2815 0
 1038 024c 5C2094E5 		ldr	r2, [r4, #92]
 1039 0250 003092E5 		ldr	r3, [r2]
 1040 0254 023383E3 		orr	r3, r3, #134217728
 1041 0258 003082E5 		str	r3, [r2]
2816:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 default:    /* Normal or horizontal mirroring */
 1042              		.loc 1 2816 0
 1043 025c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1044              		.cfi_endproc
 1045              	.LFE34:
 1047              		.section	.text.ConfirmGraphicsEnlargement,"ax",%progbits
 1048              		.align	2
 1049              		.syntax unified
 1050              		.arm
 1051              		.fpu neon
 1053              	ConfirmGraphicsEnlargement:
 1054              	.LFB37:
2912:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2913:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2914:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetInputCntrlColorMtx
2915:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets color matrix in the input controller
2916:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   void
2917:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
2918:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2919:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetInputCntrlColorMtx (void) 
2920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
2921:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_color_space_t      color_space_input;
2922:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_color_space_t      color_space_fb;
2923:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_colormtx_mode_t    mtx_mode_tmp;
2924:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t       * offset_tmp;
2925:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t       * gain_tmp;
2926:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2927:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_space_input   = VDC_ShrdPrmGetColorSpace();
2928:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_space_fb      = VDC_ShrdPrmGetColorSpaceFbWr();
2929:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2930:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix operating mode */
2931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (color_space_input == VDC_COLOR_SPACE_GBR)
2932:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2933:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (color_space_fb == VDC_COLOR_SPACE_GBR)
2934:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2935:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* GBR to GBR */
2936:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             mtx_mode_tmp = VDC_COLORMTX_GBR_GBR;
2937:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2938:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
2939:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2940:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* GBR to YCbCr */
2941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             mtx_mode_tmp = VDC_COLORMTX_GBR_YCBCR;
2942:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2943:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2944:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
2945:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2946:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (color_space_fb == VDC_COLOR_SPACE_GBR)
2947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2948:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* YCbCr to GBR */
2949:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             mtx_mode_tmp = VDC_COLORMTX_YCBCR_GBR;
2950:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2951:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
2952:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2953:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* YCbCr to YCbCr */
2954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             mtx_mode_tmp = VDC_COLORMTX_YCBCR_YCBCR;
2955:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2956:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
2957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2958:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix offset (DC) adjustment (YG, B, and R) */
2959:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     offset_tmp = colormtx_offset_adj;
2960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2961:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix signal gain adjustment (GG, GB, GR, BG, BB, BR, RG, RB, and RR) */
2962:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gain_tmp = colormtx_gain_adj[mtx_mode_tmp];
2963:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2964:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetColorMatrix(mtx_mode_tmp, offset_tmp, gain_tmp, &vdc_regaddr_color_matrix[VDC_COLORMTX_IMGCN
2965:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetInputCntrlColorMtx() */
2967:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2968:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
2969:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ConfirmGraphicsEnlargement
2970:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Confirms whether the graphics enlargement will occur or not
2971:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
2972:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_flm_sel              : Frame buffer address setting signal
2973:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   w_read_fb               : Size of the frame buffer to be read
2974:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_grc                  : Graphics display area
2975:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      Graphics enlargement on/off
2976:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
2977:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static vdc_onoff_t ConfirmGraphicsEnlargement ( 
2978:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t          graphics_id,
2979:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_flm_sel_t             gr_flm_sel,
2980:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
2981:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc)
2982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1055              		.loc 1 2982 0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 1060              	.LVL59:
2983:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t graphics_enlargement;
2984:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     graphics_enlargement = VDC_OFF;
2986:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_flm_sel == VDC_GR_FLM_SEL_FLM_NUM)
 1061              		.loc 1 2986 0
 1062 0000 010051E3 		cmp	r1, #1
 1063 0004 0900000A 		beq	.L80
2987:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
2988:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (graphics_id == VDC_GR_TYPE_GR0)
2989:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
2990:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
2991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (((uint32_t)w_read_fb->in_vw < (uint32_t)gr_grc->vw) ||
2992:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
2993:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
2994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 ((uint32_t)w_read_fb->in_hw < (uint32_t)gr_grc->hw))
2995:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
2996:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 graphics_enlargement = VDC_ON;
2997:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
2998:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
2999:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3000:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3001:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3002:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3003:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (((uint32_t)w_read_fb->in_vw < (uint32_t)gr_grc->vw) || ((uint32_t)w_read_fb->in_hw < (u
 1064              		.loc 1 3003 0
 1065 0008 B000D2E1 		ldrh	r0, [r2]
 1066              	.LVL60:
 1067 000c B210D3E1 		ldrh	r1, [r3, #2]
 1068              	.LVL61:
 1069 0010 010050E1 		cmp	r0, r1
 1070 0014 1900003A 		bcc	.L78
 1071              		.loc 1 3003 0 is_stmt 0 discriminator 1
 1072 0018 B220D2E1 		ldrh	r2, [r2, #2]
 1073              	.LVL62:
 1074 001c B630D3E1 		ldrh	r3, [r3, #6]
 1075              	.LVL63:
 1076 0020 030052E1 		cmp	r2, r3
 1077 0024 0D00002A 		bcs	.L81
3004:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3005:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             graphics_enlargement = VDC_ON;
 1078              		.loc 1 3005 0 is_stmt 1
 1079 0028 0100A0E3 		mov	r0, #1
 1080              	.LVL64:
3006:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3007:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3008:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return graphics_enlargement;
3009:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ConfirmGraphicsEnlargement() */
 1081              		.loc 1 3009 0
 1082 002c 1EFF2FE1 		bx	lr
 1083              	.LVL65:
 1084              	.L80:
2988:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 1085              		.loc 1 2988 0
 1086 0030 000050E3 		cmp	r0, #0
 1087 0034 0B00001A 		bne	.L75
2991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1088              		.loc 1 2991 0
 1089 0038 B000D2E1 		ldrh	r0, [r2]
 1090              	.LVL66:
 1091 003c B210D3E1 		ldrh	r1, [r3, #2]
 1092              	.LVL67:
 1093 0040 010050E1 		cmp	r0, r1
 1094 0044 0900003A 		bcc	.L76
2994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 1095              		.loc 1 2994 0 discriminator 1
 1096 0048 B220D2E1 		ldrh	r2, [r2, #2]
 1097              	.LVL68:
 1098 004c B630D3E1 		ldrh	r3, [r3, #6]
 1099              	.LVL69:
2991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1100              		.loc 1 2991 0 discriminator 1
 1101 0050 030052E1 		cmp	r2, r3
 1102 0054 0700003A 		bcc	.L77
2985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_flm_sel == VDC_GR_FLM_SEL_FLM_NUM)
 1103              		.loc 1 2985 0
 1104 0058 0000A0E3 		mov	r0, #0
 1105 005c 1EFF2FE1 		bx	lr
 1106              	.L81:
 1107 0060 0000A0E3 		mov	r0, #0
 1108 0064 1EFF2FE1 		bx	lr
 1109              	.LVL70:
 1110              	.L75:
 1111 0068 0000A0E3 		mov	r0, #0
 1112              	.LVL71:
 1113 006c 1EFF2FE1 		bx	lr
 1114              	.LVL72:
 1115              	.L76:
2996:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 1116              		.loc 1 2996 0
 1117 0070 0100A0E3 		mov	r0, #1
 1118 0074 1EFF2FE1 		bx	lr
 1119              	.LVL73:
 1120              	.L77:
 1121 0078 0100A0E3 		mov	r0, #1
 1122 007c 1EFF2FE1 		bx	lr
 1123              	.LVL74:
 1124              	.L78:
3005:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 1125              		.loc 1 3005 0
 1126 0080 0100A0E3 		mov	r0, #1
 1127 0084 1EFF2FE1 		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE37:
 1131              		.global	__aeabi_uidiv
 1132              		.section	.text.DisplayStartPixelSetting,"ax",%progbits
 1133              		.align	2
 1134              		.syntax unified
 1135              		.arm
 1136              		.fpu neon
 1138              	DisplayStartPixelSetting:
 1139              	.LFB39:
3010:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3011:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetScalerGraphics
3013:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets scaler for graphics
3014:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   graphics_id             : Graphics type ID
3015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   w_read_fb               : Size of the frame buffer to be read
3016:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_grc                  : Graphics display area
3017:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_flm_sel              : Frame buffer address setting signal
3018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_enlarge              : Graphics enlargement on/off
3019:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3020:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetScalerGraphics ( 
3022:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_graphics_type_t          graphics_id,
3023:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_width_read_fb_t  * const w_read_fb,
3024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_period_rect_t    * const gr_grc,
3025:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_gr_flm_sel_t             gr_flm_sel,
3026:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                  gr_enlarge)
3027:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3028:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
3029:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t           * scaler;
3030:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_res_inter_t                        res_inter_tmp;
3031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_wr_md_t                            res_ds_wr_md_tmp;
3032:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t                            adj_sel_tmp;
3033:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_onoff_t                            ip_conversion;
3034:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                                reg_data;
3035:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_ln_off_dir_t                    ln_off_dir;
3036:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scaler = &vdc_regaddr_scaler;
3038:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3039:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if ((gr_flm_sel == VDC_GR_FLM_SEL_FLM_NUM) && (gr_enlarge == VDC_OFF))
3040:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3041:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Normal graphics display */
3042:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sync signals from the graphics processing block */
3043:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us8)) |= (uint32_t)VDC_REG_BIT4;
3044:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3045:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register (SC0_SCL0_UPDATE, SC1_SCL0_UPDATE, OIR_SCL0_UPDATE)
3046:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b13      SCL0_VEN_D
3047:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b4       SCL0_VEN_B */
3048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_update)) |= (uint32_t)(VDC_REG_BIT13 | VDC_REG_BIT4);
3049:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3050:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3051:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3052:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Video image or graphics enlargement */
3053:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sync signals from the scaling-up control block */
3054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us8)) &= (uint32_t)~VDC_REG_BIT4;
3055:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3056:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Graphics display area */
3057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us2))  = (uint32_t)(gr_grc->vs << VDC_REG_SHIFT_16);
3058:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3059:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us2)) |= (uint32_t)gr_grc->vw;
3061:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3062:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us3))  = (uint32_t)(gr_grc->hs << VDC_REG_SHIFT_16);
3064:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3065:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us3)) |= (uint32_t)gr_grc->hw;
3067:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3068:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3069:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us4))  = (uint32_t)(w_read_fb->in_vw << VDC_REG_SHIFT_16);
3070:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3071:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3072:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_us4)) |= (uint32_t)w_read_fb->in_hw;
3073:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3074:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         res_ds_wr_md_tmp    = VDC_ShrdPrmGetWritingMode();
3075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         adj_sel_tmp         = VDC_ShrdPrmGetMeasureFolding(graphics_id);
3076:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ip_conversion       = VDC_OFF;
3077:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_flm_sel == VDC_GR_FLM_SEL_SCALE_DOWN) || (gr_flm_sel == VDC_GR_FLM_SEL_POINTER_BUFF
3078:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3079:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             res_inter_tmp = VDC_ShrdPrmGetInterlace();
3080:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (res_inter_tmp != VDC_RES_INTER_PROGRESSIVE)
3081:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
3082:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 ip_conversion = VDC_ON;
3083:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
3084:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3085:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3086:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ln_off_dir = VDC_ShrdPrmGetLineOfsAddrDir(graphics_id);
3087:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3088:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Scaling-up */
3089:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetScalingUp(w_read_fb, gr_grc, adj_sel_tmp, ip_conversion, res_ds_wr_md_tmp, ln_off_dir, s
3090:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3091:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register (SC0_SCL0_UPDATE, SC1_SCL0_UPDATE, OIR_SCL0_UPDATE)
3092:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b13      SCL0_VEN_D
3093:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b8       SCL0_UPDATE
3094:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b4       SCL0_VEN_B
3095:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       SCL0_VEN_A */
3096:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl0_update)) |= (uint32_t)(VDC_REG_BIT13 | VDC_REG_BIT8 | VDC_REG_BIT4 | VDC_RE
3097:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3098:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3099:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_flm_sel != VDC_GR_FLM_SEL_FLM_NUM)
3100:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3101:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
3102:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3103:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Frame buffer frame offset address */
3104:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data                    = *(scaler->scl1_wr4);
3105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm4)) = reg_data;
3106:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Graphics register update control register (GRx_UPDATE)
3108:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b0       GRx_IBUS_VEN */
3109:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT0;
3110:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetScalerGraphics() */
3112:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3113:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3114:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          DisplayStartPixelSetting
3115:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Gets the amount of data to be skipped through
3116:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_base                 : Frame buffer base address
3117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_format               : Graphics format
3118:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      The amount of data to be skipped through
3119:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3120:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t DisplayStartPixelSetting 
3121:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (const uint32_t gr_base, const vdc_gr_format_t gr_format)
3122:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1140              		.loc 1 3122 0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              	.LVL75:
 1145 0000 10402DE9 		push	{r4, lr}
 1146              		.cfi_def_cfa_offset 8
 1147              		.cfi_offset 4, -8
 1148              		.cfi_offset 14, -4
3123:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                gr_sta_pos;
3124:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     static const uint32_t   bits_per_pixel[VDC_GR_FORMAT_NUM] =
3125:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3126:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_RGB565,         /* RGB565 */
3127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_RGB888,         /* RGB888 */
3128:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_ARGB1555,       /* ARGB1555 */
3129:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_ARGB4444,       /* ARGB4444 */
3130:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_ARGB8888,       /* ARGB8888 */
3131:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_CLUT8,          /* CLUT8 */
3132:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_CLUT4,          /* CLUT4 */
3133:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_CLUT1,          /* CLUT1 */
3134:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_YCBCR422,       /* YCbCr422: In the YCbCr422 format, 32 bits are used
3135:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_YCBCR444,       /* YCbCr444 */
3136:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_RGBA5551,       /* RGBA5551 */
3137:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_REG_BIT_PER_PIXEL_RGBA8888        /* RGBA8888 */
3138:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     };
3139:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3140:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3141:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_sta_pos  = gr_base & (uint32_t)VDC_REG_MASK_0X00000007;
 1149              		.loc 1 3141 0
 1150 0004 070000E2 		and	r0, r0, #7
 1151              	.LVL76:
3142:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3143:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3144:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_sta_pos *= (uint32_t)VDC_REG_BIT_PER_PIXEL_VALUE_8;
3145:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3146:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3147:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_sta_pos /= bits_per_pixel[gr_format];
 1152              		.loc 1 3147 0
 1153 0008 003000E3 		movw	r3, #:lower16:.LANCHOR0
 1154 000c 003040E3 		movt	r3, #:upper16:.LANCHOR0
 1155 0010 011193E7 		ldr	r1, [r3, r1, lsl #2]
 1156              	.LVL77:
 1157 0014 8001A0E1 		lsl	r0, r0, #3
 1158              	.LVL78:
 1159 0018 FEFFFFEB 		bl	__aeabi_uidiv
 1160              	.LVL79:
3148:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3149:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3150:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_sta_pos &= (uint32_t)VDC_REG_MASK_0X0000003F;
3151:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return gr_sta_pos;
3153:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function DisplayStartPixelSetting() */
 1161              		.loc 1 3153 0
 1162 001c 3F0000E2 		and	r0, r0, #63
 1163              	.LVL80:
 1164 0020 1080BDE8 		pop	{r4, pc}
 1165              		.cfi_endproc
 1166              	.LFE39:
 1168              		.section	.text.SetRegUpdateRwEnable,"ax",%progbits
 1169              		.align	2
 1170              		.syntax unified
 1171              		.arm
 1172              		.fpu neon
 1174              	SetRegUpdateRwEnable:
 1175              	.LFB45:
3154:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3155:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3156:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetImgQaImproverColorMtx
3157:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets color matrix in the image quality improver
3158:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_space             : Color space (GBR or YCbCr)
3159:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3160:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3161:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImgQaImproverColorMtx (const vdc_color_space_t color_space) 
3162:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3163:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_colormtx_mode_t    mtx_mode_tmp;
3164:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t        * offset_tmp;
3165:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t        * gain_tmp;
3166:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3167:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix operating mode */
3168:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (color_space == VDC_COLOR_SPACE_GBR)
3169:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3170:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         mtx_mode_tmp = VDC_COLORMTX_GBR_GBR;
3171:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3172:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3173:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3174:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         mtx_mode_tmp = VDC_COLORMTX_YCBCR_GBR;
3175:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3176:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3177:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix offset (DC) adjustment (YG, B, and R) */
3178:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     offset_tmp = colormtx_offset_adj;
3179:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3180:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Color matrix signal gain adjustment (GG, GB, GR, BG, BB, BR, RG, RB, and RR) */
3181:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gain_tmp = colormtx_gain_adj[mtx_mode_tmp];
3182:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3183:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetColorMatrix(mtx_mode_tmp, offset_tmp, gain_tmp, &vdc_regaddr_color_matrix[VDC_COLORMTX_ADJ_0
3184:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3185:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetImgQaImproverColorMtx() */
3186:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3187:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3188:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetRwProcAbility_Write_0
3189:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Activates/deactivates frame buffer writing for scaler 0
3190:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ability         : Ability to enable read/write access to the memory
3191:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3192:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3193:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Write_0 (const vdc_onoff_t ability) 
3194:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3195:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
3196:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t               dummy_read;
3197:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                        reg_data;
3198:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3199:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* SC0/GR0 writing */
3200:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scaler = &vdc_regaddr_scaler;
3201:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3202:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ability == VDC_OFF)
3203:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3204:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {   /* SC0 frame buffer writing is disabled */
3205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) &= (uint32_t)~VDC_REG_BIT0;
3206:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcDisable(VDC_LAYER_ID_0_WR);
3208:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3209:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3210:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3211:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* SC0 frame buffer writing is enabled */
3212:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_wr5)) |= (uint32_t)VDC_REG_BIT0;
3213:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3214:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Reset and reset cancellation of the pointer buffer with dummy read */
3215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_pbuf_cnt)) |= (uint32_t)VDC_REG_BIT16;
3216:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data    = (*(scaler->scl1_pbuf_cnt));
3217:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         dummy_read  = reg_data;
3218:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3219:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Register update control register (SCx_SCL1_UPDATE)
3220:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****            b20      SCL1_UPDATE_B */
3221:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_update)) |= (uint32_t)VDC_REG_BIT20;
3222:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3223:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3224:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(scaler->scl1_pbuf_cnt)) &= (uint32_t)~VDC_REG_BIT16;
3225:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data    = *(scaler->scl1_pbuf_cnt);
3226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         dummy_read  = reg_data;
3227:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3228:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcEnable(VDC_LAYER_ID_0_WR);
3229:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetRwProcAbility_Write_0() */
3231:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3232:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3233:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetRwProcAbility_Read_0
3234:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Activates/deactivates frame buffer reading for graphics 0
3235:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ability         : Ability to enable read/write access to the memory
3236:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3237:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3238:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_0 (const vdc_onoff_t ability) 
3239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3240:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
3241:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3242:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* SC0/GR0 reading */
3243:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0];
3244:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ability == VDC_OFF)
3246:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3247:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR0 frame buffer reading is disabled */
3248:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) &= (uint32_t)~VDC_REG_BIT0;
3249:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3250:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Graphics display mode */
3251:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
3252:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3253:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_DISPSEL_BACK;
3255:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3256:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcDisable(VDC_LAYER_ID_0_RD);
3257:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3258:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3259:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3260:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR0 frame buffer reading is enabled */
3261:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) |= (uint32_t)VDC_REG_BIT0;
3262:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcEnable(VDC_LAYER_ID_0_RD);
3264:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3265:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetRwProcAbility_Read_0() */
3266:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3267:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3268:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetRwProcAbility_Read_2
3269:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Activates/deactivates frame buffer reading for graphics 2
3270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ability         : Ability to enable read/write access to the memory
3271:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3272:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3273:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_2 (const vdc_onoff_t ability) 
3274:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3275:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
3276:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3277:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* GR2 reading */
3278:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR2];
3279:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ability == VDC_OFF)
3281:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3282:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR2 frame buffer reading is disabled */
3283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) &= (uint32_t)~VDC_REG_BIT0;
3284:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3285:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Graphics display mode */
3286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
3287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3289:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_DISPSEL_LOWER;
3290:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcDisable(VDC_LAYER_ID_2_RD);
3292:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3293:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3294:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3295:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR2 frame buffer reading is enabled */
3296:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) |= (uint32_t)VDC_REG_BIT0;
3297:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcEnable(VDC_LAYER_ID_2_RD);
3299:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3300:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetRwProcAbility_Read_2() */
3301:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3302:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetRwProcAbility_Read_3
3304:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Activates/deactivates frame buffer reading for graphics 3
3305:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   ability         : Ability to enable read/write access to the memory
3306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3307:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3308:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRwProcAbility_Read_3 (const vdc_onoff_t ability) 
3309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3310:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
3311:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3312:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* GR3 reading */
3313:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     img_synthesizer = &vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR3];
3314:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3315:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (ability == VDC_OFF)
3316:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3317:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR3 frame buffer reading is disabled */
3318:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) &= (uint32_t)~VDC_REG_BIT0;
3319:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3320:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Graphics display mode */
3321:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
3322:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3323:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3324:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab1)) |= (uint32_t)VDC_DISPSEL_LOWER;
3325:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3326:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcDisable(VDC_LAYER_ID_3_RD);
3327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3329:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3330:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* GR3 frame buffer reading is enabled */
3331:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm_rd)) |= (uint32_t)VDC_REG_BIT0;
3332:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         VDC_ShrdPrmSetRwProcEnable(VDC_LAYER_ID_3_RD);
3334:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3335:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetRwProcAbility_Read_3() */
3336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3337:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3338:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetRegUpdateRwEnable
3339:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets register update control register to update the frame buffer
3340:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  *              read and write enable settings.
3341:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   layer_id                : Layer ID
3342:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3343:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3344:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetRegUpdateRwEnable (const vdc_layer_id_t layer_id) 
3345:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1176              		.loc 1 3345 0
 1177              		.cfi_startproc
 1178              		@ args = 0, pretend = 0, frame = 0
 1179              		@ frame_needed = 0, uses_anonymous_args = 0
 1180              		@ link register save eliminated.
 1181              	.LVL81:
3346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * scl1_update_reg;
3347:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * gr_update_reg;
3348:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3349:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     switch (layer_id)
 1182              		.loc 1 3349 0
 1183 0000 010080E2 		add	r0, r0, #1
 1184              	.LVL82:
 1185 0004 040050E3 		cmp	r0, #4
 1186 0008 00F19F97 		ldrls	pc, [pc, r0, asl #2]
 1187 000c 360000EA 		b	.L84
 1188              	.L87:
 1189 0010 98000000 		.word	.L86
 1190 0014 24000000 		.word	.L88
 1191 0018 44000000 		.word	.L89
 1192 001c 60000000 		.word	.L90
 1193 0020 7C000000 		.word	.L91
 1194              	.L88:
3350:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3351:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_LAYER_ID_0_WR:        /* Layer 0, write process */
3352:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             scl1_update_reg   = vdc_regaddr_scaler.scl1_update;
 1195              		.loc 1 3352 0
 1196 0024 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 1197 0028 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 1198 002c 6C2093E5 		ldr	r2, [r3, #108]
 1199              	.LVL83:
3353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3354:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3355:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*scl1_update_reg) |= (uint32_t)(VDC_REG_BIT20 | VDC_REG_BIT4 | VDC_REG_BIT0);
 1200              		.loc 1 3355 0
 1201 0030 003092E5 		ldr	r3, [r2]
 1202 0034 013683E3 		orr	r3, r3, #1048576
 1203 0038 113083E3 		orr	r3, r3, #17
 1204 003c 003082E5 		str	r3, [r2]
3356:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 1205              		.loc 1 3356 0
 1206 0040 1EFF2FE1 		bx	lr
 1207              	.LVL84:
 1208              	.L89:
3357:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_LAYER_ID_0_RD:        /* Layer 0, read process */
3358:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_update;
 1209              		.loc 1 3358 0
 1210 0044 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 1211 0048 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 1212 004c 002093E5 		ldr	r2, [r3]
 1213              	.LVL85:
3359:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3360:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3361:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1214              		.loc 1 3361 0
 1215 0050 003092E5 		ldr	r3, [r2]
 1216 0054 113083E3 		orr	r3, r3, #17
 1217 0058 003082E5 		str	r3, [r2]
3362:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 1218              		.loc 1 3362 0
 1219 005c 1EFF2FE1 		bx	lr
 1220              	.LVL86:
 1221              	.L90:
3363:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_LAYER_ID_2_RD:        /* Layer 2, read process */
3364:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR2].gr_update;
 1222              		.loc 1 3364 0
 1223 0060 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 1224 0064 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 1225 0068 582093E5 		ldr	r2, [r3, #88]
 1226              	.LVL87:
3365:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3366:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3367:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1227              		.loc 1 3367 0
 1228 006c 003092E5 		ldr	r3, [r2]
 1229 0070 113083E3 		orr	r3, r3, #17
 1230 0074 003082E5 		str	r3, [r2]
3368:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 1231              		.loc 1 3368 0
 1232 0078 1EFF2FE1 		bx	lr
 1233              	.LVL88:
 1234              	.L91:
3369:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_LAYER_ID_3_RD:        /* Layer 3, read process */
3370:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR3].gr_update;
 1235              		.loc 1 3370 0
 1236 007c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 1237 0080 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 1238 0084 B02093E5 		ldr	r2, [r3, #176]
 1239              	.LVL89:
3371:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3372:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3373:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1240              		.loc 1 3373 0
 1241 0088 003092E5 		ldr	r3, [r2]
 1242 008c 113083E3 		orr	r3, r3, #17
 1243 0090 003082E5 		str	r3, [r2]
3374:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 1244              		.loc 1 3374 0
 1245 0094 1EFF2FE1 		bx	lr
 1246              	.LVL90:
 1247              	.L86:
3375:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3376:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_LAYER_ID_ALL:         /* All */
3377:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3378:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Register update control register (SCx_SCL1_UPDATE)*/
3379:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* b20      SCL1_UPDATE_B */
3380:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* b4       SCL1_VEN_B */
3381:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* b0       SCL1_VEN_A */
3382:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             scl1_update_reg   = vdc_regaddr_scaler.scl1_update;
 1248              		.loc 1 3382 0
 1249 0098 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 1250 009c 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 1251 00a0 6C2093E5 		ldr	r2, [r3, #108]
 1252              	.LVL91:
3383:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3384:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3385:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*scl1_update_reg) |= (uint32_t)(VDC_REG_BIT20 | VDC_REG_BIT4 | VDC_REG_BIT0);
 1253              		.loc 1 3385 0
 1254 00a4 003092E5 		ldr	r3, [r2]
 1255 00a8 013683E3 		orr	r3, r3, #1048576
 1256 00ac 113083E3 		orr	r3, r3, #17
 1257 00b0 003082E5 		str	r3, [r2]
3386:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3387:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Graphics register update control register (GRx_UPDATE) */
3388:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /*  b4       GRx_P_VEN */
3389:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /*  b0       GRx_IBUS_VEN */
3390:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_update;
 1258              		.loc 1 3390 0
 1259 00b4 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 1260 00b8 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 1261 00bc 001093E5 		ldr	r1, [r3]
 1262              	.LVL92:
3391:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3392:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3393:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1263              		.loc 1 3393 0
 1264 00c0 002091E5 		ldr	r2, [r1]
 1265              	.LVL93:
 1266 00c4 112082E3 		orr	r2, r2, #17
 1267 00c8 002081E5 		str	r2, [r1]
3394:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR2].gr_update;
 1268              		.loc 1 3394 0
 1269 00cc 581093E5 		ldr	r1, [r3, #88]
 1270              	.LVL94:
3395:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3396:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3397:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1271              		.loc 1 3397 0
 1272 00d0 002091E5 		ldr	r2, [r1]
 1273 00d4 112082E3 		orr	r2, r2, #17
 1274 00d8 002081E5 		str	r2, [r1]
3398:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR3].gr_update;
 1275              		.loc 1 3398 0
 1276 00dc B02093E5 		ldr	r2, [r3, #176]
 1277              	.LVL95:
3399:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3400:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3401:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*gr_update_reg) |= (uint32_t)(VDC_REG_BIT4|VDC_REG_BIT0);
 1278              		.loc 1 3401 0
 1279 00e0 003092E5 		ldr	r3, [r2]
 1280 00e4 113083E3 		orr	r3, r3, #17
 1281 00e8 003082E5 		str	r3, [r2]
 1282              	.LVL96:
 1283              	.L84:
 1284 00ec 1EFF2FE1 		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE45:
 1288              		.section	.text.SetGraphicsDisplayMode,"ax",%progbits
 1289              		.align	2
 1290              		.syntax unified
 1291              		.arm
 1292              		.fpu neon
 1294              	SetGraphicsDisplayMode:
 1295              	.LFB46:
3402:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3403:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3404:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         default:
3405:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3406:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* DO NOTHING */
3407:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3408:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3409:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetRegUpdateRwEnable() */
3410:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3411:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3412:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetGraphicsDisplayMode
3413:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets graphics display mode
3414:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   layer_id                : Layer ID
3415:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_disp_sel             : Graphics display mode
3416:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3417:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3418:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetGraphicsDisplayMode  
3419:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (const vdc_layer_id_t layer_id, const vdc_gr_disp_sel_t * const gr_disp_sel)
3420:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1296              		.loc 1 3420 0
 1297              		.cfi_startproc
 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 1300              	.LVL97:
3421:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                               graphics_id;
3422:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
3423:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3424:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (layer_id == VDC_LAYER_ID_ALL)
 1301              		.loc 1 3424 0
 1302 0000 010070E3 		cmn	r0, #1
 1303 0004 1900000A 		beq	.L108
3425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (graphics_id = 0; graphics_id < VDC_GR_TYPE_NUM; graphics_id++)
3427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (gr_disp_sel[graphics_id] != VDC_DISPSEL_IGNORED)
3429:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
3430:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
3431:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3432:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
3433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
3434:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3435:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Cast to an appropriate type */
3436:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_ab1)) |= (uint32_t)gr_disp_sel[graphics_id];
3437:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3438:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 /* Graphics register update control register (GRx_UPDATE)
3439:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                    b4       GRx_P_VEN */
3440:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
3441:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
3442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3443:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3444:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else if ((layer_id == VDC_LAYER_ID_0_RD) || (layer_id == VDC_LAYER_ID_2_RD) || (layer_id == VDC
 1304              		.loc 1 3444 0
 1305 0008 013040E2 		sub	r3, r0, #1
 1306 000c 7330EFE6 		uxtb	r3, r3
 1307 0010 020053E3 		cmp	r3, #2
 1308 0014 1EFF2F81 		bxhi	lr
3445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3446:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((*gr_disp_sel) != VDC_DISPSEL_IGNORED)
 1309              		.loc 1 3446 0
 1310 0018 D030D1E1 		ldrsb	r3, [r1]
 1311 001c 010073E3 		cmn	r3, #1
 1312 0020 1EFF2F01 		bxeq	lr
3447:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3448:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3449:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             graphics_id = (uint32_t)(layer_id - VDC_SC_TYPE_NUM);
 1313              		.loc 1 3449 0
 1314 0024 010040E2 		sub	r0, r0, #1
 1315              	.LVL98:
3450:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3451:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             img_synthesizer = &vdc_regaddr_img_synthesizer[graphics_id];
3452:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3453:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3454:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) &= (uint32_t)~VDC_REG_MASK_0X00000003;
 1316              		.loc 1 3454 0
 1317 0028 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 1318 002c 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 1319 0030 5830A0E3 		mov	r3, #88
 1320 0034 930000E0 		mul	r0, r3, r0
 1321              	.LVL99:
 1322 0038 003082E0 		add	r3, r2, r0
 1323 003c 203093E5 		ldr	r3, [r3, #32]
 1324 0040 00C093E5 		ldr	ip, [r3]
 1325 0044 03C0CCE3 		bic	ip, ip, #3
 1326 0048 00C083E5 		str	ip, [r3]
3455:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3456:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3457:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab1)) |= (uint32_t)*gr_disp_sel;
 1327              		.loc 1 3457 0
 1328 004c 00C093E5 		ldr	ip, [r3]
 1329 0050 D010D1E1 		ldrsb	r1, [r1]
 1330              	.LVL100:
 1331 0054 01108CE1 		orr	r1, ip, r1
 1332 0058 001083E5 		str	r1, [r3]
3458:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3459:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Graphics register update control register (GRx_UPDATE)
3460:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                b4       GRx_P_VEN */
3461:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_update)) |= (uint32_t)VDC_REG_BIT4;
 1333              		.loc 1 3461 0
 1334 005c 002092E7 		ldr	r2, [r2, r0]
 1335 0060 003092E5 		ldr	r3, [r2]
 1336 0064 103083E3 		orr	r3, r3, #16
 1337 0068 003082E5 		str	r3, [r2]
3462:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3463:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3464:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3465:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3466:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Do nothing */
3467:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ;
3468:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3469:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetGraphicsDisplayMode() */
 1338              		.loc 1 3469 0
 1339 006c 1EFF2FE1 		bx	lr
 1340              	.LVL101:
 1341              	.L108:
 1342 0070 0030A0E3 		mov	r3, #0
 1343              	.L103:
 1344              	.LVL102:
3426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 1345              		.loc 1 3426 0
 1346 0074 020053E3 		cmp	r3, #2
 1347 0078 1E00008A 		bhi	.L109
3428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 1348              		.loc 1 3428 0
 1349 007c D32091E1 		ldrsb	r2, [r1, r3]
 1350 0080 010072E3 		cmn	r2, #1
 1351 0084 1900000A 		beq	.L102
3420:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                               graphics_id;
 1352              		.loc 1 3420 0
 1353 0088 10402DE9 		push	{r4, lr}
 1354              		.cfi_def_cfa_offset 8
 1355              		.cfi_offset 4, -8
 1356              		.cfi_offset 14, -4
 1357              	.LVL103:
 1358              	.L101:
3433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1359              		.loc 1 3433 0
 1360 008c 000000E3 		movw	r0, #:lower16:vdc_regaddr_img_synthesizer
 1361 0090 000040E3 		movt	r0, #:upper16:vdc_regaddr_img_synthesizer
 1362 0094 5820A0E3 		mov	r2, #88
 1363 0098 920302E0 		mul	r2, r2, r3
 1364 009c 02C080E0 		add	ip, r0, r2
 1365 00a0 20C09CE5 		ldr	ip, [ip, #32]
 1366 00a4 00E09CE5 		ldr	lr, [ip]
 1367 00a8 03E0CEE3 		bic	lr, lr, #3
 1368 00ac 00E08CE5 		str	lr, [ip]
3436:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1369              		.loc 1 3436 0
 1370 00b0 00E09CE5 		ldr	lr, [ip]
 1371 00b4 D34091E1 		ldrsb	r4, [r1, r3]
 1372 00b8 04E08EE1 		orr	lr, lr, r4
 1373 00bc 00E08CE5 		str	lr, [ip]
3440:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 1374              		.loc 1 3440 0
 1375 00c0 020090E7 		ldr	r0, [r0, r2]
 1376 00c4 002090E5 		ldr	r2, [r0]
 1377 00c8 102082E3 		orr	r2, r2, #16
 1378 00cc 002080E5 		str	r2, [r0]
 1379              	.LVL104:
 1380              	.L95:
3426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 1381              		.loc 1 3426 0 discriminator 2
 1382 00d0 013083E2 		add	r3, r3, #1
 1383              	.LVL105:
 1384 00d4 020053E3 		cmp	r3, #2
 1385 00d8 0300008A 		bhi	.L110
3428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 1386              		.loc 1 3428 0
 1387 00dc D32091E1 		ldrsb	r2, [r1, r3]
 1388 00e0 010072E3 		cmn	r2, #1
 1389 00e4 E8FFFF1A 		bne	.L101
 1390 00e8 F8FFFFEA 		b	.L95
 1391              	.L110:
 1392 00ec 1080BDE8 		pop	{r4, pc}
 1393              	.LVL106:
 1394              	.L102:
 1395              		.cfi_def_cfa_offset 0
 1396              		.cfi_restore 4
 1397              		.cfi_restore 14
3426:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 1398              		.loc 1 3426 0
 1399 00f0 013083E2 		add	r3, r3, #1
 1400              	.LVL107:
 1401 00f4 DEFFFFEA 		b	.L103
 1402              	.L109:
 1403 00f8 1EFF2FE1 		bx	lr
 1404              		.cfi_endproc
 1405              	.LFE46:
 1407              		.section	.text.SetColorMatrix,"ax",%progbits
 1408              		.align	2
 1409              		.syntax unified
 1410              		.arm
 1411              		.fpu neon
 1413              	SetColorMatrix:
 1414              	.LFB47:
3470:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3471:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3472:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetColorMatrix
3473:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets color matrix
3474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   mtx_mode                : Operating mode
3475:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   offset                  : Offset (DC) adjustment of Y/G, B, and R signal
3476:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gain                    : GG, GB, GR, BG, BB, BR, RG, RB, and RR signal gain adjust
3477:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_matrix            : Color matrix registers
3478:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3479:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3480:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetColorMatrix ( 
3481:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_colormtx_mode_t                   mtx_mode,
3482:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t                      * const offset,
3483:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint16_t                      * const gain,
3484:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_color_matrix_t    * const color_matrix)
3485:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1415              		.loc 1 3485 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL108:
 1420 0000 04E02DE5 		str	lr, [sp, #-4]!
 1421              		.cfi_def_cfa_offset 4
 1422              		.cfi_offset 14, -4
3486:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Operating mode */
3487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_mode)) = (uint32_t)mtx_mode;
 1423              		.loc 1 3487 0
 1424 0004 04C093E5 		ldr	ip, [r3, #4]
 1425 0008 00008CE5 		str	r0, [ip]
3488:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3489:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Offset (DC) adjustment of Y/G, B, and R signal and
3490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        GG, GB, GR, BG, BB, BR, RG, RB, and RR signal gain adjustment */
3491:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_yg_adj0))  = (uint32_t)(offset[VDC_COLORMTX_OFFST_YG] << VDC_REG_SHIFT_16)
 1426              		.loc 1 3491 0
 1427 000c 08C093E5 		ldr	ip, [r3, #8]
 1428 0010 B000D1E1 		ldrh	r0, [r1]
 1429              	.LVL109:
 1430 0014 0008A0E1 		lsl	r0, r0, #16
 1431 0018 00008CE5 		str	r0, [ip]
3492:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3494:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_yg_adj0))   |= (uint32_t)gain[VDC_COLORMTX_GAIN_GG];
 1432              		.loc 1 3494 0
 1433 001c 08C093E5 		ldr	ip, [r3, #8]
 1434 0020 00009CE5 		ldr	r0, [ip]
 1435 0024 B0E0D2E1 		ldrh	lr, [r2]
 1436 0028 0E0080E1 		orr	r0, r0, lr
 1437 002c 00008CE5 		str	r0, [ip]
3495:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3496:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3497:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_yg_adj1))    = (uint32_t)(gain[VDC_COLORMTX_GAIN_GB] << VDC_REG_SHIFT_16);
 1438              		.loc 1 3497 0
 1439 0030 0CC093E5 		ldr	ip, [r3, #12]
 1440 0034 B200D2E1 		ldrh	r0, [r2, #2]
 1441 0038 0008A0E1 		lsl	r0, r0, #16
 1442 003c 00008CE5 		str	r0, [ip]
3498:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3499:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3500:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_yg_adj1))   |= (uint32_t)gain[VDC_COLORMTX_GAIN_GR];
 1443              		.loc 1 3500 0
 1444 0040 0CC093E5 		ldr	ip, [r3, #12]
 1445 0044 00009CE5 		ldr	r0, [ip]
 1446 0048 B4E0D2E1 		ldrh	lr, [r2, #4]
 1447 004c 0E0080E1 		orr	r0, r0, lr
 1448 0050 00008CE5 		str	r0, [ip]
3501:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3502:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3503:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_cbb_adj0))   = (uint32_t)(offset[VDC_COLORMTX_OFFST_B] << VDC_REG_SHIFT_16
 1449              		.loc 1 3503 0
 1450 0054 10C093E5 		ldr	ip, [r3, #16]
 1451 0058 B200D1E1 		ldrh	r0, [r1, #2]
 1452 005c 0008A0E1 		lsl	r0, r0, #16
 1453 0060 00008CE5 		str	r0, [ip]
3504:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3505:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3506:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_cbb_adj0))  |= (uint32_t)gain[VDC_COLORMTX_GAIN_BG];
 1454              		.loc 1 3506 0
 1455 0064 10C093E5 		ldr	ip, [r3, #16]
 1456 0068 00009CE5 		ldr	r0, [ip]
 1457 006c B6E0D2E1 		ldrh	lr, [r2, #6]
 1458 0070 0E0080E1 		orr	r0, r0, lr
 1459 0074 00008CE5 		str	r0, [ip]
3507:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3508:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3509:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_cbb_adj1))   = (uint32_t)(gain[VDC_COLORMTX_GAIN_BB] << VDC_REG_SHIFT_16);
 1460              		.loc 1 3509 0
 1461 0078 14C093E5 		ldr	ip, [r3, #20]
 1462 007c B800D2E1 		ldrh	r0, [r2, #8]
 1463 0080 0008A0E1 		lsl	r0, r0, #16
 1464 0084 00008CE5 		str	r0, [ip]
3510:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3511:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3512:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_cbb_adj1))  |= (uint32_t)gain[VDC_COLORMTX_GAIN_BR];
 1465              		.loc 1 3512 0
 1466 0088 14C093E5 		ldr	ip, [r3, #20]
 1467 008c 00009CE5 		ldr	r0, [ip]
 1468 0090 BAE0D2E1 		ldrh	lr, [r2, #10]
 1469 0094 0E0080E1 		orr	r0, r0, lr
 1470 0098 00008CE5 		str	r0, [ip]
3513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3514:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3515:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_crr_adj0))   = (uint32_t)(offset[VDC_COLORMTX_OFFST_R] << VDC_REG_SHIFT_16
 1471              		.loc 1 3515 0
 1472 009c 180093E5 		ldr	r0, [r3, #24]
 1473 00a0 B410D1E1 		ldrh	r1, [r1, #4]
 1474              	.LVL110:
 1475 00a4 0118A0E1 		lsl	r1, r1, #16
 1476 00a8 001080E5 		str	r1, [r0]
3516:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3517:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_crr_adj0))  |= (uint32_t)gain[VDC_COLORMTX_GAIN_RG];
 1477              		.loc 1 3518 0
 1478 00ac 180093E5 		ldr	r0, [r3, #24]
 1479 00b0 001090E5 		ldr	r1, [r0]
 1480 00b4 BCC0D2E1 		ldrh	ip, [r2, #12]
 1481 00b8 0C1081E1 		orr	r1, r1, ip
 1482 00bc 001080E5 		str	r1, [r0]
3519:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3520:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3521:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_crr_adj1))   = (uint32_t)(gain[VDC_COLORMTX_GAIN_RB] << VDC_REG_SHIFT_16);
 1483              		.loc 1 3521 0
 1484 00c0 1C0093E5 		ldr	r0, [r3, #28]
 1485 00c4 BE10D2E1 		ldrh	r1, [r2, #14]
 1486 00c8 0118A0E1 		lsl	r1, r1, #16
 1487 00cc 001080E5 		str	r1, [r0]
3522:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3523:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3524:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_crr_adj1))  |= (uint32_t)gain[VDC_COLORMTX_GAIN_RR];
 1488              		.loc 1 3524 0
 1489 00d0 1C0093E5 		ldr	r0, [r3, #28]
 1490 00d4 001090E5 		ldr	r1, [r0]
 1491 00d8 B021D2E1 		ldrh	r2, [r2, #16]
 1492              	.LVL111:
 1493 00dc 022081E1 		orr	r2, r1, r2
 1494 00e0 002080E5 		str	r2, [r0]
3525:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3526:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Register update control register (IMGCNT_UPDATE/ADJx_UPDATE)
3527:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****        b0       IMGCNT_VEN/ADJx_VEN */
3528:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(color_matrix->mtx_update)) |= (uint32_t)VDC_REG_BIT0;
 1495              		.loc 1 3528 0
 1496 00e4 002093E5 		ldr	r2, [r3]
 1497 00e8 003092E5 		ldr	r3, [r2]
 1498              	.LVL112:
 1499 00ec 013083E3 		orr	r3, r3, #1
 1500 00f0 003082E5 		str	r3, [r2]
 1501 00f4 04F09DE4 		ldr	pc, [sp], #4
 1502              		.cfi_endproc
 1503              	.LFE47:
 1505              		.section	.text.SetImgQaImproverColorMtx,"ax",%progbits
 1506              		.align	2
 1507              		.syntax unified
 1508              		.arm
 1509              		.fpu neon
 1511              	SetImgQaImproverColorMtx:
 1512              	.LFB40:
3162:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_colormtx_mode_t    mtx_mode_tmp;
 1513              		.loc 1 3162 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              	.LVL113:
 1518 0000 10402DE9 		push	{r4, lr}
 1519              		.cfi_def_cfa_offset 8
 1520              		.cfi_offset 4, -8
 1521              		.cfi_offset 14, -4
3168:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 1522              		.loc 1 3168 0
 1523 0004 000050E3 		cmp	r0, #0
3174:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 1524              		.loc 1 3174 0
 1525 0008 0200A013 		movne	r0, #2
 1526              	.LVL114:
 1527              	.L114:
3181:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1528              		.loc 1 3181 0
 1529 000c 002000E3 		movw	r2, #:lower16:.LANCHOR1
 1530 0010 002040E3 		movt	r2, #:upper16:.LANCHOR1
 1531 0014 8031A0E1 		lsl	r3, r0, #3
 1532 0018 003083E0 		add	r3, r3, r0
 1533 001c 8310A0E1 		lsl	r1, r3, #1
 1534              	.LVL115:
3183:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 1535              		.loc 1 3183 0
 1536 0020 10309FE5 		ldr	r3, .L117
 1537 0024 012082E0 		add	r2, r2, r1
 1538              	.LVL116:
 1539 0028 001000E3 		movw	r1, #:lower16:.LANCHOR2
 1540 002c 001040E3 		movt	r1, #:upper16:.LANCHOR2
 1541 0030 FEFFFFEB 		bl	SetColorMatrix
 1542              	.LVL117:
 1543 0034 1080BDE8 		pop	{r4, pc}
 1544              	.L118:
 1545              		.align	2
 1546              	.L117:
 1547 0038 20000000 		.word	vdc_regaddr_color_matrix+32
 1548              		.cfi_endproc
 1549              	.LFE40:
 1551              		.section	.text.SetImageEnhancementSharpness,"ax",%progbits
 1552              		.align	2
 1553              		.syntax unified
 1554              		.arm
 1555              		.fpu neon
 1557              	SetImageEnhancementSharpness:
 1558              	.LFB48:
3529:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3530:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetColorMatrix() */
3531:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3532:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3533:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetImageEnhancementSharpness
3534:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets sharpness
3535:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   shp_h_on                : Sharpness ON/OFF setting
3536:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   sharp_param             : Sharpness ON/OFF setting
3537:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   img_qlty_imp            : Image quality improver registers
3538:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3539:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImageEnhancementSharpness ( 
3541:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                          shp_h_on,
3542:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_sharp_t          * const sharp_param,
3543:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t   * const img_qlty_imp)
3544:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1559              		.loc 1 3544 0
 1560              		.cfi_startproc
 1561              		@ args = 0, pretend = 0, frame = 0
 1562              		@ frame_needed = 0, uses_anonymous_args = 0
 1563              	.LVL118:
 1564 0000 04E02DE5 		str	lr, [sp, #-4]!
 1565              		.cfi_def_cfa_offset 4
 1566              		.cfi_offset 14, -4
3545:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_sharpness_ctrl_t * sharpness_ctrl;
3546:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3547:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
3548:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (sharp_param != NULL)
 1567              		.loc 1 3548 0
 1568 0004 000051E3 		cmp	r1, #0
 1569 0008 4F00000A 		beq	.L120
 1570              	.LVL119:
3549:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3550:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* H1, adjacent pixel used as reference */
3551:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         sharpness_ctrl = &sharp_param->hrz_sharp[VDC_IMGENH_SHARP_H1];
3552:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3553:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Active sharpness range */
3554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp1)) &= (uint32_t)~VDC_REG_MASK_0X0000003F;
 1571              		.loc 1 3554 0
 1572 000c 14C092E5 		ldr	ip, [r2, #20]
 1573 0010 00309CE5 		ldr	r3, [ip]
 1574 0014 3F30C3E3 		bic	r3, r3, #63
 1575 0018 00308CE5 		str	r3, [ip]
3555:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3556:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3557:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp1)) |= (uint32_t)sharpness_ctrl->shp_core;
 1576              		.loc 1 3557 0
 1577 001c 14C092E5 		ldr	ip, [r2, #20]
 1578 0020 00309CE5 		ldr	r3, [ip]
 1579 0024 05E0D1E5 		ldrb	lr, [r1, #5]	@ zero_extendqisi2
 1580 0028 0E3083E1 		orr	r3, r3, lr
 1581 002c 00308CE5 		str	r3, [ip]
3558:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3559:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sharpness correction value clipping and sharpness edge amplitude value gain */
3560:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp2))  = (uint32_t)(sharpness_ctrl->shp_clip_o << VDC_REG_SHIFT_2
 1582              		.loc 1 3560 0
 1583 0030 18C092E5 		ldr	ip, [r2, #24]
 1584 0034 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1585 0038 033CA0E1 		lsl	r3, r3, #24
 1586 003c 00308CE5 		str	r3, [ip]
3561:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3562:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3563:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp2)) |= (uint32_t)(sharpness_ctrl->shp_clip_u << VDC_REG_SHIFT_1
 1587              		.loc 1 3563 0
 1588 0040 18C092E5 		ldr	ip, [r2, #24]
 1589 0044 00309CE5 		ldr	r3, [ip]
 1590 0048 02E0D1E5 		ldrb	lr, [r1, #2]	@ zero_extendqisi2
 1591 004c 0E3883E1 		orr	r3, r3, lr, lsl #16
 1592 0050 00308CE5 		str	r3, [ip]
3564:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3565:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3566:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp2)) |= (uint32_t)(sharpness_ctrl->shp_gain_o << VDC_REG_SHIFT_8
 1593              		.loc 1 3566 0
 1594 0054 18C092E5 		ldr	ip, [r2, #24]
 1595 0058 00309CE5 		ldr	r3, [ip]
 1596 005c 03E0D1E5 		ldrb	lr, [r1, #3]	@ zero_extendqisi2
 1597 0060 0E3483E1 		orr	r3, r3, lr, lsl #8
 1598 0064 00308CE5 		str	r3, [ip]
3567:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3568:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3569:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp2)) |= (uint32_t)sharpness_ctrl->shp_gain_u;
 1599              		.loc 1 3569 0
 1600 0068 18C092E5 		ldr	ip, [r2, #24]
 1601 006c 00309CE5 		ldr	r3, [ip]
 1602 0070 04E0D1E5 		ldrb	lr, [r1, #4]	@ zero_extendqisi2
 1603 0074 0E3083E1 		orr	r3, r3, lr
 1604 0078 00308CE5 		str	r3, [ip]
 1605              	.LVL120:
3570:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3571:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* H2, second adjacent pixel used as reference */
3572:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         sharpness_ctrl = &sharp_param->hrz_sharp[VDC_IMGENH_SHARP_H2];
3573:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3574:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LPF selection for folding prevention before H2 edge detection */
3575:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (sharp_param->shp_h2_lpf_sel == VDC_OFF)
 1606              		.loc 1 3575 0
 1607 007c 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2
 1608 0080 000053E3 		cmp	r3, #0
 1609 0084 3700001A 		bne	.L121
3576:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3577:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3578:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_shp3)) = (uint32_t)0x00000000u;
 1610              		.loc 1 3578 0
 1611 0088 1C3092E5 		ldr	r3, [r2, #28]
 1612 008c 00C0A0E3 		mov	ip, #0
 1613 0090 00C083E5 		str	ip, [r3]
 1614              	.L122:
3579:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3580:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
3581:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3582:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_shp3)) = (uint32_t)VDC_REG_BIT16;
3584:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3585:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3586:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Active sharpness range */
3587:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp3)) |= (uint32_t)sharpness_ctrl->shp_core;
 1615              		.loc 1 3587 0
 1616 0094 1CC092E5 		ldr	ip, [r2, #28]
 1617 0098 00309CE5 		ldr	r3, [ip]
 1618 009c 0AE0D1E5 		ldrb	lr, [r1, #10]	@ zero_extendqisi2
 1619 00a0 0E3083E1 		orr	r3, r3, lr
 1620 00a4 00308CE5 		str	r3, [ip]
3588:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3589:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sharpness correction value clipping and sharpness edge amplitude value gain */
3590:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp4))  = (uint32_t)(sharpness_ctrl->shp_clip_o << VDC_REG_SHIFT_2
 1621              		.loc 1 3590 0
 1622 00a8 20C092E5 		ldr	ip, [r2, #32]
 1623 00ac 0630D1E5 		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 1624 00b0 033CA0E1 		lsl	r3, r3, #24
 1625 00b4 00308CE5 		str	r3, [ip]
3591:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3592:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3593:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp4)) |= (uint32_t)(sharpness_ctrl->shp_clip_u << VDC_REG_SHIFT_1
 1626              		.loc 1 3593 0
 1627 00b8 20C092E5 		ldr	ip, [r2, #32]
 1628 00bc 00309CE5 		ldr	r3, [ip]
 1629 00c0 07E0D1E5 		ldrb	lr, [r1, #7]	@ zero_extendqisi2
 1630 00c4 0E3883E1 		orr	r3, r3, lr, lsl #16
 1631 00c8 00308CE5 		str	r3, [ip]
3594:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3595:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3596:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp4)) |= (uint32_t)(sharpness_ctrl->shp_gain_o << VDC_REG_SHIFT_8
 1632              		.loc 1 3596 0
 1633 00cc 20C092E5 		ldr	ip, [r2, #32]
 1634 00d0 00309CE5 		ldr	r3, [ip]
 1635 00d4 08E0D1E5 		ldrb	lr, [r1, #8]	@ zero_extendqisi2
 1636 00d8 0E3483E1 		orr	r3, r3, lr, lsl #8
 1637 00dc 00308CE5 		str	r3, [ip]
3597:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3598:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3599:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp4)) |= (uint32_t)sharpness_ctrl->shp_gain_u;
 1638              		.loc 1 3599 0
 1639 00e0 20C092E5 		ldr	ip, [r2, #32]
 1640 00e4 00309CE5 		ldr	r3, [ip]
 1641 00e8 09E0D1E5 		ldrb	lr, [r1, #9]	@ zero_extendqisi2
 1642 00ec 0E3083E1 		orr	r3, r3, lr
 1643 00f0 00308CE5 		str	r3, [ip]
 1644              	.LVL121:
3600:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3601:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* H3, third adjacent pixel used as reference */
3602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         sharpness_ctrl = &sharp_param->hrz_sharp[VDC_IMGENH_SHARP_H3];
3603:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3604:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Active sharpness range */
3605:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp5)) = (uint32_t)sharpness_ctrl->shp_core;
 1645              		.loc 1 3605 0
 1646 00f4 243092E5 		ldr	r3, [r2, #36]
 1647 00f8 0FC0D1E5 		ldrb	ip, [r1, #15]	@ zero_extendqisi2
 1648 00fc 00C083E5 		str	ip, [r3]
3606:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3607:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Sharpness correction value clipping and sharpness edge amplitude value gain */
3608:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp6))  = (uint32_t)(sharpness_ctrl->shp_clip_o << VDC_REG_SHIFT_2
 1649              		.loc 1 3608 0
 1650 0100 28C092E5 		ldr	ip, [r2, #40]
 1651 0104 0B30D1E5 		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 1652 0108 033CA0E1 		lsl	r3, r3, #24
 1653 010c 00308CE5 		str	r3, [ip]
3609:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3610:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3611:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp6)) |= (uint32_t)(sharpness_ctrl->shp_clip_u << VDC_REG_SHIFT_1
 1654              		.loc 1 3611 0
 1655 0110 28C092E5 		ldr	ip, [r2, #40]
 1656 0114 00309CE5 		ldr	r3, [ip]
 1657 0118 0CE0D1E5 		ldrb	lr, [r1, #12]	@ zero_extendqisi2
 1658 011c 0E3883E1 		orr	r3, r3, lr, lsl #16
 1659 0120 00308CE5 		str	r3, [ip]
3612:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3613:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3614:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp6)) |= (uint32_t)(sharpness_ctrl->shp_gain_o << VDC_REG_SHIFT_8
 1660              		.loc 1 3614 0
 1661 0124 28C092E5 		ldr	ip, [r2, #40]
 1662 0128 00309CE5 		ldr	r3, [ip]
 1663 012c 0DE0D1E5 		ldrb	lr, [r1, #13]	@ zero_extendqisi2
 1664 0130 0E3483E1 		orr	r3, r3, lr, lsl #8
 1665 0134 00308CE5 		str	r3, [ip]
3615:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3616:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3617:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp6)) |= (uint32_t)sharpness_ctrl->shp_gain_u;
 1666              		.loc 1 3617 0
 1667 0138 28C092E5 		ldr	ip, [r2, #40]
 1668 013c 00309CE5 		ldr	r3, [ip]
 1669 0140 0E10D1E5 		ldrb	r1, [r1, #14]	@ zero_extendqisi2
 1670              	.LVL122:
 1671 0144 013083E1 		orr	r3, r3, r1
 1672 0148 00308CE5 		str	r3, [ip]
 1673              	.LVL123:
 1674              	.L120:
3618:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3619:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3620:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (shp_h_on == VDC_OFF)
 1675              		.loc 1 3620 0
 1676 014c 000050E3 		cmp	r0, #0
 1677 0150 0800000A 		beq	.L126
3621:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3622:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp1)) &= (uint32_t)~VDC_REG_BIT16;
3624:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3625:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3626:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3627:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3628:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_shp1)) |= (uint32_t)VDC_REG_BIT16;
 1678              		.loc 1 3628 0
 1679 0154 142092E5 		ldr	r2, [r2, #20]
 1680              	.LVL124:
 1681 0158 003092E5 		ldr	r3, [r2]
 1682 015c 013883E3 		orr	r3, r3, #65536
 1683 0160 003082E5 		str	r3, [r2]
 1684 0164 04F09DE4 		ldr	pc, [sp], #4
 1685              	.LVL125:
 1686              	.L121:
3583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 1687              		.loc 1 3583 0
 1688 0168 1C3092E5 		ldr	r3, [r2, #28]
 1689 016c 01C8A0E3 		mov	ip, #65536
 1690 0170 00C083E5 		str	ip, [r3]
 1691 0174 C6FFFFEA 		b	.L122
 1692              	.LVL126:
 1693              	.L126:
3623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 1694              		.loc 1 3623 0
 1695 0178 142092E5 		ldr	r2, [r2, #20]
 1696              	.LVL127:
 1697 017c 003092E5 		ldr	r3, [r2]
 1698 0180 0138C3E3 		bic	r3, r3, #65536
 1699 0184 003082E5 		str	r3, [r2]
 1700 0188 04F09DE4 		ldr	pc, [sp], #4
 1701              		.cfi_endproc
 1702              	.LFE48:
 1704              		.section	.text.SetImageEnhancementLti,"ax",%progbits
 1705              		.align	2
 1706              		.syntax unified
 1707              		.arm
 1708              		.fpu neon
 1710              	SetImageEnhancementLti:
 1711              	.LFB49:
3629:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3630:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetImageEnhancementSharpness() */
3631:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3632:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetImageEnhancementLti
3634:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets LTI
3635:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lti_h_on                : LTI ON/OFF setting
3636:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   lti_param               : LTI setup parameter
3637:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   img_qlty_imp            : Image quality improver registers
3638:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3640:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetImageEnhancementLti ( 
3641:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_onoff_t                          lti_h_on,
3642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_enhance_lti_t            * const lti_param,
3643:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t   * const img_qlty_imp)
3644:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1712              		.loc 1 3644 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              	.LVL128:
 1717 0000 04E02DE5 		str	lr, [sp, #-4]!
 1718              		.cfi_def_cfa_offset 4
 1719              		.cfi_offset 14, -4
3645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lti_ctrl_t * lti_ctrl;
3646:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3647:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
3648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lti_param != NULL)
 1720              		.loc 1 3648 0
 1721 0004 000051E3 		cmp	r1, #0
 1722 0008 2900000A 		beq	.L128
 1723              	.LVL129:
3649:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3650:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* H2, second adjacent pixel used as reference */
3651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         lti_ctrl = &lti_param->lti[VDC_IMGENH_LTI1];
3652:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3653:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LPF selection for folding prevention before H2 edge detection */
3654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (lti_param->lti_h2_lpf_sel == VDC_OFF)
 1724              		.loc 1 3654 0
 1725 000c 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2
 1726 0010 000053E3 		cmp	r3, #0
 1727 0014 2D00001A 		bne	.L129
3655:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3656:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_lti1)) = (uint32_t)0x00000000u;
 1728              		.loc 1 3657 0
 1729 0018 2C3092E5 		ldr	r3, [r2, #44]
 1730 001c 00C0A0E3 		mov	ip, #0
 1731 0020 00C083E5 		str	ip, [r3]
 1732              	.L130:
3658:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3659:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
3660:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3661:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_lti1)) = (uint32_t)VDC_REG_BIT24;
3663:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3664:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3665:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Median filter LTI correction threshold */
3666:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti1)) |= (uint32_t)((uint32_t)lti_ctrl->lti_inc_zero << VDC_REG_S
 1733              		.loc 1 3666 0
 1734 0024 2CC092E5 		ldr	ip, [r2, #44]
 1735 0028 00309CE5 		ldr	r3, [ip]
 1736 002c 02E0D1E5 		ldrb	lr, [r1, #2]	@ zero_extendqisi2
 1737 0030 0E3883E1 		orr	r3, r3, lr, lsl #16
 1738 0034 00308CE5 		str	r3, [ip]
3667:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3668:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LTI edge amplitude value gain */
3669:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti1)) |= (uint32_t)((uint32_t)lti_ctrl->lti_gain << VDC_REG_SHIFT
 1739              		.loc 1 3669 0
 1740 0038 2CC092E5 		ldr	ip, [r2, #44]
 1741 003c 00309CE5 		ldr	r3, [ip]
 1742 0040 03E0D1E5 		ldrb	lr, [r1, #3]	@ zero_extendqisi2
 1743 0044 0E3483E1 		orr	r3, r3, lr, lsl #8
 1744 0048 00308CE5 		str	r3, [ip]
3670:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LTI coring (maximum core value of 255) */
3672:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti1)) |= (uint32_t)lti_ctrl->lti_core;
 1745              		.loc 1 3672 0
 1746 004c 2CC092E5 		ldr	ip, [r2, #44]
 1747 0050 00309CE5 		ldr	r3, [ip]
 1748 0054 04E0D1E5 		ldrb	lr, [r1, #4]	@ zero_extendqisi2
 1749 0058 0E3083E1 		orr	r3, r3, lr
 1750 005c 00308CE5 		str	r3, [ip]
 1751              	.LVL130:
3673:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3674:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* H4, fourth adjacent pixel used as reference */
3675:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         lti_ctrl = &lti_param->lti[VDC_IMGENH_LTI2];
3676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3677:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Median filter reference pixel select */
3678:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (lti_param->lti_h4_median_tap_sel == VDC_LTI_MDFIL_SEL_ADJ2)
 1752              		.loc 1 3678 0
 1753 0060 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1754 0064 000053E3 		cmp	r3, #0
 1755 0068 1C00001A 		bne	.L131
3679:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3680:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3681:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_lti2)) = (uint32_t)0x00000000u;
 1756              		.loc 1 3681 0
 1757 006c 303092E5 		ldr	r3, [r2, #48]
 1758 0070 00C0A0E3 		mov	ip, #0
 1759 0074 00C083E5 		str	ip, [r3]
 1760              	.L132:
3682:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3683:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         else
3684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3685:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3686:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_qlty_imp->adj_enh_lti2)) = (uint32_t)VDC_REG_BIT24;
3687:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3688:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3689:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Median filter LTI correction threshold */
3690:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti2)) |= (uint32_t)((uint32_t)lti_ctrl->lti_inc_zero << VDC_REG_S
 1761              		.loc 1 3690 0
 1762 0078 30C092E5 		ldr	ip, [r2, #48]
 1763 007c 00309CE5 		ldr	r3, [ip]
 1764 0080 05E0D1E5 		ldrb	lr, [r1, #5]	@ zero_extendqisi2
 1765 0084 0E3883E1 		orr	r3, r3, lr, lsl #16
 1766 0088 00308CE5 		str	r3, [ip]
3691:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3692:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LTI edge amplitude value gain */
3693:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti2)) |= (uint32_t)((uint32_t)lti_ctrl->lti_gain << VDC_REG_SHIFT
 1767              		.loc 1 3693 0
 1768 008c 30C092E5 		ldr	ip, [r2, #48]
 1769 0090 00309CE5 		ldr	r3, [ip]
 1770 0094 06E0D1E5 		ldrb	lr, [r1, #6]	@ zero_extendqisi2
 1771 0098 0E3483E1 		orr	r3, r3, lr, lsl #8
 1772 009c 00308CE5 		str	r3, [ip]
3694:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3695:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* LTI coring (maximum core value of 255) */
3696:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti2)) |= (uint32_t)lti_ctrl->lti_core;
 1773              		.loc 1 3696 0
 1774 00a0 30C092E5 		ldr	ip, [r2, #48]
 1775 00a4 00309CE5 		ldr	r3, [ip]
 1776 00a8 0710D1E5 		ldrb	r1, [r1, #7]	@ zero_extendqisi2
 1777              	.LVL131:
 1778 00ac 013083E1 		orr	r3, r3, r1
 1779 00b0 00308CE5 		str	r3, [ip]
 1780              	.LVL132:
 1781              	.L128:
3697:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3698:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3699:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (lti_h_on == VDC_OFF)
 1782              		.loc 1 3699 0
 1783 00b4 000050E3 		cmp	r0, #0
 1784 00b8 0C00000A 		beq	.L136
3700:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3701:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti1)) &= (uint32_t)~VDC_REG_BIT31;
3703:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3704:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     else
3705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3706:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3707:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_qlty_imp->adj_enh_lti1)) |= (uint32_t)VDC_REG_BIT31;
 1785              		.loc 1 3707 0
 1786 00bc 2C2092E5 		ldr	r2, [r2, #44]
 1787              	.LVL133:
 1788 00c0 003092E5 		ldr	r3, [r2]
 1789 00c4 023183E3 		orr	r3, r3, #-2147483648
 1790 00c8 003082E5 		str	r3, [r2]
 1791 00cc 04F09DE4 		ldr	pc, [sp], #4
 1792              	.LVL134:
 1793              	.L129:
3662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 1794              		.loc 1 3662 0
 1795 00d0 2C3092E5 		ldr	r3, [r2, #44]
 1796 00d4 01C4A0E3 		mov	ip, #16777216
 1797 00d8 00C083E5 		str	ip, [r3]
 1798 00dc D0FFFFEA 		b	.L130
 1799              	.LVL135:
 1800              	.L131:
3686:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 1801              		.loc 1 3686 0
 1802 00e0 303092E5 		ldr	r3, [r2, #48]
 1803 00e4 01C4A0E3 		mov	ip, #16777216
 1804 00e8 00C083E5 		str	ip, [r3]
 1805 00ec E1FFFFEA 		b	.L132
 1806              	.LVL136:
 1807              	.L136:
3702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 1808              		.loc 1 3702 0
 1809 00f0 2C2092E5 		ldr	r2, [r2, #44]
 1810              	.LVL137:
 1811 00f4 003092E5 		ldr	r3, [r2]
 1812 00f8 0231C3E3 		bic	r3, r3, #-2147483648
 1813 00fc 003082E5 		str	r3, [r2]
 1814 0100 04F09DE4 		ldr	pc, [sp], #4
 1815              		.cfi_endproc
 1816              	.LFE49:
 1818              		.section	.text.SetAlphaRectArea,"ax",%progbits
 1819              		.align	2
 1820              		.syntax unified
 1821              		.arm
 1822              		.fpu neon
 1824              	SetAlphaRectArea:
 1825              	.LFB50:
3708:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3709:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetImageEnhancementLti() */
3710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3711:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3712:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          SetAlphaRectArea
3713:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets alpha blending area of a rectangle
3714:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   pd_disp_rect        : Rectangular area for alpha blending
3715:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   img_synthesizer     : Image synthesizer registers
3716:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3717:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void SetAlphaRectArea ( 
3719:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_pd_disp_rect_t               * const pd_disp_rect,
3720:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t    * const img_synthesizer)
3721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1826              		.loc 1 3721 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830              	.LVL138:
3722:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t v_start;
3723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t h_start;
3724:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
3726:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (pd_disp_rect != NULL)
 1831              		.loc 1 3726 0
 1832 0000 000050E3 		cmp	r0, #0
 1833 0004 1EFF2F01 		bxeq	lr
3721:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t v_start;
 1834              		.loc 1 3721 0
 1835 0008 04E02DE5 		str	lr, [sp, #-4]!
 1836              		.cfi_def_cfa_offset 4
 1837              		.cfi_offset 14, -4
3727:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3728:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         v_start = (*(img_synthesizer->gr_ab2)) >> VDC_REG_SHIFT_16;
 1838              		.loc 1 3728 0
 1839 000c 243091E5 		ldr	r3, [r1, #36]
 1840 0010 003093E5 		ldr	r3, [r3]
 1841              	.LVL139:
3729:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         h_start = (*(img_synthesizer->gr_ab3)) >> VDC_REG_SHIFT_16;
 1842              		.loc 1 3729 0
 1843 0014 282091E5 		ldr	r2, [r1, #40]
 1844 0018 00C092E5 		ldr	ip, [r2]
 1845              	.LVL140:
3730:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3731:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3732:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         v_start += (uint32_t)pd_disp_rect->vs_rel;
 1846              		.loc 1 3732 0
 1847 001c B020D0E1 		ldrh	r2, [r0]
 1848 0020 232882E0 		add	r2, r2, r3, lsr #16
 1849              	.LVL141:
3733:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3734:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         h_start += (uint32_t)pd_disp_rect->hs_rel;
 1850              		.loc 1 3735 0
 1851 0024 B430D0E1 		ldrh	r3, [r0, #4]
 1852 0028 2C3883E0 		add	r3, r3, ip, lsr #16
 1853              	.LVL142:
3736:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3737:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* If the start position exceeds the maximum bit width, the value should be saturated. */
3738:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((v_start & (uint32_t)~VDC_REG_MASK_0X000007FF) != 0u)
 1854              		.loc 1 3738 0
 1855 002c 7FCEC2E3 		bic	ip, r2, #2032
 1856 0030 0FC0CCE3 		bic	ip, ip, #15
 1857 0034 00005CE3 		cmp	ip, #0
3739:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3740:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             v_start = (uint32_t)VDC_REG_MASK_0X000007FF;
 1858              		.loc 1 3741 0
 1859 0038 FF270013 		movwne	r2, #2047
 1860              	.LVL143:
 1861              	.L139:
3742:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3743:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3744:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((h_start & (uint32_t)~VDC_REG_MASK_0X000007FF) != 0u)
 1862              		.loc 1 3745 0
 1863 003c 7FCEC3E3 		bic	ip, r3, #2032
 1864 0040 0FC0CCE3 		bic	ip, ip, #15
 1865 0044 00005CE3 		cmp	ip, #0
3746:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
3747:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3748:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             h_start = (uint32_t)VDC_REG_MASK_0X000007FF;
 1866              		.loc 1 3748 0
 1867 0048 FF370013 		movwne	r3, #2047
 1868              	.LVL144:
 1869              	.L140:
3749:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
3750:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3751:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3752:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab4)) = ((v_start << VDC_REG_SHIFT_16) | (uint32_t)pd_disp_rect->vw_
 1870              		.loc 1 3752 0
 1871 004c 2CE091E5 		ldr	lr, [r1, #44]
 1872 0050 B2C0D0E1 		ldrh	ip, [r0, #2]
 1873 0054 02288CE1 		orr	r2, ip, r2, lsl #16
 1874              	.LVL145:
 1875 0058 00208EE5 		str	r2, [lr]
3753:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3754:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3755:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab5)) = ((h_start << VDC_REG_SHIFT_16) | (uint32_t)pd_disp_rect->hw_
 1876              		.loc 1 3755 0
 1877 005c 301091E5 		ldr	r1, [r1, #48]
 1878              	.LVL146:
 1879 0060 B620D0E1 		ldrh	r2, [r0, #6]
 1880 0064 033882E1 		orr	r3, r2, r3, lsl #16
 1881              	.LVL147:
 1882 0068 003081E5 		str	r3, [r1]
 1883 006c 04F09DE4 		ldr	pc, [sp], #4
 1884              		.cfi_endproc
 1885              	.LFE50:
 1887              		.section	.text.ColorConversionFrom4to8,"ax",%progbits
 1888              		.align	2
 1889              		.syntax unified
 1890              		.arm
 1891              		.fpu neon
 1893              	ColorConversionFrom4to8:
 1894              	.LFB52:
3756:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3757:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetAlphaRectArea() */
3758:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3759:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3760:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ColorConversion
3761:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Converts the color format from gr_format format into 24-bit RGB888 format
3762:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gr_format           : Color format
3763:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   input_color         : Color data
3764:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      RGB888 color data
3765:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3766:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversion  
3767:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (const vdc_gr_format_t gr_format, const uint32_t input_color)
3768:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
3769:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t red;
3770:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t green;
3771:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t blue;
3772:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t conv_color;
3773:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3774:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     conv_color = 0;
3775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     switch (gr_format)
3776:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3777:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGB565:
3778:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3780:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             red   = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_RGB565_R_MASK) >> VDC
3781:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             green = ColorConversionFrom6to8((uint32_t)((input_color & VDC_REG_RGB565_G_MASK) >> VDC
3784:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             blue  = ColorConversionFrom5to8((uint32_t)(input_color & VDC_REG_RGB565_B_MASK));
3787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
3788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3789:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGB888:
3790:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ColorConversionIntoAgbr(input_color);
3791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3792:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB1555:
3793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3794:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             red   = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_ARGB1555_R_MASK) >> V
3796:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3797:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             green = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_ARGB1555_G_MASK) >> V
3799:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3800:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             blue  = ColorConversionFrom5to8((uint32_t)(input_color & VDC_REG_ARGB1555_B_MASK));
3802:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
3803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB4444:
3805:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3806:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             red   = ColorConversionFrom4to8((uint32_t)((input_color & VDC_REG_ARGB4444_R_MASK) >> V
3808:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3810:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             green = ColorConversionFrom4to8((uint32_t)((input_color & VDC_REG_ARGB4444_G_MASK) >> V
3811:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             blue  = ColorConversionFrom4to8((uint32_t)(input_color & VDC_REG_ARGB4444_B_MASK));
3814:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
3815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3816:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB8888:
3817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3818:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3819:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ColorConversionIntoAgbr((uint32_t)(input_color & VDC_REG_RGB_24BIT_MASK));
3820:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGBA5551:
3822:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3823:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             red   = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_RGBA5551_R_MASK) >> V
3825:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3826:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             green = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_RGBA5551_G_MASK) >> V
3828:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3829:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3830:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             blue  = ColorConversionFrom5to8((uint32_t)((input_color & VDC_REG_RGBA5551_B_MASK) >> V
3831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
3832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3833:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGBA8888:
3834:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3835:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3836:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color= ColorConversionIntoAgbr
3837:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3838:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
3839:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             ((uint32_t)((input_color >> VDC_REG_SHIFT_8) & VDC_REG_RGB_24BIT_MASK));
3840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3841:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         default:
3842:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3843:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* DO NOTHING */
3844:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
3845:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3846:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return conv_color;
3847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ColorConversion() */
3848:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3849:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3850:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ColorConversionFrom4to8
3851:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Converts the color data from 4 bits value into 8 bits value
3852:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_value         : 4-bit color data
3853:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      8-bit color data
3854:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3855:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom4to8 (const uint32_t color_value) 
3856:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1895              		.loc 1 3856 0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 0
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 1899              		@ link register save eliminated.
 1900              	.LVL148:
3857:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t color;
3858:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3859:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3860:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color = color_value & (uint32_t)VDC_REG_COLOR_4BIT_MASK;
 1901              		.loc 1 3860 0
 1902 0000 0F0000E2 		and	r0, r0, #15
 1903              	.LVL149:
3861:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3862:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3863:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color *= (uint32_t)VDC_REG_EXTENSION_VALUE_17;
3864:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3865:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return color;
3866:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ColorConversionFrom4to8() */
 1904              		.loc 1 3866 0
 1905 0004 000280E0 		add	r0, r0, r0, lsl #4
 1906              	.LVL150:
 1907 0008 1EFF2FE1 		bx	lr
 1908              		.cfi_endproc
 1909              	.LFE52:
 1911              		.section	.text.ColorConversionFrom5to8,"ax",%progbits
 1912              		.align	2
 1913              		.syntax unified
 1914              		.arm
 1915              		.fpu neon
 1917              	ColorConversionFrom5to8:
 1918              	.LFB53:
3867:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3868:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3869:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ColorConversionFrom5to8
3870:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Converts the color data from 5 bits value into 8 bits value
3871:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_value         : 5-bit color data
3872:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      8-bit color data
3873:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3874:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom5to8 (const uint32_t color_value) 
3875:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1919              		.loc 1 3875 0
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 0
 1922              		@ frame_needed = 0, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 1924              	.LVL151:
3876:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t color;
3877:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3879:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color = color_value & (uint32_t)VDC_REG_COLOR_5BIT_MASK;
 1925              		.loc 1 3879 0
 1926 0000 1F3000E2 		and	r3, r0, #31
 1927              	.LVL152:
3880:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3881:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3882:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color *= (uint32_t)(VDC_REG_EXTENSION_VALUE_263 * VDC_REG_ROUND_OFF_VALUE_2);
 1928              		.loc 1 3882 0
 1929 0004 0E0200E3 		movw	r0, #526
 1930              	.LVL153:
 1931 0008 900300E0 		mul	r0, r0, r3
 1932              	.LVL154:
3883:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3884:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color /= (uint32_t)VDC_REG_EXTENSION_VALUE_32;
 1933              		.loc 1 3885 0
 1934 000c A002A0E1 		lsr	r0, r0, #5
 1935              	.LVL155:
3886:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3887:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Round off */
3888:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color += (uint32_t)VDC_REG_ROUND_OFF_VALUE_1;
 1936              		.loc 1 3888 0
 1937 0010 010080E2 		add	r0, r0, #1
 1938              	.LVL156:
3889:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3890:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color /= (uint32_t)VDC_REG_ROUND_OFF_VALUE_2;
3892:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3893:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return color;
3894:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ColorConversionFrom5to8() */
 1939              		.loc 1 3894 0
 1940 0014 A000A0E1 		lsr	r0, r0, #1
 1941              	.LVL157:
 1942 0018 1EFF2FE1 		bx	lr
 1943              		.cfi_endproc
 1944              	.LFE53:
 1946              		.section	.text.ColorConversionFrom6to8,"ax",%progbits
 1947              		.align	2
 1948              		.syntax unified
 1949              		.arm
 1950              		.fpu neon
 1952              	ColorConversionFrom6to8:
 1953              	.LFB54:
3895:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3896:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3897:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ColorConversionFrom6to8
3898:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Converts the color data from 6 bits value into 8 bits value
3899:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_value         : 6-bit color data
3900:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      8-bit color data
3901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3902:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionFrom6to8 (const uint32_t color_value) 
3903:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1954              		.loc 1 3903 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		@ link register save eliminated.
 1959              	.LVL158:
3904:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t color;
3905:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3906:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3907:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color = color_value & (uint32_t)VDC_REG_COLOR_6BIT_MASK;
 1960              		.loc 1 3907 0
 1961 0000 3F3000E2 		and	r3, r0, #63
 1962              	.LVL159:
3908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3909:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3910:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color *= (uint32_t)(VDC_REG_EXTENSION_VALUE_259 * VDC_REG_ROUND_OFF_VALUE_2);
 1963              		.loc 1 3910 0
 1964 0004 060200E3 		movw	r0, #518
 1965              	.LVL160:
 1966 0008 900300E0 		mul	r0, r0, r3
 1967              	.LVL161:
3911:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3912:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3913:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color /= (uint32_t)VDC_REG_EXTENSION_VALUE_64;
 1968              		.loc 1 3913 0
 1969 000c 2003A0E1 		lsr	r0, r0, #6
 1970              	.LVL162:
3914:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3915:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Round off */
3916:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color += (uint32_t)VDC_REG_ROUND_OFF_VALUE_1;
 1971              		.loc 1 3916 0
 1972 0010 010080E2 		add	r0, r0, #1
 1973              	.LVL163:
3917:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3918:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3919:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color /= (uint32_t)VDC_REG_ROUND_OFF_VALUE_2;
3920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3921:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return color;
3922:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ColorConversionFrom6to8() */
 1974              		.loc 1 3922 0
 1975 0014 A000A0E1 		lsr	r0, r0, #1
 1976              	.LVL164:
 1977 0018 1EFF2FE1 		bx	lr
 1978              		.cfi_endproc
 1979              	.LFE54:
 1981              		.section	.text.ColorConversionIntoAgbr,"ax",%progbits
 1982              		.align	2
 1983              		.syntax unified
 1984              		.arm
 1985              		.fpu neon
 1987              	ColorConversionIntoAgbr:
 1988              	.LFB55:
3923:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3924:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3925:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          ColorConversionIntoAgbr
3926:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Converts the color data from ARGB8888 format into AGBR8888 format
3927:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   color_value         : ARGB8888 color data
3928:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      AGBR8888 color data
3929:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3930:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static uint32_t ColorConversionIntoAgbr (const uint32_t color_value) 
3931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 1989              		.loc 1 3931 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993              		@ link register save eliminated.
 1994              	.LVL165:
3932:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t color_bgr;
3933:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t color_dat;
3934:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3935:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Green and blue */
3936:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_bgr   = (uint32_t)(color_value << VDC_REG_SHIFT_8);
 1995              		.loc 1 3936 0
 1996 0000 0034A0E1 		lsl	r3, r0, #8
 1997              	.LVL166:
3937:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3938:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
3939:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_bgr  &= (uint32_t)VDC_REG_ARGB8888_GB_MASK;
 1998              		.loc 1 3939 0
 1999 0004 FF34C3E3 		bic	r3, r3, #-16777216
 2000              	.LVL167:
 2001 0008 FF30C3E3 		bic	r3, r3, #255
 2002              	.LVL168:
3940:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Alpha */
3942:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_dat   = (uint32_t)(color_value & VDC_REG_ALPHA_8BIT);
 2003              		.loc 1 3942 0
 2004 000c FF2400E2 		and	r2, r0, #-16777216
 2005              	.LVL169:
3943:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_bgr  |= color_dat;
 2006              		.loc 1 3943 0
 2007 0010 023083E1 		orr	r3, r3, r2
 2008              	.LVL170:
3944:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3945:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Red */
3946:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_dat   = (uint32_t)((color_value >> VDC_REG_SHIFT_16) & VDC_REG_COLOR_8BIT_MASK);
 2009              		.loc 1 3946 0
 2010 0014 5008E7E7 		ubfx	r0, r0, #16, #8
 2011              	.LVL171:
3947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_bgr  |= color_dat;
3948:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3949:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     return color_bgr;
3950:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function ColorConversionIntoAgbr() */
 2012              		.loc 1 3950 0
 2013 0018 000083E1 		orr	r0, r3, r0
 2014              	.LVL172:
 2015 001c 1EFF2FE1 		bx	lr
 2016              		.cfi_endproc
 2017              	.LFE55:
 2019              		.section	.text.ColorConversion,"ax",%progbits
 2020              		.align	2
 2021              		.syntax unified
 2022              		.arm
 2023              		.fpu neon
 2025              	ColorConversion:
 2026              	.LFB51:
3768:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t red;
 2027              		.loc 1 3768 0
 2028              		.cfi_startproc
 2029              		@ args = 0, pretend = 0, frame = 0
 2030              		@ frame_needed = 0, uses_anonymous_args = 0
 2031              	.LVL173:
 2032 0000 70402DE9 		push	{r4, r5, r6, lr}
 2033              		.cfi_def_cfa_offset 16
 2034              		.cfi_offset 4, -16
 2035              		.cfi_offset 5, -12
 2036              		.cfi_offset 6, -8
 2037              		.cfi_offset 14, -4
 2038 0004 0150A0E1 		mov	r5, r1
 2039              	.LVL174:
3775:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2040              		.loc 1 3775 0
 2041 0008 0B0050E3 		cmp	r0, #11
 2042 000c 00F19F97 		ldrls	pc, [pc, r0, asl #2]
 2043 0010 440000EA 		b	.L161
 2044              	.L154:
 2045 0014 44000000 		.word	.L153
 2046 0018 74000000 		.word	.L155
 2047 001c 80000000 		.word	.L156
 2048 0020 B0000000 		.word	.L157
 2049 0024 E0000000 		.word	.L158
 2050 0028 28010000 		.word	.L161
 2051 002c 28010000 		.word	.L161
 2052 0030 28010000 		.word	.L161
 2053 0034 28010000 		.word	.L161
 2054 0038 28010000 		.word	.L161
 2055 003c EC000000 		.word	.L159
 2056 0040 1C010000 		.word	.L160
 2057              	.L153:
3780:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2058              		.loc 1 3780 0
 2059 0044 D105E4E7 		ubfx	r0, r1, #11, #5
 2060              	.LVL175:
 2061 0048 FEFFFFEB 		bl	ColorConversionFrom5to8
 2062              	.LVL176:
 2063 004c 0040A0E1 		mov	r4, r0
 2064              	.LVL177:
3783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2065              		.loc 1 3783 0
 2066 0050 D502E5E7 		ubfx	r0, r5, #5, #6
 2067              	.LVL178:
 2068 0054 FEFFFFEB 		bl	ColorConversionFrom6to8
 2069              	.LVL179:
 2070 0058 0060A0E1 		mov	r6, r0
 2071              	.LVL180:
3786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
 2072              		.loc 1 3786 0
 2073 005c 1F0005E2 		and	r0, r5, #31
 2074              	.LVL181:
 2075 0060 FEFFFFEB 		bl	ColorConversionFrom5to8
 2076              	.LVL182:
3787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2077              		.loc 1 3787 0
 2078 0064 0004A0E1 		lsl	r0, r0, #8
 2079              	.LVL183:
 2080 0068 060880E1 		orr	r0, r0, r6, lsl #16
 2081 006c 000084E1 		orr	r0, r4, r0
 2082              	.LVL184:
3788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGB888:
 2083              		.loc 1 3788 0
 2084 0070 7080BDE8 		pop	{r4, r5, r6, pc}
 2085              	.LVL185:
 2086              	.L155:
3790:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2087              		.loc 1 3790 0
 2088 0074 0100A0E1 		mov	r0, r1
 2089              	.LVL186:
 2090 0078 FEFFFFEB 		bl	ColorConversionIntoAgbr
 2091              	.LVL187:
3791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB1555:
 2092              		.loc 1 3791 0
 2093 007c 7080BDE8 		pop	{r4, r5, r6, pc}
 2094              	.LVL188:
 2095              	.L156:
3795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2096              		.loc 1 3795 0
 2097 0080 5105E4E7 		ubfx	r0, r1, #10, #5
 2098              	.LVL189:
 2099 0084 FEFFFFEB 		bl	ColorConversionFrom5to8
 2100              	.LVL190:
 2101 0088 0040A0E1 		mov	r4, r0
 2102              	.LVL191:
3798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2103              		.loc 1 3798 0
 2104 008c D502E4E7 		ubfx	r0, r5, #5, #5
 2105              	.LVL192:
 2106 0090 FEFFFFEB 		bl	ColorConversionFrom5to8
 2107              	.LVL193:
 2108 0094 0060A0E1 		mov	r6, r0
 2109              	.LVL194:
3801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
 2110              		.loc 1 3801 0
 2111 0098 1F0005E2 		and	r0, r5, #31
 2112              	.LVL195:
 2113 009c FEFFFFEB 		bl	ColorConversionFrom5to8
 2114              	.LVL196:
3802:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2115              		.loc 1 3802 0
 2116 00a0 0004A0E1 		lsl	r0, r0, #8
 2117              	.LVL197:
 2118 00a4 060880E1 		orr	r0, r0, r6, lsl #16
 2119 00a8 000084E1 		orr	r0, r4, r0
 2120              	.LVL198:
3803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB4444:
 2121              		.loc 1 3803 0
 2122 00ac 7080BDE8 		pop	{r4, r5, r6, pc}
 2123              	.LVL199:
 2124              	.L157:
3807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2125              		.loc 1 3807 0
 2126 00b0 5104E3E7 		ubfx	r0, r1, #8, #4
 2127              	.LVL200:
 2128 00b4 FEFFFFEB 		bl	ColorConversionFrom4to8
 2129              	.LVL201:
 2130 00b8 0040A0E1 		mov	r4, r0
 2131              	.LVL202:
3810:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2132              		.loc 1 3810 0
 2133 00bc 5502E3E7 		ubfx	r0, r5, #4, #4
 2134              	.LVL203:
 2135 00c0 FEFFFFEB 		bl	ColorConversionFrom4to8
 2136              	.LVL204:
 2137 00c4 0060A0E1 		mov	r6, r0
 2138              	.LVL205:
3813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
 2139              		.loc 1 3813 0
 2140 00c8 0F0005E2 		and	r0, r5, #15
 2141              	.LVL206:
 2142 00cc FEFFFFEB 		bl	ColorConversionFrom4to8
 2143              	.LVL207:
3814:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2144              		.loc 1 3814 0
 2145 00d0 0004A0E1 		lsl	r0, r0, #8
 2146              	.LVL208:
 2147 00d4 060880E1 		orr	r0, r0, r6, lsl #16
 2148 00d8 000084E1 		orr	r0, r4, r0
 2149              	.LVL209:
3815:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_ARGB8888:
 2150              		.loc 1 3815 0
 2151 00dc 7080BDE8 		pop	{r4, r5, r6, pc}
 2152              	.LVL210:
 2153              	.L158:
3819:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2154              		.loc 1 3819 0
 2155 00e0 FF04C1E3 		bic	r0, r1, #-16777216
 2156              	.LVL211:
 2157 00e4 FEFFFFEB 		bl	ColorConversionIntoAgbr
 2158              	.LVL212:
3820:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGBA5551:
 2159              		.loc 1 3820 0
 2160 00e8 7080BDE8 		pop	{r4, r5, r6, pc}
 2161              	.LVL213:
 2162              	.L159:
3824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2163              		.loc 1 3824 0
 2164 00ec D105E4E7 		ubfx	r0, r1, #11, #5
 2165              	.LVL214:
 2166 00f0 FEFFFFEB 		bl	ColorConversionFrom5to8
 2167              	.LVL215:
 2168 00f4 0040A0E1 		mov	r4, r0
 2169              	.LVL216:
3827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2170              		.loc 1 3827 0
 2171 00f8 5503E4E7 		ubfx	r0, r5, #6, #5
 2172              	.LVL217:
 2173 00fc FEFFFFEB 		bl	ColorConversionFrom5to8
 2174              	.LVL218:
 2175 0100 0060A0E1 		mov	r6, r0
 2176              	.LVL219:
3830:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             conv_color = ((green << VDC_REG_SHIFT_16) | (blue << VDC_REG_SHIFT_8) | red);
 2177              		.loc 1 3830 0
 2178 0104 D500E4E7 		ubfx	r0, r5, #1, #5
 2179              	.LVL220:
 2180 0108 FEFFFFEB 		bl	ColorConversionFrom5to8
 2181              	.LVL221:
3831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         break;
 2182              		.loc 1 3831 0
 2183 010c 0004A0E1 		lsl	r0, r0, #8
 2184              	.LVL222:
 2185 0110 060880E1 		orr	r0, r0, r6, lsl #16
 2186 0114 000084E1 		orr	r0, r4, r0
 2187              	.LVL223:
3832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         case VDC_GR_FORMAT_RGBA8888:
 2188              		.loc 1 3832 0
 2189 0118 7080BDE8 		pop	{r4, r5, r6, pc}
 2190              	.LVL224:
 2191              	.L160:
3836:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2192              		.loc 1 3836 0
 2193 011c 2104A0E1 		lsr	r0, r1, #8
 2194              	.LVL225:
 2195 0120 FEFFFFEB 		bl	ColorConversionIntoAgbr
 2196              	.LVL226:
3840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         default:
 2197              		.loc 1 3840 0
 2198 0124 7080BDE8 		pop	{r4, r5, r6, pc}
 2199              	.LVL227:
 2200              	.L161:
3774:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     switch (gr_format)
 2201              		.loc 1 3774 0
 2202 0128 0000A0E3 		mov	r0, #0
 2203              	.LVL228:
3847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2204              		.loc 1 3847 0
 2205 012c 7080BDE8 		pop	{r4, r5, r6, pc}
 2206              		.cfi_endproc
 2207              	.LFE51:
 2209              		.section	.text.Set_Clut,"ax",%progbits
 2210              		.align	2
 2211              		.syntax unified
 2212              		.arm
 2213              		.fpu neon
 2215              	Set_Clut:
 2216              	.LFB56:
3951:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3952:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3953:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          Set_Clut
3954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets color lookup table (CLUT)
3955:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   param               : CLUT parameter
3956:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[out]  regaddr_clut        : CLUT register top address
3957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3958:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3959:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_Clut  
3960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (const vdc_clut_t * const param, volatile uint32_t * regaddr_clut)
3961:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 2217              		.loc 1 3961 0
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 0, uses_anonymous_args = 0
 2221              		@ link register save eliminated.
 2222              	.LVL229:
3962:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t            data_len;
3963:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const uint32_t    * clut_tmp;
3964:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3965:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     clut_tmp = param->clut;
 2223              		.loc 1 3965 0
 2224 0000 04C090E5 		ldr	ip, [r0, #4]
 2225              	.LVL230:
3966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (data_len = 0; data_len < param->color_num; data_len++)
 2226              		.loc 1 3966 0
 2227 0004 0030A0E3 		mov	r3, #0
 2228 0008 020000EA 		b	.L164
 2229              	.LVL231:
 2230              	.L165:
3967:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3968:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*regaddr_clut) = (*clut_tmp);
 2231              		.loc 1 3968 0 discriminator 3
 2232 000c 04209CE4 		ldr	r2, [ip], #4
 2233              	.LVL232:
 2234 0010 042081E4 		str	r2, [r1], #4
 2235              	.LVL233:
3966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (data_len = 0; data_len < param->color_num; data_len++)
 2236              		.loc 1 3966 0 discriminator 3
 2237 0014 013083E2 		add	r3, r3, #1
 2238              	.LVL234:
 2239              	.L164:
3966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (data_len = 0; data_len < param->color_num; data_len++)
 2240              		.loc 1 3966 0 is_stmt 0 discriminator 1
 2241 0018 002090E5 		ldr	r2, [r0]
 2242 001c 020053E1 		cmp	r3, r2
 2243 0020 F9FFFF3A 		bcc	.L165
3969:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         regaddr_clut++;
3970:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         clut_tmp++;
3971:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
3972:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function Set_Clut() */
 2244              		.loc 1 3972 0 is_stmt 1
 2245 0024 1EFF2FE1 		bx	lr
 2246              		.cfi_endproc
 2247              	.LFE56:
 2249              		.section	.text.Set_StartThreshold_Gamma,"ax",%progbits
 2250              		.align	2
 2251              		.syntax unified
 2252              		.arm
 2253              		.fpu neon
 2255              	Set_StartThreshold_Gamma:
 2256              	.LFB57:
3973:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3974:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
3975:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          Set_StartThreshold_Gamma
3976:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets start threshold for gamma correction
3977:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gam_th          : Start threshold of area 1 to 31
3978:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[out]  gam_area        : Gamma correction registers for start threshold
3979:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
3980:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
3981:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_StartThreshold_Gamma  
3982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (const uint8_t * gam_th, volatile uint32_t * const * const gam_area)
3983:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 2257              		.loc 1 3983 0
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 0
 2260              		@ frame_needed = 0, uses_anonymous_args = 0
 2261              	.LVL235:
3984:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t reg_index;
3985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3986:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
3987:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gam_th != NULL)
 2262              		.loc 1 3987 0
 2263 0000 000050E3 		cmp	r0, #0
 2264 0004 1EFF2F01 		bxeq	lr
3988:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
3989:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3990:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gam_area[0]))  = (uint32_t)((*gam_th) << VDC_REG_SHIFT_16);
 2265              		.loc 1 3990 0
 2266 0008 002091E5 		ldr	r2, [r1]
 2267 000c 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2
 2268 0010 0338A0E1 		lsl	r3, r3, #16
 2269 0014 003082E5 		str	r3, [r2]
 2270              	.LVL236:
3991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         gam_th++;
3992:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3993:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gam_area[0])) |= (uint32_t)((*gam_th) << VDC_REG_SHIFT_8);
 2271              		.loc 1 3994 0
 2272 0018 002091E5 		ldr	r2, [r1]
 2273 001c 003092E5 		ldr	r3, [r2]
 2274 0020 01C0D0E5 		ldrb	ip, [r0, #1]	@ zero_extendqisi2
 2275 0024 0C3483E1 		orr	r3, r3, ip, lsl #8
 2276 0028 003082E5 		str	r3, [r2]
 2277              	.LVL237:
3995:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         gam_th++;
3996:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
3997:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Cast to an appropriate type */
3998:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(gam_area[0])) |= (uint32_t)*gam_th;
 2278              		.loc 1 3998 0
 2279 002c 002091E5 		ldr	r2, [r1]
 2280 0030 003092E5 		ldr	r3, [r2]
 2281 0034 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 2282 0038 0C3083E1 		orr	r3, r3, ip
 2283 003c 003082E5 		str	r3, [r2]
3999:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         gam_th++;
 2284              		.loc 1 3999 0
 2285 0040 030080E2 		add	r0, r0, #3
 2286              	.LVL238:
4000:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4001:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (reg_index = 1; reg_index < VDC_GAM_AREA_REG_NUM; reg_index++)
 2287              		.loc 1 4001 0
 2288 0044 0130A0E3 		mov	r3, #1
 2289              	.LVL239:
 2290 0048 070053E3 		cmp	r3, #7
 2291 004c 1800008A 		bhi	.L174
3983:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t reg_index;
 2292              		.loc 1 3983 0
 2293 0050 04E02DE5 		str	lr, [sp, #-4]!
 2294              		.cfi_def_cfa_offset 4
 2295              		.cfi_offset 14, -4
 2296              	.L169:
4002:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
4003:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4004:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_area[reg_index]))  = (uint32_t)((*gam_th) << VDC_REG_SHIFT_24);
 2297              		.loc 1 4004 0 discriminator 3
 2298 0054 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2299 0058 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
 2300 005c 022CA0E1 		lsl	r2, r2, #24
 2301 0060 00208CE5 		str	r2, [ip]
 2302              	.LVL240:
4005:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_th++;
4006:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4007:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4008:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_area[reg_index])) |= (uint32_t)((*gam_th) << VDC_REG_SHIFT_16);
 2303              		.loc 1 4008 0 discriminator 3
 2304 0064 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2305 0068 00209CE5 		ldr	r2, [ip]
 2306 006c 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2
 2307 0070 0E2882E1 		orr	r2, r2, lr, lsl #16
 2308 0074 00208CE5 		str	r2, [ip]
 2309              	.LVL241:
4009:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_th++;
4010:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4011:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_area[reg_index])) |= (uint32_t)((*gam_th) << VDC_REG_SHIFT_8);
 2310              		.loc 1 4012 0 discriminator 3
 2311 0078 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2312 007c 00209CE5 		ldr	r2, [ip]
 2313 0080 02E0D0E5 		ldrb	lr, [r0, #2]	@ zero_extendqisi2
 2314 0084 0E2482E1 		orr	r2, r2, lr, lsl #8
 2315 0088 00208CE5 		str	r2, [ip]
 2316              	.LVL242:
4013:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_th++;
4014:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4016:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_area[reg_index])) |= (uint32_t)*gam_th;
 2317              		.loc 1 4016 0 discriminator 3
 2318 008c 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2319 0090 00209CE5 		ldr	r2, [ip]
 2320 0094 03E0D0E5 		ldrb	lr, [r0, #3]	@ zero_extendqisi2
 2321 0098 0E2082E1 		orr	r2, r2, lr
 2322 009c 00208CE5 		str	r2, [ip]
4017:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_th++;
 2323              		.loc 1 4017 0 discriminator 3
 2324 00a0 040080E2 		add	r0, r0, #4
 2325              	.LVL243:
4001:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 2326              		.loc 1 4001 0 discriminator 3
 2327 00a4 013083E2 		add	r3, r3, #1
 2328              	.LVL244:
 2329 00a8 070053E3 		cmp	r3, #7
 2330 00ac E8FFFF9A 		bls	.L169
 2331 00b0 04F09DE4 		ldr	pc, [sp], #4
 2332              	.L174:
 2333              		.cfi_def_cfa_offset 0
 2334              		.cfi_restore 14
 2335 00b4 1EFF2FE1 		bx	lr
 2336              		.cfi_endproc
 2337              	.LFE57:
 2339              		.section	.text.Set_GainAdjustment_Gamma,"ax",%progbits
 2340              		.align	2
 2341              		.syntax unified
 2342              		.arm
 2343              		.fpu neon
 2345              	Set_GainAdjustment_Gamma:
 2346              	.LFB58:
4018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
4019:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
4020:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function Set_StartThreshold_Gamma() */
4021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4022:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
4023:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          Set_GainAdjustment_Gamma
4024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Sets gain adjustment for gamma correction
4025:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   gam_gain        : Gain adjustment of area 0 to 31
4026:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[out]  gam_lut         : Gamma correction registers for gain adjustment
4027:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
4028:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
4029:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Set_GainAdjustment_Gamma  
4030:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (const uint16_t * gam_gain, volatile uint32_t * const * const gam_lut)
4031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 2347              		.loc 1 4031 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              	.LVL245:
4032:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t reg_index;
4033:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4034:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* NULL check */
4035:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gam_gain != NULL)
 2352              		.loc 1 4035 0
 2353 0000 000050E3 		cmp	r0, #0
 2354 0004 1100000A 		beq	.L184
 2355 0008 0030A0E3 		mov	r3, #0
 2356              	.LVL246:
4036:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
4037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         for (reg_index = 0; reg_index < VDC_GAM_LUT_REG_NUM; reg_index++)
 2357              		.loc 1 4037 0
 2358 000c 0F0053E3 		cmp	r3, #15
 2359 0010 0F00008A 		bhi	.L185
4031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t reg_index;
 2360              		.loc 1 4031 0
 2361 0014 04E02DE5 		str	lr, [sp, #-4]!
 2362              		.cfi_def_cfa_offset 4
 2363              		.cfi_offset 14, -4
 2364              	.L178:
4038:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
4039:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4040:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_lut[reg_index]))  = (uint32_t)((*gam_gain) << VDC_REG_SHIFT_16);
 2365              		.loc 1 4040 0 discriminator 3
 2366 0018 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2367 001c B020D0E1 		ldrh	r2, [r0]
 2368 0020 0228A0E1 		lsl	r2, r2, #16
 2369 0024 00208CE5 		str	r2, [ip]
 2370              	.LVL247:
4041:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_gain++;
4042:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4043:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             /* Cast to an appropriate type */
4044:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(gam_lut[reg_index])) |= (uint32_t)*gam_gain;
 2371              		.loc 1 4044 0 discriminator 3
 2372 0028 03C191E7 		ldr	ip, [r1, r3, lsl #2]
 2373 002c 00209CE5 		ldr	r2, [ip]
 2374 0030 B2E0D0E1 		ldrh	lr, [r0, #2]
 2375 0034 0E2082E1 		orr	r2, r2, lr
 2376 0038 00208CE5 		str	r2, [ip]
4045:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             gam_gain++;
 2377              		.loc 1 4045 0 discriminator 3
 2378 003c 040080E2 		add	r0, r0, #4
 2379              	.LVL248:
4037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 2380              		.loc 1 4037 0 discriminator 3
 2381 0040 013083E2 		add	r3, r3, #1
 2382              	.LVL249:
 2383 0044 0F0053E3 		cmp	r3, #15
 2384 0048 F2FFFF9A 		bls	.L178
 2385 004c 04F09DE4 		ldr	pc, [sp], #4
 2386              	.LVL250:
 2387              	.L184:
 2388              		.cfi_def_cfa_offset 0
 2389              		.cfi_restore 14
 2390 0050 1EFF2FE1 		bx	lr
 2391              	.LVL251:
 2392              	.L185:
 2393 0054 1EFF2FE1 		bx	lr
 2394              		.cfi_endproc
 2395              	.LFE58:
 2397              		.section	.text.Wait_200_usec,"ax",%progbits
 2398              		.align	2
 2399              		.syntax unified
 2400              		.arm
 2401              		.fpu neon
 2403              	Wait_200_usec:
 2404              	.LFB59:
4046:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
4047:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
4048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function Set_GainAdjustment_Gamma() */
4049:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4050:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** /**************************************************************************//**
4051:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @fn          Wait_200_usec
4052:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @brief       Waits for 200 usec
4053:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @param[in]   void
4054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****  * @retval      None
4055:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** ******************************************************************************/
4056:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** static void Wait_200_usec (void) 
4057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** {
 2405              		.loc 1 4057 0
 2406              		.cfi_startproc
 2407              		@ args = 0, pretend = 0, frame = 8
 2408              		@ frame_needed = 0, uses_anonymous_args = 0
 2409              		@ link register save eliminated.
 2410 0000 08D04DE2 		sub	sp, sp, #8
 2411              		.cfi_def_cfa_offset 8
4058:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t   counter;
4059:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
4060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Cast to an appropriate type */
4061:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (counter = 0; counter < (uint32_t)VDC_LVDS_PLL_WAIT_200USEC; counter++)
 2412              		.loc 1 4061 0
 2413 0004 0030A0E3 		mov	r3, #0
 2414 0008 04308DE5 		str	r3, [sp, #4]
 2415 000c 020000EA 		b	.L187
 2416              	.L188:
 2417              		.loc 1 4061 0 is_stmt 0 discriminator 3
 2418 0010 04309DE5 		ldr	r3, [sp, #4]
 2419 0014 013083E2 		add	r3, r3, #1
 2420 0018 04308DE5 		str	r3, [sp, #4]
 2421              	.L187:
 2422              		.loc 1 4061 0 discriminator 1
 2423 001c 04209DE5 		ldr	r2, [sp, #4]
 2424 0020 573403E3 		movw	r3, #13399
 2425 0024 030052E1 		cmp	r2, r3
 2426 0028 F8FFFF9A 		bls	.L188
4062:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
4063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         /* Wait for 200 usec. */
4064:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ;
4065:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
4066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function Wait_200_usec() */
 2427              		.loc 1 4066 0 is_stmt 1
 2428 002c 08D08DE2 		add	sp, sp, #8
 2429              		.cfi_def_cfa_offset 0
 2430              		@ sp needed
 2431 0030 1EFF2FE1 		bx	lr
 2432              		.cfi_endproc
 2433              	.LFE59:
 2435              		.section	.text.SetGrapicsBackgroundColor,"ax",%progbits
 2436              		.align	2
 2437              		.syntax unified
 2438              		.arm
 2439              		.fpu neon
 2441              	SetGrapicsBackgroundColor:
 2442              	.LFB23:
2270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                bg_color_tmp;
 2443              		.loc 1 2270 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 0
 2446              		@ frame_needed = 0, uses_anonymous_args = 0
 2447 0000 10402DE9 		push	{r4, lr}
 2448              		.cfi_def_cfa_offset 8
 2449              		.cfi_offset 4, -8
 2450              		.cfi_offset 14, -4
2277:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2451              		.loc 1 2277 0
 2452 0004 0000A0E3 		mov	r0, #0
 2453 0008 FEFFFFEB 		bl	VDC_ShrdPrmGetBgColor
 2454              	.LVL252:
2280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2455              		.loc 1 2280 0
 2456 000c FEFFFFEB 		bl	ColorConversionIntoAgbr
 2457              	.LVL253:
2283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2458              		.loc 1 2283 0
 2459 0010 FF04C0E3 		bic	r0, r0, #-16777216
 2460              	.LVL254:
2287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*bg_color_reg)   = bg_color_conv;
 2461              		.loc 1 2287 0
 2462 0014 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2463 0018 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2464 001c A42093E5 		ldr	r2, [r3, #164]
 2465              	.LVL255:
2288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2466              		.loc 1 2288 0
 2467 0020 000082E5 		str	r0, [r2]
2292:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2468              		.loc 1 2292 0
 2469 0024 581093E5 		ldr	r1, [r3, #88]
 2470              	.LVL256:
2295:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2471              		.loc 1 2295 0
 2472 0028 002091E5 		ldr	r2, [r1]
 2473              	.LVL257:
 2474 002c 102082E3 		orr	r2, r2, #16
 2475 0030 002081E5 		str	r2, [r1]
2298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*bg_color_reg)   = bg_color_conv;
 2476              		.loc 1 2298 0
 2477 0034 FC2093E5 		ldr	r2, [r3, #252]
 2478              	.LVL258:
2299:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2479              		.loc 1 2299 0
 2480 0038 000082E5 		str	r0, [r2]
2303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2481              		.loc 1 2303 0
 2482 003c B02093E5 		ldr	r2, [r3, #176]
 2483              	.LVL259:
2306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetGrapicsBackgroundColor() */
 2484              		.loc 1 2306 0
 2485 0040 003092E5 		ldr	r3, [r2]
 2486              	.LVL260:
 2487 0044 103083E3 		orr	r3, r3, #16
 2488 0048 003082E5 		str	r3, [r2]
 2489 004c 1080BDE8 		pop	{r4, pc}
 2490              		.cfi_endproc
 2491              	.LFE23:
 2493              		.section	.text.SetScalerBackgroundColor,"ax",%progbits
 2494              		.align	2
 2495              		.syntax unified
 2496              		.arm
 2497              		.fpu neon
 2499              	SetScalerBackgroundColor:
 2500              	.LFB24:
2319:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint32_t * scl0_update_reg;
 2501              		.loc 1 2319 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 0
 2504              		@ frame_needed = 0, uses_anonymous_args = 0
 2505              	.LVL261:
 2506 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 2507              		.cfi_def_cfa_offset 24
 2508              		.cfi_offset 4, -24
 2509              		.cfi_offset 5, -20
 2510              		.cfi_offset 6, -16
 2511              		.cfi_offset 7, -12
 2512              		.cfi_offset 8, -8
 2513              		.cfi_offset 14, -4
2327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     scl0_update_reg = vdc_regaddr_scaler.scl0_update;
 2514              		.loc 1 2327 0
 2515 0004 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 2516 0008 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 2517 000c 687093E5 		ldr	r7, [r3, #104]
 2518              	.LVL262:
2328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_base_reg     = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_base;
 2519              		.loc 1 2328 0
 2520 0010 005093E5 		ldr	r5, [r3]
 2521              	.LVL263:
2329:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_update_reg   = vdc_regaddr_img_synthesizer[VDC_GR_TYPE_GR0].gr_update;
 2522              		.loc 1 2329 0
 2523 0014 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2524 0018 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2525 001c 4C6093E5 		ldr	r6, [r3, #76]
 2526              	.LVL264:
2330:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2527              		.loc 1 2330 0
 2528 0020 004093E5 		ldr	r4, [r3]
 2529              	.LVL265:
2333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2530              		.loc 1 2333 0
 2531 0024 FEFFFFEB 		bl	VDC_ShrdPrmGetBgColor
 2532              	.LVL266:
 2533 0028 0080A0E1 		mov	r8, r0
 2534              	.LVL267:
2336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2535              		.loc 1 2336 0
 2536 002c FEFFFFEB 		bl	ColorConversionIntoAgbr
 2537              	.LVL268:
2339:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2538              		.loc 1 2339 0
 2539 0030 FF04C0E3 		bic	r0, r0, #-16777216
 2540              	.LVL269:
2342:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2541              		.loc 1 2342 0
 2542 0034 008087E5 		str	r8, [r7]
2346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2543              		.loc 1 2346 0
 2544 0038 003095E5 		ldr	r3, [r5]
 2545 003c 103083E3 		orr	r3, r3, #16
 2546 0040 003085E5 		str	r3, [r5]
2349:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2547              		.loc 1 2349 0
 2548 0044 000086E5 		str	r0, [r6]
2353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function SetScalerBackgroundColor() */
 2549              		.loc 1 2353 0
 2550 0048 003094E5 		ldr	r3, [r4]
 2551 004c 103083E3 		orr	r3, r3, #16
 2552 0050 003084E5 		str	r3, [r4]
 2553 0054 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 2554              		.cfi_endproc
 2555              	.LFE24:
 2557              		.section	.text.SetInputCntrlColorMtx,"ax",%progbits
 2558              		.align	2
 2559              		.syntax unified
 2560              		.arm
 2561              		.fpu neon
 2563              	SetInputCntrlColorMtx:
 2564              	.LFB36:
2920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_color_space_t      color_space_input;
 2565              		.loc 1 2920 0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 0
 2568              		@ frame_needed = 0, uses_anonymous_args = 0
 2569 0000 10402DE9 		push	{r4, lr}
 2570              		.cfi_def_cfa_offset 8
 2571              		.cfi_offset 4, -8
 2572              		.cfi_offset 14, -4
2927:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     color_space_fb      = VDC_ShrdPrmGetColorSpaceFbWr();
 2573              		.loc 1 2927 0
 2574 0004 FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpace
 2575              	.LVL270:
 2576 0008 0040A0E1 		mov	r4, r0
 2577              	.LVL271:
2928:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2578              		.loc 1 2928 0
 2579 000c FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpaceFbWr
 2580              	.LVL272:
2931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2581              		.loc 1 2931 0
 2582 0010 000054E3 		cmp	r4, #0
 2583 0014 0200001A 		bne	.L195
2933:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 2584              		.loc 1 2933 0
 2585 0018 000050E3 		cmp	r0, #0
2941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 2586              		.loc 1 2941 0
 2587 001c 0100A013 		movne	r0, #1
 2588              	.LVL273:
 2589 0020 020000EA 		b	.L196
 2590              	.LVL274:
 2591              	.L195:
2946:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 2592              		.loc 1 2946 0
 2593 0024 000050E3 		cmp	r0, #0
 2594 0028 0B00000A 		beq	.L200
2954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 2595              		.loc 1 2954 0
 2596 002c 0300A0E3 		mov	r0, #3
 2597              	.LVL275:
 2598              	.L196:
2962:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2599              		.loc 1 2962 0
 2600 0030 002000E3 		movw	r2, #:lower16:.LANCHOR1
 2601 0034 002040E3 		movt	r2, #:upper16:.LANCHOR1
 2602 0038 803180E0 		add	r3, r0, r0, lsl #3
 2603 003c 8310A0E1 		lsl	r1, r3, #1
 2604              	.LVL276:
2964:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2605              		.loc 1 2964 0
 2606 0040 003000E3 		movw	r3, #:lower16:vdc_regaddr_color_matrix
 2607 0044 003040E3 		movt	r3, #:upper16:vdc_regaddr_color_matrix
 2608 0048 012082E0 		add	r2, r2, r1
 2609              	.LVL277:
 2610 004c 001000E3 		movw	r1, #:lower16:.LANCHOR2
 2611 0050 001040E3 		movt	r1, #:upper16:.LANCHOR2
 2612 0054 FEFFFFEB 		bl	SetColorMatrix
 2613              	.LVL278:
 2614 0058 1080BDE8 		pop	{r4, pc}
 2615              	.LVL279:
 2616              	.L200:
2949:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 2617              		.loc 1 2949 0
 2618 005c 0200A0E3 		mov	r0, #2
 2619              	.LVL280:
 2620 0060 F2FFFFEA 		b	.L196
 2621              		.cfi_endproc
 2622              	.LFE36:
 2624              		.section	.text.SetScalerGraphics,"ax",%progbits
 2625              		.align	2
 2626              		.syntax unified
 2627              		.arm
 2628              		.fpu neon
 2630              	SetScalerGraphics:
 2631              	.LFB38:
3027:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
 2632              		.loc 1 3027 0
 2633              		.cfi_startproc
 2634              		@ args = 4, pretend = 0, frame = 0
 2635              		@ frame_needed = 0, uses_anonymous_args = 0
 2636              	.LVL281:
 2637 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2638              		.cfi_def_cfa_offset 36
 2639              		.cfi_offset 4, -36
 2640              		.cfi_offset 5, -32
 2641              		.cfi_offset 6, -28
 2642              		.cfi_offset 7, -24
 2643              		.cfi_offset 8, -20
 2644              		.cfi_offset 9, -16
 2645              		.cfi_offset 10, -12
 2646              		.cfi_offset 11, -8
 2647              		.cfi_offset 14, -4
 2648 0004 14D04DE2 		sub	sp, sp, #20
 2649              		.cfi_def_cfa_offset 56
 2650 0008 0050A0E1 		mov	r5, r0
 2651 000c 0340A0E1 		mov	r4, r3
 2652              	.LVL282:
3039:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2653              		.loc 1 3039 0
 2654 0010 3830DDE5 		ldrb	r3, [sp, #56]	@ zero_extendqisi2
 2655              	.LVL283:
 2656 0014 010054E3 		cmp	r4, #1
 2657 0018 00005303 		cmpeq	r3, #0
 2658 001c 1D00001A 		bne	.L202
3043:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2659              		.loc 1 3043 0
 2660 0020 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 2661 0024 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 2662 0028 641093E5 		ldr	r1, [r3, #100]
 2663              	.LVL284:
 2664 002c 002091E5 		ldr	r2, [r1]
 2665              	.LVL285:
 2666 0030 102082E3 		orr	r2, r2, #16
 2667 0034 002081E5 		str	r2, [r1]
3048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2668              		.loc 1 3048 0
 2669 0038 002093E5 		ldr	r2, [r3]
 2670 003c 003092E5 		ldr	r3, [r2]
 2671 0040 023A83E3 		orr	r3, r3, #8192
 2672 0044 103083E3 		orr	r3, r3, #16
 2673 0048 003082E5 		str	r3, [r2]
 2674              	.LVL286:
 2675              	.L203:
3099:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2676              		.loc 1 3099 0
 2677 004c 010054E3 		cmp	r4, #1
 2678 0050 0E00000A 		beq	.L201
 2679              	.LVL287:
3104:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_flm4)) = reg_data;
 2680              		.loc 1 3104 0
 2681 0054 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 2682 0058 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 2683 005c 7C3093E5 		ldr	r3, [r3, #124]
 2684 0060 001093E5 		ldr	r1, [r3]
 2685              	.LVL288:
3105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2686              		.loc 1 3105 0
 2687 0064 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2688 0068 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2689 006c 5800A0E3 		mov	r0, #88
 2690 0070 900500E0 		mul	r0, r0, r5
 2691 0074 002083E0 		add	r2, r3, r0
 2692 0078 142092E5 		ldr	r2, [r2, #20]
 2693 007c 001082E5 		str	r1, [r2]
3109:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2694              		.loc 1 3109 0
 2695 0080 002093E7 		ldr	r2, [r3, r0]
 2696 0084 003092E5 		ldr	r3, [r2]
 2697 0088 013083E3 		orr	r3, r3, #1
 2698 008c 003082E5 		str	r3, [r2]
 2699              	.LVL289:
 2700              	.L201:
3111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2701              		.loc 1 3111 0
 2702 0090 14D08DE2 		add	sp, sp, #20
 2703              		.cfi_remember_state
 2704              		.cfi_def_cfa_offset 36
 2705              		@ sp needed
 2706 0094 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2707              	.LVL290:
 2708              	.L202:
 2709              		.cfi_restore_state
 2710 0098 0170A0E1 		mov	r7, r1
 2711 009c 0260A0E1 		mov	r6, r2
3054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2712              		.loc 1 3054 0
 2713 00a0 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 2714 00a4 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 2715 00a8 641093E5 		ldr	r1, [r3, #100]
 2716              	.LVL291:
 2717 00ac 002091E5 		ldr	r2, [r1]
 2718              	.LVL292:
 2719 00b0 1020C2E3 		bic	r2, r2, #16
 2720 00b4 002081E5 		str	r2, [r1]
3057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2721              		.loc 1 3057 0
 2722 00b8 4C2093E5 		ldr	r2, [r3, #76]
 2723 00bc B010D6E1 		ldrh	r1, [r6]
 2724 00c0 0118A0E1 		lsl	r1, r1, #16
 2725 00c4 001082E5 		str	r1, [r2]
3060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2726              		.loc 1 3060 0
 2727 00c8 001092E5 		ldr	r1, [r2]
 2728 00cc B200D6E1 		ldrh	r0, [r6, #2]
 2729              	.LVL293:
 2730 00d0 001081E1 		orr	r1, r1, r0
 2731 00d4 001082E5 		str	r1, [r2]
3063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2732              		.loc 1 3063 0
 2733 00d8 502093E5 		ldr	r2, [r3, #80]
 2734 00dc B410D6E1 		ldrh	r1, [r6, #4]
 2735 00e0 0118A0E1 		lsl	r1, r1, #16
 2736 00e4 001082E5 		str	r1, [r2]
3066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2737              		.loc 1 3066 0
 2738 00e8 001092E5 		ldr	r1, [r2]
 2739 00ec B600D6E1 		ldrh	r0, [r6, #6]
 2740 00f0 001081E1 		orr	r1, r1, r0
 2741 00f4 001082E5 		str	r1, [r2]
3069:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2742              		.loc 1 3069 0
 2743 00f8 543093E5 		ldr	r3, [r3, #84]
 2744 00fc B020D7E1 		ldrh	r2, [r7]
 2745 0100 0228A0E1 		lsl	r2, r2, #16
 2746 0104 002083E5 		str	r2, [r3]
3072:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2747              		.loc 1 3072 0
 2748 0108 002093E5 		ldr	r2, [r3]
 2749 010c B210D7E1 		ldrh	r1, [r7, #2]
 2750 0110 012082E1 		orr	r2, r2, r1
 2751 0114 002083E5 		str	r2, [r3]
3074:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         adj_sel_tmp         = VDC_ShrdPrmGetMeasureFolding(graphics_id);
 2752              		.loc 1 3074 0
 2753 0118 FEFFFFEB 		bl	VDC_ShrdPrmGetWritingMode
 2754              	.LVL294:
 2755 011c 00A0A0E1 		mov	r10, r0
 2756              	.LVL295:
3075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         ip_conversion       = VDC_OFF;
 2757              		.loc 1 3075 0
 2758 0120 0500A0E1 		mov	r0, r5
 2759 0124 FEFFFFEB 		bl	VDC_ShrdPrmGetMeasureFolding
 2760              	.LVL296:
 2761 0128 0090A0E1 		mov	r9, r0
 2762              	.LVL297:
3077:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 2763              		.loc 1 3077 0
 2764 012c 030054E3 		cmp	r4, #3
 2765 0130 00005413 		cmpne	r4, #0
 2766 0134 1200000A 		beq	.L209
3076:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_flm_sel == VDC_GR_FLM_SEL_SCALE_DOWN) || (gr_flm_sel == VDC_GR_FLM_SEL_POINTER_BUFF
 2767              		.loc 1 3076 0
 2768 0138 00B0A0E3 		mov	fp, #0
 2769              	.L204:
 2770              	.LVL298:
3086:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2771              		.loc 1 3086 0
 2772 013c 0500A0E1 		mov	r0, r5
 2773 0140 FEFFFFEB 		bl	VDC_ShrdPrmGetLineOfsAddrDir
 2774              	.LVL299:
3089:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2775              		.loc 1 3089 0
 2776 0144 008000E3 		movw	r8, #:lower16:vdc_regaddr_scaler
 2777 0148 008040E3 		movt	r8, #:upper16:vdc_regaddr_scaler
 2778 014c 08808DE5 		str	r8, [sp, #8]
 2779 0150 04008DE5 		str	r0, [sp, #4]
 2780 0154 00A08DE5 		str	r10, [sp]
 2781 0158 0B30A0E1 		mov	r3, fp
 2782 015c 0920A0E1 		mov	r2, r9
 2783 0160 0610A0E1 		mov	r1, r6
 2784 0164 0700A0E1 		mov	r0, r7
 2785              	.LVL300:
 2786 0168 FEFFFFEB 		bl	SetScalingUp
 2787              	.LVL301:
3096:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2788              		.loc 1 3096 0
 2789 016c 002098E5 		ldr	r2, [r8]
 2790 0170 003092E5 		ldr	r3, [r2]
 2791 0174 213C83E3 		orr	r3, r3, #8448
 2792 0178 113083E3 		orr	r3, r3, #17
 2793 017c 003082E5 		str	r3, [r2]
 2794 0180 B1FFFFEA 		b	.L203
 2795              	.LVL302:
 2796              	.L209:
3079:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (res_inter_tmp != VDC_RES_INTER_PROGRESSIVE)
 2797              		.loc 1 3079 0
 2798 0184 FEFFFFEB 		bl	VDC_ShrdPrmGetInterlace
 2799              	.LVL303:
3080:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 2800              		.loc 1 3080 0
 2801 0188 000050E3 		cmp	r0, #0
3076:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_flm_sel == VDC_GR_FLM_SEL_SCALE_DOWN) || (gr_flm_sel == VDC_GR_FLM_SEL_POINTER_BUFF
 2802              		.loc 1 3076 0
 2803 018c 00B0A003 		moveq	fp, #0
 2804 0190 E9FFFF0A 		beq	.L204
 2805              	.L207:
3082:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 2806              		.loc 1 3082 0
 2807 0194 01B0A0E3 		mov	fp, #1
 2808 0198 E7FFFFEA 		b	.L204
 2809              		.cfi_endproc
 2810              	.LFE38:
 2812              		.section	.text.SetRwProcAbility_Read_3,"ax",%progbits
 2813              		.align	2
 2814              		.syntax unified
 2815              		.arm
 2816              		.fpu neon
 2818              	SetRwProcAbility_Read_3:
 2819              	.LFB44:
3309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
 2820              		.loc 1 3309 0
 2821              		.cfi_startproc
 2822              		@ args = 0, pretend = 0, frame = 0
 2823              		@ frame_needed = 0, uses_anonymous_args = 0
 2824              	.LVL304:
 2825 0000 10402DE9 		push	{r4, lr}
 2826              		.cfi_def_cfa_offset 8
 2827              		.cfi_offset 4, -8
 2828              		.cfi_offset 14, -4
 2829              	.LVL305:
3315:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2830              		.loc 1 3315 0
 2831 0004 000050E3 		cmp	r0, #0
 2832 0008 0800000A 		beq	.L214
3331:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2833              		.loc 1 3331 0
 2834 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2835 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2836 0014 B42093E5 		ldr	r2, [r3, #180]
 2837 0018 003092E5 		ldr	r3, [r2]
 2838 001c 013083E3 		orr	r3, r3, #1
 2839 0020 003082E5 		str	r3, [r2]
3333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2840              		.loc 1 3333 0
 2841 0024 0300A0E3 		mov	r0, #3
 2842              	.LVL306:
 2843 0028 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcEnable
 2844              	.LVL307:
 2845 002c 1080BDE8 		pop	{r4, pc}
 2846              	.LVL308:
 2847              	.L214:
3318:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2848              		.loc 1 3318 0
 2849 0030 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2850 0034 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2851 0038 B41093E5 		ldr	r1, [r3, #180]
 2852 003c 002091E5 		ldr	r2, [r1]
 2853 0040 0120C2E3 		bic	r2, r2, #1
 2854 0044 002081E5 		str	r2, [r1]
3321:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2855              		.loc 1 3321 0
 2856 0048 D03093E5 		ldr	r3, [r3, #208]
 2857 004c 002093E5 		ldr	r2, [r3]
 2858 0050 0320C2E3 		bic	r2, r2, #3
 2859 0054 002083E5 		str	r2, [r3]
3324:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2860              		.loc 1 3324 0
 2861 0058 002093E5 		ldr	r2, [r3]
 2862 005c 012082E3 		orr	r2, r2, #1
 2863 0060 002083E5 		str	r2, [r3]
3326:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2864              		.loc 1 3326 0
 2865 0064 0300A0E3 		mov	r0, #3
 2866              	.LVL309:
 2867 0068 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcDisable
 2868              	.LVL310:
 2869 006c 1080BDE8 		pop	{r4, pc}
 2870              		.cfi_endproc
 2871              	.LFE44:
 2873              		.section	.text.SetRwProcAbility_Read_2,"ax",%progbits
 2874              		.align	2
 2875              		.syntax unified
 2876              		.arm
 2877              		.fpu neon
 2879              	SetRwProcAbility_Read_2:
 2880              	.LFB43:
3274:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
 2881              		.loc 1 3274 0
 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 0
 2884              		@ frame_needed = 0, uses_anonymous_args = 0
 2885              	.LVL311:
 2886 0000 10402DE9 		push	{r4, lr}
 2887              		.cfi_def_cfa_offset 8
 2888              		.cfi_offset 4, -8
 2889              		.cfi_offset 14, -4
 2890              	.LVL312:
3280:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2891              		.loc 1 3280 0
 2892 0004 000050E3 		cmp	r0, #0
 2893 0008 0800000A 		beq	.L219
3296:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2894              		.loc 1 3296 0
 2895 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2896 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2897 0014 5C2093E5 		ldr	r2, [r3, #92]
 2898 0018 003092E5 		ldr	r3, [r2]
 2899 001c 013083E3 		orr	r3, r3, #1
 2900 0020 003082E5 		str	r3, [r2]
3298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2901              		.loc 1 3298 0
 2902 0024 0200A0E3 		mov	r0, #2
 2903              	.LVL313:
 2904 0028 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcEnable
 2905              	.LVL314:
 2906 002c 1080BDE8 		pop	{r4, pc}
 2907              	.LVL315:
 2908              	.L219:
3283:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2909              		.loc 1 3283 0
 2910 0030 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2911 0034 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2912 0038 5C1093E5 		ldr	r1, [r3, #92]
 2913 003c 002091E5 		ldr	r2, [r1]
 2914 0040 0120C2E3 		bic	r2, r2, #1
 2915 0044 002081E5 		str	r2, [r1]
3286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2916              		.loc 1 3286 0
 2917 0048 783093E5 		ldr	r3, [r3, #120]
 2918 004c 002093E5 		ldr	r2, [r3]
 2919 0050 0320C2E3 		bic	r2, r2, #3
 2920 0054 002083E5 		str	r2, [r3]
3289:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2921              		.loc 1 3289 0
 2922 0058 002093E5 		ldr	r2, [r3]
 2923 005c 012082E3 		orr	r2, r2, #1
 2924 0060 002083E5 		str	r2, [r3]
3291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2925              		.loc 1 3291 0
 2926 0064 0200A0E3 		mov	r0, #2
 2927              	.LVL316:
 2928 0068 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcDisable
 2929              	.LVL317:
 2930 006c 1080BDE8 		pop	{r4, pc}
 2931              		.cfi_endproc
 2932              	.LFE43:
 2934              		.section	.text.SetRwProcAbility_Read_0,"ax",%progbits
 2935              		.align	2
 2936              		.syntax unified
 2937              		.arm
 2938              		.fpu neon
 2940              	SetRwProcAbility_Read_0:
 2941              	.LFB42:
3239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t * img_synthesizer;
 2942              		.loc 1 3239 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              	.LVL318:
 2947 0000 10402DE9 		push	{r4, lr}
 2948              		.cfi_def_cfa_offset 8
 2949              		.cfi_offset 4, -8
 2950              		.cfi_offset 14, -4
 2951              	.LVL319:
3245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 2952              		.loc 1 3245 0
 2953 0004 000050E3 		cmp	r0, #0
 2954 0008 0800000A 		beq	.L224
3261:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2955              		.loc 1 3261 0
 2956 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2957 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2958 0014 042093E5 		ldr	r2, [r3, #4]
 2959 0018 003092E5 		ldr	r3, [r2]
 2960 001c 013083E3 		orr	r3, r3, #1
 2961 0020 003082E5 		str	r3, [r2]
3263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2962              		.loc 1 3263 0
 2963 0024 0100A0E3 		mov	r0, #1
 2964              	.LVL320:
 2965 0028 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcEnable
 2966              	.LVL321:
 2967 002c 1080BDE8 		pop	{r4, pc}
 2968              	.LVL322:
 2969              	.L224:
3248:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2970              		.loc 1 3248 0
 2971 0030 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 2972 0034 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 2973 0038 041093E5 		ldr	r1, [r3, #4]
 2974 003c 002091E5 		ldr	r2, [r1]
 2975 0040 0120C2E3 		bic	r2, r2, #1
 2976 0044 002081E5 		str	r2, [r1]
3251:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2977              		.loc 1 3251 0
 2978 0048 203093E5 		ldr	r3, [r3, #32]
 2979 004c 002093E5 		ldr	r2, [r3]
 2980 0050 0320C2E3 		bic	r2, r2, #3
 2981 0054 002083E5 		str	r2, [r3]
3254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 2982              		.loc 1 3254 0
 2983 0058 002093E5 		ldr	r2, [r3]
 2984 005c 002083E5 		str	r2, [r3]
3256:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 2985              		.loc 1 3256 0
 2986 0060 0100A0E3 		mov	r0, #1
 2987              	.LVL323:
 2988 0064 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcDisable
 2989              	.LVL324:
 2990 0068 1080BDE8 		pop	{r4, pc}
 2991              		.cfi_endproc
 2992              	.LFE42:
 2994              		.section	.text.SetRwProcAbility_Write_0,"ax",%progbits
 2995              		.align	2
 2996              		.syntax unified
 2997              		.arm
 2998              		.fpu neon
 3000              	SetRwProcAbility_Write_0:
 3001              	.LFB41:
3194:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
 3002              		.loc 1 3194 0
 3003              		.cfi_startproc
 3004              		@ args = 0, pretend = 0, frame = 8
 3005              		@ frame_needed = 0, uses_anonymous_args = 0
 3006              	.LVL325:
 3007 0000 04E02DE5 		str	lr, [sp, #-4]!
 3008              		.cfi_def_cfa_offset 4
 3009              		.cfi_offset 14, -4
 3010 0004 0CD04DE2 		sub	sp, sp, #12
 3011              		.cfi_def_cfa_offset 16
 3012              	.LVL326:
3202:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3013              		.loc 1 3202 0
 3014 0008 000050E3 		cmp	r0, #0
 3015 000c 1800000A 		beq	.L229
3212:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3016              		.loc 1 3212 0
 3017 0010 002000E3 		movw	r2, #:lower16:vdc_regaddr_scaler
 3018 0014 002040E3 		movt	r2, #:upper16:vdc_regaddr_scaler
 3019 0018 801092E5 		ldr	r1, [r2, #128]
 3020 001c 003091E5 		ldr	r3, [r1]
 3021 0020 013083E3 		orr	r3, r3, #1
 3022 0024 003081E5 		str	r3, [r1]
3215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data    = (*(scaler->scl1_pbuf_cnt));
 3023              		.loc 1 3215 0
 3024 0028 B43092E5 		ldr	r3, [r2, #180]
 3025 002c 001093E5 		ldr	r1, [r3]
 3026 0030 011881E3 		orr	r1, r1, #65536
 3027 0034 001083E5 		str	r1, [r3]
3216:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         dummy_read  = reg_data;
 3028              		.loc 1 3216 0
 3029 0038 001093E5 		ldr	r1, [r3]
 3030              	.LVL327:
3217:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3031              		.loc 1 3217 0
 3032 003c 04108DE5 		str	r1, [sp, #4]
3221:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3033              		.loc 1 3221 0
 3034 0040 6C1092E5 		ldr	r1, [r2, #108]
 3035              	.LVL328:
 3036 0044 002091E5 		ldr	r2, [r1]
 3037 0048 012682E3 		orr	r2, r2, #1048576
 3038 004c 002081E5 		str	r2, [r1]
 3039              	.LVL329:
3224:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data    = *(scaler->scl1_pbuf_cnt);
 3040              		.loc 1 3224 0
 3041 0050 002093E5 		ldr	r2, [r3]
 3042 0054 0128C2E3 		bic	r2, r2, #65536
 3043 0058 002083E5 		str	r2, [r3]
3225:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         dummy_read  = reg_data;
 3044              		.loc 1 3225 0
 3045 005c 003093E5 		ldr	r3, [r3]
 3046              	.LVL330:
3226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3047              		.loc 1 3226 0
 3048 0060 04308DE5 		str	r3, [sp, #4]
3228:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3049              		.loc 1 3228 0
 3050 0064 0000A0E3 		mov	r0, #0
 3051              	.LVL331:
 3052 0068 FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcEnable
 3053              	.LVL332:
 3054              	.L225:
3230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3055              		.loc 1 3230 0
 3056 006c 0CD08DE2 		add	sp, sp, #12
 3057              		.cfi_remember_state
 3058              		.cfi_def_cfa_offset 4
 3059              		@ sp needed
 3060 0070 04F09DE4 		ldr	pc, [sp], #4
 3061              	.LVL333:
 3062              	.L229:
 3063              		.cfi_restore_state
3205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3064              		.loc 1 3205 0
 3065 0074 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3066 0078 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3067 007c 802093E5 		ldr	r2, [r3, #128]
 3068 0080 003092E5 		ldr	r3, [r2]
 3069 0084 0130C3E3 		bic	r3, r3, #1
 3070 0088 003082E5 		str	r3, [r2]
3207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3071              		.loc 1 3207 0
 3072 008c FEFFFFEB 		bl	VDC_ShrdPrmSetRwProcDisable
 3073              	.LVL334:
 3074 0090 F5FFFFEA 		b	.L225
 3075              		.cfi_endproc
 3076              	.LFE41:
 3078              		.section	.text.VDC_Initialize,"ax",%progbits
 3079              		.align	2
 3080              		.global	VDC_Initialize
 3081              		.syntax unified
 3082              		.arm
 3083              		.fpu neon
 3085              	VDC_Initialize:
 3086              	.LFB0:
 386:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_lvds_t         * lvds_tmp; 
 3087              		.loc 1 386 0
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 8
 3090              		@ frame_needed = 0, uses_anonymous_args = 0
 3091              	.LVL335:
 3092 0000 70402DE9 		push	{r4, r5, r6, lr}
 3093              		.cfi_def_cfa_offset 16
 3094              		.cfi_offset 4, -16
 3095              		.cfi_offset 5, -12
 3096              		.cfi_offset 6, -8
 3097              		.cfi_offset 14, -4
 3098 0004 08D04DE2 		sub	sp, sp, #8
 3099              		.cfi_def_cfa_offset 24
 3100 0008 0060A0E1 		mov	r6, r0
 425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     /* Disable */
 3101              		.loc 1 425 0
 3102 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_system_ctrl
 3103 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_system_ctrl
 3104 0014 105093E5 		ldr	r5, [r3, #16]
 3105              	.LVL336:
 427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 3106              		.loc 1 427 0
 3107 0018 B020D5E1 		ldrh	r2, [r5]
 3108 001c FF3E0FE3 		movw	r3, #65279
 3109 0020 023003E0 		and	r3, r3, r2
 3110              	.LVL337:
 428:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3111              		.loc 1 428 0
 3112 0024 B030C5E1 		strh	r3, [r5]	@ movhi
 431:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3113              		.loc 1 431 0
 3114 0028 041090E5 		ldr	r1, [r0, #4]
 3115              	.LVL338:
 434:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3116              		.loc 1 434 0
 3117 002c 000051E3 		cmp	r1, #0
 3118 0030 3D00000A 		beq	.L231
 3119              	.LVL339:
 439:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3120              		.loc 1 439 0
 3121 0034 003000E3 		movw	r3, #:lower16:vdc_regaddr_lvds
 3122              	.LVL340:
 3123 0038 003040E3 		movt	r3, #:upper16:vdc_regaddr_lvds
 3124 003c 084093E5 		ldr	r4, [r3, #8]
 3125 0040 002094E5 		ldr	r2, [r4]
 3126 0044 1020C2E3 		bic	r2, r2, #16
 3127 0048 002084E5 		str	r2, [r4]
 3128              	.LVL341:
 442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3129              		.loc 1 442 0
 3130 004c 0C2093E5 		ldr	r2, [r3, #12]
 3131 0050 003092E5 		ldr	r3, [r2]
 3132 0054 013083E3 		orr	r3, r3, #1
 3133 0058 003082E5 		str	r3, [r2]
 445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3134              		.loc 1 445 0
 3135 005c 0030A0E3 		mov	r3, #0
 3136 0060 04308DE5 		str	r3, [sp, #4]
 3137 0064 020000EA 		b	.L232
 3138              	.L233:
 445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3139              		.loc 1 445 0 is_stmt 0 discriminator 3
 3140 0068 04309DE5 		ldr	r3, [sp, #4]
 3141 006c 013083E2 		add	r3, r3, #1
 3142 0070 04308DE5 		str	r3, [sp, #4]
 3143              	.L232:
 445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3144              		.loc 1 445 0 discriminator 1
 3145 0074 04309DE5 		ldr	r3, [sp, #4]
 3146 0078 250053E3 		cmp	r3, #37
 3147 007c F9FFFF9A 		bls	.L233
 452:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3148              		.loc 1 452 0 is_stmt 1
 3149 0080 003094E5 		ldr	r3, [r4]
 3150 0084 0334C3E3 		bic	r3, r3, #50331648
 3151 0088 FF3CC3E3 		bic	r3, r3, #65280
 3152 008c 003084E5 		str	r3, [r4]
 455:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3153              		.loc 1 455 0
 3154 0090 003094E5 		ldr	r3, [r4]
 3155 0094 0000D1E5 		ldrb	r0, [r1]	@ zero_extendqisi2
 3156              	.LVL342:
 3157 0098 003C83E1 		orr	r3, r3, r0, lsl #24
 3158 009c 003084E5 		str	r3, [r4]
 459:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3159              		.loc 1 459 0
 3160 00a0 003094E5 		ldr	r3, [r4]
 3161 00a4 0400D1E5 		ldrb	r0, [r1, #4]	@ zero_extendqisi2
 3162 00a8 003483E1 		orr	r3, r3, r0, lsl #8
 3163 00ac 003084E5 		str	r3, [r4]
 462:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3164              		.loc 1 462 0
 3165 00b0 003092E5 		ldr	r3, [r2]
 3166 00b4 3F38C3E3 		bic	r3, r3, #4128768
 3167 00b8 733EC3E3 		bic	r3, r3, #1840
 3168 00bc 003082E5 		str	r3, [r2]
 465:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3169              		.loc 1 465 0
 3170 00c0 003092E5 		ldr	r3, [r2]
 3171 00c4 B600D1E1 		ldrh	r0, [r1, #6]
 3172 00c8 003883E1 		orr	r3, r3, r0, lsl #16
 3173 00cc 003082E5 		str	r3, [r2]
 468:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3174              		.loc 1 468 0
 3175 00d0 003092E5 		ldr	r3, [r2]
 3176 00d4 B810D1E1 		ldrh	r1, [r1, #8]
 3177              	.LVL343:
 3178 00d8 013483E1 		orr	r3, r3, r1, lsl #8
 3179 00dc 003082E5 		str	r3, [r2]
 471:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3180              		.loc 1 471 0
 3181 00e0 003092E5 		ldr	r3, [r2]
 3182 00e4 103083E3 		orr	r3, r3, #16
 3183 00e8 003082E5 		str	r3, [r2]
 474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3184              		.loc 1 474 0
 3185 00ec 0030A0E3 		mov	r3, #0
 3186 00f0 04308DE5 		str	r3, [sp, #4]
 3187 00f4 020000EA 		b	.L234
 3188              	.L235:
 474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3189              		.loc 1 474 0 is_stmt 0 discriminator 3
 3190 00f8 04309DE5 		ldr	r3, [sp, #4]
 3191 00fc 013083E2 		add	r3, r3, #1
 3192 0100 04308DE5 		str	r3, [sp, #4]
 3193              	.L234:
 474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3194              		.loc 1 474 0 discriminator 1
 3195 0104 04309DE5 		ldr	r3, [sp, #4]
 3196 0108 250053E3 		cmp	r3, #37
 3197 010c F9FFFF9A 		bls	.L235
 481:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3198              		.loc 1 481 0 is_stmt 1
 3199 0110 003092E5 		ldr	r3, [r2]
 3200 0114 0130C3E3 		bic	r3, r3, #1
 3201 0118 003082E5 		str	r3, [r2]
 484:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3202              		.loc 1 484 0
 3203 011c FEFFFFEB 		bl	Wait_200_usec
 3204              	.LVL344:
 487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3205              		.loc 1 487 0
 3206 0120 003094E5 		ldr	r3, [r4]
 3207 0124 103083E3 		orr	r3, r3, #16
 3208 0128 003084E5 		str	r3, [r4]
 3209              	.LVL345:
 3210              	.L231:
 490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3211              		.loc 1 490 0
 3212 012c 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 3213 0130 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 3214 0134 043093E5 		ldr	r3, [r3, #4]
 3215              	.LVL346:
 493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3216              		.loc 1 493 0
 3217 0138 0020D6E5 		ldrb	r2, [r6]	@ zero_extendqisi2
 3218 013c 000052E3 		cmp	r2, #0
 3219 0140 1200000A 		beq	.L239
 501:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3220              		.loc 1 501 0
 3221 0144 002093E5 		ldr	r2, [r3]
 3222 0148 0126C2E3 		bic	r2, r2, #1048576
 3223 014c 002083E5 		str	r2, [r3]
 3224              	.L237:
 503:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3225              		.loc 1 503 0
 3226 0150 0130D6E5 		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 3227              	.LVL347:
 3228 0154 002000E3 		movw	r2, #:lower16:.LANCHOR3
 3229 0158 002040E3 		movt	r2, #:upper16:.LANCHOR3
 3230 015c 8330A0E1 		lsl	r3, r3, #1
 3231 0160 B33092E1 		ldrh	r3, [r2, r3]
 3232              	.LVL348:
 509:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     *syscnt_panel_clk_reg   = syscnt_panel_clk_tmp;
 3233              		.loc 1 509 0
 3234 0164 0020D6E5 		ldrb	r2, [r6]	@ zero_extendqisi2
 3235 0168 001000E3 		movw	r1, #:lower16:.LANCHOR4
 3236 016c 001040E3 		movt	r1, #:upper16:.LANCHOR4
 3237 0170 8220A0E1 		lsl	r2, r2, #1
 3238 0174 B22091E1 		ldrh	r2, [r1, r2]
 506:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3239              		.loc 1 506 0
 3240 0178 023083E1 		orr	r3, r3, r2
 3241              	.LVL349:
 510:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3242              		.loc 1 510 0
 3243 017c B030C5E1 		strh	r3, [r5]	@ movhi
 513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 3244              		.loc 1 513 0
 3245 0180 013C83E3 		orr	r3, r3, #256
 3246              	.LVL350:
 514:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3247              		.loc 1 514 0
 3248 0184 B030C5E1 		strh	r3, [r5]	@ movhi
 516:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3249              		.loc 1 516 0
 3250 0188 08D08DE2 		add	sp, sp, #8
 3251              		.cfi_remember_state
 3252              		.cfi_def_cfa_offset 16
 3253              		@ sp needed
 3254 018c 7080BDE8 		pop	{r4, r5, r6, pc}
 3255              	.LVL351:
 3256              	.L239:
 3257              		.cfi_restore_state
 496:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3258              		.loc 1 496 0
 3259 0190 002093E5 		ldr	r2, [r3]
 3260 0194 012682E3 		orr	r2, r2, #1048576
 3261 0198 002083E5 		str	r2, [r3]
 3262 019c EBFFFFEA 		b	.L237
 3263              		.cfi_endproc
 3264              	.LFE0:
 3266              		.section	.text.VDC_Terminate,"ax",%progbits
 3267              		.align	2
 3268              		.global	VDC_Terminate
 3269              		.syntax unified
 3270              		.arm
 3271              		.fpu neon
 3273              	VDC_Terminate:
 3274              	.LFB1:
 525:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     volatile uint16_t         * syscnt_panel_clk_reg;
 3275              		.loc 1 525 0
 3276              		.cfi_startproc
 3277              		@ args = 0, pretend = 0, frame = 8
 3278              		@ frame_needed = 0, uses_anonymous_args = 0
 3279 0000 04E02DE5 		str	lr, [sp, #-4]!
 3280              		.cfi_def_cfa_offset 4
 3281              		.cfi_offset 14, -4
 3282 0004 0CD04DE2 		sub	sp, sp, #12
 3283              		.cfi_def_cfa_offset 16
 533:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3284              		.loc 1 533 0
 3285 0008 003000E3 		movw	r3, #:lower16:vdc_regaddr_system_ctrl
 3286 000c 003040E3 		movt	r3, #:upper16:vdc_regaddr_system_ctrl
 3287 0010 102093E5 		ldr	r2, [r3, #16]
 3288              	.LVL352:
 536:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*syscnt_panel_clk_reg)   = syscnt_panel_clk_tmp;
 3289              		.loc 1 536 0
 3290 0014 B010D2E1 		ldrh	r1, [r2]
 3291 0018 FF3E0FE3 		movw	r3, #65279
 3292 001c 013003E0 		and	r3, r3, r1
 3293              	.LVL353:
 537:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3294              		.loc 1 537 0
 3295 0020 B030C2E1 		strh	r3, [r2]	@ movhi
 539:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (rsrc_state != VDC_RESOURCE_ST_INVALID)         /* LVDS PLL clock is set. */
 3296              		.loc 1 539 0
 3297 0024 0400A0E3 		mov	r0, #4
 3298 0028 FEFFFFEB 		bl	VDC_ShrdPrmGetResource
 3299              	.LVL354:
 540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3300              		.loc 1 540 0
 3301 002c 000050E3 		cmp	r0, #0
 3302 0030 0100001A 		bne	.L245
 3303              	.LVL355:
 3304              	.L240:
 561:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3305              		.loc 1 561 0
 3306 0034 0CD08DE2 		add	sp, sp, #12
 3307              		.cfi_remember_state
 3308              		.cfi_def_cfa_offset 4
 3309              		@ sp needed
 3310 0038 04F09DE4 		ldr	pc, [sp], #4
 3311              	.LVL356:
 3312              	.L245:
 3313              		.cfi_restore_state
 542:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (lvds_ref == VDC_OFF)       /* LVDS PLL clock is not referred. */
 3314              		.loc 1 542 0
 3315 003c FEFFFFEB 		bl	VDC_ShrdPrmGetLvdsClkRef
 3316              	.LVL357:
 543:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3317              		.loc 1 543 0
 3318 0040 000050E3 		cmp	r0, #0
 3319 0044 FAFFFF1A 		bne	.L240
 3320              	.LVL358:
 548:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3321              		.loc 1 548 0
 3322 0048 003000E3 		movw	r3, #:lower16:vdc_regaddr_lvds
 3323 004c 003040E3 		movt	r3, #:upper16:vdc_regaddr_lvds
 3324 0050 081093E5 		ldr	r1, [r3, #8]
 3325 0054 002091E5 		ldr	r2, [r1]
 3326 0058 1020C2E3 		bic	r2, r2, #16
 3327 005c 002081E5 		str	r2, [r1]
 551:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3328              		.loc 1 551 0
 3329 0060 0C2093E5 		ldr	r2, [r3, #12]
 3330 0064 003092E5 		ldr	r3, [r2]
 3331 0068 013083E3 		orr	r3, r3, #1
 3332 006c 003082E5 		str	r3, [r2]
 554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 3333              		.loc 1 554 0
 3334 0070 0030A0E3 		mov	r3, #0
 3335 0074 04308DE5 		str	r3, [sp, #4]
 3336 0078 020000EA 		b	.L242
 3337              	.L243:
 554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 3338              		.loc 1 554 0 is_stmt 0 discriminator 3
 3339 007c 04309DE5 		ldr	r3, [sp, #4]
 3340 0080 013083E2 		add	r3, r3, #1
 3341 0084 04308DE5 		str	r3, [sp, #4]
 3342              	.L242:
 554:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 3343              		.loc 1 554 0 discriminator 1
 3344 0088 04309DE5 		ldr	r3, [sp, #4]
 3345 008c 250053E3 		cmp	r3, #37
 3346 0090 F9FFFF9A 		bls	.L243
 3347 0094 E6FFFFEA 		b	.L240
 3348              		.cfi_endproc
 3349              	.LFE1:
 3351              		.section	.text.VDC_VideoInput,"ax",%progbits
 3352              		.align	2
 3353              		.global	VDC_VideoInput
 3354              		.syntax unified
 3355              		.arm
 3356              		.fpu neon
 3358              	VDC_VideoInput:
 3359              	.LFB2:
 570:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t   * input_ctrl;
 3360              		.loc 1 570 0 is_stmt 1
 3361              		.cfi_startproc
 3362              		@ args = 0, pretend = 0, frame = 0
 3363              		@ frame_needed = 0, uses_anonymous_args = 0
 3364              	.LVL359:
 3365 0000 70402DE9 		push	{r4, r5, r6, lr}
 3366              		.cfi_def_cfa_offset 16
 3367              		.cfi_offset 4, -16
 3368              		.cfi_offset 5, -12
 3369              		.cfi_offset 6, -8
 3370              		.cfi_offset 14, -4
 3371              	.LVL360:
 578:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3372              		.loc 1 578 0
 3373 0004 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 3374 0008 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 3375 000c 041093E5 		ldr	r1, [r3, #4]
 3376 0010 002091E5 		ldr	r2, [r1]
 3377 0014 012682E3 		orr	r2, r2, #1048576
 3378 0018 002081E5 		str	r2, [r1]
 581:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3379              		.loc 1 581 0
 3380 001c 0C3093E5 		ldr	r3, [r3, #12]
 3381 0020 B220D0E1 		ldrh	r2, [r0, #2]
 3382 0024 0228A0E1 		lsl	r2, r2, #16
 3383 0028 002083E5 		str	r2, [r3]
 584:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3384              		.loc 1 584 0
 3385 002c 002093E5 		ldr	r2, [r3]
 3386 0030 B410D0E1 		ldrh	r1, [r0, #4]
 3387 0034 012082E1 		orr	r2, r2, r1
 3388 0038 002083E5 		str	r2, [r3]
 587:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3389              		.loc 1 587 0
 3390 003c 082090E5 		ldr	r2, [r0, #8]
 3391              	.LVL361:
 590:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3392              		.loc 1 590 0
 3393 0040 000052E3 		cmp	r2, #0
 3394 0044 1100000A 		beq	.L247
 593:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3395              		.loc 1 593 0
 3396 0048 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 3397 004c 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 3398 0050 103093E5 		ldr	r3, [r3, #16]
 3399 0054 B010D2E1 		ldrh	r1, [r2]
 3400 0058 011CA0E1 		lsl	r1, r1, #24
 3401 005c 001083E5 		str	r1, [r3]
 596:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3402              		.loc 1 596 0
 3403 0060 001093E5 		ldr	r1, [r3]
 3404 0064 B2C0D2E1 		ldrh	ip, [r2, #2]
 3405 0068 0C1881E1 		orr	r1, r1, ip, lsl #16
 3406 006c 001083E5 		str	r1, [r3]
 599:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3407              		.loc 1 599 0
 3408 0070 001093E5 		ldr	r1, [r3]
 3409 0074 B4C0D2E1 		ldrh	ip, [r2, #4]
 3410 0078 0C1481E1 		orr	r1, r1, ip, lsl #8
 3411 007c 001083E5 		str	r1, [r3]
 602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3412              		.loc 1 602 0
 3413 0080 001093E5 		ldr	r1, [r3]
 3414 0084 B620D2E1 		ldrh	r2, [r2, #6]
 3415              	.LVL362:
 3416 0088 022081E1 		orr	r2, r1, r2
 3417 008c 002083E5 		str	r2, [r3]
 3418              	.L247:
 606:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3419              		.loc 1 606 0
 3420 0090 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 3421 0094 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 3422 0098 184093E5 		ldr	r4, [r3, #24]
 3423 009c 003094E5 		ldr	r3, [r4]
 3424 00a0 013683E3 		orr	r3, r3, #1048576
 3425 00a4 003084E5 		str	r3, [r4]
 609:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3426              		.loc 1 609 0
 3427 00a8 0C5090E5 		ldr	r5, [r0, #12]
 3428              	.LVL363:
 612:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3429              		.loc 1 612 0
 3430 00ac 000055E3 		cmp	r5, #0
 3431 00b0 0800000A 		beq	.L248
 615:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3432              		.loc 1 615 0
 3433 00b4 001000E3 		movw	r1, #:lower16:vdc_regaddr_input_ctrl
 3434 00b8 001040E3 		movt	r1, #:upper16:vdc_regaddr_input_ctrl
 3435 00bc 0500A0E1 		mov	r0, r5
 3436              	.LVL364:
 3437 00c0 FEFFFFEB 		bl	SetVideoExternalInput
 3438              	.LVL365:
 618:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (ext_sig_tmp->inp_format == VDC_EXTIN_FORMAT_RGB666) ||
 3439              		.loc 1 618 0
 3440 00c4 0030D5E5 		ldrb	r3, [r5]	@ zero_extendqisi2
 3441 00c8 020053E3 		cmp	r3, #2
 623:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 3442              		.loc 1 623 0
 3443 00cc 00309495 		ldrls	r3, [r4]
 3444 00d0 0136C393 		bicls	r3, r3, #1048576
 3445 00d4 00308495 		strls	r3, [r4]
 3446              	.L248:
 630:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3447              		.loc 1 630 0
 3448 00d8 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 3449 00dc 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 3450 00e0 001093E5 		ldr	r1, [r3]
 3451 00e4 002091E5 		ldr	r2, [r1]
 3452 00e8 112082E3 		orr	r2, r2, #17
 3453 00ec 002081E5 		str	r2, [r1]
 634:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_VideoInput() */
 3454              		.loc 1 634 0
 3455 00f0 142093E5 		ldr	r2, [r3, #20]
 3456 00f4 003092E5 		ldr	r3, [r2]
 3457 00f8 013083E3 		orr	r3, r3, #1
 3458 00fc 003082E5 		str	r3, [r2]
 3459 0100 7080BDE8 		pop	{r4, r5, r6, pc}
 3460              		.cfi_endproc
 3461              	.LFE2:
 3463              		.section	.text.VDC_SyncControl,"ax",%progbits
 3464              		.align	2
 3465              		.global	VDC_SyncControl
 3466              		.syntax unified
 3467              		.arm
 3468              		.fpu neon
 3470              	VDC_SyncControl:
 3471              	.LFB3:
 644:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler_0;
 3472              		.loc 1 644 0
 3473              		.cfi_startproc
 3474              		@ args = 0, pretend = 0, frame = 0
 3475              		@ frame_needed = 0, uses_anonymous_args = 0
 3476              	.LVL366:
 3477 0000 10402DE9 		push	{r4, lr}
 3478              		.cfi_def_cfa_offset 8
 3479              		.cfi_offset 4, -8
 3480              		.cfi_offset 14, -4
 3481              	.LVL367:
 651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3482              		.loc 1 651 0
 3483 0004 101090E5 		ldr	r1, [r0, #16]
 3484 0008 000051E3 		cmp	r1, #0
 3485 000c 4000000A 		beq	.L251
 654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3486              		.loc 1 654 0
 3487 0010 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3488 0014 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3489 0018 042093E5 		ldr	r2, [r3, #4]
 3490 001c B010D1E1 		ldrh	r1, [r1]
 3491 0020 0118A0E1 		lsl	r1, r1, #16
 3492 0024 001082E5 		str	r1, [r2]
 657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3493              		.loc 1 657 0
 3494 0028 083093E5 		ldr	r3, [r3, #8]
 3495 002c 101090E5 		ldr	r1, [r0, #16]
 3496 0030 B210D1E1 		ldrh	r1, [r1, #2]
 3497 0034 0118A0E1 		lsl	r1, r1, #16
 3498 0038 001083E5 		str	r1, [r3]
 660:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3499              		.loc 1 660 0
 3500 003c 001092E5 		ldr	r1, [r2]
 3501 0040 011081E3 		orr	r1, r1, #1
 3502 0044 001082E5 		str	r1, [r2]
 663:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3503              		.loc 1 663 0
 3504 0048 002093E5 		ldr	r2, [r3]
 3505 004c 012082E3 		orr	r2, r2, #1
 3506 0050 002083E5 		str	r2, [r3]
 3507              	.L252:
 678:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3508              		.loc 1 678 0
 3509 0054 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3510 0058 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3511 005c 103093E5 		ldr	r3, [r3, #16]
 3512 0060 B420D0E1 		ldrh	r2, [r0, #4]
 3513 0064 002083E5 		str	r2, [r3]
 681:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3514              		.loc 1 681 0
 3515 0068 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
 3516 006c 000052E3 		cmp	r2, #0
 3517 0070 3600000A 		beq	.L256
 689:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3518              		.loc 1 689 0
 3519 0074 002000E3 		movw	r2, #:lower16:vdc_regaddr_scaler
 3520 0078 002040E3 		movt	r2, #:upper16:vdc_regaddr_scaler
 3521 007c 0C1092E5 		ldr	r1, [r2, #12]
 3522 0080 002091E5 		ldr	r2, [r1]
 3523 0084 012082E3 		orr	r2, r2, #1
 3524 0088 002081E5 		str	r2, [r1]
 692:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3525              		.loc 1 692 0
 3526 008c 002093E5 		ldr	r2, [r3]
 3527 0090 7F26C2E3 		bic	r2, r2, #133169152
 3528 0094 0F28C2E3 		bic	r2, r2, #983040
 3529 0098 002083E5 		str	r2, [r3]
 695:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3530              		.loc 1 695 0
 3531 009c 002093E5 		ldr	r2, [r3]
 3532 00a0 B210D0E1 		ldrh	r1, [r0, #2]
 3533 00a4 012882E1 		orr	r2, r2, r1, lsl #16
 3534 00a8 002083E5 		str	r2, [r3]
 3535              	.L254:
 699:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3536              		.loc 1 699 0
 3537 00ac 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3538 00b0 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3539 00b4 142093E5 		ldr	r2, [r3, #20]
 3540 00b8 001092E5 		ldr	r1, [r2]
 3541 00bc FF10C1E3 		bic	r1, r1, #255
 3542 00c0 001082E5 		str	r1, [r2]
 702:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3543              		.loc 1 702 0
 3544 00c4 001092E5 		ldr	r1, [r2]
 3545 00c8 B6C0D0E1 		ldrh	ip, [r0, #6]
 3546 00cc 0C1081E1 		orr	r1, r1, ip
 3547 00d0 001082E5 		str	r1, [r2]
 705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3548              		.loc 1 705 0
 3549 00d4 B810D0E1 		ldrh	r1, [r0, #8]
 3550              	.LVL368:
 708:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3551              		.loc 1 708 0
 3552 00d8 BA20D0E1 		ldrh	r2, [r0, #10]
 3553 00dc 012882E1 		orr	r2, r2, r1, lsl #16
 3554              	.LVL369:
 710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3555              		.loc 1 710 0
 3556 00e0 181093E5 		ldr	r1, [r3, #24]
 3557 00e4 002081E5 		str	r2, [r1]
 713:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3558              		.loc 1 713 0
 3559 00e8 BC10D0E1 		ldrh	r1, [r0, #12]
 3560              	.LVL370:
 716:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3561              		.loc 1 716 0
 3562 00ec BE20D0E1 		ldrh	r2, [r0, #14]
 3563 00f0 012882E1 		orr	r2, r2, r1, lsl #16
 3564              	.LVL371:
 718:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3565              		.loc 1 718 0
 3566 00f4 1C1093E5 		ldr	r1, [r3, #28]
 3567 00f8 002081E5 		str	r2, [r1]
 723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3568              		.loc 1 723 0
 3569 00fc 002093E5 		ldr	r2, [r3]
 3570              	.LVL372:
 3571 0100 003092E5 		ldr	r3, [r2]
 3572 0104 113E83E3 		orr	r3, r3, #272
 3573 0108 003082E5 		str	r3, [r2]
 3574              	.LVL373:
 725:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_SyncControl() */
 3575              		.loc 1 725 0
 3576 010c FEFFFFEB 		bl	SetInitialConnection
 3577              	.LVL374:
 3578 0110 1080BDE8 		pop	{r4, pc}
 3579              	.LVL375:
 3580              	.L251:
 668:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3581              		.loc 1 668 0
 3582 0114 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3583 0118 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3584 011c 041093E5 		ldr	r1, [r3, #4]
 3585 0120 002091E5 		ldr	r2, [r1]
 3586 0124 0120C2E3 		bic	r2, r2, #1
 3587 0128 002081E5 		str	r2, [r1]
 671:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3588              		.loc 1 671 0
 3589 012c 082093E5 		ldr	r2, [r3, #8]
 3590 0130 003092E5 		ldr	r3, [r2]
 3591 0134 0130C3E3 		bic	r3, r3, #1
 3592 0138 003082E5 		str	r3, [r2]
 674:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3593              		.loc 1 674 0
 3594 013c 003092E5 		ldr	r3, [r2]
 3595 0140 0338E0E1 		mvn	r3, r3, lsl #16
 3596 0144 2338E0E1 		mvn	r3, r3, lsr #16
 3597 0148 003082E5 		str	r3, [r2]
 3598 014c C0FFFFEA 		b	.L252
 3599              	.L256:
 684:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3600              		.loc 1 684 0
 3601 0150 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3602 0154 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3603 0158 0C2093E5 		ldr	r2, [r3, #12]
 3604 015c 003092E5 		ldr	r3, [r2]
 3605 0160 0130C3E3 		bic	r3, r3, #1
 3606 0164 003082E5 		str	r3, [r2]
 3607 0168 CFFFFFEA 		b	.L254
 3608              		.cfi_endproc
 3609              	.LFE3:
 3611              		.section	.text.VDC_DisplayOutput,"ax",%progbits
 3612              		.align	2
 3613              		.global	VDC_DisplayOutput
 3614              		.syntax unified
 3615              		.arm
 3616              		.fpu neon
 3618              	VDC_DisplayOutput:
 3619              	.LFB4:
 735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_output_ctrl_t      * output_ctrl;
 3620              		.loc 1 735 0
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 80
 3623              		@ frame_needed = 0, uses_anonymous_args = 0
 3624              	.LVL376:
 3625 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 3626              		.cfi_def_cfa_offset 20
 3627              		.cfi_offset 4, -20
 3628              		.cfi_offset 5, -16
 3629              		.cfi_offset 6, -12
 3630              		.cfi_offset 7, -8
 3631              		.cfi_offset 14, -4
 3632 0004 54D04DE2 		sub	sp, sp, #84
 3633              		.cfi_def_cfa_offset 104
 3634 0008 0060A0E1 		mov	r6, r0
 753:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3635              		.loc 1 753 0
 3636 000c 00C000E3 		movw	ip, #:lower16:.LANCHOR5
 3637 0010 00C040E3 		movt	ip, #:upper16:.LANCHOR5
 3638 0014 18E08DE2 		add	lr, sp, #24
 3639 0018 0C40A0E1 		mov	r4, ip
 3640 001c 0F00B4E8 		ldmia	r4!, {r0, r1, r2, r3}
 3641              	.LVL377:
 3642 0020 0F00AEE8 		stmia	lr!, {r0, r1, r2, r3}
 3643 0024 070094E8 		ldm	r4, {r0, r1, r2}
 3644 0028 07008EE8 		stm	lr, {r0, r1, r2}
 759:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3645              		.loc 1 759 0
 3646 002c 1C309CE5 		ldr	r3, [ip, #28]
 3647 0030 B431CDE1 		strh	r3, [sp, #20]	@ movhi
 3648 0034 2338A0E1 		lsr	r3, r3, #16
 3649 0038 1630CDE5 		strb	r3, [sp, #22]
 766:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3650              		.loc 1 766 0
 3651 003c 04E08DE2 		add	lr, sp, #4
 3652 0040 20C08CE2 		add	ip, ip, #32
 3653 0044 0F009CE8 		ldm	ip, {r0, r1, r2, r3}
 3654 0048 0F008EE8 		stm	lr, {r0, r1, r2, r3}
 3655              	.LVL378:
 776:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3656              		.loc 1 776 0
 3657 004c 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 3658 0050 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 3659 0054 042093E5 		ldr	r2, [r3, #4]
 3660 0058 B010D6E1 		ldrh	r1, [r6]
 3661 005c 0118A0E1 		lsl	r1, r1, #16
 3662 0060 001082E5 		str	r1, [r2]
 779:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3663              		.loc 1 779 0
 3664 0064 001092E5 		ldr	r1, [r2]
 3665 0068 B200D6E1 		ldrh	r0, [r6, #2]
 3666 006c 001081E1 		orr	r1, r1, r0
 3667 0070 001082E5 		str	r1, [r2]
 782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_1] = output_ctrl->tcon_tim_stvb2;
 3668              		.loc 1 782 0
 3669 0074 0C2093E5 		ldr	r2, [r3, #12]
 3670 0078 34208DE5 		str	r2, [sp, #52]
 783:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_2] = output_ctrl->tcon_tim_sth2;
 3671              		.loc 1 783 0
 3672 007c 142093E5 		ldr	r2, [r3, #20]
 3673 0080 38208DE5 		str	r2, [sp, #56]
 784:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_3] = output_ctrl->tcon_tim_stb2;
 3674              		.loc 1 784 0
 3675 0084 1C2093E5 		ldr	r2, [r3, #28]
 3676 0088 3C208DE5 		str	r2, [sp, #60]
 785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_4] = output_ctrl->tcon_tim_cpv2;
 3677              		.loc 1 785 0
 3678 008c 242093E5 		ldr	r2, [r3, #36]
 3679 0090 40208DE5 		str	r2, [sp, #64]
 786:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_5] = output_ctrl->tcon_tim_pola2;
 3680              		.loc 1 786 0
 3681 0094 2C2093E5 		ldr	r2, [r3, #44]
 3682 0098 44208DE5 		str	r2, [sp, #68]
 787:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     output_pin_regaddr[VDC_LCD_TCON_PIN_6] = output_ctrl->tcon_tim_polb2;
 3683              		.loc 1 787 0
 3684 009c 342093E5 		ldr	r2, [r3, #52]
 3685 00a0 48208DE5 		str	r2, [sp, #72]
 788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3686              		.loc 1 788 0
 3687 00a4 3C2093E5 		ldr	r2, [r3, #60]
 3688 00a8 4C208DE5 		str	r2, [sp, #76]
 791:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3689              		.loc 1 791 0
 3690 00ac 5C7093E5 		ldr	r7, [r3, #92]
 3691 00b0 003097E5 		ldr	r3, [r7]
 3692 00b4 7F30C3E3 		bic	r3, r3, #127
 3693 00b8 003087E5 		str	r3, [r7]
 794:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     for (tcon_sig_index = 0; tcon_sig_index < VDC_LCD_TCONSIG_NUM; tcon_sig_index++)
 3694              		.loc 1 794 0
 3695 00bc 045086E2 		add	r5, r6, #4
 3696              	.LVL379:
 795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3697              		.loc 1 795 0
 3698 00c0 0040A0E3 		mov	r4, #0
 3699 00c4 010000EA 		b	.L258
 3700              	.LVL380:
 3701              	.L259:
 817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3702              		.loc 1 817 0 discriminator 2
 3703 00c8 045085E2 		add	r5, r5, #4
 3704              	.LVL381:
 795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3705              		.loc 1 795 0 discriminator 2
 3706 00cc 014084E2 		add	r4, r4, #1
 3707              	.LVL382:
 3708              	.L258:
 795:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3709              		.loc 1 795 0 is_stmt 0 discriminator 1
 3710 00d0 070054E3 		cmp	r4, #7
 3711 00d4 2000008A 		bhi	.L269
 798:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3712              		.loc 1 798 0 is_stmt 1
 3713 00d8 000095E5 		ldr	r0, [r5]
 3714 00dc 000050E3 		cmp	r0, #0
 3715 00e0 F8FFFF0A 		beq	.L259
 801:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3716              		.loc 1 801 0
 3717 00e4 003000E3 		movw	r3, #:lower16:.LANCHOR6
 3718 00e8 003040E3 		movt	r3, #:upper16:.LANCHOR6
 3719 00ec 043193E7 		ldr	r3, [r3, r4, lsl #2]
 3720 00f0 001000E3 		movw	r1, #:lower16:vdc_regaddr_output_ctrl
 3721 00f4 001040E3 		movt	r1, #:upper16:vdc_regaddr_output_ctrl
 3722 00f8 33FF2FE1 		blx	r3
 3723              	.LVL383:
 803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (tcon_pin_tmp != VDC_LCD_TCON_PIN_NON)
 3724              		.loc 1 803 0
 3725 00fc 003095E5 		ldr	r3, [r5]
 3726 0100 D730D3E1 		ldrsb	r3, [r3, #7]
 3727              	.LVL384:
 804:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 3728              		.loc 1 804 0
 3729 0104 010073E3 		cmn	r3, #1
 3730 0108 EEFFFF0A 		beq	.L259
 807:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 (*(output_pin_regaddr[tcon_pin_tmp])) |= tcon_sig_index;
 3731              		.loc 1 807 0
 3732 010c 50208DE2 		add	r2, sp, #80
 3733 0110 032182E0 		add	r2, r2, r3, lsl #2
 3734 0114 1C2012E5 		ldr	r2, [r2, #-28]
 3735 0118 001092E5 		ldr	r1, [r2]
 3736 011c 0710C1E3 		bic	r1, r1, #7
 3737 0120 001082E5 		str	r1, [r2]
 808:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3738              		.loc 1 808 0
 3739 0124 001092E5 		ldr	r1, [r2]
 3740 0128 011084E1 		orr	r1, r4, r1
 3741 012c 001082E5 		str	r1, [r2]
 811:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 {
 3742              		.loc 1 811 0
 3743 0130 002095E5 		ldr	r2, [r5]
 3744 0134 0820D2E5 		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 3745 0138 000052E3 		cmp	r2, #0
 3746 013c E1FFFF0A 		beq	.L259
 813:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****                 }
 3747              		.loc 1 813 0
 3748 0140 002097E5 		ldr	r2, [r7]
 3749 0144 50108DE2 		add	r1, sp, #80
 3750 0148 033181E0 		add	r3, r1, r3, lsl #2
 3751              	.LVL385:
 3752 014c 383013E5 		ldr	r3, [r3, #-56]
 3753 0150 033082E1 		orr	r3, r2, r3
 3754 0154 003087E5 		str	r3, [r7]
 3755 0158 DAFFFFEA 		b	.L259
 3756              	.L269:
 821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3757              		.loc 1 821 0
 3758 015c 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 3759 0160 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 3760 0164 483093E5 		ldr	r3, [r3, #72]
 3761 0168 001093E5 		ldr	r1, [r3]
 3762 016c EC2C0CE3 		movw	r2, #52460
 3763 0170 FF2E4EE3 		movt	r2, 61183
 3764 0174 012002E0 		and	r2, r2, r1
 3765 0178 002083E5 		str	r2, [r3]
 824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3766              		.loc 1 824 0
 3767 017c 2520D6E5 		ldrb	r2, [r6, #37]	@ zero_extendqisi2
 3768 0180 000052E3 		cmp	r2, #0
 827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3769              		.loc 1 827 0
 3770 0184 00209315 		ldrne	r2, [r3]
 3771 0188 01228213 		orrne	r2, r2, #268435456
 3772 018c 00208315 		strne	r2, [r3]
 3773              	.L261:
 831:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3774              		.loc 1 831 0
 3775 0190 2620D6E5 		ldrb	r2, [r6, #38]	@ zero_extendqisi2
 3776 0194 000052E3 		cmp	r2, #0
 834:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3777              		.loc 1 834 0
 3778 0198 00209315 		ldrne	r2, [r3]
 3779 019c 01248213 		orrne	r2, r2, #16777216
 3780 01a0 00208315 		strne	r2, [r3]
 3781              	.L262:
 838:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3782              		.loc 1 838 0
 3783 01a4 002093E5 		ldr	r2, [r3]
 3784 01a8 2710D6E5 		ldrb	r1, [r6, #39]	@ zero_extendqisi2
 3785 01ac 012682E1 		orr	r2, r2, r1, lsl #12
 3786 01b0 002083E5 		str	r2, [r3]
 841:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(output_ctrl->out_pdtha)) |= dither_format[param->out_format];
 3787              		.loc 1 841 0
 3788 01b4 002000E3 		movw	r2, #:lower16:vdc_regaddr_output_ctrl
 3789 01b8 002040E3 		movt	r2, #:upper16:vdc_regaddr_output_ctrl
 3790 01bc 582092E5 		ldr	r2, [r2, #88]
 3791 01c0 001092E5 		ldr	r1, [r2]
 3792 01c4 0318C1E3 		bic	r1, r1, #196608
 3793 01c8 001082E5 		str	r1, [r2]
 842:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3794              		.loc 1 842 0
 3795 01cc 001092E5 		ldr	r1, [r2]
 3796 01d0 2700D6E5 		ldrb	r0, [r6, #39]	@ zero_extendqisi2
 3797 01d4 50C08DE2 		add	ip, sp, #80
 3798 01d8 00018CE0 		add	r0, ip, r0, lsl #2
 3799 01dc 4C0010E5 		ldr	r0, [r0, #-76]
 3800 01e0 001081E1 		orr	r1, r1, r0
 3801 01e4 001082E5 		str	r1, [r2]
 844:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3802              		.loc 1 844 0
 3803 01e8 2720D6E5 		ldrb	r2, [r6, #39]	@ zero_extendqisi2
 3804 01ec 030052E3 		cmp	r2, #3
 3805 01f0 1A00000A 		beq	.L270
 862:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3806              		.loc 1 862 0
 3807 01f4 002093E5 		ldr	r2, [r3]
 3808 01f8 002083E5 		str	r2, [r3]
 3809              	.L265:
 866:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3810              		.loc 1 866 0
 3811 01fc 2430D6E5 		ldrb	r3, [r6, #36]	@ zero_extendqisi2
 3812 0200 000053E3 		cmp	r3, #0
 3813 0204 2300000A 		beq	.L271
 874:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3814              		.loc 1 874 0
 3815 0208 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 3816 020c 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 3817 0210 5C2093E5 		ldr	r2, [r3, #92]
 3818 0214 003092E5 		ldr	r3, [r2]
 3819 0218 013C83E3 		orr	r3, r3, #256
 3820 021c 003082E5 		str	r3, [r2]
 3821              	.L267:
 878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3822              		.loc 1 878 0
 3823 0220 FEFFFFEB 		bl	SetGrapicsBackgroundColor
 3824              	.LVL386:
 881:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3825              		.loc 1 881 0
 3826 0224 14108DE2 		add	r1, sp, #20
 3827 0228 0000E0E3 		mvn	r0, #0
 3828 022c FEFFFFEB 		bl	SetGraphicsDisplayMode
 3829              	.LVL387:
 885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3830              		.loc 1 885 0
 3831 0230 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 3832 0234 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 3833 0238 001093E5 		ldr	r1, [r3]
 3834 023c 002091E5 		ldr	r2, [r1]
 3835 0240 012082E3 		orr	r2, r2, #1
 3836 0244 002081E5 		str	r2, [r1]
 889:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3837              		.loc 1 889 0
 3838 0248 442093E5 		ldr	r2, [r3, #68]
 3839 024c 003092E5 		ldr	r3, [r2]
 3840 0250 013083E3 		orr	r3, r3, #1
 3841 0254 003082E5 		str	r3, [r2]
 891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3842              		.loc 1 891 0
 3843 0258 54D08DE2 		add	sp, sp, #84
 3844              		.cfi_remember_state
 3845              		.cfi_def_cfa_offset 20
 3846              		@ sp needed
 3847 025c F080BDE8 		pop	{r4, r5, r6, r7, pc}
 3848              	.LVL388:
 3849              	.L270:
 3850              		.cfi_restore_state
 847:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3851              		.loc 1 847 0
 3852 0260 002093E5 		ldr	r2, [r3]
 3853 0264 2810D6E5 		ldrb	r1, [r6, #40]	@ zero_extendqisi2
 3854 0268 012482E1 		orr	r2, r2, r1, lsl #8
 3855 026c 002083E5 		str	r2, [r3]
 850:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 3856              		.loc 1 850 0
 3857 0270 2920D6E5 		ldrb	r2, [r6, #41]	@ zero_extendqisi2
 3858 0274 000052E3 		cmp	r2, #0
 853:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 3859              		.loc 1 853 0
 3860 0278 00209315 		ldrne	r2, [r3]
 3861 027c 10208213 		orrne	r2, r2, #16
 3862 0280 00208315 		strne	r2, [r3]
 3863              	.L264:
 857:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3864              		.loc 1 857 0
 3865 0284 002093E5 		ldr	r2, [r3]
 3866 0288 2A10D6E5 		ldrb	r1, [r6, #42]	@ zero_extendqisi2
 3867 028c 012082E1 		orr	r2, r2, r1
 3868 0290 002083E5 		str	r2, [r3]
 3869 0294 D8FFFFEA 		b	.L265
 3870              	.L271:
 869:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3871              		.loc 1 869 0
 3872 0298 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 3873 029c 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 3874 02a0 5C2093E5 		ldr	r2, [r3, #92]
 3875 02a4 003092E5 		ldr	r3, [r2]
 3876 02a8 013CC3E3 		bic	r3, r3, #256
 3877 02ac 003082E5 		str	r3, [r2]
 3878 02b0 DAFFFFEA 		b	.L267
 3879              		.cfi_endproc
 3880              	.LFE4:
 3882              		.section	.text.VDC_WriteDataControl,"ax",%progbits
 3883              		.align	2
 3884              		.global	VDC_WriteDataControl
 3885              		.syntax unified
 3886              		.arm
 3887              		.fpu neon
 3889              	VDC_WriteDataControl:
 3890              	.LFB5:
 900:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
 3891              		.loc 1 900 0
 3892              		.cfi_startproc
 3893              		@ args = 0, pretend = 0, frame = 0
 3894              		@ frame_needed = 0, uses_anonymous_args = 0
 3895              	.LVL389:
 3896 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 3897              		.cfi_def_cfa_offset 24
 3898              		.cfi_offset 4, -24
 3899              		.cfi_offset 5, -20
 3900              		.cfi_offset 6, -16
 3901              		.cfi_offset 7, -12
 3902              		.cfi_offset 8, -8
 3903              		.cfi_offset 14, -4
 3904 0004 0040A0E1 		mov	r4, r0
 3905              	.LVL390:
 908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3906              		.loc 1 908 0
 3907 0008 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3908 000c 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3909 0010 302093E5 		ldr	r2, [r3, #48]
 3910 0014 B010D0E1 		ldrh	r1, [r0]
 3911 0018 0118A0E1 		lsl	r1, r1, #16
 3912 001c 001082E5 		str	r1, [r2]
 911:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3913              		.loc 1 911 0
 3914 0020 001092E5 		ldr	r1, [r2]
 3915 0024 B200D0E1 		ldrh	r0, [r0, #2]
 3916              	.LVL391:
 3917 0028 001081E1 		orr	r1, r1, r0
 3918 002c 001082E5 		str	r1, [r2]
 914:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3919              		.loc 1 914 0
 3920 0030 342093E5 		ldr	r2, [r3, #52]
 3921 0034 B410D4E1 		ldrh	r1, [r4, #4]
 3922 0038 0118A0E1 		lsl	r1, r1, #16
 3923 003c 001082E5 		str	r1, [r2]
 917:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3924              		.loc 1 917 0
 3925 0040 001092E5 		ldr	r1, [r2]
 3926 0044 B600D4E1 		ldrh	r0, [r4, #6]
 3927 0048 001081E1 		orr	r1, r1, r0
 3928 004c 001082E5 		str	r1, [r2]
 920:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3929              		.loc 1 920 0
 3930 0050 705093E5 		ldr	r5, [r3, #112]
 3931 0054 003095E5 		ldr	r3, [r5]
 3932 0058 0738C3E3 		bic	r3, r3, #458752
 3933 005c 0D30C3E3 		bic	r3, r3, #13
 3934 0060 003085E5 		str	r3, [r5]
 923:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3935              		.loc 1 923 0
 3936 0064 003095E5 		ldr	r3, [r5]
 3937 0068 1020D4E5 		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 3938 006c 023883E1 		orr	r3, r3, r2, lsl #16
 3939 0070 003085E5 		str	r3, [r5]
 926:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3940              		.loc 1 926 0
 3941 0074 003095E5 		ldr	r3, [r5]
 3942 0078 1120D4E5 		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 3943 007c 023183E1 		orr	r3, r3, r2, lsl #2
 3944 0080 003085E5 		str	r3, [r5]
 929:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3945              		.loc 1 929 0
 3946 0084 1230D4E5 		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 3947 0088 000053E3 		cmp	r3, #0
 932:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3948              		.loc 1 932 0
 3949 008c 00309515 		ldrne	r3, [r5]
 3950 0090 01308313 		orrne	r3, r3, #1
 3951 0094 00308515 		strne	r3, [r5]
 3952              	.L273:
 936:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3953              		.loc 1 936 0
 3954 0098 006000E3 		movw	r6, #:lower16:vdc_regaddr_scaler
 3955 009c 006040E3 		movt	r6, #:upper16:vdc_regaddr_scaler
 3956 00a0 747096E5 		ldr	r7, [r6, #116]
 3957 00a4 180094E5 		ldr	r0, [r4, #24]
 3958 00a8 FEFFFFEB 		bl	R_VDC_CPUVAddrToSysPAddr
 3959              	.LVL392:
 3960 00ac 000087E5 		str	r0, [r7]
 939:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3961              		.loc 1 939 0
 3962 00b0 783096E5 		ldr	r3, [r6, #120]
 3963 00b4 1C2094E5 		ldr	r2, [r4, #28]
 3964 00b8 0228A0E1 		lsl	r2, r2, #16
 3965 00bc 002083E5 		str	r2, [r3]
 942:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3966              		.loc 1 942 0
 3967 00c0 002093E5 		ldr	r2, [r3]
 3968 00c4 201094E5 		ldr	r1, [r4, #32]
 3969 00c8 012082E1 		orr	r2, r2, r1
 3970 00cc 002083E5 		str	r2, [r3]
 945:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3971              		.loc 1 945 0
 3972 00d0 203094E5 		ldr	r3, [r4, #32]
 3973 00d4 000053E3 		cmp	r3, #0
 947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3974              		.loc 1 947 0
 3975 00d8 7C309615 		ldrne	r3, [r6, #124]
 3976 00dc 24209415 		ldrne	r2, [r4, #36]
 3977 00e0 00208315 		strne	r2, [r3]
 3978              	.L274:
 951:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3979              		.loc 1 951 0
 3980 00e4 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3981 00e8 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3982 00ec 806093E5 		ldr	r6, [r3, #128]
 3983 00f0 003096E5 		ldr	r3, [r6]
 3984 00f4 033CC3E3 		bic	r3, r3, #768
 3985 00f8 003086E5 		str	r3, [r6]
 954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 3986              		.loc 1 954 0
 3987 00fc 003096E5 		ldr	r3, [r6]
 3988 0100 1420D4E5 		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 3989 0104 023483E1 		orr	r3, r3, r2, lsl #8
 3990 0108 003086E5 		str	r3, [r6]
 957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 3991              		.loc 1 957 0
 3992 010c 1630D4E5 		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 3993 0110 000053E3 		cmp	r3, #0
 3994 0114 6900001A 		bne	.L275
 960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 3995              		.loc 1 960 0
 3996 0118 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 3997 011c 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 3998 0120 842093E5 		ldr	r2, [r3, #132]
 3999 0124 003092E5 		ldr	r3, [r2]
 4000 0128 1030C3E3 		bic	r3, r3, #16
 4001 012c 003082E5 		str	r3, [r2]
 4002              	.L276:
 969:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4003              		.loc 1 969 0
 4004 0130 1130D4E5 		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4005 0134 010053E3 		cmp	r3, #1
 4006 0138 6700000A 		beq	.L290
 977:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4007              		.loc 1 977 0
 4008 013c 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4009 0140 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4010 0144 842093E5 		ldr	r2, [r3, #132]
 4011 0148 003092E5 		ldr	r3, [r2]
 4012 014c 0130C3E3 		bic	r3, r3, #1
 4013 0150 003082E5 		str	r3, [r2]
 4014              	.L278:
 982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4015              		.loc 1 982 0
 4016 0154 203094E5 		ldr	r3, [r4, #32]
 4017 0158 000053E3 		cmp	r3, #0
 4018 015c 6500001A 		bne	.L279
 985:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4019              		.loc 1 985 0
 4020 0160 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4021 0164 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4022 0168 142093E5 		ldr	r2, [r3, #20]
 4023 016c 003092E5 		ldr	r3, [r2]
 4024 0170 013CC3E3 		bic	r3, r3, #256
 4025 0174 003082E5 		str	r3, [r2]
 4026              	.L280:
 994:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4027              		.loc 1 994 0
 4028 0178 0830D4E5 		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 4029 017c 000053E3 		cmp	r3, #0
 4030 0180 6300001A 		bne	.L281
 997:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4031              		.loc 1 997 0
 4032 0184 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4033 0188 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4034 018c 382093E5 		ldr	r2, [r3, #56]
 4035 0190 003092E5 		ldr	r3, [r2]
 4036 0194 0232C3E3 		bic	r3, r3, #536870912
 4037 0198 003082E5 		str	r3, [r2]
 4038              	.L282:
1006:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4039              		.loc 1 1006 0
 4040 019c 002000E3 		movw	r2, #:lower16:vdc_regaddr_scaler
 4041 01a0 002040E3 		movt	r2, #:upper16:vdc_regaddr_scaler
 4042 01a4 443092E5 		ldr	r3, [r2, #68]
 4043 01a8 BA10D4E1 		ldrh	r1, [r4, #10]
 4044 01ac 0118A0E1 		lsl	r1, r1, #16
 4045 01b0 001083E5 		str	r1, [r3]
1009:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4046              		.loc 1 1009 0
 4047 01b4 001093E5 		ldr	r1, [r3]
 4048 01b8 BC00D4E1 		ldrh	r0, [r4, #12]
 4049 01bc 001081E1 		orr	r1, r1, r0
 4050 01c0 001083E5 		str	r1, [r3]
1012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4051              		.loc 1 1012 0
 4052 01c4 1310D4E5 		ldrb	r1, [r4, #19]	@ zero_extendqisi2
 4053 01c8 0400A0E1 		mov	r0, r4
 4054 01cc FEFFFFEB 		bl	SetScalingDown
 4055              	.LVL393:
1015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4056              		.loc 1 1015 0
 4057 01d0 003095E5 		ldr	r3, [r5]
 4058 01d4 7030C3E3 		bic	r3, r3, #112
 4059 01d8 003085E5 		str	r3, [r5]
1018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4060              		.loc 1 1018 0
 4061 01dc 003095E5 		ldr	r3, [r5]
 4062 01e0 0F20D4E5 		ldrb	r2, [r4, #15]	@ zero_extendqisi2
 4063 01e4 023283E1 		orr	r3, r3, r2, lsl #4
 4064 01e8 003085E5 		str	r3, [r5]
1021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4065              		.loc 1 1021 0
 4066 01ec 1330D4E5 		ldrb	r3, [r4, #19]	@ zero_extendqisi2
 4067 01f0 000053E3 		cmp	r3, #0
 4068 01f4 4D00001A 		bne	.L283
1024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4069              		.loc 1 1024 0
 4070 01f8 003096E5 		ldr	r3, [r6]
 4071 01fc 013AC3E3 		bic	r3, r3, #4096
 4072 0200 003086E5 		str	r3, [r6]
 4073              	.L284:
1033:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4074              		.loc 1 1033 0
 4075 0204 1530D4E5 		ldrb	r3, [r4, #21]	@ zero_extendqisi2
 4076 0208 000053E3 		cmp	r3, #0
 4077 020c 4B00001A 		bne	.L285
1036:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4078              		.loc 1 1036 0
 4079 0210 003096E5 		ldr	r3, [r6]
 4080 0214 1030C3E3 		bic	r3, r3, #16
 4081 0218 003086E5 		str	r3, [r6]
 4082              	.L286:
1045:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4083              		.loc 1 1045 0
 4084 021c 283094E5 		ldr	r3, [r4, #40]
 4085 0220 000053E3 		cmp	r3, #0
 4086 0224 4900000A 		beq	.L287
1048:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4087              		.loc 1 1048 0
 4088 0228 003095E5 		ldr	r3, [r5]
 4089 022c 803083E3 		orr	r3, r3, #128
 4090 0230 003085E5 		str	r3, [r5]
1051:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4091              		.loc 1 1051 0
 4092 0234 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4093 0238 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4094 023c 8C2093E5 		ldr	r2, [r3, #140]
 4095 0240 281094E5 		ldr	r1, [r4, #40]
 4096 0244 001082E5 		str	r1, [r2]
1054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4097              		.loc 1 1054 0
 4098 0248 903093E5 		ldr	r3, [r3, #144]
 4099 024c 1C2094E5 		ldr	r2, [r4, #28]
 4100 0250 0228A0E1 		lsl	r2, r2, #16
 4101 0254 002083E5 		str	r2, [r3]
1057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4102              		.loc 1 1057 0
 4103 0258 002093E5 		ldr	r2, [r3]
 4104 025c 201094E5 		ldr	r1, [r4, #32]
 4105 0260 012082E1 		orr	r2, r2, r1
 4106 0264 002083E5 		str	r2, [r3]
1060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4107              		.loc 1 1060 0
 4108 0268 203094E5 		ldr	r3, [r4, #32]
 4109 026c 000053E3 		cmp	r3, #0
 4110 0270 0400000A 		beq	.L288
1062:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4111              		.loc 1 1062 0
 4112 0274 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4113 0278 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4114 027c 943093E5 		ldr	r3, [r3, #148]
 4115 0280 242094E5 		ldr	r2, [r4, #36]
 4116 0284 002083E5 		str	r2, [r3]
 4117              	.L288:
1075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4118              		.loc 1 1075 0
 4119 0288 002000E3 		movw	r2, #:lower16:vdc_regaddr_scaler
 4120 028c 002040E3 		movt	r2, #:upper16:vdc_regaddr_scaler
 4121 0290 001092E5 		ldr	r1, [r2]
 4122 0294 003091E5 		ldr	r3, [r1]
 4123 0298 013A83E3 		orr	r3, r3, #4096
 4124 029c 113083E3 		orr	r3, r3, #17
 4125 02a0 003081E5 		str	r3, [r1]
1081:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4126              		.loc 1 1081 0
 4127 02a4 6C2092E5 		ldr	r2, [r2, #108]
 4128 02a8 003092E5 		ldr	r3, [r2]
 4129 02ac 013883E3 		orr	r3, r3, #65536
 4130 02b0 113083E3 		orr	r3, r3, #17
 4131 02b4 003082E5 		str	r3, [r2]
1083:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_WriteDataControl() */
 4132              		.loc 1 1083 0
 4133 02b8 FEFFFFEB 		bl	SetInputCntrlColorMtx
 4134              	.LVL394:
 4135 02bc F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 4136              	.L275:
 965:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4137              		.loc 1 965 0
 4138 02c0 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4139 02c4 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4140 02c8 842093E5 		ldr	r2, [r3, #132]
 4141 02cc 003092E5 		ldr	r3, [r2]
 4142 02d0 103083E3 		orr	r3, r3, #16
 4143 02d4 003082E5 		str	r3, [r2]
 4144 02d8 94FFFFEA 		b	.L276
 4145              	.L290:
 972:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4146              		.loc 1 972 0
 4147 02dc 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4148 02e0 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4149 02e4 842093E5 		ldr	r2, [r3, #132]
 4150 02e8 003092E5 		ldr	r3, [r2]
 4151 02ec 013083E3 		orr	r3, r3, #1
 4152 02f0 003082E5 		str	r3, [r2]
 4153 02f4 96FFFFEA 		b	.L278
 4154              	.L279:
 990:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4155              		.loc 1 990 0
 4156 02f8 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4157 02fc 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4158 0300 142093E5 		ldr	r2, [r3, #20]
 4159 0304 003092E5 		ldr	r3, [r2]
 4160 0308 013C83E3 		orr	r3, r3, #256
 4161 030c 003082E5 		str	r3, [r2]
 4162 0310 98FFFFEA 		b	.L280
 4163              	.L281:
1002:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4164              		.loc 1 1002 0
 4165 0314 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4166 0318 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4167 031c 382093E5 		ldr	r2, [r3, #56]
 4168 0320 003092E5 		ldr	r3, [r2]
 4169 0324 023283E3 		orr	r3, r3, #536870912
 4170 0328 003082E5 		str	r3, [r2]
 4171 032c 9AFFFFEA 		b	.L282
 4172              	.L283:
1029:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4173              		.loc 1 1029 0
 4174 0330 003096E5 		ldr	r3, [r6]
 4175 0334 013A83E3 		orr	r3, r3, #4096
 4176 0338 003086E5 		str	r3, [r6]
 4177 033c B0FFFFEA 		b	.L284
 4178              	.L285:
1041:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4179              		.loc 1 1041 0
 4180 0340 003096E5 		ldr	r3, [r6]
 4181 0344 103083E3 		orr	r3, r3, #16
 4182 0348 003086E5 		str	r3, [r6]
 4183 034c B2FFFFEA 		b	.L286
 4184              	.L287:
1068:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4185              		.loc 1 1068 0
 4186 0350 003095E5 		ldr	r3, [r5]
 4187 0354 8030C3E3 		bic	r3, r3, #128
 4188 0358 003085E5 		str	r3, [r5]
 4189 035c C9FFFFEA 		b	.L288
 4190              		.cfi_endproc
 4191              	.LFE5:
 4193              		.section	.text.VDC_ChangeWriteProcess,"ax",%progbits
 4194              		.align	2
 4195              		.global	VDC_ChangeWriteProcess
 4196              		.syntax unified
 4197              		.arm
 4198              		.fpu neon
 4200              	VDC_ChangeWriteProcess:
 4201              	.LFB6:
1093:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_scaler_t   * scaler;
 4202              		.loc 1 1093 0
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 0
 4205              		@ frame_needed = 0, uses_anonymous_args = 0
 4206              	.LVL395:
 4207 0000 70402DE9 		push	{r4, r5, r6, lr}
 4208              		.cfi_def_cfa_offset 16
 4209              		.cfi_offset 4, -16
 4210              		.cfi_offset 5, -12
 4211              		.cfi_offset 6, -8
 4212              		.cfi_offset 14, -4
 4213 0004 0040A0E1 		mov	r4, r0
 4214              	.LVL396:
1102:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4215              		.loc 1 1102 0
 4216 0008 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4217 000c 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4218 0010 302093E5 		ldr	r2, [r3, #48]
 4219 0014 B010D0E1 		ldrh	r1, [r0]
 4220 0018 0118A0E1 		lsl	r1, r1, #16
 4221 001c 001082E5 		str	r1, [r2]
1105:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4222              		.loc 1 1105 0
 4223 0020 001092E5 		ldr	r1, [r2]
 4224 0024 B200D0E1 		ldrh	r0, [r0, #2]
 4225              	.LVL397:
 4226 0028 001081E1 		orr	r1, r1, r0
 4227 002c 001082E5 		str	r1, [r2]
1108:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4228              		.loc 1 1108 0
 4229 0030 343093E5 		ldr	r3, [r3, #52]
 4230 0034 B420D4E1 		ldrh	r2, [r4, #4]
 4231 0038 0228A0E1 		lsl	r2, r2, #16
 4232 003c 002083E5 		str	r2, [r3]
1111:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4233              		.loc 1 1111 0
 4234 0040 002093E5 		ldr	r2, [r3]
 4235 0044 B610D4E1 		ldrh	r1, [r4, #6]
 4236 0048 012082E1 		orr	r2, r2, r1
 4237 004c 002083E5 		str	r2, [r3]
1114:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4238              		.loc 1 1114 0
 4239 0050 0830D4E5 		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 4240 0054 000053E3 		cmp	r3, #0
 4241 0058 2600000A 		beq	.L295
1122:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4242              		.loc 1 1122 0
 4243 005c 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4244 0060 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4245 0064 382093E5 		ldr	r2, [r3, #56]
 4246 0068 003092E5 		ldr	r3, [r2]
 4247 006c 023283E3 		orr	r3, r3, #536870912
 4248 0070 003082E5 		str	r3, [r2]
 4249              	.L293:
1126:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4250              		.loc 1 1126 0
 4251 0074 005000E3 		movw	r5, #:lower16:vdc_regaddr_scaler
 4252 0078 005040E3 		movt	r5, #:upper16:vdc_regaddr_scaler
 4253 007c 443095E5 		ldr	r3, [r5, #68]
 4254 0080 BA20D4E1 		ldrh	r2, [r4, #10]
 4255 0084 0228A0E1 		lsl	r2, r2, #16
 4256 0088 002083E5 		str	r2, [r3]
1129:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4257              		.loc 1 1129 0
 4258 008c 002093E5 		ldr	r2, [r3]
 4259 0090 BC10D4E1 		ldrh	r1, [r4, #12]
 4260 0094 012082E1 		orr	r2, r2, r1
 4261 0098 002083E5 		str	r2, [r3]
1132:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4262              		.loc 1 1132 0
 4263 009c FEFFFFEB 		bl	VDC_ShrdPrmGetInterlace
 4264              	.LVL398:
1135:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4265              		.loc 1 1135 0
 4266 00a0 0520A0E1 		mov	r2, r5
 4267 00a4 0010A0E1 		mov	r1, r0
 4268 00a8 0400A0E1 		mov	r0, r4
 4269              	.LVL399:
 4270 00ac FEFFFFEB 		bl	SetScalingDown
 4271              	.LVL400:
1138:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4272              		.loc 1 1138 0
 4273 00b0 703095E5 		ldr	r3, [r5, #112]
 4274 00b4 002093E5 		ldr	r2, [r3]
 4275 00b8 7020C2E3 		bic	r2, r2, #112
 4276 00bc 002083E5 		str	r2, [r3]
1141:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4277              		.loc 1 1141 0
 4278 00c0 002093E5 		ldr	r2, [r3]
 4279 00c4 0F10D4E5 		ldrb	r1, [r4, #15]	@ zero_extendqisi2
 4280 00c8 012282E1 		orr	r2, r2, r1, lsl #4
 4281 00cc 002083E5 		str	r2, [r3]
1146:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4282              		.loc 1 1146 0
 4283 00d0 6C2095E5 		ldr	r2, [r5, #108]
 4284 00d4 003092E5 		ldr	r3, [r2]
 4285 00d8 113083E3 		orr	r3, r3, #17
 4286 00dc 003082E5 		str	r3, [r2]
1152:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4287              		.loc 1 1152 0
 4288 00e0 002095E5 		ldr	r2, [r5]
 4289 00e4 003092E5 		ldr	r3, [r2]
 4290 00e8 013A83E3 		orr	r3, r3, #4096
 4291 00ec 113083E3 		orr	r3, r3, #17
 4292 00f0 003082E5 		str	r3, [r2]
 4293 00f4 7080BDE8 		pop	{r4, r5, r6, pc}
 4294              	.L295:
1117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4295              		.loc 1 1117 0
 4296 00f8 003000E3 		movw	r3, #:lower16:vdc_regaddr_scaler
 4297 00fc 003040E3 		movt	r3, #:upper16:vdc_regaddr_scaler
 4298 0100 382093E5 		ldr	r2, [r3, #56]
 4299 0104 003092E5 		ldr	r3, [r2]
 4300 0108 0232C3E3 		bic	r3, r3, #536870912
 4301 010c 003082E5 		str	r3, [r2]
 4302 0110 D7FFFFEA 		b	.L293
 4303              		.cfi_endproc
 4304              	.LFE6:
 4306              		.section	.text.VDC_ReadDataControl,"ax",%progbits
 4307              		.align	2
 4308              		.global	VDC_ReadDataControl
 4309              		.syntax unified
 4310              		.arm
 4311              		.fpu neon
 4313              	VDC_ReadDataControl:
 4314              	.LFB7:
1165:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
 4315              		.loc 1 1165 0
 4316              		.cfi_startproc
 4317              		@ args = 0, pretend = 0, frame = 0
 4318              		@ frame_needed = 0, uses_anonymous_args = 0
 4319              	.LVL401:
 4320 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 4321              		.cfi_def_cfa_offset 24
 4322              		.cfi_offset 4, -24
 4323              		.cfi_offset 5, -20
 4324              		.cfi_offset 6, -16
 4325              		.cfi_offset 7, -12
 4326              		.cfi_offset 8, -8
 4327              		.cfi_offset 14, -4
 4328 0004 08D04DE2 		sub	sp, sp, #8
 4329              		.cfi_def_cfa_offset 32
 4330 0008 0050A0E1 		mov	r5, r0
 4331 000c 0140A0E1 		mov	r4, r1
1173:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4332              		.loc 1 1173 0
 4333 0010 FEFFFFEB 		bl	VDC_ShrdPrmGetFrBuffWidth_Rd
 4334              	.LVL402:
 4335 0014 0070A0E1 		mov	r7, r0
 4336              	.LVL403:
1175:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4337              		.loc 1 1175 0
 4338 0018 0180D4E5 		ldrb	r8, [r4, #1]	@ zero_extendqisi2
 4339 001c 146084E2 		add	r6, r4, #20
 4340 0020 0630A0E1 		mov	r3, r6
 4341 0024 0020A0E1 		mov	r2, r0
 4342 0028 0810A0E1 		mov	r1, r8
 4343 002c 0500A0E1 		mov	r0, r5
 4344              	.LVL404:
 4345 0030 FEFFFFEB 		bl	ConfirmGraphicsEnlargement
 4346              	.LVL405:
1177:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4347              		.loc 1 1177 0
 4348 0034 000055E3 		cmp	r5, #0
 4349 0038 AC00000A 		beq	.L312
 4350              	.LVL406:
 4351              	.L297:
1185:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4352              		.loc 1 1185 0
 4353 003c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4354 0040 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4355 0044 5830A0E3 		mov	r3, #88
 4356 0048 932523E0 		mla	r3, r3, r5, r2
 4357 004c 083093E5 		ldr	r3, [r3, #8]
 4358 0050 001093E5 		ldr	r1, [r3]
 4359 0054 FE2C0FE3 		movw	r2, #64766
 4360 0058 FE2F4FE3 		movt	r2, 65534
 4361 005c 012002E0 		and	r2, r2, r1
 4362 0060 002083E5 		str	r2, [r3]
1188:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4363              		.loc 1 1188 0
 4364 0064 0020D4E5 		ldrb	r2, [r4]	@ zero_extendqisi2
 4365 0068 000052E3 		cmp	r2, #0
1191:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4366              		.loc 1 1191 0
 4367 006c 00209315 		ldrne	r2, [r3]
 4368 0070 01288213 		orrne	r2, r2, #65536
 4369 0074 00208315 		strne	r2, [r3]
 4370              	.L298:
1195:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4371              		.loc 1 1195 0
 4372 0078 002093E5 		ldr	r2, [r3]
 4373 007c 0110D4E5 		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 4374 0080 012482E1 		orr	r2, r2, r1, lsl #8
 4375 0084 002083E5 		str	r2, [r3]
1198:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4376              		.loc 1 1198 0
 4377 0088 0320D4E5 		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 4378 008c 000052E3 		cmp	r2, #0
1201:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4379              		.loc 1 1201 0
 4380 0090 00209315 		ldrne	r2, [r3]
 4381 0094 01208213 		orrne	r2, r2, #1
 4382 0098 00208315 		strne	r2, [r3]
 4383              	.L299:
1205:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4384              		.loc 1 1205 0
 4385 009c 0120D4E5 		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 4386 00a0 020052E3 		cmp	r2, #2
 4387 00a4 9800000A 		beq	.L313
 4388              	.L300:
1220:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4389              		.loc 1 1220 0
 4390 00a8 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 4391 00ac 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 4392 00b0 5860A0E3 		mov	r6, #88
 4393 00b4 963526E0 		mla	r6, r6, r5, r3
 4394 00b8 0C8096E5 		ldr	r8, [r6, #12]
1223:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4395              		.loc 1 1223 0
 4396 00bc 040094E5 		ldr	r0, [r4, #4]
 4397 00c0 FEFFFFEB 		bl	R_VDC_CPUVAddrToSysPAddr
 4398              	.LVL407:
 4399 00c4 0700C0E3 		bic	r0, r0, #7
 4400 00c8 000088E5 		str	r0, [r8]
1226:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     (*(img_synthesizer->gr_flm3)) |= (param->gr_ln_off << VDC_REG_SHIFT_16);
 4401              		.loc 1 1226 0
 4402 00cc 103096E5 		ldr	r3, [r6, #16]
 4403 00d0 002093E5 		ldr	r2, [r3]
 4404 00d4 3F1BA0E3 		mov	r1, #64512
 4405 00d8 001048E3 		movt	r1, 32768
 4406 00dc 012002E0 		and	r2, r2, r1
 4407 00e0 002083E5 		str	r2, [r3]
1227:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4408              		.loc 1 1227 0
 4409 00e4 002093E5 		ldr	r2, [r3]
 4410 00e8 081094E5 		ldr	r1, [r4, #8]
 4411 00ec 012882E1 		orr	r2, r2, r1, lsl #16
 4412 00f0 002083E5 		str	r2, [r3]
1230:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4413              		.loc 1 1230 0
 4414 00f4 183096E5 		ldr	r3, [r6, #24]
 4415 00f8 FF2700E3 		movw	r2, #2047
 4416 00fc 002083E5 		str	r2, [r3]
1233:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4417              		.loc 1 1233 0
 4418 0100 002093E5 		ldr	r2, [r3]
 4419 0104 B010D7E1 		ldrh	r1, [r7]
 4420 0108 011041E2 		sub	r1, r1, #1
 4421 010c 012882E1 		orr	r2, r2, r1, lsl #16
 4422 0110 002083E5 		str	r2, [r3]
1236:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4423              		.loc 1 1236 0
 4424 0114 1C6096E5 		ldr	r6, [r6, #28]
 4425 0118 002096E5 		ldr	r2, [r6]
 4426 011c C0330EE3 		movw	r3, #58304
 4427 0120 003840E3 		movt	r3, 2048
 4428 0124 023003E0 		and	r3, r3, r2
 4429 0128 003086E5 		str	r3, [r6]
1239:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4430              		.loc 1 1239 0
 4431 012c 003096E5 		ldr	r3, [r6]
 4432 0130 1120D4E5 		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 4433 0134 023E83E1 		orr	r3, r3, r2, lsl #28
 4434 0138 003086E5 		str	r3, [r6]
1242:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4435              		.loc 1 1242 0
 4436 013c 003096E5 		ldr	r3, [r6]
 4437 0140 B220D7E1 		ldrh	r2, [r7, #2]
 4438 0144 012042E2 		sub	r2, r2, #1
 4439 0148 023883E1 		orr	r3, r3, r2, lsl #16
 4440 014c 003086E5 		str	r3, [r6]
1245:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4441              		.loc 1 1245 0
 4442 0150 003096E5 		ldr	r3, [r6]
 4443 0154 1320D4E5 		ldrb	r2, [r4, #19]	@ zero_extendqisi2
 4444 0158 023583E1 		orr	r3, r3, r2, lsl #10
 4445 015c 003086E5 		str	r3, [r6]
1247:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4446              		.loc 1 1247 0
 4447 0160 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 4448 0164 010053E3 		cmp	r3, #1
 4449 0168 7100009A 		bls	.L314
 4450              	.L302:
1254:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (graphics_id == VDC_GR_TYPE_GR0)
 4451              		.loc 1 1254 0
 4452 016c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4453 0170 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4454 0174 5830A0E3 		mov	r3, #88
 4455 0178 932523E0 		mla	r3, r3, r5, r2
 4456 017c 203093E5 		ldr	r3, [r3, #32]
 4457 0180 002093E5 		ldr	r2, [r3]
 4458 0184 0320C2E3 		bic	r2, r2, #3
 4459 0188 002083E5 		str	r2, [r3]
1255:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4460              		.loc 1 1255 0
 4461 018c 000055E3 		cmp	r5, #0
 4462 0190 6E00001A 		bne	.L303
1258:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4463              		.loc 1 1258 0
 4464 0194 002093E5 		ldr	r2, [r3]
 4465 0198 002083E5 		str	r2, [r3]
 4466              	.L304:
1267:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4467              		.loc 1 1267 0
 4468 019c 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 4469 01a0 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 4470 01a4 5820A0E3 		mov	r2, #88
 4471 01a8 921522E0 		mla	r2, r2, r5, r1
 4472 01ac 241092E5 		ldr	r1, [r2, #36]
 4473 01b0 B401D4E1 		ldrh	r0, [r4, #20]
 4474 01b4 0008A0E1 		lsl	r0, r0, #16
 4475 01b8 000081E5 		str	r0, [r1]
1270:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4476              		.loc 1 1270 0
 4477 01bc 000091E5 		ldr	r0, [r1]
 4478 01c0 B6C1D4E1 		ldrh	ip, [r4, #22]
 4479 01c4 0C0080E1 		orr	r0, r0, ip
 4480 01c8 000081E5 		str	r0, [r1]
1273:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4481              		.loc 1 1273 0
 4482 01cc 282092E5 		ldr	r2, [r2, #40]
 4483 01d0 B801D4E1 		ldrh	r0, [r4, #24]
 4484 01d4 0008A0E1 		lsl	r0, r0, #16
 4485 01d8 000082E5 		str	r0, [r2]
1276:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4486              		.loc 1 1276 0
 4487 01dc 000092E5 		ldr	r0, [r2]
 4488 01e0 BAC1D4E1 		ldrh	ip, [r4, #26]
 4489 01e4 0C0080E1 		orr	r0, r0, ip
 4490 01e8 000082E5 		str	r0, [r2]
1279:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4491              		.loc 1 1279 0
 4492 01ec 010045E2 		sub	r0, r5, #1
 4493 01f0 7000EFE6 		uxtb	r0, r0
 4494 01f4 010050E3 		cmp	r0, #1
 4495 01f8 5800009A 		bls	.L315
 4496              	.L305:
1298:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4497              		.loc 1 1298 0
 4498 01fc 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4499 0200 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4500 0204 5830A0E3 		mov	r3, #88
 4501 0208 932523E0 		mla	r3, r3, r5, r2
 4502 020c 382093E5 		ldr	r2, [r3, #56]
 4503 0210 003092E5 		ldr	r3, [r2]
 4504 0214 0130C3E3 		bic	r3, r3, #1
 4505 0218 003082E5 		str	r3, [r2]
1300:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4506              		.loc 1 1300 0
 4507 021c 000055E3 		cmp	r5, #0
 4508 0220 2700001A 		bne	.L306
1303:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4509              		.loc 1 1303 0
 4510 0224 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4511 0228 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4512 022c 5830A0E3 		mov	r3, #88
 4513 0230 932523E0 		mla	r3, r3, r5, r2
 4514 0234 441093E5 		ldr	r1, [r3, #68]
 4515 0238 002091E5 		ldr	r2, [r1]
 4516 023c FF2482E3 		orr	r2, r2, #-16777216
 4517 0240 002081E5 		str	r2, [r1]
1306:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4518              		.loc 1 1306 0
 4519 0244 482093E5 		ldr	r2, [r3, #72]
 4520 0248 003092E5 		ldr	r3, [r2]
 4521 024c FF3483E3 		orr	r3, r3, #-16777216
 4522 0250 003082E5 		str	r3, [r2]
1309:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (param->gr_format == VDC_GR_FORMAT_YCBCR422)
 4523              		.loc 1 1309 0
 4524 0254 003096E5 		ldr	r3, [r6]
 4525 0258 0E3AC3E3 		bic	r3, r3, #57344
 4526 025c 003086E5 		str	r3, [r6]
1310:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4527              		.loc 1 1310 0
 4528 0260 1130D4E5 		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 4529 0264 080053E3 		cmp	r3, #8
 4530 0268 5400000A 		beq	.L316
1322:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4531              		.loc 1 1322 0
 4532 026c 003096E5 		ldr	r3, [r6]
 4533 0270 003086E5 		str	r3, [r6]
 4534              	.L308:
1325:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4535              		.loc 1 1325 0
 4536 0274 0500A0E1 		mov	r0, r5
 4537 0278 FEFFFFEB 		bl	VDC_ShrdPrmGetColorSpaceFbRd
 4538              	.LVL408:
 4539 027c 0040A0E1 		mov	r4, r0
 4540              	.LVL409:
1327:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         SetImgQaImproverColorMtx(color_space);
 4541              		.loc 1 1327 0
 4542 0280 FEFFFFEB 		bl	SetScalerBackgroundColor
 4543              	.LVL410:
1328:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4544              		.loc 1 1328 0
 4545 0284 0400A0E1 		mov	r0, r4
 4546 0288 FEFFFFEB 		bl	SetImgQaImproverColorMtx
 4547              	.LVL411:
1333:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4548              		.loc 1 1333 0
 4549 028c 000054E3 		cmp	r4, #0
 4550 0290 5200001A 		bne	.L309
1336:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4551              		.loc 1 1336 0
 4552 0294 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 4553 0298 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 4554 029c 082093E5 		ldr	r2, [r3, #8]
 4555 02a0 003092E5 		ldr	r3, [r2]
 4556 02a4 1030C3E3 		bic	r3, r3, #16
 4557 02a8 003082E5 		str	r3, [r2]
 4558              	.L310:
1346:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4559              		.loc 1 1346 0
 4560 02ac 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 4561 02b0 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 4562 02b4 002093E5 		ldr	r2, [r3]
 4563 02b8 003092E5 		ldr	r3, [r2]
 4564 02bc 013083E3 		orr	r3, r3, #1
 4565 02c0 003082E5 		str	r3, [r2]
 4566              	.LVL412:
 4567              	.L306:
1353:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4568              		.loc 1 1353 0
 4569 02c4 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4570 02c8 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4571 02cc 5830A0E3 		mov	r3, #88
 4572 02d0 930505E0 		mul	r5, r3, r5
 4573              	.LVL413:
 4574 02d4 052092E7 		ldr	r2, [r2, r5]
 4575 02d8 003092E5 		ldr	r3, [r2]
 4576 02dc 113E83E3 		orr	r3, r3, #272
 4577 02e0 013083E3 		orr	r3, r3, #1
 4578 02e4 003082E5 		str	r3, [r2]
1355:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4579              		.loc 1 1355 0
 4580 02e8 08D08DE2 		add	sp, sp, #8
 4581              		.cfi_remember_state
 4582              		.cfi_def_cfa_offset 24
 4583              		@ sp needed
 4584 02ec F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 4585              	.LVL414:
 4586              	.L312:
 4587              		.cfi_restore_state
1179:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4588              		.loc 1 1179 0
 4589 02f0 00008DE5 		str	r0, [sp]
 4590 02f4 0830A0E1 		mov	r3, r8
 4591 02f8 0620A0E1 		mov	r2, r6
 4592 02fc 0710A0E1 		mov	r1, r7
 4593 0300 0500A0E1 		mov	r0, r5
 4594              	.LVL415:
 4595 0304 FEFFFFEB 		bl	SetScalerGraphics
 4596              	.LVL416:
 4597 0308 4BFFFFEA 		b	.L297
 4598              	.LVL417:
 4599              	.L313:
1207:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4600              		.loc 1 1207 0
 4601 030c 0220D4E5 		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 4602 0310 000052E3 		cmp	r2, #0
1210:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4603              		.loc 1 1210 0
 4604 0314 00209305 		ldreq	r2, [r3]
 4605 0318 1020C203 		biceq	r2, r2, #16
 4606 031c 00208305 		streq	r2, [r3]
 4607 0320 60FFFF0A 		beq	.L300
 4608              	.L301:
1215:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4609              		.loc 1 1215 0
 4610 0324 002093E5 		ldr	r2, [r3]
 4611 0328 102082E3 		orr	r2, r2, #16
 4612 032c 002083E5 		str	r2, [r3]
 4613 0330 5CFFFFEA 		b	.L300
 4614              	.L314:
1250:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4615              		.loc 1 1250 0
 4616 0334 1110D4E5 		ldrb	r1, [r4, #17]	@ zero_extendqisi2
 4617 0338 040094E5 		ldr	r0, [r4, #4]
 4618 033c FEFFFFEB 		bl	DisplayStartPixelSetting
 4619              	.LVL418:
 4620 0340 003096E5 		ldr	r3, [r6]
 4621 0344 030080E1 		orr	r0, r0, r3
 4622 0348 000086E5 		str	r0, [r6]
 4623 034c 86FFFFEA 		b	.L302
 4624              	.L303:
1263:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4625              		.loc 1 1263 0
 4626 0350 002093E5 		ldr	r2, [r3]
 4627 0354 012082E3 		orr	r2, r2, #1
 4628 0358 002083E5 		str	r2, [r3]
 4629 035c 8EFFFFEA 		b	.L304
 4630              	.L315:
1282:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4631              		.loc 1 1282 0
 4632 0360 000093E5 		ldr	r0, [r3]
 4633 0364 0D0AC0E3 		bic	r0, r0, #53248
 4634 0368 000083E5 		str	r0, [r3]
1285:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab4)) = reg_data;
 4635              		.loc 1 1285 0
 4636 036c 000091E5 		ldr	r0, [r1]
 4637              	.LVL419:
1286:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         reg_data                     = (*(img_synthesizer->gr_ab3));
 4638              		.loc 1 1286 0
 4639 0370 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 4640 0374 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 4641 0378 5830A0E3 		mov	r3, #88
 4642 037c 931523E0 		mla	r3, r3, r5, r1
 4643 0380 2C1093E5 		ldr	r1, [r3, #44]
 4644 0384 000081E5 		str	r0, [r1]
1287:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         (*(img_synthesizer->gr_ab5)) = reg_data;
 4645              		.loc 1 1287 0
 4646 0388 001092E5 		ldr	r1, [r2]
 4647              	.LVL420:
1288:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4648              		.loc 1 1288 0
 4649 038c 302093E5 		ldr	r2, [r3, #48]
 4650 0390 001082E5 		str	r1, [r2]
1291:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4651              		.loc 1 1291 0
 4652 0394 341093E5 		ldr	r1, [r3, #52]
 4653              	.LVL421:
 4654 0398 000091E5 		ldr	r0, [r1]
 4655 039c FF2CA0E3 		mov	r2, #65280
 4656              	.LVL422:
 4657 03a0 002E4FE3 		movt	r2, 65024
 4658 03a4 002002E0 		and	r2, r2, r0
 4659 03a8 002081E5 		str	r2, [r1]
 4660              	.LVL423:
1294:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4661              		.loc 1 1294 0
 4662 03ac 382093E5 		ldr	r2, [r3, #56]
 4663 03b0 003092E5 		ldr	r3, [r2]
 4664 03b4 FF3883E3 		orr	r3, r3, #16711680
 4665 03b8 003082E5 		str	r3, [r2]
 4666 03bc 8EFFFFEA 		b	.L305
 4667              	.L316:
1313:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4668              		.loc 1 1313 0
 4669 03c0 003096E5 		ldr	r3, [r6]
 4670 03c4 1220D4E5 		ldrb	r2, [r4, #18]	@ zero_extendqisi2
 4671 03c8 823683E1 		orr	r3, r3, r2, lsl #13
 4672 03cc 003086E5 		str	r3, [r6]
1316:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4673              		.loc 1 1316 0
 4674 03d0 003096E5 		ldr	r3, [r6]
 4675 03d4 013C83E3 		orr	r3, r3, #256
 4676 03d8 003086E5 		str	r3, [r6]
 4677 03dc A4FFFFEA 		b	.L308
 4678              	.LVL424:
 4679              	.L309:
1341:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4680              		.loc 1 1341 0
 4681 03e0 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 4682 03e4 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 4683 03e8 082093E5 		ldr	r2, [r3, #8]
 4684 03ec 003092E5 		ldr	r3, [r2]
 4685 03f0 103083E3 		orr	r3, r3, #16
 4686 03f4 003082E5 		str	r3, [r2]
 4687 03f8 ABFFFFEA 		b	.L310
 4688              		.cfi_endproc
 4689              	.LFE7:
 4691              		.section	.text.VDC_ChangeReadProcess,"ax",%progbits
 4692              		.align	2
 4693              		.global	VDC_ChangeReadProcess
 4694              		.syntax unified
 4695              		.arm
 4696              		.fpu neon
 4698              	VDC_ChangeReadProcess:
 4699              	.LFB8:
1366:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
 4700              		.loc 1 1366 0
 4701              		.cfi_startproc
 4702              		@ args = 0, pretend = 0, frame = 0
 4703              		@ frame_needed = 0, uses_anonymous_args = 0
 4704              	.LVL425:
 4705 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 4706              		.cfi_def_cfa_offset 24
 4707              		.cfi_offset 4, -24
 4708              		.cfi_offset 5, -20
 4709              		.cfi_offset 6, -16
 4710              		.cfi_offset 7, -12
 4711              		.cfi_offset 8, -8
 4712              		.cfi_offset 14, -4
 4713 0004 08D04DE2 		sub	sp, sp, #8
 4714              		.cfi_def_cfa_offset 32
 4715 0008 0050A0E1 		mov	r5, r0
 4716 000c 0140A0E1 		mov	r4, r1
1374:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     gr_grc_tmp      = VDC_ShrdPrmGetDisplayArea(graphics_id);
 4717              		.loc 1 1374 0
 4718 0010 FEFFFFEB 		bl	VDC_ShrdPrmGetSelFbAddrSig
 4719              	.LVL426:
 4720 0014 0060A0E1 		mov	r6, r0
 4721              	.LVL427:
1375:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     w_read_fb       = VDC_ShrdPrmGetFrBuffWidth_Rd(graphics_id);
 4722              		.loc 1 1375 0
 4723 0018 0500A0E1 		mov	r0, r5
 4724 001c FEFFFFEB 		bl	VDC_ShrdPrmGetDisplayArea
 4725              	.LVL428:
 4726 0020 0080A0E1 		mov	r8, r0
 4727              	.LVL429:
1376:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4728              		.loc 1 1376 0
 4729 0024 0500A0E1 		mov	r0, r5
 4730              	.LVL430:
 4731 0028 FEFFFFEB 		bl	VDC_ShrdPrmGetFrBuffWidth_Rd
 4732              	.LVL431:
 4733 002c 0070A0E1 		mov	r7, r0
 4734              	.LVL432:
1378:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4735              		.loc 1 1378 0
 4736 0030 0830A0E1 		mov	r3, r8
 4737 0034 0020A0E1 		mov	r2, r0
 4738 0038 0610A0E1 		mov	r1, r6
 4739 003c 0500A0E1 		mov	r0, r5
 4740              	.LVL433:
 4741 0040 FEFFFFEB 		bl	ConfirmGraphicsEnlargement
 4742              	.LVL434:
1380:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4743              		.loc 1 1380 0
 4744 0044 000055E3 		cmp	r5, #0
 4745 0048 6000000A 		beq	.L324
 4746              	.LVL435:
 4747              	.L318:
1388:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4748              		.loc 1 1388 0
 4749 004c 000094E5 		ldr	r0, [r4]
 4750 0050 000050E3 		cmp	r0, #0
 4751 0054 0900000A 		beq	.L319
1391:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4752              		.loc 1 1391 0
 4753 0058 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4754 005c 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4755 0060 5830A0E3 		mov	r3, #88
 4756 0064 932523E0 		mla	r3, r3, r5, r2
 4757 0068 0C7093E5 		ldr	r7, [r3, #12]
 4758              	.LVL436:
1394:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4759              		.loc 1 1394 0
 4760 006c FEFFFFEB 		bl	R_VDC_CPUVAddrToSysPAddr
 4761              	.LVL437:
 4762 0070 0700C0E3 		bic	r0, r0, #7
 4763 0074 000087E5 		str	r0, [r7]
1396:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4764              		.loc 1 1396 0
 4765 0078 010056E3 		cmp	r6, #1
 4766 007c 5A00009A 		bls	.L325
 4767              	.LVL438:
 4768              	.L319:
1409:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4769              		.loc 1 1409 0
 4770 0080 043094E5 		ldr	r3, [r4, #4]
 4771 0084 000053E3 		cmp	r3, #0
 4772 0088 1900000A 		beq	.L320
1412:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4773              		.loc 1 1412 0
 4774 008c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 4775 0090 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 4776 0094 5820A0E3 		mov	r2, #88
 4777 0098 923522E0 		mla	r2, r2, r5, r3
 4778 009c 181092E5 		ldr	r1, [r2, #24]
 4779 00a0 003091E5 		ldr	r3, [r1]
 4780 00a4 7F36C3E3 		bic	r3, r3, #133169152
 4781 00a8 0F38C3E3 		bic	r3, r3, #983040
 4782 00ac 003081E5 		str	r3, [r1]
1415:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4783              		.loc 1 1415 0
 4784 00b0 003091E5 		ldr	r3, [r1]
 4785 00b4 040094E5 		ldr	r0, [r4, #4]
 4786 00b8 B000D0E1 		ldrh	r0, [r0]
 4787 00bc 010040E2 		sub	r0, r0, #1
 4788 00c0 003883E1 		orr	r3, r3, r0, lsl #16
 4789 00c4 003081E5 		str	r3, [r1]
1418:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4790              		.loc 1 1418 0
 4791 00c8 1C2092E5 		ldr	r2, [r2, #28]
 4792 00cc 003092E5 		ldr	r3, [r2]
 4793 00d0 7F36C3E3 		bic	r3, r3, #133169152
 4794 00d4 0F38C3E3 		bic	r3, r3, #983040
 4795 00d8 003082E5 		str	r3, [r2]
1421:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4796              		.loc 1 1421 0
 4797 00dc 003092E5 		ldr	r3, [r2]
 4798 00e0 041094E5 		ldr	r1, [r4, #4]
 4799 00e4 B210D1E1 		ldrh	r1, [r1, #2]
 4800 00e8 011041E2 		sub	r1, r1, #1
 4801 00ec 013883E1 		orr	r3, r3, r1, lsl #16
 4802 00f0 003082E5 		str	r3, [r2]
 4803              	.L320:
1425:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4804              		.loc 1 1425 0
 4805 00f4 0C3094E5 		ldr	r3, [r4, #12]
 4806 00f8 000053E3 		cmp	r3, #0
 4807 00fc 0F00000A 		beq	.L321
1427:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4808              		.loc 1 1427 0
 4809 0100 D030D3E1 		ldrsb	r3, [r3]
 4810 0104 010073E3 		cmn	r3, #1
 4811 0108 0C00000A 		beq	.L321
1430:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4812              		.loc 1 1430 0
 4813 010c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4814 0110 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4815 0114 5830A0E3 		mov	r3, #88
 4816 0118 932523E0 		mla	r3, r3, r5, r2
 4817 011c 203093E5 		ldr	r3, [r3, #32]
 4818 0120 002093E5 		ldr	r2, [r3]
 4819 0124 0320C2E3 		bic	r2, r2, #3
 4820 0128 002083E5 		str	r2, [r3]
1433:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4821              		.loc 1 1433 0
 4822 012c 002093E5 		ldr	r2, [r3]
 4823 0130 0C1094E5 		ldr	r1, [r4, #12]
 4824 0134 D010D1E1 		ldrsb	r1, [r1]
 4825 0138 012082E1 		orr	r2, r2, r1
 4826 013c 002083E5 		str	r2, [r3]
 4827              	.L321:
1438:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4828              		.loc 1 1438 0
 4829 0140 081094E5 		ldr	r1, [r4, #8]
 4830 0144 000051E3 		cmp	r1, #0
 4831 0148 1600000A 		beq	.L322
1442:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4832              		.loc 1 1442 0
 4833 014c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4834 0150 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4835 0154 5830A0E3 		mov	r3, #88
 4836 0158 932523E0 		mla	r3, r3, r5, r2
 4837 015c 242093E5 		ldr	r2, [r3, #36]
 4838 0160 B010D1E1 		ldrh	r1, [r1]
 4839 0164 0118A0E1 		lsl	r1, r1, #16
 4840 0168 001082E5 		str	r1, [r2]
1445:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4841              		.loc 1 1445 0
 4842 016c 001092E5 		ldr	r1, [r2]
 4843 0170 080094E5 		ldr	r0, [r4, #8]
 4844 0174 B200D0E1 		ldrh	r0, [r0, #2]
 4845 0178 001081E1 		orr	r1, r1, r0
 4846 017c 001082E5 		str	r1, [r2]
1448:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4847              		.loc 1 1448 0
 4848 0180 283093E5 		ldr	r3, [r3, #40]
 4849 0184 082094E5 		ldr	r2, [r4, #8]
 4850 0188 B420D2E1 		ldrh	r2, [r2, #4]
 4851 018c 0228A0E1 		lsl	r2, r2, #16
 4852 0190 002083E5 		str	r2, [r3]
1451:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4853              		.loc 1 1451 0
 4854 0194 002093E5 		ldr	r2, [r3]
 4855 0198 081094E5 		ldr	r1, [r4, #8]
 4856 019c B610D1E1 		ldrh	r1, [r1, #6]
 4857 01a0 012082E1 		orr	r2, r2, r1
 4858 01a4 002083E5 		str	r2, [r3]
 4859              	.L322:
1457:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ChangeReadProcess() */
 4860              		.loc 1 1457 0
 4861 01a8 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4862 01ac 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4863 01b0 5830A0E3 		mov	r3, #88
 4864 01b4 930505E0 		mul	r5, r3, r5
 4865              	.LVL439:
 4866 01b8 052092E7 		ldr	r2, [r2, r5]
 4867 01bc 003092E5 		ldr	r3, [r2]
 4868 01c0 113083E3 		orr	r3, r3, #17
 4869 01c4 003082E5 		str	r3, [r2]
1458:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4870              		.loc 1 1458 0
 4871 01c8 08D08DE2 		add	sp, sp, #8
 4872              		.cfi_remember_state
 4873              		.cfi_def_cfa_offset 24
 4874              		@ sp needed
 4875 01cc F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 4876              	.LVL440:
 4877              	.L324:
 4878              		.cfi_restore_state
1382:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4879              		.loc 1 1382 0
 4880 01d0 00008DE5 		str	r0, [sp]
 4881 01d4 0630A0E1 		mov	r3, r6
 4882 01d8 0820A0E1 		mov	r2, r8
 4883 01dc 0710A0E1 		mov	r1, r7
 4884 01e0 0500A0E1 		mov	r0, r5
 4885              	.LVL441:
 4886 01e4 FEFFFFEB 		bl	SetScalerGraphics
 4887              	.LVL442:
 4888 01e8 97FFFFEA 		b	.L318
 4889              	.LVL443:
 4890              	.L325:
1398:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4891              		.loc 1 1398 0
 4892 01ec 0500A0E1 		mov	r0, r5
 4893 01f0 FEFFFFEB 		bl	VDC_ShrdPrmGetGraphicsFormat
 4894              	.LVL444:
1401:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 4895              		.loc 1 1401 0
 4896 01f4 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 4897 01f8 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 4898 01fc 5830A0E3 		mov	r3, #88
 4899 0200 932523E0 		mla	r3, r3, r5, r2
 4900 0204 1C6093E5 		ldr	r6, [r3, #28]
 4901              	.LVL445:
 4902 0208 003096E5 		ldr	r3, [r6]
 4903 020c 3F30C3E3 		bic	r3, r3, #63
 4904 0210 003086E5 		str	r3, [r6]
1404:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 4905              		.loc 1 1404 0
 4906 0214 0010A0E1 		mov	r1, r0
 4907 0218 000094E5 		ldr	r0, [r4]
 4908              	.LVL446:
 4909 021c FEFFFFEB 		bl	DisplayStartPixelSetting
 4910              	.LVL447:
 4911 0220 003096E5 		ldr	r3, [r6]
 4912 0224 030080E1 		orr	r0, r0, r3
 4913 0228 000086E5 		str	r0, [r6]
 4914 022c 93FFFFEA 		b	.L319
 4915              		.cfi_endproc
 4916              	.LFE8:
 4918              		.section	.text.VDC_StartProcess,"ax",%progbits
 4919              		.align	2
 4920              		.global	VDC_StartProcess
 4921              		.syntax unified
 4922              		.arm
 4923              		.fpu neon
 4925              	VDC_StartProcess:
 4926              	.LFB9:
1469:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                   layer_id_num;
 4927              		.loc 1 1469 0
 4928              		.cfi_startproc
 4929              		@ args = 0, pretend = 0, frame = 0
 4930              		@ frame_needed = 0, uses_anonymous_args = 0
 4931              	.LVL448:
 4932 0000 70402DE9 		push	{r4, r5, r6, lr}
 4933              		.cfi_def_cfa_offset 16
 4934              		.cfi_offset 4, -16
 4935              		.cfi_offset 5, -12
 4936              		.cfi_offset 6, -8
 4937              		.cfi_offset 14, -4
 4938 0004 0050A0E1 		mov	r5, r0
1474:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4939              		.loc 1 1474 0
 4940 0008 001091E5 		ldr	r1, [r1]
 4941              	.LVL449:
 4942 000c 000051E3 		cmp	r1, #0
 4943 0010 0000000A 		beq	.L327
1477:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4944              		.loc 1 1477 0
 4945 0014 FEFFFFEB 		bl	SetGraphicsDisplayMode
 4946              	.LVL450:
 4947              	.L327:
1480:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 4948              		.loc 1 1480 0
 4949 0018 010075E3 		cmn	r5, #1
 4950 001c 0040A003 		moveq	r4, #0
 4951 0020 0800000A 		beq	.L328
 4952              	.L334:
1482:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 4953              		.loc 1 1482 0
 4954 0024 003000E3 		movw	r3, #:lower16:.LANCHOR7
 4955 0028 003040E3 		movt	r3, #:upper16:.LANCHOR7
 4956 002c 053193E7 		ldr	r3, [r3, r5, lsl #2]
 4957 0030 0100A0E3 		mov	r0, #1
 4958 0034 33FF2FE1 		blx	r3
 4959              	.LVL451:
 4960              	.L329:
1497:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_StartProcess() */
 4961              		.loc 1 1497 0
 4962 0038 0500A0E1 		mov	r0, r5
 4963 003c FEFFFFEB 		bl	SetRegUpdateRwEnable
 4964              	.LVL452:
 4965 0040 7080BDE8 		pop	{r4, r5, r6, pc}
 4966              	.LVL453:
 4967              	.L330:
1487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4968              		.loc 1 1487 0 discriminator 2
 4969 0044 014084E2 		add	r4, r4, #1
 4970              	.LVL454:
 4971              	.L328:
1487:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 4972              		.loc 1 1487 0 is_stmt 0 discriminator 1
 4973 0048 030054E3 		cmp	r4, #3
 4974 004c F9FFFF8A 		bhi	.L329
1490:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (resource_state != VDC_RESOURCE_ST_INVALID)
 4975              		.loc 1 1490 0 is_stmt 1
 4976 0050 7400AFE6 		sxtb	r0, r4
 4977 0054 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcReady
 4978              	.LVL455:
1491:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 4979              		.loc 1 1491 0
 4980 0058 000050E3 		cmp	r0, #0
 4981 005c F8FFFF0A 		beq	.L330
1493:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 4982              		.loc 1 1493 0
 4983 0060 003000E3 		movw	r3, #:lower16:.LANCHOR7
 4984 0064 003040E3 		movt	r3, #:upper16:.LANCHOR7
 4985 0068 043193E7 		ldr	r3, [r3, r4, lsl #2]
 4986 006c 0100A0E3 		mov	r0, #1
 4987              	.LVL456:
 4988 0070 33FF2FE1 		blx	r3
 4989              	.LVL457:
 4990 0074 F2FFFFEA 		b	.L330
 4991              		.cfi_endproc
 4992              	.LFE9:
 4994              		.section	.text.VDC_StopProcess,"ax",%progbits
 4995              		.align	2
 4996              		.global	VDC_StopProcess
 4997              		.syntax unified
 4998              		.arm
 4999              		.fpu neon
 5001              	VDC_StopProcess:
 5002              	.LFB10:
1507:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     uint32_t                   layer_id_num;
 5003              		.loc 1 1507 0
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 0
 5006              		@ frame_needed = 0, uses_anonymous_args = 0
 5007              	.LVL458:
 5008 0000 70402DE9 		push	{r4, r5, r6, lr}
 5009              		.cfi_def_cfa_offset 16
 5010              		.cfi_offset 4, -16
 5011              		.cfi_offset 5, -12
 5012              		.cfi_offset 6, -8
 5013              		.cfi_offset 14, -4
 5014 0004 0050A0E1 		mov	r5, r0
1511:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5015              		.loc 1 1511 0
 5016 0008 010070E3 		cmn	r0, #1
 5017 000c 0040A003 		moveq	r4, #0
 5018 0010 0800000A 		beq	.L336
 5019              	.L342:
1513:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5020              		.loc 1 1513 0
 5021 0014 003000E3 		movw	r3, #:lower16:.LANCHOR7
 5022 0018 003040E3 		movt	r3, #:upper16:.LANCHOR7
 5023 001c 003193E7 		ldr	r3, [r3, r0, lsl #2]
 5024 0020 0000A0E3 		mov	r0, #0
 5025              	.LVL459:
 5026 0024 33FF2FE1 		blx	r3
 5027              	.LVL460:
 5028              	.L337:
1528:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_StopProcess() */
 5029              		.loc 1 1528 0
 5030 0028 0500A0E1 		mov	r0, r5
 5031 002c FEFFFFEB 		bl	SetRegUpdateRwEnable
 5032              	.LVL461:
 5033 0030 7080BDE8 		pop	{r4, r5, r6, pc}
 5034              	.LVL462:
 5035              	.L338:
1518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5036              		.loc 1 1518 0 discriminator 2
 5037 0034 014084E2 		add	r4, r4, #1
 5038              	.LVL463:
 5039              	.L336:
1518:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5040              		.loc 1 1518 0 is_stmt 0 discriminator 1
 5041 0038 030054E3 		cmp	r4, #3
 5042 003c F9FFFF8A 		bhi	.L337
1521:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (resource_state != VDC_RESOURCE_ST_INVALID)
 5043              		.loc 1 1521 0 is_stmt 1
 5044 0040 7400AFE6 		sxtb	r0, r4
 5045 0044 FEFFFFEB 		bl	VDC_ShrdPrmGetRwProcEnabled
 5046              	.LVL464:
1522:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 5047              		.loc 1 1522 0
 5048 0048 000050E3 		cmp	r0, #0
 5049 004c F8FFFF0A 		beq	.L338
1524:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5050              		.loc 1 1524 0
 5051 0050 003000E3 		movw	r3, #:lower16:.LANCHOR7
 5052 0054 003040E3 		movt	r3, #:upper16:.LANCHOR7
 5053 0058 043193E7 		ldr	r3, [r3, r4, lsl #2]
 5054 005c 0000A0E3 		mov	r0, #0
 5055              	.LVL465:
 5056 0060 33FF2FE1 		blx	r3
 5057              	.LVL466:
 5058 0064 F2FFFFEA 		b	.L338
 5059              		.cfi_endproc
 5060              	.LFE10:
 5062              		.section	.text.VDC_VideoNoiseReduction,"ax",%progbits
 5063              		.align	2
 5064              		.global	VDC_VideoNoiseReduction
 5065              		.syntax unified
 5066              		.arm
 5067              		.fpu neon
 5069              	VDC_VideoNoiseReduction:
 5070              	.LFB11:
1540:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_input_ctrl_t   * input_ctrl;
 5071              		.loc 1 1540 0
 5072              		.cfi_startproc
 5073              		@ args = 0, pretend = 0, frame = 0
 5074              		@ frame_needed = 0, uses_anonymous_args = 0
 5075              	.LVL467:
 5076 0000 04E02DE5 		str	lr, [sp, #-4]!
 5077              		.cfi_def_cfa_offset 4
 5078              		.cfi_offset 14, -4
 5079              	.LVL468:
1547:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5080              		.loc 1 1547 0
 5081 0004 000051E3 		cmp	r1, #0
 5082 0008 2A00000A 		beq	.L344
 5083              	.LVL469:
1553:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5084              		.loc 1 1553 0
 5085 000c 00C000E3 		movw	ip, #:lower16:vdc_regaddr_input_ctrl
 5086 0010 00C040E3 		movt	ip, #:upper16:vdc_regaddr_input_ctrl
 5087 0014 18309CE5 		ldr	r3, [ip, #24]
 5088 0018 002093E5 		ldr	r2, [r3]
 5089 001c 7F2CC2E3 		bic	r2, r2, #32512
 5090 0020 3320C2E3 		bic	r2, r2, #51
 5091 0024 002083E5 		str	r2, [r3]
1556:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5092              		.loc 1 1556 0
 5093 0028 002093E5 		ldr	r2, [r3]
 5094 002c 04E091E5 		ldr	lr, [r1, #4]
 5095 0030 0E2482E1 		orr	r2, r2, lr, lsl #8
 5096 0034 002083E5 		str	r2, [r3]
1559:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5097              		.loc 1 1559 0
 5098 0038 002093E5 		ldr	r2, [r3]
 5099 003c 00E0D1E5 		ldrb	lr, [r1]	@ zero_extendqisi2
 5100 0040 0E2282E1 		orr	r2, r2, lr, lsl #4
 5101 0044 002083E5 		str	r2, [r3]
1562:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5102              		.loc 1 1562 0
 5103 0048 002093E5 		ldr	r2, [r3]
 5104 004c 08E0D1E5 		ldrb	lr, [r1, #8]	@ zero_extendqisi2
 5105 0050 0E2082E1 		orr	r2, r2, lr
 5106 0054 002083E5 		str	r2, [r3]
 5107              	.LVL470:
1568:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5108              		.loc 1 1568 0
 5109 0058 1C309CE5 		ldr	r3, [ip, #28]
 5110 005c 102091E5 		ldr	r2, [r1, #16]
 5111 0060 022CA0E1 		lsl	r2, r2, #24
 5112 0064 002083E5 		str	r2, [r3]
1571:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5113              		.loc 1 1571 0
 5114 0068 002093E5 		ldr	r2, [r3]
 5115 006c 0CC0D1E5 		ldrb	ip, [r1, #12]	@ zero_extendqisi2
 5116 0070 0C2A82E1 		orr	r2, r2, ip, lsl #20
 5117 0074 002083E5 		str	r2, [r3]
1574:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5118              		.loc 1 1574 0
 5119 0078 002093E5 		ldr	r2, [r3]
 5120 007c 14C0D1E5 		ldrb	ip, [r1, #20]	@ zero_extendqisi2
 5121 0080 0C2882E1 		orr	r2, r2, ip, lsl #16
 5122 0084 002083E5 		str	r2, [r3]
 5123              	.LVL471:
1580:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5124              		.loc 1 1580 0
 5125 0088 002093E5 		ldr	r2, [r3]
 5126 008c 1CC091E5 		ldr	ip, [r1, #28]
 5127 0090 0C2482E1 		orr	r2, r2, ip, lsl #8
 5128 0094 002083E5 		str	r2, [r3]
1583:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5129              		.loc 1 1583 0
 5130 0098 002093E5 		ldr	r2, [r3]
 5131 009c 18C0D1E5 		ldrb	ip, [r1, #24]	@ zero_extendqisi2
 5132 00a0 0C2282E1 		orr	r2, r2, ip, lsl #4
 5133 00a4 002083E5 		str	r2, [r3]
1586:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5134              		.loc 1 1586 0
 5135 00a8 002093E5 		ldr	r2, [r3]
 5136 00ac 2010D1E5 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
 5137              	.LVL472:
 5138 00b0 012082E1 		orr	r2, r2, r1
 5139 00b4 002083E5 		str	r2, [r3]
 5140              	.LVL473:
 5141              	.L344:
1589:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5142              		.loc 1 1589 0
 5143 00b8 000050E3 		cmp	r0, #0
 5144 00bc 0C00000A 		beq	.L348
1597:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5145              		.loc 1 1597 0
 5146 00c0 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 5147 00c4 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 5148 00c8 182093E5 		ldr	r2, [r3, #24]
 5149 00cc 003092E5 		ldr	r3, [r2]
 5150 00d0 013883E3 		orr	r3, r3, #65536
 5151 00d4 003082E5 		str	r3, [r2]
 5152              	.L346:
1602:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5153              		.loc 1 1602 0
 5154 00d8 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 5155 00dc 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 5156 00e0 142093E5 		ldr	r2, [r3, #20]
 5157 00e4 003092E5 		ldr	r3, [r2]
 5158 00e8 013083E3 		orr	r3, r3, #1
 5159 00ec 003082E5 		str	r3, [r2]
 5160 00f0 04F09DE4 		ldr	pc, [sp], #4
 5161              	.L348:
1592:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5162              		.loc 1 1592 0
 5163 00f4 003000E3 		movw	r3, #:lower16:vdc_regaddr_input_ctrl
 5164 00f8 003040E3 		movt	r3, #:upper16:vdc_regaddr_input_ctrl
 5165 00fc 182093E5 		ldr	r2, [r3, #24]
 5166 0100 003092E5 		ldr	r3, [r2]
 5167 0104 0138C3E3 		bic	r3, r3, #65536
 5168 0108 003082E5 		str	r3, [r2]
 5169 010c F1FFFFEA 		b	.L346
 5170              		.cfi_endproc
 5171              	.LFE11:
 5173              		.section	.text.VDC_ImageColorMatrix,"ax",%progbits
 5174              		.align	2
 5175              		.global	VDC_ImageColorMatrix
 5176              		.syntax unified
 5177              		.arm
 5178              		.fpu neon
 5180              	VDC_ImageColorMatrix:
 5181              	.LFB12:
1613:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     SetColorMatrix(param->mtx_mode, param->offset, param->gain, &vdc_regaddr_color_matrix[param->mo
 5182              		.loc 1 1613 0
 5183              		.cfi_startproc
 5184              		@ args = 0, pretend = 0, frame = 0
 5185              		@ frame_needed = 0, uses_anonymous_args = 0
 5186              	.LVL474:
 5187 0000 10402DE9 		push	{r4, lr}
 5188              		.cfi_def_cfa_offset 8
 5189              		.cfi_offset 4, -8
 5190              		.cfi_offset 14, -4
1614:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** }   /* End of function VDC_ImageColorMatrix() */
 5191              		.loc 1 1614 0
 5192 0004 0020D0E5 		ldrb	r2, [r0]	@ zero_extendqisi2
 5193 0008 003000E3 		movw	r3, #:lower16:vdc_regaddr_color_matrix
 5194 000c 003040E3 		movt	r3, #:upper16:vdc_regaddr_color_matrix
 5195 0010 823283E0 		add	r3, r3, r2, lsl #5
 5196 0014 082080E2 		add	r2, r0, #8
 5197 0018 021080E2 		add	r1, r0, #2
 5198 001c 0100D0E5 		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5199              	.LVL475:
 5200 0020 FEFFFFEB 		bl	SetColorMatrix
 5201              	.LVL476:
 5202 0024 1080BDE8 		pop	{r4, pc}
 5203              		.cfi_endproc
 5204              	.LFE12:
 5206              		.section	.text.VDC_ImageEnhancement,"ax",%progbits
 5207              		.align	2
 5208              		.global	VDC_ImageEnhancement
 5209              		.syntax unified
 5210              		.arm
 5211              		.fpu neon
 5213              	VDC_ImageEnhancement:
 5214              	.LFB13:
1633:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t * img_qlty_imp;
 5215              		.loc 1 1633 0
 5216              		.cfi_startproc
 5217              		@ args = 4, pretend = 0, frame = 0
 5218              		@ frame_needed = 0, uses_anonymous_args = 0
 5219              	.LVL477:
 5220 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}
 5221              		.cfi_def_cfa_offset 24
 5222              		.cfi_offset 4, -24
 5223              		.cfi_offset 5, -20
 5224              		.cfi_offset 6, -16
 5225              		.cfi_offset 7, -12
 5226              		.cfi_offset 8, -8
 5227              		.cfi_offset 14, -4
 5228 0004 0260A0E1 		mov	r6, r2
 5229 0008 0370A0E1 		mov	r7, r3
 5230 000c 18409DE5 		ldr	r4, [sp, #24]
 5231              	.LVL478:
1639:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5232              		.loc 1 1639 0
 5233 0010 005000E3 		movw	r5, #:lower16:vdc_regaddr_img_qlty_imp
 5234 0014 005040E3 		movt	r5, #:upper16:vdc_regaddr_img_qlty_imp
 5235 0018 0520A0E1 		mov	r2, r5
 5236              	.LVL479:
 5237 001c FEFFFFEB 		bl	SetImageEnhancementSharpness
 5238              	.LVL480:
1642:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5239              		.loc 1 1642 0
 5240 0020 0520A0E1 		mov	r2, r5
 5241 0024 0710A0E1 		mov	r1, r7
 5242 0028 0600A0E1 		mov	r0, r6
 5243 002c FEFFFFEB 		bl	SetImageEnhancementLti
 5244              	.LVL481:
1645:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5245              		.loc 1 1645 0
 5246 0030 000054E3 		cmp	r4, #0
 5247 0034 0F00000A 		beq	.L352
1648:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5248              		.loc 1 1648 0
 5249 0038 0C2095E5 		ldr	r2, [r5, #12]
 5250 003c B010D4E1 		ldrh	r1, [r4]
 5251 0040 0118A0E1 		lsl	r1, r1, #16
 5252 0044 001082E5 		str	r1, [r2]
1651:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5253              		.loc 1 1651 0
 5254 0048 001092E5 		ldr	r1, [r2]
 5255 004c B200D4E1 		ldrh	r0, [r4, #2]
 5256 0050 001081E1 		orr	r1, r1, r0
 5257 0054 001082E5 		str	r1, [r2]
1654:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5258              		.loc 1 1654 0
 5259 0058 103095E5 		ldr	r3, [r5, #16]
 5260 005c B420D4E1 		ldrh	r2, [r4, #4]
 5261 0060 0228A0E1 		lsl	r2, r2, #16
 5262 0064 002083E5 		str	r2, [r3]
1657:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5263              		.loc 1 1657 0
 5264 0068 002093E5 		ldr	r2, [r3]
 5265 006c B610D4E1 		ldrh	r1, [r4, #6]
 5266 0070 012082E1 		orr	r2, r2, r1
 5267 0074 002083E5 		str	r2, [r3]
 5268              	.L352:
1662:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5269              		.loc 1 1662 0
 5270 0078 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 5271 007c 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 5272 0080 002093E5 		ldr	r2, [r3]
 5273 0084 003092E5 		ldr	r3, [r2]
 5274 0088 013083E3 		orr	r3, r3, #1
 5275 008c 003082E5 		str	r3, [r2]
 5276 0090 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}
 5277              		.cfi_endproc
 5278              	.LFE13:
 5280              		.section	.text.VDC_ImageBlackStretch,"ax",%progbits
 5281              		.align	2
 5282              		.global	VDC_ImageBlackStretch
 5283              		.syntax unified
 5284              		.arm
 5285              		.fpu neon
 5287              	VDC_ImageBlackStretch:
 5288              	.LFB14:
1676:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_qlty_imp_t * img_qlty_imp;
 5289              		.loc 1 1676 0
 5290              		.cfi_startproc
 5291              		@ args = 0, pretend = 0, frame = 0
 5292              		@ frame_needed = 0, uses_anonymous_args = 0
 5293              		@ link register save eliminated.
 5294              	.LVL482:
1682:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5295              		.loc 1 1682 0
 5296 0000 000051E3 		cmp	r1, #0
 5297 0004 1100000A 		beq	.L355
1685:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5298              		.loc 1 1685 0
 5299 0008 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 5300 000c 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 5301 0010 043093E5 		ldr	r3, [r3, #4]
 5302 0014 B020D1E1 		ldrh	r2, [r1]
 5303 0018 022AA0E1 		lsl	r2, r2, #20
 5304 001c 002083E5 		str	r2, [r3]
1688:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5305              		.loc 1 1688 0
 5306 0020 002093E5 		ldr	r2, [r3]
 5307 0024 B2C0D1E1 		ldrh	ip, [r1, #2]
 5308 0028 0C2882E1 		orr	r2, r2, ip, lsl #16
 5309 002c 002083E5 		str	r2, [r3]
1691:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5310              		.loc 1 1691 0
 5311 0030 002093E5 		ldr	r2, [r3]
 5312 0034 B4C0D1E1 		ldrh	ip, [r1, #4]
 5313 0038 0C2482E1 		orr	r2, r2, ip, lsl #8
 5314 003c 002083E5 		str	r2, [r3]
1694:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5315              		.loc 1 1694 0
 5316 0040 002093E5 		ldr	r2, [r3]
 5317 0044 B610D1E1 		ldrh	r1, [r1, #6]
 5318              	.LVL483:
 5319 0048 012082E1 		orr	r2, r2, r1
 5320 004c 002083E5 		str	r2, [r3]
 5321              	.L355:
1697:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5322              		.loc 1 1697 0
 5323 0050 000050E3 		cmp	r0, #0
 5324 0054 0C00000A 		beq	.L358
1705:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5325              		.loc 1 1705 0
 5326 0058 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 5327 005c 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 5328 0060 042093E5 		ldr	r2, [r3, #4]
 5329 0064 003092E5 		ldr	r3, [r2]
 5330 0068 013483E3 		orr	r3, r3, #16777216
 5331 006c 003082E5 		str	r3, [r2]
 5332              	.L357:
1710:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5333              		.loc 1 1710 0
 5334 0070 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 5335 0074 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 5336 0078 002093E5 		ldr	r2, [r3]
 5337 007c 003092E5 		ldr	r3, [r2]
 5338 0080 013083E3 		orr	r3, r3, #1
 5339 0084 003082E5 		str	r3, [r2]
 5340 0088 1EFF2FE1 		bx	lr
 5341              	.L358:
1700:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5342              		.loc 1 1700 0
 5343 008c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_qlty_imp
 5344 0090 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_qlty_imp
 5345 0094 042093E5 		ldr	r2, [r3, #4]
 5346 0098 003092E5 		ldr	r3, [r2]
 5347 009c 0134C3E3 		bic	r3, r3, #16777216
 5348 00a0 003082E5 		str	r3, [r2]
 5349 00a4 F1FFFFEA 		b	.L357
 5350              		.cfi_endproc
 5351              	.LFE14:
 5353              		.section	.text.VDC_AlphaBlending,"ax",%progbits
 5354              		.align	2
 5355              		.global	VDC_AlphaBlending
 5356              		.syntax unified
 5357              		.arm
 5358              		.fpu neon
 5360              	VDC_AlphaBlending:
 5361              	.LFB15:
1723:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
 5362              		.loc 1 1723 0
 5363              		.cfi_startproc
 5364              		@ args = 0, pretend = 0, frame = 0
 5365              		@ frame_needed = 0, uses_anonymous_args = 0
 5366              	.LVL484:
 5367 0000 04E02DE5 		str	lr, [sp, #-4]!
 5368              		.cfi_def_cfa_offset 4
 5369              		.cfi_offset 14, -4
 5370              	.LVL485:
1729:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5371              		.loc 1 1729 0
 5372 0004 003091E5 		ldr	r3, [r1]
 5373 0008 000053E3 		cmp	r3, #0
 5374 000c 1500000A 		beq	.L360
1732:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5375              		.loc 1 1732 0
 5376 0010 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5377 0014 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5378 0018 5830A0E3 		mov	r3, #88
 5379 001c 932023E0 		mla	r3, r3, r0, r2
 5380 0020 442093E5 		ldr	r2, [r3, #68]
 5381 0024 00C092E5 		ldr	ip, [r2]
 5382 0028 FFC4CCE3 		bic	ip, ip, #-16777216
 5383 002c 00C082E5 		str	ip, [r2]
1735:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5384              		.loc 1 1735 0
 5385 0030 00C092E5 		ldr	ip, [r2]
 5386 0034 00E091E5 		ldr	lr, [r1]
 5387 0038 00E0DEE5 		ldrb	lr, [lr]	@ zero_extendqisi2
 5388 003c 0ECC8CE1 		orr	ip, ip, lr, lsl #24
 5389 0040 00C082E5 		str	ip, [r2]
1738:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5390              		.loc 1 1738 0
 5391 0044 483093E5 		ldr	r3, [r3, #72]
 5392 0048 002093E5 		ldr	r2, [r3]
 5393 004c FF24C2E3 		bic	r2, r2, #-16777216
 5394 0050 002083E5 		str	r2, [r3]
1741:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5395              		.loc 1 1741 0
 5396 0054 002093E5 		ldr	r2, [r3]
 5397 0058 00C091E5 		ldr	ip, [r1]
 5398 005c 01C0DCE5 		ldrb	ip, [ip, #1]	@ zero_extendqisi2
 5399 0060 0C2C82E1 		orr	r2, r2, ip, lsl #24
 5400 0064 002083E5 		str	r2, [r3]
 5401              	.L360:
1745:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5402              		.loc 1 1745 0
 5403 0068 043091E5 		ldr	r3, [r1, #4]
 5404 006c 000053E3 		cmp	r3, #0
 5405 0070 0A00000A 		beq	.L361
1747:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5406              		.loc 1 1747 0
 5407 0074 0030D3E5 		ldrb	r3, [r3]	@ zero_extendqisi2
 5408 0078 000053E3 		cmp	r3, #0
 5409 007c 1000000A 		beq	.L364
1755:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5410              		.loc 1 1755 0
 5411 0080 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5412 0084 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5413 0088 5830A0E3 		mov	r3, #88
 5414 008c 932023E0 		mla	r3, r3, r0, r2
 5415 0090 202093E5 		ldr	r2, [r3, #32]
 5416 0094 003092E5 		ldr	r3, [r2]
 5417 0098 013983E3 		orr	r3, r3, #16384
 5418 009c 003082E5 		str	r3, [r2]
 5419              	.L361:
1761:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5420              		.loc 1 1761 0
 5421 00a0 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5422 00a4 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5423 00a8 5830A0E3 		mov	r3, #88
 5424 00ac 930000E0 		mul	r0, r3, r0
 5425              	.LVL486:
 5426 00b0 002092E7 		ldr	r2, [r2, r0]
 5427 00b4 003092E5 		ldr	r3, [r2]
 5428 00b8 103083E3 		orr	r3, r3, #16
 5429 00bc 003082E5 		str	r3, [r2]
 5430 00c0 04F09DE4 		ldr	pc, [sp], #4
 5431              	.LVL487:
 5432              	.L364:
1750:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5433              		.loc 1 1750 0
 5434 00c4 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5435 00c8 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5436 00cc 5830A0E3 		mov	r3, #88
 5437 00d0 932023E0 		mla	r3, r3, r0, r2
 5438 00d4 202093E5 		ldr	r2, [r3, #32]
 5439 00d8 003092E5 		ldr	r3, [r2]
 5440 00dc 0139C3E3 		bic	r3, r3, #16384
 5441 00e0 003082E5 		str	r3, [r2]
 5442 00e4 EDFFFFEA 		b	.L361
 5443              		.cfi_endproc
 5444              	.LFE15:
 5446              		.section	.text.VDC_AlphaBlendingRect,"ax",%progbits
 5447              		.align	2
 5448              		.global	VDC_AlphaBlendingRect
 5449              		.syntax unified
 5450              		.arm
 5451              		.fpu neon
 5453              	VDC_AlphaBlendingRect:
 5454              	.LFB16:
1777:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_img_synthesizer_t  * img_synthesizer;
 5455              		.loc 1 1777 0
 5456              		.cfi_startproc
 5457              		@ args = 0, pretend = 0, frame = 0
 5458              		@ frame_needed = 0, uses_anonymous_args = 0
 5459              	.LVL488:
 5460 0000 70402DE9 		push	{r4, r5, r6, lr}
 5461              		.cfi_def_cfa_offset 16
 5462              		.cfi_offset 4, -16
 5463              		.cfi_offset 5, -12
 5464              		.cfi_offset 6, -8
 5465              		.cfi_offset 14, -4
 5466 0004 0040A0E1 		mov	r4, r0
 5467 0008 0250A0E1 		mov	r5, r2
1782:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5468              		.loc 1 1782 0
 5469 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 5470 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 5471 0014 5820A0E3 		mov	r2, #88
 5472              	.LVL489:
 5473 0018 923023E0 		mla	r3, r2, r0, r3
 5474              	.LVL490:
1785:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5475              		.loc 1 1785 0
 5476 001c 000051E3 		cmp	r1, #0
 5477 0020 3E00001A 		bne	.L366
1788:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5478              		.loc 1 1788 0
 5479 0024 201093E5 		ldr	r1, [r3, #32]
 5480              	.LVL491:
 5481 0028 002091E5 		ldr	r2, [r1]
 5482 002c 012AC2E3 		bic	r2, r2, #4096
 5483 0030 002081E5 		str	r2, [r1]
 5484              	.L367:
1797:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5485              		.loc 1 1797 0
 5486 0034 000055E3 		cmp	r5, #0
 5487 0038 2F00000A 		beq	.L368
1800:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5488              		.loc 1 1800 0
 5489 003c 0310A0E1 		mov	r1, r3
 5490 0040 000095E5 		ldr	r0, [r5]
 5491              	.LVL492:
 5492 0044 FEFFFFEB 		bl	SetAlphaRectArea
 5493              	.LVL493:
1803:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5494              		.loc 1 1803 0
 5495 0048 043095E5 		ldr	r3, [r5, #4]
 5496              	.LVL494:
1806:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5497              		.loc 1 1806 0
 5498 004c 000053E3 		cmp	r3, #0
 5499 0050 2900000A 		beq	.L368
1809:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 5500              		.loc 1 1809 0
 5501 0054 0420D3E5 		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 5502 0058 000052E3 		cmp	r2, #0
 5503 005c 3800001A 		bne	.L369
1812:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5504              		.loc 1 1812 0
 5505 0060 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5506              	.LVL495:
 5507 0064 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5508              	.LVL496:
 5509 0068 5820A0E3 		mov	r2, #88
 5510              	.LVL497:
 5511 006c 921422E0 		mla	r2, r2, r4, r1
 5512              	.LVL498:
 5513 0070 201092E5 		ldr	r1, [r2, #32]
 5514 0074 002091E5 		ldr	r2, [r1]
 5515 0078 0229C2E3 		bic	r2, r2, #32768
 5516 007c 002081E5 		str	r2, [r1]
 5517              	.L370:
1821:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 5518              		.loc 1 1821 0
 5519 0080 F000D3E1 		ldrsh	r0, [r3]
 5520 0084 000050E3 		cmp	r0, #0
 5521 0088 360000BA 		blt	.L374
1832:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5522              		.loc 1 1832 0
 5523 008c 00C0A0E1 		mov	ip, r0
 5524              	.LVL499:
1835:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5525              		.loc 1 1835 0
 5526 0090 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5527              	.LVL500:
 5528 0094 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5529              	.LVL501:
 5530 0098 5820A0E3 		mov	r2, #88
 5531              	.LVL502:
 5532 009c 921422E0 		mla	r2, r2, r4, r1
 5533              	.LVL503:
 5534 00a0 342092E5 		ldr	r2, [r2, #52]
 5535 00a4 0010A0E3 		mov	r1, #0
 5536 00a8 001082E5 		str	r1, [r2]
 5537              	.LVL504:
 5538              	.L372:
1837:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5539              		.loc 1 1837 0
 5540 00ac 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5541              	.LVL505:
 5542 00b0 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5543              	.LVL506:
 5544 00b4 5820A0E3 		mov	r2, #88
 5545              	.LVL507:
 5546 00b8 921422E0 		mla	r2, r2, r4, r1
 5547              	.LVL508:
 5548 00bc 341092E5 		ldr	r1, [r2, #52]
 5549 00c0 000091E5 		ldr	r0, [r1]
 5550 00c4 0C0880E1 		orr	r0, r0, ip, lsl #16
 5551 00c8 000081E5 		str	r0, [r1]
1840:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5552              		.loc 1 1840 0
 5553 00cc 000091E5 		ldr	r0, [r1]
 5554 00d0 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 5555              	.LVL509:
 5556 00d4 0C0080E1 		orr	r0, r0, ip
 5557 00d8 000081E5 		str	r0, [r1]
1843:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5558              		.loc 1 1843 0
 5559 00dc 382092E5 		ldr	r2, [r2, #56]
 5560 00e0 001092E5 		ldr	r1, [r2]
 5561 00e4 FF18C1E3 		bic	r1, r1, #16711680
 5562 00e8 001082E5 		str	r1, [r2]
1846:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5563              		.loc 1 1846 0
 5564 00ec 001092E5 		ldr	r1, [r2]
 5565 00f0 0330D3E5 		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 5566              	.LVL510:
 5567 00f4 033881E1 		orr	r3, r1, r3, lsl #16
 5568 00f8 003082E5 		str	r3, [r2]
 5569              	.L368:
1852:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5570              		.loc 1 1852 0
 5571 00fc 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5572              	.LVL511:
 5573 0100 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5574              	.LVL512:
 5575 0104 5830A0E3 		mov	r3, #88
 5576              	.LVL513:
 5577 0108 930404E0 		mul	r4, r3, r4
 5578              	.LVL514:
 5579 010c 042092E7 		ldr	r2, [r2, r4]
 5580 0110 003092E5 		ldr	r3, [r2]
 5581 0114 103083E3 		orr	r3, r3, #16
 5582 0118 003082E5 		str	r3, [r2]
 5583 011c 7080BDE8 		pop	{r4, r5, r6, pc}
 5584              	.LVL515:
 5585              	.L366:
1793:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5586              		.loc 1 1793 0
 5587 0120 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5588              	.LVL516:
 5589 0124 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5590 0128 5820A0E3 		mov	r2, #88
 5591 012c 921022E0 		mla	r2, r2, r0, r1
 5592 0130 201092E5 		ldr	r1, [r2, #32]
 5593 0134 002091E5 		ldr	r2, [r1]
 5594 0138 012A82E3 		orr	r2, r2, #4096
 5595 013c 002081E5 		str	r2, [r1]
 5596 0140 BBFFFFEA 		b	.L367
 5597              	.LVL517:
 5598              	.L369:
1817:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5599              		.loc 1 1817 0
 5600 0144 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5601              	.LVL518:
 5602 0148 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5603              	.LVL519:
 5604 014c 5820A0E3 		mov	r2, #88
 5605              	.LVL520:
 5606 0150 921422E0 		mla	r2, r2, r4, r1
 5607              	.LVL521:
 5608 0154 201092E5 		ldr	r1, [r2, #32]
 5609 0158 002091E5 		ldr	r2, [r1]
 5610 015c 022982E3 		orr	r2, r2, #32768
 5611 0160 002081E5 		str	r2, [r1]
 5612 0164 C5FFFFEA 		b	.L370
 5613              	.L374:
1824:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5614              		.loc 1 1824 0
 5615 0168 00C060E2 		rsb	ip, r0, #0
 5616              	.LVL522:
1827:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5617              		.loc 1 1827 0
 5618 016c 001000E3 		movw	r1, #:lower16:vdc_regaddr_img_synthesizer
 5619              	.LVL523:
 5620 0170 001040E3 		movt	r1, #:upper16:vdc_regaddr_img_synthesizer
 5621              	.LVL524:
 5622 0174 5820A0E3 		mov	r2, #88
 5623              	.LVL525:
 5624 0178 921422E0 		mla	r2, r2, r4, r1
 5625              	.LVL526:
 5626 017c 342092E5 		ldr	r2, [r2, #52]
 5627 0180 0114A0E3 		mov	r1, #16777216
 5628 0184 001082E5 		str	r1, [r2]
 5629 0188 C7FFFFEA 		b	.L372
 5630              		.cfi_endproc
 5631              	.LFE16:
 5633              		.section	.text.VDC_Chromakey,"ax",%progbits
 5634              		.align	2
 5635              		.global	VDC_Chromakey
 5636              		.syntax unified
 5637              		.arm
 5638              		.fpu neon
 5640              	VDC_Chromakey:
 5641              	.LFB17:
1868:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_format_t                        gr_format_tmp;
 5642              		.loc 1 1868 0
 5643              		.cfi_startproc
 5644              		@ args = 0, pretend = 0, frame = 0
 5645              		@ frame_needed = 0, uses_anonymous_args = 0
 5646              	.LVL527:
 5647 0000 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5648              		.cfi_def_cfa_offset 32
 5649              		.cfi_offset 4, -32
 5650              		.cfi_offset 5, -28
 5651              		.cfi_offset 6, -24
 5652              		.cfi_offset 7, -20
 5653              		.cfi_offset 8, -16
 5654              		.cfi_offset 9, -12
 5655              		.cfi_offset 10, -8
 5656              		.cfi_offset 14, -4
 5657 0004 0040A0E1 		mov	r4, r0
 5658 0008 0170A0E1 		mov	r7, r1
 5659              	.LVL528:
1876:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5660              		.loc 1 1876 0
 5661 000c 005052E2 		subs	r5, r2, #0
 5662 0010 1B00000A 		beq	.L376
1878:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if ((gr_format_tmp == VDC_GR_FORMAT_CLUT1) ||
 5663              		.loc 1 1878 0
 5664 0014 FEFFFFEB 		bl	VDC_ShrdPrmGetGraphicsFormat
 5665              	.LVL529:
 5666 0018 0060A0E1 		mov	r6, r0
 5667              	.LVL530:
1880:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (gr_format_tmp == VDC_GR_FORMAT_CLUT8))
 5668              		.loc 1 1880 0
 5669 001c 053040E2 		sub	r3, r0, #5
 5670 0020 7330EFE6 		uxtb	r3, r3
1879:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (gr_format_tmp == VDC_GR_FORMAT_CLUT4) ||
 5671              		.loc 1 1879 0
 5672 0024 020053E3 		cmp	r3, #2
 5673 0028 2800008A 		bhi	.L377
1884:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9))  = ColorConversionIntoAgbr(param->rep_color);
 5674              		.loc 1 1884 0
 5675 002c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5676 0030 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5677 0034 5830A0E3 		mov	r3, #88
 5678 0038 932423E0 		mla	r3, r3, r4, r2
 5679 003c 3C1093E5 		ldr	r1, [r3, #60]
 5680 0040 002095E5 		ldr	r2, [r5]
 5681 0044 022CA0E1 		lsl	r2, r2, #24
 5682 0048 002081E5 		str	r2, [r1]
1885:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5683              		.loc 1 1885 0
 5684 004c 406093E5 		ldr	r6, [r3, #64]
 5685 0050 040095E5 		ldr	r0, [r5, #4]
 5686              	.LVL531:
 5687 0054 FEFFFFEB 		bl	ColorConversionIntoAgbr
 5688              	.LVL532:
 5689 0058 000086E5 		str	r0, [r6]
 5690              	.L378:
1893:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5691              		.loc 1 1893 0
 5692 005c 000054E3 		cmp	r4, #0
 5693 0060 2800001A 		bne	.L379
1896:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5694              		.loc 1 1896 0
 5695 0064 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5696 0068 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5697 006c 5830A0E3 		mov	r3, #88
 5698 0070 932423E0 		mla	r3, r3, r4, r2
 5699 0074 402093E5 		ldr	r2, [r3, #64]
 5700 0078 003092E5 		ldr	r3, [r2]
 5701 007c FF3483E3 		orr	r3, r3, #-16777216
 5702 0080 003082E5 		str	r3, [r2]
 5703              	.L376:
1905:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5704              		.loc 1 1905 0
 5705 0084 000057E3 		cmp	r7, #0
 5706 0088 2800000A 		beq	.L383
1913:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5707              		.loc 1 1913 0
 5708 008c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5709 0090 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5710 0094 5830A0E3 		mov	r3, #88
 5711 0098 932423E0 		mla	r3, r3, r4, r2
 5712 009c 382093E5 		ldr	r2, [r3, #56]
 5713 00a0 003092E5 		ldr	r3, [r2]
 5714 00a4 013083E3 		orr	r3, r3, #1
 5715 00a8 003082E5 		str	r3, [r2]
 5716              	.L381:
1918:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5717              		.loc 1 1918 0
 5718 00ac 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5719 00b0 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5720 00b4 5830A0E3 		mov	r3, #88
 5721 00b8 930404E0 		mul	r4, r3, r4
 5722              	.LVL533:
 5723 00bc 042092E7 		ldr	r2, [r2, r4]
 5724 00c0 003092E5 		ldr	r3, [r2]
 5725 00c4 103083E3 		orr	r3, r3, #16
 5726 00c8 003082E5 		str	r3, [r2]
 5727 00cc F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5728              	.LVL534:
 5729              	.L377:
1890:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab9))  = ColorConversion(gr_format_tmp, param->rep_color);
 5730              		.loc 1 1890 0
 5731 00d0 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 5732 00d4 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 5733 00d8 5880A0E3 		mov	r8, #88
 5734 00dc 983428E0 		mla	r8, r8, r4, r3
 5735 00e0 3C9098E5 		ldr	r9, [r8, #60]
 5736 00e4 001095E5 		ldr	r1, [r5]
 5737 00e8 FEFFFFEB 		bl	ColorConversion
 5738              	.LVL535:
 5739 00ec 000089E5 		str	r0, [r9]
1891:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5740              		.loc 1 1891 0
 5741 00f0 408098E5 		ldr	r8, [r8, #64]
 5742 00f4 041095E5 		ldr	r1, [r5, #4]
 5743 00f8 0600A0E1 		mov	r0, r6
 5744 00fc FEFFFFEB 		bl	ColorConversion
 5745              	.LVL536:
 5746 0100 000088E5 		str	r0, [r8]
 5747 0104 D4FFFFEA 		b	.L378
 5748              	.L379:
1901:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5749              		.loc 1 1901 0
 5750 0108 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5751 010c 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5752 0110 5830A0E3 		mov	r3, #88
 5753 0114 932423E0 		mla	r3, r3, r4, r2
 5754 0118 402093E5 		ldr	r2, [r3, #64]
 5755 011c 003092E5 		ldr	r3, [r2]
 5756 0120 0810D5E5 		ldrb	r1, [r5, #8]	@ zero_extendqisi2
 5757 0124 013C83E1 		orr	r3, r3, r1, lsl #24
 5758 0128 003082E5 		str	r3, [r2]
 5759 012c D4FFFFEA 		b	.L376
 5760              	.L383:
1908:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5761              		.loc 1 1908 0
 5762 0130 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5763 0134 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5764 0138 5830A0E3 		mov	r3, #88
 5765 013c 932423E0 		mla	r3, r3, r4, r2
 5766 0140 382093E5 		ldr	r2, [r3, #56]
 5767 0144 003092E5 		ldr	r3, [r2]
 5768 0148 0130C3E3 		bic	r3, r3, #1
 5769 014c 003082E5 		str	r3, [r2]
 5770 0150 D5FFFFEA 		b	.L381
 5771              		.cfi_endproc
 5772              	.LFE17:
 5774              		.section	.text.VDC_CLUT,"ax",%progbits
 5775              		.align	2
 5776              		.global	VDC_CLUT
 5777              		.syntax unified
 5778              		.arm
 5779              		.fpu neon
 5781              	VDC_CLUT:
 5782              	.LFB18:
1931:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     vdc_gr_format_t                        gr_format_tmp;
 5783              		.loc 1 1931 0
 5784              		.cfi_startproc
 5785              		@ args = 0, pretend = 0, frame = 8
 5786              		@ frame_needed = 0, uses_anonymous_args = 0
 5787              	.LVL537:
 5788 0000 F0402DE9 		push	{r4, r5, r6, r7, lr}
 5789              		.cfi_def_cfa_offset 20
 5790              		.cfi_offset 4, -20
 5791              		.cfi_offset 5, -16
 5792              		.cfi_offset 6, -12
 5793              		.cfi_offset 7, -8
 5794              		.cfi_offset 14, -4
 5795 0004 0CD04DE2 		sub	sp, sp, #12
 5796              		.cfi_def_cfa_offset 32
 5797 0008 0040A0E1 		mov	r4, r0
 5798 000c 0150A0E1 		mov	r5, r1
 5799              	.LVL538:
1937:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     if (gr_format_tmp == VDC_GR_FORMAT_CLUT1)
 5800              		.loc 1 1937 0
 5801 0010 FEFFFFEB 		bl	VDC_ShrdPrmGetGraphicsFormat
 5802              	.LVL539:
1938:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5803              		.loc 1 1938 0
 5804 0014 070050E3 		cmp	r0, #7
 5805 0018 1900000A 		beq	.L389
1966:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5806              		.loc 1 1966 0
 5807 001c 003000E3 		movw	r3, #:lower16:vdc_regaddr_clut
 5808 0020 003040E3 		movt	r3, #:upper16:vdc_regaddr_clut
 5809 0024 046193E7 		ldr	r6, [r3, r4, lsl #2]
 5810 0028 0610A0E1 		mov	r1, r6
 5811 002c 0500A0E1 		mov	r0, r5
 5812              	.LVL540:
 5813 0030 FEFFFFEB 		bl	Set_Clut
 5814              	.LVL541:
 5815              	.LBB2:
1970:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 5816              		.loc 1 1970 0
 5817 0034 003096E5 		ldr	r3, [r6]
 5818 0038 04308DE5 		str	r3, [sp, #4]
 5819              	.LBE2:
1975:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5820              		.loc 1 1975 0
 5821 003c 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5822 0040 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5823 0044 5830A0E3 		mov	r3, #88
 5824 0048 932423E0 		mla	r3, r3, r4, r2
 5825 004c 502093E5 		ldr	r2, [r3, #80]
 5826 0050 003092E5 		ldr	r3, [r2]
 5827 0054 013823E2 		eor	r3, r3, #65536
 5828 0058 003082E5 		str	r3, [r2]
 5829              	.L387:
1980:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5830              		.loc 1 1980 0
 5831 005c 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 5832 0060 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 5833 0064 5800A0E3 		mov	r0, #88
 5834 0068 900400E0 		mul	r0, r0, r4
 5835 006c 002093E7 		ldr	r2, [r3, r0]
 5836 0070 003092E5 		ldr	r3, [r2]
 5837 0074 103083E3 		orr	r3, r3, #16
 5838 0078 003082E5 		str	r3, [r2]
1982:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5839              		.loc 1 1982 0
 5840 007c 0CD08DE2 		add	sp, sp, #12
 5841              		.cfi_remember_state
 5842              		.cfi_def_cfa_offset 20
 5843              		@ sp needed
 5844 0080 F080BDE8 		pop	{r4, r5, r6, r7, pc}
 5845              	.LVL542:
 5846              	.L389:
 5847              		.cfi_restore_state
1941:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 5848              		.loc 1 1941 0
 5849 0084 003095E5 		ldr	r3, [r5]
 5850 0088 010053E3 		cmp	r3, #1
 5851 008c 1600000A 		beq	.L390
1952:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             (*(img_synthesizer->gr_ab11)) = ColorConversionIntoAgbr(param->clut[1]);
 5852              		.loc 1 1952 0
 5853 0090 003000E3 		movw	r3, #:lower16:vdc_regaddr_img_synthesizer
 5854 0094 003040E3 		movt	r3, #:upper16:vdc_regaddr_img_synthesizer
 5855 0098 5860A0E3 		mov	r6, #88
 5856 009c 963426E0 		mla	r6, r6, r4, r3
 5857 00a0 447096E5 		ldr	r7, [r6, #68]
 5858 00a4 043095E5 		ldr	r3, [r5, #4]
 5859 00a8 000093E5 		ldr	r0, [r3]
 5860              	.LVL543:
 5861 00ac FEFFFFEB 		bl	ColorConversionIntoAgbr
 5862              	.LVL544:
 5863 00b0 000087E5 		str	r0, [r7]
1953:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (graphics_id == VDC_GR_TYPE_GR0)
 5864              		.loc 1 1953 0
 5865 00b4 486096E5 		ldr	r6, [r6, #72]
 5866 00b8 043095E5 		ldr	r3, [r5, #4]
 5867 00bc 040093E5 		ldr	r0, [r3, #4]
 5868 00c0 FEFFFFEB 		bl	ColorConversionIntoAgbr
 5869              	.LVL545:
 5870 00c4 000086E5 		str	r0, [r6]
1954:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 5871              		.loc 1 1954 0
 5872 00c8 000054E3 		cmp	r4, #0
 5873 00cc E2FFFF1A 		bne	.L387
1957:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5874              		.loc 1 1957 0
 5875 00d0 003097E5 		ldr	r3, [r7]
 5876 00d4 FF3483E3 		orr	r3, r3, #-16777216
 5877 00d8 003087E5 		str	r3, [r7]
1960:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5878              		.loc 1 1960 0
 5879 00dc 003096E5 		ldr	r3, [r6]
 5880 00e0 FF3483E3 		orr	r3, r3, #-16777216
 5881 00e4 003086E5 		str	r3, [r6]
 5882 00e8 DBFFFFEA 		b	.L387
 5883              	.LVL546:
 5884              	.L390:
1943:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             if (graphics_id == VDC_GR_TYPE_GR0)
 5885              		.loc 1 1943 0
 5886 00ec 002000E3 		movw	r2, #:lower16:vdc_regaddr_img_synthesizer
 5887 00f0 002040E3 		movt	r2, #:upper16:vdc_regaddr_img_synthesizer
 5888 00f4 5830A0E3 		mov	r3, #88
 5889 00f8 932423E0 		mla	r3, r3, r4, r2
 5890 00fc 446093E5 		ldr	r6, [r3, #68]
 5891 0100 043095E5 		ldr	r3, [r5, #4]
 5892 0104 000093E5 		ldr	r0, [r3]
 5893              	.LVL547:
 5894 0108 FEFFFFEB 		bl	ColorConversionIntoAgbr
 5895              	.LVL548:
 5896 010c 000086E5 		str	r0, [r6]
1944:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             {
 5897              		.loc 1 1944 0
 5898 0110 000054E3 		cmp	r4, #0
1947:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****             }
 5899              		.loc 1 1947 0
 5900 0114 00309605 		ldreq	r3, [r6]
 5901 0118 FF348303 		orreq	r3, r3, #-16777216
 5902 011c 00308605 		streq	r3, [r6]
 5903 0120 CDFFFFEA 		b	.L387
 5904              		.cfi_endproc
 5905              	.LFE18:
 5907              		.section	.text.VDC_DisplayCalibration,"ax",%progbits
 5908              		.align	2
 5909              		.global	VDC_DisplayCalibration
 5910              		.syntax unified
 5911              		.arm
 5912              		.fpu neon
 5914              	VDC_DisplayCalibration:
 5915              	.LFB19:
1991:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_calibr_bright_t        * bright_tmp;
 5916              		.loc 1 1991 0
 5917              		.cfi_startproc
 5918              		@ args = 0, pretend = 0, frame = 0
 5919              		@ frame_needed = 0, uses_anonymous_args = 0
 5920              		@ link register save eliminated.
 5921              	.LVL549:
2000:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5922              		.loc 1 2000 0
 5923 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2
 5924 0004 000053E3 		cmp	r3, #0
 5925 0008 3D00001A 		bne	.L392
2003:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5926              		.loc 1 2003 0
 5927 000c 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 5928 0010 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 5929 0014 5C2093E5 		ldr	r2, [r3, #92]
 5930 0018 003092E5 		ldr	r3, [r2]
 5931 001c 013AC3E3 		bic	r3, r3, #4096
 5932 0020 003082E5 		str	r3, [r2]
 5933              	.L393:
2012:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5934              		.loc 1 2012 0
 5935 0024 043090E5 		ldr	r3, [r0, #4]
 5936              	.LVL550:
2015:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5937              		.loc 1 2015 0
 5938 0028 000053E3 		cmp	r3, #0
 5939 002c 0C00000A 		beq	.L394
2018:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5940              		.loc 1 2018 0
 5941 0030 002000E3 		movw	r2, #:lower16:vdc_regaddr_output_ctrl
 5942 0034 002040E3 		movt	r2, #:upper16:vdc_regaddr_output_ctrl
 5943 0038 4C1092E5 		ldr	r1, [r2, #76]
 5944 003c B0C0D3E1 		ldrh	ip, [r3]
 5945 0040 00C081E5 		str	ip, [r1]
2021:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5946              		.loc 1 2021 0
 5947 0044 502092E5 		ldr	r2, [r2, #80]
 5948 0048 B210D3E1 		ldrh	r1, [r3, #2]
 5949 004c 0118A0E1 		lsl	r1, r1, #16
 5950 0050 001082E5 		str	r1, [r2]
2024:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5951              		.loc 1 2024 0
 5952 0054 001092E5 		ldr	r1, [r2]
 5953 0058 B430D3E1 		ldrh	r3, [r3, #4]
 5954              	.LVL551:
 5955 005c 033081E1 		orr	r3, r1, r3
 5956 0060 003082E5 		str	r3, [r2]
 5957              	.L394:
2028:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5958              		.loc 1 2028 0
 5959 0064 082090E5 		ldr	r2, [r0, #8]
 5960              	.LVL552:
2031:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5961              		.loc 1 2031 0
 5962 0068 000052E3 		cmp	r2, #0
 5963 006c 0D00000A 		beq	.L395
2034:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5964              		.loc 1 2034 0
 5965 0070 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 5966 0074 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 5967 0078 543093E5 		ldr	r3, [r3, #84]
 5968 007c 0010D2E5 		ldrb	r1, [r2]	@ zero_extendqisi2
 5969 0080 0118A0E1 		lsl	r1, r1, #16
 5970 0084 001083E5 		str	r1, [r3]
2037:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5971              		.loc 1 2037 0
 5972 0088 001093E5 		ldr	r1, [r3]
 5973 008c 01C0D2E5 		ldrb	ip, [r2, #1]	@ zero_extendqisi2
 5974 0090 0C1481E1 		orr	r1, r1, ip, lsl #8
 5975 0094 001083E5 		str	r1, [r3]
2040:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 5976              		.loc 1 2040 0
 5977 0098 001093E5 		ldr	r1, [r3]
 5978 009c 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 5979              	.LVL553:
 5980 00a0 022081E1 		orr	r2, r1, r2
 5981 00a4 002083E5 		str	r2, [r3]
 5982              	.L395:
2044:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5983              		.loc 1 2044 0
 5984 00a8 0C2090E5 		ldr	r2, [r0, #12]
 5985              	.LVL554:
2047:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 5986              		.loc 1 2047 0
 5987 00ac 000052E3 		cmp	r2, #0
 5988 00b0 0C00000A 		beq	.L396
2050:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 5989              		.loc 1 2050 0
 5990 00b4 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 5991 00b8 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 5992 00bc 583093E5 		ldr	r3, [r3, #88]
 5993 00c0 001093E5 		ldr	r1, [r3]
 5994 00c4 0316C1E3 		bic	r1, r1, #3145728
 5995 00c8 001083E5 		str	r1, [r3]
2053:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         if (panel_dither_tmp->pdth_sel == VDC_PDTH_MD_2X2)
 5996              		.loc 1 2053 0
 5997 00cc 001093E5 		ldr	r1, [r3]
 5998 00d0 0000D2E5 		ldrb	r0, [r2]	@ zero_extendqisi2
 5999              	.LVL555:
 6000 00d4 001A81E1 		orr	r1, r1, r0, lsl #20
 6001 00d8 001083E5 		str	r1, [r3]
2054:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         {
 6002              		.loc 1 2054 0
 6003 00dc 0010D2E5 		ldrb	r1, [r2]	@ zero_extendqisi2
 6004 00e0 020051E3 		cmp	r1, #2
 6005 00e4 0D00000A 		beq	.L397
 6006              	.LVL556:
 6007              	.L396:
2075:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6008              		.loc 1 2075 0
 6009 00e8 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 6010 00ec 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 6011 00f0 442093E5 		ldr	r2, [r3, #68]
 6012 00f4 003092E5 		ldr	r3, [r2]
 6013 00f8 013083E3 		orr	r3, r3, #1
 6014 00fc 003082E5 		str	r3, [r2]
 6015 0100 1EFF2FE1 		bx	lr
 6016              	.LVL557:
 6017              	.L392:
2008:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 6018              		.loc 1 2008 0
 6019 0104 003000E3 		movw	r3, #:lower16:vdc_regaddr_output_ctrl
 6020 0108 003040E3 		movt	r3, #:upper16:vdc_regaddr_output_ctrl
 6021 010c 5C2093E5 		ldr	r2, [r3, #92]
 6022 0110 003092E5 		ldr	r3, [r2]
 6023 0114 013A83E3 		orr	r3, r3, #4096
 6024 0118 003082E5 		str	r3, [r2]
 6025 011c C0FFFFEA 		b	.L393
 6026              	.LVL558:
 6027              	.L397:
2057:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6028              		.loc 1 2057 0
 6029 0120 001093E5 		ldr	r1, [r3]
 6030 0124 331CC1E3 		bic	r1, r1, #13056
 6031 0128 3310C1E3 		bic	r1, r1, #51
 6032 012c 001083E5 		str	r1, [r3]
2060:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6033              		.loc 1 2060 0
 6034 0130 001093E5 		ldr	r1, [r3]
 6035 0134 0100D2E5 		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 6036 0138 001681E1 		orr	r1, r1, r0, lsl #12
 6037 013c 001083E5 		str	r1, [r3]
2063:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6038              		.loc 1 2063 0
 6039 0140 001093E5 		ldr	r1, [r3]
 6040 0144 0200D2E5 		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 6041 0148 001481E1 		orr	r1, r1, r0, lsl #8
 6042 014c 001083E5 		str	r1, [r3]
2066:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6043              		.loc 1 2066 0
 6044 0150 001093E5 		ldr	r1, [r3]
 6045 0154 0300D2E5 		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 6046 0158 001281E1 		orr	r1, r1, r0, lsl #4
 6047 015c 001083E5 		str	r1, [r3]
2069:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****         }
 6048              		.loc 1 2069 0
 6049 0160 001093E5 		ldr	r1, [r3]
 6050 0164 0420D2E5 		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 6051              	.LVL559:
 6052 0168 022081E1 		orr	r2, r1, r2
 6053 016c 002083E5 		str	r2, [r3]
 6054 0170 DCFFFFEA 		b	.L396
 6055              		.cfi_endproc
 6056              	.LFE19:
 6058              		.section	.text.VDC_GammaCorrection,"ax",%progbits
 6059              		.align	2
 6060              		.global	VDC_GammaCorrection
 6061              		.syntax unified
 6062              		.arm
 6063              		.fpu neon
 6065              	VDC_GammaCorrection:
 6066              	.LFB20:
2088:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     const vdc_regaddr_gamma_t  * gamma;
 6067              		.loc 1 2088 0
 6068              		.cfi_startproc
 6069              		@ args = 0, pretend = 0, frame = 0
 6070              		@ frame_needed = 0, uses_anonymous_args = 0
 6071              	.LVL560:
 6072 0000 70402DE9 		push	{r4, r5, r6, lr}
 6073              		.cfi_def_cfa_offset 16
 6074              		.cfi_offset 4, -16
 6075              		.cfi_offset 5, -12
 6076              		.cfi_offset 6, -8
 6077              		.cfi_offset 14, -4
 6078              	.LVL561:
2094:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6079              		.loc 1 2094 0
 6080 0004 003000E3 		movw	r3, #:lower16:vdc_regaddr_gamma
 6081 0008 003040E3 		movt	r3, #:upper16:vdc_regaddr_gamma
 6082 000c 003093E5 		ldr	r3, [r3]
 6083 0010 000090E2 		adds	r0, r0, #0
 6084              	.LVL562:
 6085 0014 0100A013 		movne	r0, #1
 6086 0018 000083E5 		str	r0, [r3]
2097:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     {
 6087              		.loc 1 2097 0
 6088 001c 005051E2 		subs	r5, r1, #0
 6089 0020 7080BD08 		popeq	{r4, r5, r6, pc}
2100:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6090              		.loc 1 2100 0
 6091 0024 7C409FE5 		ldr	r4, .L401
 6092 0028 0410A0E1 		mov	r1, r4
 6093              	.LVL563:
 6094 002c 040095E5 		ldr	r0, [r5, #4]
 6095 0030 FEFFFFEB 		bl	Set_StartThreshold_Gamma
 6096              	.LVL564:
2103:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6097              		.loc 1 2103 0
 6098 0034 401044E2 		sub	r1, r4, #64
 6099 0038 000095E5 		ldr	r0, [r5]
 6100 003c FEFFFFEB 		bl	Set_GainAdjustment_Gamma
 6101              	.LVL565:
2107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6102              		.loc 1 2107 0
 6103 0040 442014E5 		ldr	r2, [r4, #-68]
 6104 0044 003092E5 		ldr	r3, [r2]
 6105 0048 013083E3 		orr	r3, r3, #1
 6106 004c 003082E5 		str	r3, [r2]
2110:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6107              		.loc 1 2110 0
 6108 0050 641084E2 		add	r1, r4, #100
 6109 0054 0C0095E5 		ldr	r0, [r5, #12]
 6110 0058 FEFFFFEB 		bl	Set_StartThreshold_Gamma
 6111              	.LVL566:
2113:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6112              		.loc 1 2113 0
 6113 005c 241084E2 		add	r1, r4, #36
 6114 0060 080095E5 		ldr	r0, [r5, #8]
 6115 0064 FEFFFFEB 		bl	Set_GainAdjustment_Gamma
 6116              	.LVL567:
2117:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6117              		.loc 1 2117 0
 6118 0068 202094E5 		ldr	r2, [r4, #32]
 6119 006c 003092E5 		ldr	r3, [r2]
 6120 0070 013083E3 		orr	r3, r3, #1
 6121 0074 003082E5 		str	r3, [r2]
2120:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6122              		.loc 1 2120 0
 6123 0078 C81084E2 		add	r1, r4, #200
 6124 007c 140095E5 		ldr	r0, [r5, #20]
 6125 0080 FEFFFFEB 		bl	Set_StartThreshold_Gamma
 6126              	.LVL568:
2123:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6127              		.loc 1 2123 0
 6128 0084 881084E2 		add	r1, r4, #136
 6129 0088 100095E5 		ldr	r0, [r5, #16]
 6130 008c FEFFFFEB 		bl	Set_GainAdjustment_Gamma
 6131              	.LVL569:
2127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 6132              		.loc 1 2127 0
 6133 0090 842094E5 		ldr	r2, [r4, #132]
2107:../generate/sc_drivers/r_vdc/src/r_vdc_register.c **** 
 6134              		.loc 1 2107 0
 6135 0094 484044E2 		sub	r4, r4, #72
2127:../generate/sc_drivers/r_vdc/src/r_vdc_register.c ****     }
 6136              		.loc 1 2127 0
 6137 0098 003092E5 		ldr	r3, [r2]
 6138 009c 013083E3 		orr	r3, r3, #1
 6139 00a0 003082E5 		str	r3, [r2]
 6140 00a4 7080BDE8 		pop	{r4, r5, r6, pc}
 6141              	.L402:
 6142              		.align	2
 6143              	.L401:
 6144 00a8 48000000 		.word	vdc_regaddr_gamma+72
 6145              		.cfi_endproc
 6146              	.LFE20:
 6148              		.section	.rodata
 6149              		.align	2
 6150              		.set	.LANCHOR5,. + 0
 6151              	.LC0:
 6152 0000 40000000 		.word	64
 6153 0004 20000000 		.word	32
 6154 0008 10000000 		.word	16
 6155 000c 08000000 		.word	8
 6156 0010 04000000 		.word	4
 6157 0014 02000000 		.word	2
 6158 0018 01000000 		.word	1
 6159              	.LC1:
 6160 001c 00       		.byte	0
 6161 001d 01       		.byte	1
 6162 001e 01       		.byte	1
 6163 001f 00       		.space	1
 6164              	.LC2:
 6165 0020 00000000 		.word	0
 6166 0024 00000100 		.word	65536
 6167 0028 00000200 		.word	131072
 6168 002c 00000000 		.word	0
 6169              		.section	.rodata.bits_per_pixel.70117,"a",%progbits
 6170              		.align	2
 6171              		.set	.LANCHOR0,. + 0
 6174              	bits_per_pixel.70117:
 6175 0000 10000000 		.word	16
 6176 0004 20000000 		.word	32
 6177 0008 10000000 		.word	16
 6178 000c 10000000 		.word	16
 6179 0010 20000000 		.word	32
 6180 0014 08000000 		.word	8
 6181 0018 04000000 		.word	4
 6182 001c 01000000 		.word	1
 6183 0020 20000000 		.word	32
 6184 0024 20000000 		.word	32
 6185 0028 10000000 		.word	16
 6186 002c 20000000 		.word	32
 6187              		.section	.rodata.colormtx_gain_adj,"a",%progbits
 6188              		.align	2
 6189              		.set	.LANCHOR1,. + 0
 6192              	colormtx_gain_adj:
 6193 0000 0001     		.short	256
 6194 0002 0000     		.short	0
 6195 0004 0000     		.short	0
 6196 0006 0000     		.short	0
 6197 0008 0001     		.short	256
 6198 000a 0000     		.short	0
 6199 000c 0000     		.short	0
 6200 000e 0000     		.short	0
 6201 0010 0001     		.short	256
 6202 0012 9600     		.short	150
 6203 0014 1D00     		.short	29
 6204 0016 4D00     		.short	77
 6205 0018 AB07     		.short	1963
 6206 001a 8000     		.short	128
 6207 001c D507     		.short	2005
 6208 001e 9507     		.short	1941
 6209 0020 EB07     		.short	2027
 6210 0022 8000     		.short	128
 6211 0024 0001     		.short	256
 6212 0026 A807     		.short	1960
 6213 0028 4907     		.short	1865
 6214 002a 0001     		.short	256
 6215 002c C601     		.short	454
 6216 002e 0000     		.short	0
 6217 0030 0001     		.short	256
 6218 0032 0000     		.short	0
 6219 0034 6701     		.short	359
 6220 0036 0001     		.short	256
 6221 0038 0000     		.short	0
 6222 003a 0000     		.short	0
 6223 003c 0000     		.short	0
 6224 003e 0001     		.short	256
 6225 0040 0000     		.short	0
 6226 0042 0000     		.short	0
 6227 0044 0000     		.short	0
 6228 0046 0001     		.short	256
 6229              		.section	.rodata.colormtx_offset_adj,"a",%progbits
 6230              		.align	2
 6231              		.set	.LANCHOR2,. + 0
 6234              	colormtx_offset_adj:
 6235 0000 8000     		.short	128
 6236 0002 8000     		.short	128
 6237 0004 8000     		.short	128
 6238              		.section	.rodata.panel_dcdr_tbl.69830,"a",%progbits
 6239              		.align	2
 6240              		.set	.LANCHOR3,. + 0
 6243              	panel_dcdr_tbl.69830:
 6244 0000 0100     		.short	1
 6245 0002 0200     		.short	2
 6246 0004 0300     		.short	3
 6247 0006 0400     		.short	4
 6248 0008 0500     		.short	5
 6249 000a 0600     		.short	6
 6250 000c 0700     		.short	7
 6251 000e 0800     		.short	8
 6252 0010 0900     		.short	9
 6253 0012 0C00     		.short	12
 6254 0014 1000     		.short	16
 6255 0016 1800     		.short	24
 6256 0018 2000     		.short	32
 6257              		.section	.rodata.panel_icksel_tbl.69831,"a",%progbits
 6258              		.align	2
 6259              		.set	.LANCHOR4,. + 0
 6262              	panel_icksel_tbl.69831:
 6263 0000 0000     		.short	0
 6264 0002 0010     		.short	4096
 6265 0004 0030     		.short	12288
 6266 0006 0004     		.short	1024
 6267 0008 0008     		.short	2048
 6268              		.section	.rodata.rw_proc_function_tbl,"a",%progbits
 6269              		.align	2
 6270              		.set	.LANCHOR7,. + 0
 6273              	rw_proc_function_tbl:
 6274 0000 00000000 		.word	SetRwProcAbility_Write_0
 6275 0004 00000000 		.word	SetRwProcAbility_Read_0
 6276 0008 00000000 		.word	SetRwProcAbility_Read_2
 6277 000c 00000000 		.word	SetRwProcAbility_Read_3
 6278              		.section	.rodata.tcon_function_tbl.69870,"a",%progbits
 6279              		.align	2
 6280              		.set	.LANCHOR6,. + 0
 6283              	tcon_function_tbl.69870:
 6284 0000 00000000 		.word	SetLcdTcon_STVA_VS
 6285 0004 00000000 		.word	SetLcdTcon_STVB_VE
 6286 0008 00000000 		.word	SetLcdTcon_STH_HS
 6287 000c 00000000 		.word	SetLcdTcon_STB_HE
 6288 0010 00000000 		.word	SetLcdTcon_CPV_GCK
 6289 0014 00000000 		.word	SetLcdTcon_POLA
 6290 0018 00000000 		.word	SetLcdTcon_POLB
 6291 001c 00000000 		.word	SetLcdTcon_DE
 6292              		.text
 6293              	.Letext0:
 6294              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6295              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6296              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6297              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6298              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 6299              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6300              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6301              		.file 9 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/generate/system/inc/
 6302              		.file 10 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/generate/system/iod
 6303              		.file 11 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/generate/sc_drivers
 6304              		.file 12 "C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_GR_MANGO/generate/sc_drivers
 6305              		.file 13 "../generate/sc_drivers/r_vdc/src/r_vdc_register.h"
 6306              		.file 14 "../generate/sc_drivers/r_vdc/src/r_vdc_shared_param.h"
DEFINED SYMBOLS
                            *ABS*:00000000 r_vdc_register.c
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:17     .text.SetVideoExternalInput:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:22     .text.SetVideoExternalInput:00000000 SetVideoExternalInput
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:154    .text.SetInitialConnection:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:159    .text.SetInitialConnection:00000000 SetInitialConnection
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:190    .text.SetLcdTcon_STVA_VS:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:195    .text.SetLcdTcon_STVA_VS:00000000 SetLcdTcon_STVA_VS
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:235    .text.SetLcdTcon_STVB_VE:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:240    .text.SetLcdTcon_STVB_VE:00000000 SetLcdTcon_STVB_VE
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:280    .text.SetLcdTcon_STH_HS:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:285    .text.SetLcdTcon_STH_HS:00000000 SetLcdTcon_STH_HS
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:331    .text.SetLcdTcon_STB_HE:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:336    .text.SetLcdTcon_STB_HE:00000000 SetLcdTcon_STB_HE
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:382    .text.SetLcdTcon_CPV_GCK:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:387    .text.SetLcdTcon_CPV_GCK:00000000 SetLcdTcon_CPV_GCK
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:433    .text.SetLcdTcon_POLA:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:438    .text.SetLcdTcon_POLA:00000000 SetLcdTcon_POLA
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:491    .text.SetLcdTcon_POLB:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:496    .text.SetLcdTcon_POLB:00000000 SetLcdTcon_POLB
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:549    .text.SetLcdTcon_DE:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:554    .text.SetLcdTcon_DE:00000000 SetLcdTcon_DE
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:573    .text.CalcScalingRatio:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:578    .text.CalcScalingRatio:00000000 CalcScalingRatio
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:671    .text.CalcScalingRatio:0000009c $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:676    .text.SetScalingDown:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:681    .text.SetScalingDown:00000000 SetScalingDown
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:805    .text.SetScalingUp:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:810    .text.SetScalingUp:00000000 SetScalingUp
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1048   .text.ConfirmGraphicsEnlargement:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1053   .text.ConfirmGraphicsEnlargement:00000000 ConfirmGraphicsEnlargement
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1133   .text.DisplayStartPixelSetting:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1138   .text.DisplayStartPixelSetting:00000000 DisplayStartPixelSetting
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6171   .rodata.bits_per_pixel.70117:00000000 .LANCHOR0
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1169   .text.SetRegUpdateRwEnable:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1174   .text.SetRegUpdateRwEnable:00000000 SetRegUpdateRwEnable
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1189   .text.SetRegUpdateRwEnable:00000010 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1196   .text.SetRegUpdateRwEnable:00000024 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1289   .text.SetGraphicsDisplayMode:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1294   .text.SetGraphicsDisplayMode:00000000 SetGraphicsDisplayMode
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1408   .text.SetColorMatrix:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1413   .text.SetColorMatrix:00000000 SetColorMatrix
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1506   .text.SetImgQaImproverColorMtx:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1511   .text.SetImgQaImproverColorMtx:00000000 SetImgQaImproverColorMtx
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6189   .rodata.colormtx_gain_adj:00000000 .LANCHOR1
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6231   .rodata.colormtx_offset_adj:00000000 .LANCHOR2
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1547   .text.SetImgQaImproverColorMtx:00000038 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1552   .text.SetImageEnhancementSharpness:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1557   .text.SetImageEnhancementSharpness:00000000 SetImageEnhancementSharpness
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1705   .text.SetImageEnhancementLti:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1710   .text.SetImageEnhancementLti:00000000 SetImageEnhancementLti
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1819   .text.SetAlphaRectArea:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1824   .text.SetAlphaRectArea:00000000 SetAlphaRectArea
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1888   .text.ColorConversionFrom4to8:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1893   .text.ColorConversionFrom4to8:00000000 ColorConversionFrom4to8
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1912   .text.ColorConversionFrom5to8:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1917   .text.ColorConversionFrom5to8:00000000 ColorConversionFrom5to8
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1947   .text.ColorConversionFrom6to8:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1952   .text.ColorConversionFrom6to8:00000000 ColorConversionFrom6to8
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1982   .text.ColorConversionIntoAgbr:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:1987   .text.ColorConversionIntoAgbr:00000000 ColorConversionIntoAgbr
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2020   .text.ColorConversion:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2025   .text.ColorConversion:00000000 ColorConversion
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2045   .text.ColorConversion:00000014 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2059   .text.ColorConversion:00000044 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2210   .text.Set_Clut:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2215   .text.Set_Clut:00000000 Set_Clut
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2250   .text.Set_StartThreshold_Gamma:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2255   .text.Set_StartThreshold_Gamma:00000000 Set_StartThreshold_Gamma
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2340   .text.Set_GainAdjustment_Gamma:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2345   .text.Set_GainAdjustment_Gamma:00000000 Set_GainAdjustment_Gamma
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2398   .text.Wait_200_usec:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2403   .text.Wait_200_usec:00000000 Wait_200_usec
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2436   .text.SetGrapicsBackgroundColor:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2441   .text.SetGrapicsBackgroundColor:00000000 SetGrapicsBackgroundColor
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2494   .text.SetScalerBackgroundColor:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2499   .text.SetScalerBackgroundColor:00000000 SetScalerBackgroundColor
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2558   .text.SetInputCntrlColorMtx:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2563   .text.SetInputCntrlColorMtx:00000000 SetInputCntrlColorMtx
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2625   .text.SetScalerGraphics:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2630   .text.SetScalerGraphics:00000000 SetScalerGraphics
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2813   .text.SetRwProcAbility_Read_3:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2818   .text.SetRwProcAbility_Read_3:00000000 SetRwProcAbility_Read_3
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2874   .text.SetRwProcAbility_Read_2:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2879   .text.SetRwProcAbility_Read_2:00000000 SetRwProcAbility_Read_2
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2935   .text.SetRwProcAbility_Read_0:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2940   .text.SetRwProcAbility_Read_0:00000000 SetRwProcAbility_Read_0
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:2995   .text.SetRwProcAbility_Write_0:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3000   .text.SetRwProcAbility_Write_0:00000000 SetRwProcAbility_Write_0
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3079   .text.VDC_Initialize:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3085   .text.VDC_Initialize:00000000 VDC_Initialize
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6240   .rodata.panel_dcdr_tbl.69830:00000000 .LANCHOR3
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6259   .rodata.panel_icksel_tbl.69831:00000000 .LANCHOR4
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3267   .text.VDC_Terminate:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3273   .text.VDC_Terminate:00000000 VDC_Terminate
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3352   .text.VDC_VideoInput:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3358   .text.VDC_VideoInput:00000000 VDC_VideoInput
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3464   .text.VDC_SyncControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3470   .text.VDC_SyncControl:00000000 VDC_SyncControl
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3612   .text.VDC_DisplayOutput:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3618   .text.VDC_DisplayOutput:00000000 VDC_DisplayOutput
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6150   .rodata:00000000 .LANCHOR5
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6280   .rodata.tcon_function_tbl.69870:00000000 .LANCHOR6
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3883   .text.VDC_WriteDataControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:3889   .text.VDC_WriteDataControl:00000000 VDC_WriteDataControl
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4194   .text.VDC_ChangeWriteProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4200   .text.VDC_ChangeWriteProcess:00000000 VDC_ChangeWriteProcess
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4307   .text.VDC_ReadDataControl:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4313   .text.VDC_ReadDataControl:00000000 VDC_ReadDataControl
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4692   .text.VDC_ChangeReadProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4698   .text.VDC_ChangeReadProcess:00000000 VDC_ChangeReadProcess
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4919   .text.VDC_StartProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4925   .text.VDC_StartProcess:00000000 VDC_StartProcess
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6270   .rodata.rw_proc_function_tbl:00000000 .LANCHOR7
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:4995   .text.VDC_StopProcess:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5001   .text.VDC_StopProcess:00000000 VDC_StopProcess
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5063   .text.VDC_VideoNoiseReduction:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5069   .text.VDC_VideoNoiseReduction:00000000 VDC_VideoNoiseReduction
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5174   .text.VDC_ImageColorMatrix:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5180   .text.VDC_ImageColorMatrix:00000000 VDC_ImageColorMatrix
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5207   .text.VDC_ImageEnhancement:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5213   .text.VDC_ImageEnhancement:00000000 VDC_ImageEnhancement
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5281   .text.VDC_ImageBlackStretch:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5287   .text.VDC_ImageBlackStretch:00000000 VDC_ImageBlackStretch
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5354   .text.VDC_AlphaBlending:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5360   .text.VDC_AlphaBlending:00000000 VDC_AlphaBlending
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5447   .text.VDC_AlphaBlendingRect:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5453   .text.VDC_AlphaBlendingRect:00000000 VDC_AlphaBlendingRect
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5634   .text.VDC_Chromakey:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5640   .text.VDC_Chromakey:00000000 VDC_Chromakey
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5775   .text.VDC_CLUT:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5781   .text.VDC_CLUT:00000000 VDC_CLUT
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5908   .text.VDC_DisplayCalibration:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:5914   .text.VDC_DisplayCalibration:00000000 VDC_DisplayCalibration
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6059   .text.VDC_GammaCorrection:00000000 $a
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6065   .text.VDC_GammaCorrection:00000000 VDC_GammaCorrection
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6144   .text.VDC_GammaCorrection:000000a8 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6149   .rodata:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6170   .rodata.bits_per_pixel.70117:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6174   .rodata.bits_per_pixel.70117:00000000 bits_per_pixel.70117
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6188   .rodata.colormtx_gain_adj:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6192   .rodata.colormtx_gain_adj:00000000 colormtx_gain_adj
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6230   .rodata.colormtx_offset_adj:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6234   .rodata.colormtx_offset_adj:00000000 colormtx_offset_adj
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6239   .rodata.panel_dcdr_tbl.69830:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6243   .rodata.panel_dcdr_tbl.69830:00000000 panel_dcdr_tbl.69830
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6258   .rodata.panel_icksel_tbl.69831:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6262   .rodata.panel_icksel_tbl.69831:00000000 panel_icksel_tbl.69831
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6269   .rodata.rw_proc_function_tbl:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6273   .rodata.rw_proc_function_tbl:00000000 rw_proc_function_tbl
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6279   .rodata.tcon_function_tbl.69870:00000000 $d
C:\Users\a5050395\AppData\Local\Temp\ccvyR2uB.s:6283   .rodata.tcon_function_tbl.69870:00000000 tcon_function_tbl.69870
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.14fc17be114e5a2cba0959c511ea2aaf
                           .group:00000000 wm4.stddef.h.39.a38874c8f8a57e66301090908ec2a69f
                           .group:00000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:00000000 wm4.features.h.33.d97f2d646536517df901beeb5b9993f5
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.newlib.h.8.5f2124c7e712be65f83b91ff86a0b1c1
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.e658329a094974ebad41b40c60502de7
                           .group:00000000 wm4.math.h.13.adb102f7bd7860b1f241e149d6914a1e
                           .group:00000000 wm4.r_typedefs.h.38.e90d9de5300d9ae020e5db8c5af88b3e
                           .group:00000000 wm4.adc_iodefine.h.29.14c6f50dce37432a7d004e4b1ce33da7
                           .group:00000000 wm4.bsc_iodefine.h.29.9281d1f3639266933964d6d0c2d42c4f
                           .group:00000000 wm4.ceu_iodefine.h.29.2a669d0b46fdde030a50db9e3c307fbf
                           .group:00000000 wm4.cpg_iodefine.h.29.d6fdc9cb4798723afd88b251d64c2ce2
                           .group:00000000 wm4.csi2link_iodefine.h.29.221c4531636a409f24d307b16341ada8
                           .group:00000000 wm4.dmac_iodefine.h.29.578fccc2cc1da886ec95a029bf874f01
                           .group:00000000 wm4.drpk_iodefine.h.29.580eb8588a2b2d43d2726fbe791e513f
                           .group:00000000 wm4.drw_iodefine.h.29.df30f4a4a34a79f6a86c4df91353dffe
                           .group:00000000 wm4.edmac_iodefine.h.29.33e8759349004a722f42f5429c1353f6
                           .group:00000000 wm4.eptpc_iodefine.h.29.74d8f9fab0f5549b56097fb9e937dde8
                           .group:00000000 wm4.etherc_iodefine.h.29.14602750383a574f1c21f994ad33a366
                           .group:00000000 wm4.gpio_iodefine.h.29.3d0b021c56839cee4ae5149903684e4b
                           .group:00000000 wm4.gpt_iodefine.h.29.557ead75d7b0585b898d3898b64c7f87
                           .group:00000000 wm4.hyper_iodefine.h.29.000caadbb74d881e97db55b39b432154
                           .group:00000000 wm4.imr_iodefine.h.29.77c022f017e711c4d51cc0145db1dad3
                           .group:00000000 wm4.intc_iodefine.h.29.b68f5799a35a7495d63b4cd458e1ba57
                           .group:00000000 wm4.irda_iodefine.h.29.37e67bd2005173d68a74d1cc937d8444
                           .group:00000000 wm4.jcu_iodefine.h.29.3aca452908962e7a7ccf26164751feda
                           .group:00000000 wm4.lvds_iodefine.h.29.c11cbe1900e5209c8dcc76c2336c16bc
                           .group:00000000 wm4.mtu_iodefine.h.29.5498fb974bb53caf05aa143c2deec781
                           .group:00000000 wm4.nandc_iodefine.h.29.e0b343306750f017ee86e169ad98efe9
                           .group:00000000 wm4.octa_iodefine.h.29.4cb0d62e4b9633e173858000dc1c626c
                           .group:00000000 wm4.ostm_iodefine.h.29.6914f7e330a1cf0008b34219adcdfed4
                           .group:00000000 wm4.pl_iodefine.h.29.abbb6d725aed990aa8343242bfe31416
                           .group:00000000 wm4.pmg_iodefine.h.29.8bcfbc4771a6f9b7dd4d6f504427219e
                           .group:00000000 wm4.poeg_iodefine.h.29.0d8e258d10986260cbc70cfb8c0ef273
                           .group:00000000 wm4.poe_iodefine.h.29.fe74e55e7b6b4afbe3596c74ba035e98
                           .group:00000000 wm4.prr_iodefine.h.29.c1f15576f7a27b9c83aa3b40f5b2f988
                           .group:00000000 wm4.ptpedmac_iodefine.h.29.cd24a93374ce35cebc41e26889d619ef
                           .group:00000000 wm4.rcanfd_iodefine.h.29.532dd48b82fcb61d63538aba4b6f1289
                           .group:00000000 wm4.rcan_iodefine.h.29.a47a89db1b35c12b54af48fa1956acba
                           .group:00000000 wm4.riic_iodefine.h.29.f96943d49800d297612c4af3bba5c943
                           .group:00000000 wm4.rspi_iodefine.h.29.7efa041fe34a7d27db66a7b337879dfe
                           .group:00000000 wm4.rtc_iodefine.h.29.6dc76be5ca3df69cecb5a81d06cc46b5
                           .group:00000000 wm4.scifa_iodefine.h.29.b04ccd664d71baaf31c75761c45b9c4d
                           .group:00000000 wm4.scim_iodefine.h.29.87d0760abf94446b00d826c797bf0ff2
                           .group:00000000 wm4.sdmmc_iodefine.h.29.e67e9815445e8057a3262d1566bea0db
                           .group:00000000 wm4.spdif_iodefine.h.29.59f5d70150fa200a4d8ee50be1ee34c8
                           .group:00000000 wm4.spibsc_iodefine.h.29.f4930f8b8da1140200204513a363c76f
                           .group:00000000 wm4.sprite_iodefine.h.29.55796d1fa083a2457fea4ece974a192e
                           .group:00000000 wm4.ssif_iodefine.h.29.054ec6d95f487f631f16aee39c85c47a
                           .group:00000000 wm4.usb_iodefine.h.29.6dc44ea388ba227e8fdcfb33c315887b
                           .group:00000000 wm4.vdc_iodefine.h.29.db282ded1f052d8567fbbd3b61ce8f7a
                           .group:00000000 wm4.vin_iodefine.h.29.9b392e5601347d53e64be3272934e170
                           .group:00000000 wm4.wdt_iodefine.h.29.ed07bb44b797072f8c28b41c64fdca30
                           .group:00000000 wm4.r_vdc_user.h.32.3f3db05b07a24f5c3abdea3809348418
                           .group:00000000 wm4.r_vdc.h.31.7a8e28d4a80bfb6c6b4be0ab3890da8f
                           .group:00000000 wm4.r_vdc_register.h.32.76d2530dc3b12780409c9b9c662462be

UNDEFINED SYMBOLS
__aeabi_uidiv
vdc_regaddr_scaler
vdc_regaddr_img_synthesizer
vdc_regaddr_color_matrix
VDC_ShrdPrmGetBgColor
VDC_ShrdPrmGetColorSpace
VDC_ShrdPrmGetColorSpaceFbWr
VDC_ShrdPrmGetWritingMode
VDC_ShrdPrmGetMeasureFolding
VDC_ShrdPrmGetLineOfsAddrDir
VDC_ShrdPrmGetInterlace
VDC_ShrdPrmSetRwProcEnable
VDC_ShrdPrmSetRwProcDisable
vdc_regaddr_system_ctrl
vdc_regaddr_lvds
vdc_regaddr_input_ctrl
VDC_ShrdPrmGetResource
VDC_ShrdPrmGetLvdsClkRef
vdc_regaddr_output_ctrl
R_VDC_CPUVAddrToSysPAddr
VDC_ShrdPrmGetFrBuffWidth_Rd
VDC_ShrdPrmGetColorSpaceFbRd
vdc_regaddr_img_qlty_imp
VDC_ShrdPrmGetSelFbAddrSig
VDC_ShrdPrmGetDisplayArea
VDC_ShrdPrmGetGraphicsFormat
VDC_ShrdPrmGetRwProcReady
VDC_ShrdPrmGetRwProcEnabled
vdc_regaddr_clut
vdc_regaddr_gamma
