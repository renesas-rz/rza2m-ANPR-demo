
;; Function pvPortMalloc (pvPortMalloc, funcdef_no=1, decl_uid=6465, cgraph_uid=1, symbol_order=9)


Analyzing loop at ../generate/os_abstraction/src/heap_renesas.c:373
../generate/os_abstraction/src/heap_renesas.c:373:5: note: ===== analyze_loop_nest =====
../generate/os_abstraction/src/heap_renesas.c:373:5: note: === vect_analyze_loop_form ===
../generate/os_abstraction/src/heap_renesas.c:373:5: note: === get_loop_niters ===
../generate/os_abstraction/src/heap_renesas.c:373:5: note: not vectorized: number of iterations cannot be computed.
../generate/os_abstraction/src/heap_renesas.c:373:5: note: bad loop form.

Analyzing loop at ../generate/os_abstraction/src/heap_renesas.c:209
../generate/os_abstraction/src/heap_renesas.c:209:33: note: ===== analyze_loop_nest =====
../generate/os_abstraction/src/heap_renesas.c:209:33: note: === vect_analyze_loop_form ===
../generate/os_abstraction/src/heap_renesas.c:209:33: note: not vectorized: control flow in loop.
../generate/os_abstraction/src/heap_renesas.c:209:33: note: bad loop form.

Analyzing loop at ../generate/os_abstraction/src/heap_renesas.c:203
../generate/os_abstraction/src/heap_renesas.c:203:40: note: ===== analyze_loop_nest =====
../generate/os_abstraction/src/heap_renesas.c:203:40: note: === vect_analyze_loop_form ===
../generate/os_abstraction/src/heap_renesas.c:203:40: note: not vectorized: control flow in loop.
../generate/os_abstraction/src/heap_renesas.c:203:40: note: bad loop form.
../generate/os_abstraction/src/heap_renesas.c:156:7: note: vectorized 0 loops in function.
pvPortMalloc (size_t xWantedSize)
{
  struct BlockLink_t * pxIterator;
  struct BlockLink_t * pxBlockToInsert;
  void * pvReturn;
  struct BlockLink_t * pxNewBlockLink;
  struct BlockLink_t * pxPreviousBlock;
  struct BlockLink_t * pxBlock;
  struct BlockLink_t * pxEnd.0_12;
  unsigned int xBlockAllocatedBit.1_15;
  unsigned int _17;
  unsigned int _19;
  unsigned int _20;
  unsigned int xFreeBytesRemaining.2_22;
  long unsigned int pxBlock.4_25;
  struct A_BLOCK_LINK * _26;
  _Bool _27;
  unsigned int _28;
  struct A_BLOCK_LINK * _29;
  _Bool _30;
  unsigned int xDefaultBlock.5_31;
  struct BlockLink_t * pxEnd.0_33;
  struct A_BLOCK_LINK * prephitmp_34;
  struct A_BLOCK_LINK * _36;
  unsigned int _38;
  struct A_BLOCK_LINK * prephitmp_42;
  unsigned int _45;
  unsigned int xMinimumEverFreeBytesRemaining.6_47;
  unsigned int _50;
  struct A_BLOCK_LINK * _55;
  unsigned int _56;
  uint8_t * _57;
  unsigned int _58;
  unsigned int _59;
  struct A_BLOCK_LINK * prephitmp_61;
  uint8_t * _62;
  _Bool _63;
  unsigned int _64;
  unsigned int _65;
  struct A_BLOCK_LINK * _66;
  struct A_BLOCK_LINK * _75;
  unsigned int _76;
  struct A_BLOCK_LINK * prephitmp_91;
  unsigned int _93;
  struct A_BLOCK_LINK * prephitmp_98;
  unsigned int pretmp_99;
  unsigned int pretmp_100;
  unsigned int _102;
  unsigned int prephitmp_103;
  unsigned int pretmp_104;
  unsigned int pretmp_107;
  unsigned int prephitmp_111;
  struct A_BLOCK_LINK * prephitmp_114;
  struct A_BLOCK_LINK * prephitmp_115;
  struct A_BLOCK_LINK * prephitmp_116;

  <bb 2>:
  pxEnd.0_12 = pxEnd;
  if (pxEnd.0_12 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 163);

  <bb 4>:
  vTaskSuspendAll ();
  xBlockAllocatedBit.1_15 = xBlockAllocatedBit;
  _17 = xBlockAllocatedBit.1_15 & xWantedSize_16(D);
  _27 = xWantedSize_16(D) != 0;
  _30 = _17 == 0;
  _63 = _27 & _30;
  if (_63 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 41>;

  <bb 6>:
  xWantedSize_18 = xWantedSize_16(D) + 8;
  _19 = xWantedSize_18 & 7;
  if (_19 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _20 = xWantedSize_18 & 4294967288;
  xWantedSize_21 = _20 + 8;

  <bb 8>:
  # xWantedSize_1 = PHI <xWantedSize_18(6), xWantedSize_21(7)>
  if (xWantedSize_1 != 0)
    goto <bb 9>;
  else
    goto <bb 5>;

  <bb 9>:
  xFreeBytesRemaining.2_22 = xFreeBytesRemaining;
  if (xWantedSize_1 <= xFreeBytesRemaining.2_22)
    goto <bb 10>;
  else
    goto <bb 5>;

  <bb 10>:
  pxBlock_23 = xStart.pxNextFreeBlock;
  pretmp_107 = xDesiredBlock;

  <bb 11>:
  # pxBlock_2 = PHI <pxBlock_23(10), _26(14)>
  # pxPreviousBlock_4 = PHI <&xStart(10), pxBlock_2(14)>
  # prephitmp_115 = PHI <pxBlock_23(10), _26(14)>
  pxBlock.4_25 = (long unsigned int) pxBlock_2;
  if (pxBlock.4_25 < pretmp_107)
    goto <bb 12>;
  else
    goto <bb 15>;

  <bb 12>:
  _26 = pxBlock_2->pxNextFreeBlock;
  if (_26 != 0B)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  # pxBlock_109 = PHI <pxBlock_2(12)>
  # pxPreviousBlock_101 = PHI <pxPreviousBlock_4(12)>
  # prephitmp_34 = PHI <prephitmp_115(12)>
  goto <bb 16>;

  <bb 14>:
  goto <bb 11>;

  <bb 15>:
  # pxBlock_112 = PHI <pxBlock_2(11)>
  # pxPreviousBlock_105 = PHI <pxPreviousBlock_4(11)>
  # prephitmp_42 = PHI <prephitmp_115(11)>

  <bb 16>:
  # pxBlock_118 = PHI <pxBlock_109(13), pxBlock_112(15)>
  # pxPreviousBlock_117 = PHI <pxPreviousBlock_101(13), pxPreviousBlock_105(15)>
  # prephitmp_114 = PHI <prephitmp_34(13), prephitmp_42(15)>

  <bb 17>:
  # pxBlock_3 = PHI <pxBlock_118(16), _29(20)>
  # pxPreviousBlock_5 = PHI <pxPreviousBlock_117(16), pxBlock_3(20)>
  # prephitmp_116 = PHI <prephitmp_114(16), _29(20)>
  _28 = pxBlock_3->xBlockSize;
  if (xWantedSize_1 > _28)
    goto <bb 18>;
  else
    goto <bb 21>;

  <bb 18>:
  _29 = pxBlock_3->pxNextFreeBlock;
  if (_29 != 0B)
    goto <bb 20>;
  else
    goto <bb 19>;

  <bb 19>:
  # pxBlock_106 = PHI <pxBlock_3(18)>
  # pxPreviousBlock_77 = PHI <pxPreviousBlock_5(18)>
  # _93 = PHI <_28(18)>
  # prephitmp_91 = PHI <prephitmp_116(18)>
  goto <bb 22>;

  <bb 20>:
  goto <bb 17>;

  <bb 21>:
  # pxBlock_108 = PHI <pxBlock_3(17)>
  # pxPreviousBlock_95 = PHI <pxPreviousBlock_5(17)>
  # _76 = PHI <_28(17)>
  # prephitmp_61 = PHI <prephitmp_116(17)>

  <bb 22>:
  # pxBlock_94 = PHI <pxBlock_106(19), pxBlock_108(21)>
  # pxPreviousBlock_97 = PHI <pxPreviousBlock_77(19), pxPreviousBlock_95(21)>
  # _102 = PHI <_93(19), _76(21)>
  # prephitmp_98 = PHI <prephitmp_91(19), prephitmp_61(21)>
  xDefaultBlock.5_31 = xDefaultBlock;
  xDesiredBlock = xDefaultBlock.5_31;
  pxEnd.0_33 = pxEnd;
  if (pxBlock_94 != pxEnd.0_33)
    goto <bb 23>;
  else
    goto <bb 5>;

  <bb 23>:
  pvReturn_35 = prephitmp_98 + 8;
  _36 = pxBlock_94->pxNextFreeBlock;
  pxPreviousBlock_97->pxNextFreeBlock = _36;
  _38 = _102 - xWantedSize_1;
  if (_38 > 16)
    goto <bb 24>;
  else
    goto <bb 38>;

  <bb 24>:
  pxNewBlockLink_39 = pxBlock_94 + xWantedSize_1;
  pxNewBlockLink_39->xBlockSize = _38;
  pxBlock_94->xBlockSize = xWantedSize_1;

  <bb 25>:
  # pxIterator_54 = PHI <&xStart(24), _55(26)>
  _55 = pxIterator_54->pxNextFreeBlock;
  if (pxNewBlockLink_39 > _55)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  goto <bb 25>;

  <bb 27>:
  # pxIterator_24 = PHI <pxIterator_54(25)>
  # _75 = PHI <_55(25)>
  _56 = pxIterator_24->xBlockSize;
  _57 = pxIterator_24 + _56;
  if (pxNewBlockLink_39 == _57)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  pretmp_100 = pxNewBlockLink_39->xBlockSize;
  goto <bb 30>;

  <bb 29>:
  _58 = pxNewBlockLink_39->xBlockSize;
  _59 = _56 + _58;
  pxIterator_24->xBlockSize = _59;

  <bb 30>:
  # pxBlockToInsert_60 = PHI <pxNewBlockLink_39(28), pxIterator_24(29)>
  # prephitmp_111 = PHI <pretmp_100(28), _59(29)>
  _62 = pxBlockToInsert_60 + prephitmp_111;
  if (_75 == _62)
    goto <bb 31>;
  else
    goto <bb 34>;

  <bb 31>:
  if (pxEnd.0_33 != _75)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  _64 = _75->xBlockSize;
  _65 = _64 + prephitmp_111;
  pxBlockToInsert_60->xBlockSize = _65;
  _66 = _75->pxNextFreeBlock;
  pxBlockToInsert_60->pxNextFreeBlock = _66;
  goto <bb 35>;

  <bb 33>:
  pxBlockToInsert_60->pxNextFreeBlock = _75;
  goto <bb 35>;

  <bb 34>:
  pxBlockToInsert_60->pxNextFreeBlock = _75;

  <bb 35>:
  if (pxIterator_24 != pxBlockToInsert_60)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  pretmp_99 = pxBlock_94->xBlockSize;
  goto <bb 38>;

  <bb 37>:
  pxIterator_24->pxNextFreeBlock = pxBlockToInsert_60;
  pretmp_104 = pxBlock_94->xBlockSize;

  <bb 38>:
  # prephitmp_103 = PHI <_102(23), pretmp_104(37), pretmp_99(36)>
  _45 = xFreeBytesRemaining.2_22 - prephitmp_103;
  xFreeBytesRemaining = _45;
  xMinimumEverFreeBytesRemaining.6_47 = xMinimumEverFreeBytesRemaining;
  if (_45 < xMinimumEverFreeBytesRemaining.6_47)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  xMinimumEverFreeBytesRemaining = _45;

  <bb 40>:
  _50 = xBlockAllocatedBit.1_15 | prephitmp_103;
  pxBlock_94->xBlockSize = _50;
  pxBlock_94->pxNextFreeBlock = 0B;

  <bb 41>:
  # pvReturn_6 = PHI <0B(5), pvReturn_35(40)>
  xTaskResumeAll ();
  return pvReturn_6;

}



;; Function vPortFree (vPortFree, funcdef_no=2, decl_uid=6467, cgraph_uid=2, symbol_order=10)


Analyzing loop at ../generate/os_abstraction/src/heap_renesas.c:373
../generate/os_abstraction/src/heap_renesas.c:373:5: note: ===== analyze_loop_nest =====
../generate/os_abstraction/src/heap_renesas.c:373:5: note: === vect_analyze_loop_form ===
../generate/os_abstraction/src/heap_renesas.c:373:5: note: === get_loop_niters ===
../generate/os_abstraction/src/heap_renesas.c:373:5: note: not vectorized: number of iterations cannot be computed.
../generate/os_abstraction/src/heap_renesas.c:373:5: note: bad loop form.
../generate/os_abstraction/src/heap_renesas.c:306:6: note: vectorized 0 loops in function.
vPortFree (void * pv)
{
  struct BlockLink_t * pxIterator;
  struct BlockLink_t * pxBlockToInsert;
  uint8_t * puc;
  unsigned int _7;
  unsigned int xBlockAllocatedBit.8_8;
  unsigned int _9;
  struct A_BLOCK_LINK * _11;
  unsigned int _13;
  unsigned int xBlockAllocatedBit.8_14;
  unsigned int _15;
  struct A_BLOCK_LINK * _16;
  unsigned int _17;
  unsigned int _18;
  unsigned int _21;
  unsigned int xFreeBytesRemaining.9_22;
  unsigned int _23;
  struct A_BLOCK_LINK * _28;
  unsigned int _29;
  uint8_t * _30;
  unsigned int _32;
  uint8_t * _35;
  struct BlockLink_t * pxEnd.7_36;
  unsigned int _37;
  unsigned int _38;
  struct A_BLOCK_LINK * _39;
  unsigned int pretmp_52;
  unsigned int prephitmp_60;
  unsigned int xBlockAllocatedBit.8_62;
  struct A_BLOCK_LINK * _63;
  unsigned int _64;
  unsigned int _66;
  unsigned int _67;
  unsigned int xBlockAllocatedBit.8_68;

  <bb 2>:
  if (pv_4(D) != 0B)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  goto <bb 23>;

  <bb 4>:
  _7 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize;
  xBlockAllocatedBit.8_8 = xBlockAllocatedBit;
  _9 = _7 & xBlockAllocatedBit.8_8;
  if (_9 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 321);

  <bb 6>:
  _11 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].pxNextFreeBlock;
  if (_11 != 0B)
    goto <bb 7>;
  else
    goto <bb 24>;

  <bb 7>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 322);
  _13 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize;
  xBlockAllocatedBit.8_14 = xBlockAllocatedBit;
  _15 = _13 & xBlockAllocatedBit.8_14;
  if (_15 != 0)
    goto <bb 8>;
  else
    goto <bb 3>;

  <bb 8>:
  _16 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].pxNextFreeBlock;
  if (_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 3>;

  <bb 9>:
  # _66 = PHI <_13(8), _64(24)>
  # xBlockAllocatedBit.8_68 = PHI <xBlockAllocatedBit.8_14(8), xBlockAllocatedBit.8_62(24)>
  puc_6 = pv_4(D) + 4294967288;
  _17 = ~xBlockAllocatedBit.8_68;
  _18 = _17 & _66;
  MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize = _18;
  vTaskSuspendAll ();
  _21 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize;
  xFreeBytesRemaining.9_22 = xFreeBytesRemaining;
  _23 = _21 + xFreeBytesRemaining.9_22;
  xFreeBytesRemaining = _23;

  <bb 10>:
  # pxIterator_27 = PHI <&xStart(9), _28(11)>
  _28 = pxIterator_27->pxNextFreeBlock;
  if (puc_6 > _28)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # pxIterator_65 = PHI <pxIterator_27(10)>
  # _63 = PHI <_28(10)>
  _29 = pxIterator_65->xBlockSize;
  _30 = pxIterator_65 + _29;
  if (puc_6 == _30)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  pretmp_52 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize;
  goto <bb 15>;

  <bb 14>:
  _32 = _21 + _29;
  pxIterator_65->xBlockSize = _32;

  <bb 15>:
  # pxBlockToInsert_33 = PHI <puc_6(13), pxIterator_65(14)>
  # prephitmp_60 = PHI <pretmp_52(13), _32(14)>
  _35 = pxBlockToInsert_33 + prephitmp_60;
  if (_63 == _35)
    goto <bb 16>;
  else
    goto <bb 19>;

  <bb 16>:
  pxEnd.7_36 = pxEnd;
  if (_63 != pxEnd.7_36)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  _37 = _63->xBlockSize;
  _38 = _37 + prephitmp_60;
  pxBlockToInsert_33->xBlockSize = _38;
  _39 = _63->pxNextFreeBlock;
  pxBlockToInsert_33->pxNextFreeBlock = _39;
  goto <bb 20>;

  <bb 18>:
  pxBlockToInsert_33->pxNextFreeBlock = _63;
  goto <bb 20>;

  <bb 19>:
  pxBlockToInsert_33->pxNextFreeBlock = _63;

  <bb 20>:
  if (pxIterator_65 != pxBlockToInsert_33)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  pxIterator_65->pxNextFreeBlock = pxBlockToInsert_33;

  <bb 22>:
  xTaskResumeAll ();

  <bb 23>:
  return;

  <bb 24>:
  _64 = MEM[(struct BlockLink_t *)pv_4(D) + 4294967288B].xBlockSize;
  xBlockAllocatedBit.8_62 = xBlockAllocatedBit;
  _67 = xBlockAllocatedBit.8_62 & _64;
  if (_67 != 0)
    goto <bb 9>;
  else
    goto <bb 3>;

}



;; Function vPortDefineHeapRegions (vPortDefineHeapRegions, funcdef_no=6, decl_uid=6463, cgraph_uid=6, symbol_order=14)


Analyzing loop at ../generate/os_abstraction/src/heap_renesas.c:446
../generate/os_abstraction/src/heap_renesas.c:446:10: note: ===== analyze_loop_nest =====
../generate/os_abstraction/src/heap_renesas.c:446:10: note: === vect_analyze_loop_form ===
../generate/os_abstraction/src/heap_renesas.c:446:10: note: not vectorized: control flow in loop.
../generate/os_abstraction/src/heap_renesas.c:446:10: note: bad loop form.
../generate/os_abstraction/src/heap_renesas.c:427:6: note: vectorized 0 loops in function.
vPortDefineHeapRegions (const struct HeapRegion_t * const pxHeapRegions)
{
  const struct HeapRegion_t * pxHeapRegion;
  size_t xAddress;
  BaseType_t xDefinedRegions;
  volatile size_t xTotalHeapSize;
  volatile size_t xTotalRegionSize;
  struct BlockLink_t * pxPreviousFreeBlock;
  struct BlockLink_t * pxFirstFreeBlockInRegion;
  unsigned int _1;
  unsigned int _3;
  struct BlockLink_t * pxEnd.10_14;
  uint8_t * _17;
  unsigned int _18;
  unsigned int xTotalRegionSize.12_21;
  uint8_t * _23;
  unsigned int _25;
  unsigned int xTotalRegionSize.13_29;
  unsigned int xTotalRegionSize.14_30;
  struct A_BLOCK_LINK * xAlignedHeap.15_32;
  unsigned int pxEnd.16_38;
  unsigned int xTotalRegionSize.17_41;
  struct BlockLink_t * xAddress.18_45;
  unsigned int _50;
  unsigned int xTotalHeapSize.20_54;
  unsigned int xTotalHeapSize.21_55;
  unsigned int xDefinedRegions.11_58;
  unsigned int _59;
  unsigned int xTotalHeapSize.22_61;
  unsigned int xTotalHeapSize.23_63;
  unsigned int xTotalHeapSize.24_65;
  unsigned int xTotalRegionSize.12_76;
  unsigned int xTotalRegionSize.12_79;
  struct BlockLink_t * pretmp_83;
  struct BlockLink_t * prephitmp_84;
  struct A_BLOCK_LINK * _90;
  struct A_BLOCK_LINK * _91;
  struct A_BLOCK_LINK * prephitmp_92;
  struct BlockLink_t * pretmp_94;
  struct BlockLink_t * prephitmp_95;
  struct BlockLink_t * pretmp_96;
  struct BlockLink_t * prephitmp_97;

  <bb 2>:
  xTotalHeapSize ={v} 0;
  ucHeap[0] ={v} 1;
  pxEnd.10_14 = pxEnd;
  if (pxEnd.10_14 != 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 440);

  <bb 4>:
  _17 = pxHeapRegions_16(D)->pucStartAddress;
  _18 = (unsigned int) _17;
  xDefaultBlock = _18;
  xDesiredBlock = _18;
  xTotalRegionSize.12_79 = pxHeapRegions_16(D)->xSizeInBytes;
  if (xTotalRegionSize.12_79 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  xTotalHeapSize.22_61 ={v} xTotalHeapSize;
  xMinimumEverFreeBytesRemaining = xTotalHeapSize.22_61;
  xTotalHeapSize.23_63 ={v} xTotalHeapSize;
  xFreeBytesRemaining = xTotalHeapSize.23_63;
  xTotalHeapSize.24_65 ={v} xTotalHeapSize;
  if (xTotalHeapSize.24_65 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 6>:
  pretmp_83 = pxEnd;

  <bb 7>:
  # xDefinedRegions_70 = PHI <0(6), xDefinedRegions_57(19)>
  # pxHeapRegion_71 = PHI <pxHeapRegions_16(D)(6), pxHeapRegion_60(19)>
  # xTotalRegionSize.12_76 = PHI <xTotalRegionSize.12_79(6), xTotalRegionSize.12_21(19)>
  # prephitmp_84 = PHI <pretmp_83(6), xAddress.18_45(19)>
  xTotalRegionSize ={v} xTotalRegionSize.12_76;
  _23 = pxHeapRegion_71->pucStartAddress;
  xAddress_24 = (size_t) _23;
  _25 = xAddress_24 & 7;
  if (_25 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  xAddress_26 = xAddress_24 + 7;
  xAddress_27 = xAddress_26 & 4294967288;
  xTotalRegionSize.13_29 ={v} xTotalRegionSize;
  _3 = xAddress_24 + xTotalRegionSize.13_29;
  xTotalRegionSize.14_30 = _3 - xAddress_27;
  xTotalRegionSize ={v} xTotalRegionSize.14_30;

  <bb 9>:
  # xAddress_2 = PHI <xAddress_24(7), xAddress_27(8)>
  if (xDefinedRegions_70 == 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  xAlignedHeap.15_32 = (struct A_BLOCK_LINK *) xAddress_2;
  xStart.pxNextFreeBlock = xAlignedHeap.15_32;
  xStart.xBlockSize = 0;
  goto <bb 16>;

  <bb 11>:
  if (prephitmp_84 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 475);
  pretmp_96 = pxEnd;

  <bb 13>:
  # prephitmp_97 = PHI <prephitmp_84(11), pretmp_96(12)>
  pxEnd.16_38 = (unsigned int) prephitmp_97;
  if (xAddress_2 <= pxEnd.16_38)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  _90 = (struct A_BLOCK_LINK *) xAddress_2;
  goto <bb 16>;

  <bb 15>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 478);
  _91 = (struct A_BLOCK_LINK *) xAddress_2;
  pretmp_94 = pxEnd;

  <bb 16>:
  # prephitmp_92 = PHI <xAlignedHeap.15_32(10), _90(14), _91(15)>
  # prephitmp_95 = PHI <prephitmp_84(10), prephitmp_97(14), pretmp_94(15)>
  xTotalRegionSize.17_41 ={v} xTotalRegionSize;
  _1 = xTotalRegionSize.17_41 + 4294967288;
  xAddress_43 = _1 + xAddress_2;
  xAddress_44 = xAddress_43 & 4294967288;
  xAddress.18_45 = (struct BlockLink_t *) xAddress_44;
  pxEnd = xAddress.18_45;
  xAddress.18_45->xBlockSize = 0;
  xAddress.18_45->pxNextFreeBlock = 0B;
  _50 = xAddress_44 - xAddress_2;
  MEM[(struct BlockLink_t *)prephitmp_92].xBlockSize = _50;
  MEM[(struct BlockLink_t *)prephitmp_92].pxNextFreeBlock = xAddress.18_45;
  if (prephitmp_95 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  prephitmp_95->pxNextFreeBlock = prephitmp_92;

  <bb 18>:
  xTotalHeapSize.20_54 ={v} xTotalHeapSize;
  xTotalHeapSize.21_55 = _50 + xTotalHeapSize.20_54;
  xTotalHeapSize ={v} xTotalHeapSize.21_55;
  xDefinedRegions_57 = xDefinedRegions_70 + 1;
  xDefinedRegions.11_58 = (unsigned int) xDefinedRegions_57;
  _59 = xDefinedRegions.11_58 * 8;
  pxHeapRegion_60 = pxHeapRegions_16(D) + _59;
  xTotalRegionSize.12_21 = pxHeapRegion_60->xSizeInBytes;
  if (xTotalRegionSize.12_21 != 0)
    goto <bb 19>;
  else
    goto <bb 5>;

  <bb 19>:
  goto <bb 7>;

  <bb 20>:
  R_OS_AssertCalled ("../generate/os_abstraction/src/heap_renesas.c", 519);

  <bb 21>:
  xBlockAllocatedBit = 2147483648;
  return;

}


