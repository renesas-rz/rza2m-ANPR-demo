
;; Function prvSwitchTimerLists (prvSwitchTimerLists, funcdef_no=15, decl_uid=6998, cgraph_uid=15, symbol_order=21)


Analyzing loop at ../src/FreeRTOS/timers.c:846
../src/FreeRTOS/timers.c:846:7: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:846:7: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:846:7: note: not vectorized: control flow in loop.
../src/FreeRTOS/timers.c:846:7: note: bad loop form.

Analyzing loop at ../src/FreeRTOS/timers.c:846
../src/FreeRTOS/timers.c:846:9: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:846:9: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:846:9: note: not vectorized: control flow in loop.
../src/FreeRTOS/timers.c:846:9: note: bad loop form.
../src/FreeRTOS/timers.c:835:13: note: vectorized 0 loops in function.
prvSwitchTimerLists ()
{
  BaseType_t xReturn;
  struct DaemonTaskMessage_t xMessage;
  BaseType_t D.7448;
  BaseType_t xResult;
  struct Timer_t * pxTimer;
  TickType_t xReloadTime;
  TickType_t xNextExpireTime;
  struct List_t * pxCurrentTimerList.7_3;
  long unsigned int _4;
  struct xLIST_ITEM * _6;
  struct ListItem_t * _10;
  void (*<T1623>) (void *) _12;
  long unsigned int _14;
  long unsigned int _15;
  struct List_t * pxCurrentTimerList.7_22;
  struct List_t * pxOverflowTimerList.8_24;
  void * xTimerQueue.14_29;
  struct ListItem_t * _31;
  struct List_t * pxCurrentTimerList.7_35;
  void * xTimerQueue.14_61;

  <bb 2>:
  goto <bb 10>;

  <bb 3>:
  _6 = pxCurrentTimerList.7_3->xListEnd.pxNext;
  xNextExpireTime_7 = _6->xItemValue;
  pxTimer_9 = _6->pvOwner;
  _10 = &pxTimer_9->xTimerListItem;
  uxListRemove (_10);
  _12 = pxTimer_9->pxCallbackFunction;
  _12 (pxTimer_9);
  _14 = pxTimer_9->uxAutoReload;
  if (_14 == 1)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 11>;

  <bb 5>:
  # xNextExpireTime_33 = PHI <xNextExpireTime_7(3)>
  # pxTimer_18 = PHI <pxTimer_9(3)>
  # _31 = PHI <_10(3)>
  _15 = pxTimer_18->xTimerPeriodInTicks;
  xReloadTime_16 = xNextExpireTime_33 + _15;
  if (xNextExpireTime_33 < xReloadTime_16)
    goto <bb 6>;
  else
    goto <bb 14>;

  <bb 6>:
  pxTimer_18->xTimerListItem.xItemValue = xReloadTime_16;
  pxTimer_18->xTimerListItem.pvOwner = pxTimer_18;
  pxCurrentTimerList.7_22 = pxCurrentTimerList;
  vListInsert (pxCurrentTimerList.7_22, _31);
  goto <bb 9>;

  <bb 7>:
  xMessage.xMessageID = 0;
  xMessage.u.xTimerParameters.xMessageValue = xNextExpireTime_33;
  xMessage.u.xTimerParameters.pxTimer = pxTimer_18;
  xTaskGetSchedulerState ();
  xTimerQueue.14_29 = xTimerQueue;
  xReturn_30 = xQueueGenericSend (xTimerQueue.14_29, &xMessage, 0, 0);
  xMessage ={v} {CLOBBER};
  if (xReturn_30 == 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  R_OS_AssertCalled ("../src/FreeRTOS/timers.c", 878);

  <bb 9>:

  <bb 10>:

  <bb 11>:
  pxCurrentTimerList.7_3 = pxCurrentTimerList;
  _4 ={v} pxCurrentTimerList.7_3->uxNumberOfItems;
  if (_4 != 0)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 12>:
  # pxCurrentTimerList.7_35 = PHI <pxCurrentTimerList.7_3(11)>
  pxOverflowTimerList.8_24 = pxOverflowTimerList;
  pxCurrentTimerList = pxOverflowTimerList.8_24;
  pxOverflowTimerList = pxCurrentTimerList.7_35;
  return;

  <bb 13>:
  xMessage ={v} {CLOBBER};
  goto <bb 8>;

  <bb 14>:
  xTimerQueue.14_61 = xTimerQueue;
  if (xTimerQueue.14_61 != 0B)
    goto <bb 7>;
  else
    goto <bb 13>;

}



;; Function prvTimerTask (prvTimerTask, funcdef_no=9, decl_uid=6986, cgraph_uid=9, symbol_order=15) (executed once)


Analyzing loop at ../src/FreeRTOS/timers.c:609
../src/FreeRTOS/timers.c:609:20: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:609:20: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:609:20: note: not vectorized: multiple nested loops.
../src/FreeRTOS/timers.c:609:20: note: bad loop form.

Analyzing loop at ../src/FreeRTOS/timers.c:695
../src/FreeRTOS/timers.c:695:7: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:695:7: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:695:7: note: not vectorized: multiple nested loops.
../src/FreeRTOS/timers.c:695:7: note: bad loop form.
../src/FreeRTOS/timers.c:502:13: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:502:13: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:502:13: note: not vectorized: control flow in loop.
../src/FreeRTOS/timers.c:502:13: note: bad loop form.

Analyzing loop at ../src/FreeRTOS/timers.c:695
../src/FreeRTOS/timers.c:695:9: note: ===== analyze_loop_nest =====
../src/FreeRTOS/timers.c:695:9: note: === vect_analyze_loop_form ===
../src/FreeRTOS/timers.c:695:9: note: not vectorized: control flow in loop.
../src/FreeRTOS/timers.c:695:9: note: bad loop form.
../src/FreeRTOS/timers.c:502:13: note: vectorized 0 loops in function.
prvTimerTask (void * pvParameters)
{
  BaseType_t D.7531;
  BaseType_t xProcessTimerNow;
  BaseType_t D.7525;
  BaseType_t xReturn;
  struct DaemonTaskMessage_t xMessage;
  BaseType_t D.7518;
  BaseType_t D.7510;
  BaseType_t xProcessTimerNow;
  BaseType_t D.7504;
  TickType_t xTimeNow;
  TickType_t D.7498;
  static TickType_t xLastTime = 0;
  BaseType_t xReturn;
  struct DaemonTaskMessage_t xMessage;
  BaseType_t D.7494;
  BaseType_t D.7486;
  BaseType_t xProcessTimerNow;
  BaseType_t D.7480;
  BaseType_t xResult;
  struct Timer_t * const pxTimer;
  TickType_t xTimeNow;
  TickType_t D.7470;
  static TickType_t xLastTime = 0;
  TickType_t xTimeNow;
  BaseType_t xTimerListsWereSwitched;
  BaseType_t xListWasEmpty;
  struct DaemonTaskMessage_t xMessage;
  struct Timer_t * pxTimer;
  BaseType_t xTimerListsWereSwitched;
  BaseType_t xResult;
  TickType_t xTimeNow;
  TickType_t xNextExpireTime;
  struct List_t * pxCurrentTimerList.2_5;
  long unsigned int _6;
  struct xLIST_ITEM * _9;
  long int _12;
  void (*<T1627>) (void *, uint32_t) _13;
  void * _14;
  long unsigned int _15;
  long int _16;
  void * _18;
  struct ListItem_t * _19;
  long int _21;
  long unsigned int _22;
  long unsigned int _23;
  long unsigned int _24;
  void (*<T1623>) (void *) _26;
  long unsigned int _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  long unsigned int _32;
  long unsigned int _33;
  long unsigned int _34;
  void * xTimerQueue.12_35;
  long int _36;
  long unsigned int xLastTime.6_38;
  _Bool _40;
  struct List_t * pxOverflowTimerList.4_42;
  long unsigned int _43;
  _Bool _44;
  void * xTimerQueue.5_46;
  long unsigned int _47;
  long int _49;
  long unsigned int xLastTime.6_51;
  struct List_t * pxCurrentTimerList.9_52;
  struct xLIST_ITEM * _53;
  struct ListItem_t * _55;
  long unsigned int _56;
  long unsigned int _57;
  long unsigned int _58;
  void (*<T1623>) (void *) _61;
  long unsigned int _62;
  struct List_t * pxCurrentTimerList.11_68;
  struct List_t * pxOverflowTimerList.10_71;
  void * xTimerQueue.14_74;
  void * xTimerQueue.14_76;
  long unsigned int xLastTime.6_84;
  long unsigned int _85;
  _Bool _88;
  _Bool _89;
  _Bool _90;
  struct List_t * pxCurrentTimerList.11_91;
  struct ListItem_t * _92;
  struct List_t * pxOverflowTimerList.10_94;
  struct ListItem_t * _95;
  void * xTimerQueue.14_99;
  struct List_t * pxCurrentTimerList.11_112;
  struct ListItem_t * _113;
  struct List_t * pxOverflowTimerList.10_115;
  struct ListItem_t * _116;
  long int _130;
  long unsigned int _213;
  long int prephitmp_215;
  void * xTimerQueue.14_219;

  <bb 2>:

  <bb 3>:
  pxCurrentTimerList.2_5 = pxCurrentTimerList;
  _6 ={v} pxCurrentTimerList.2_5->uxNumberOfItems;
  if (_6 != 0)
    goto <bb 4>;
  else
    goto <bb 53>;

  <bb 4>:
  _9 = pxCurrentTimerList.2_5->xListEnd.pxNext;
  xNextExpireTime_10 = _9->xItemValue;
  vTaskSuspendAll ();
  xTimeNow_50 = xTaskGetTickCount ();
  xLastTime.6_51 = xLastTime;
  if (xTimeNow_50 < xLastTime.6_51)
    goto <bb 5>;
  else
    goto <bb 49>;

  <bb 5>:
  # xTimeNow_171 = PHI <xTimeNow_50(4), xTimeNow_72(53)>
  prvSwitchTimerLists ();
  xLastTime = xTimeNow_171;
  xTaskResumeAll ();
  goto <bb 17>;

  <bb 6>:
  xTaskResumeAll ();
  pxCurrentTimerList.9_52 = pxCurrentTimerList;
  _53 = pxCurrentTimerList.9_52->xListEnd.pxNext;
  pxTimer_54 = _53->pvOwner;
  _55 = &pxTimer_54->xTimerListItem;
  uxListRemove (_55);
  _56 = pxTimer_54->uxAutoReload;
  if (_56 == 1)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 16>;

  <bb 8>:
  _57 = pxTimer_54->xTimerPeriodInTicks;
  _58 = xNextExpireTime_10 + _57;
  pxTimer_54->xTimerListItem.xItemValue = _58;
  pxTimer_54->xTimerListItem.pvOwner = pxTimer_54;
  if (xTimeNow_50 >= _58)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  _62 = xTimeNow_50 - xNextExpireTime_10;
  if (_57 <= _62)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 10>:
  pxOverflowTimerList.10_71 = pxOverflowTimerList;
  vListInsert (pxOverflowTimerList.10_71, _55);
  goto <bb 16>;

  <bb 11>:
  pxCurrentTimerList.11_68 = pxCurrentTimerList;
  vListInsert (pxCurrentTimerList.11_68, _55);
  goto <bb 16>;

  <bb 12>:
  xTimerQueue.14_74 = xTimerQueue;
  if (xTimerQueue.14_74 != 0B)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  xMessage ={v} {CLOBBER};
  goto <bb 15>;

  <bb 14>:
  xMessage.xMessageID = 0;
  xMessage.u.xTimerParameters.xMessageValue = xNextExpireTime_10;
  xMessage.u.xTimerParameters.pxTimer = pxTimer_54;
  xTaskGetSchedulerState ();
  xTimerQueue.14_76 = xTimerQueue;
  xReturn_77 = xQueueGenericSend (xTimerQueue.14_76, &xMessage, 0, 0);
  xMessage ={v} {CLOBBER};
  if (xReturn_77 == 0)
    goto <bb 15>;
  else
    goto <bb 7>;

  <bb 15>:
  R_OS_AssertCalled ("../src/FreeRTOS/timers.c", 484);

  <bb 16>:
  _61 = pxTimer_54->pxCallbackFunction;
  _61 (pxTimer_54);

  <bb 17>:
  goto <bb 45>;

  <bb 18>:
  # xNextExpireTime_139 = PHI <xNextExpireTime_10(49), 0(52)>
  # xTimeNow_82 = PHI <xTimeNow_50(49), xTimeNow_72(52)>
  # prephitmp_215 = PHI <0(49), _130(52)>
  xTimerQueue.5_46 = xTimerQueue;
  _47 = xNextExpireTime_139 - xTimeNow_82;
  vQueueWaitForMessageRestricted (xTimerQueue.5_46, _47, prephitmp_215);
  _49 = xTaskResumeAll ();
  if (_49 == 0)
    goto <bb 19>;
  else
    goto <bb 17>;

  <bb 19>:
  __asm__ __volatile__("SWI 0" :  :  : "memory");
  goto <bb 17>;

  <bb 20>:
  _12 = xMessage.xMessageID;
  if (_12 < 0)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  pxTimer_17 = xMessage.u.xTimerParameters.pxTimer;
  _18 = pxTimer_17->xTimerListItem.pvContainer;
  if (_18 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 22>:
  _13 = MEM[(const struct CallbackParameters_t *)&xMessage + 4B].pxCallbackFunction;
  _14 = MEM[(const struct CallbackParameters_t *)&xMessage + 4B].pvParameter1;
  _15 = MEM[(const struct CallbackParameters_t *)&xMessage + 4B].ulParameter2;
  _13 (_14, _15);
  _16 = xMessage.xMessageID;
  if (_16 >= 0)
    goto <bb 21>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 47>;

  <bb 24>:
  _19 = &pxTimer_17->xTimerListItem;
  uxListRemove (_19);

  <bb 25>:
  xTimeNow_83 = xTaskGetTickCount ();
  xLastTime.6_84 = xLastTime;
  if (xTimeNow_83 < xLastTime.6_84)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  prvSwitchTimerLists ();

  <bb 27>:
  xLastTime = xTimeNow_83;
  _21 = xMessage.xMessageID;
  switch (_21) <default: <L12>, case 0 ... 2: <L2>, case 4: <L3>, case 5: <L4>, case 6 ... 7: <L2>, case 9: <L3>>

<L12>:
  goto <bb 46> (<L6>);

  # pxTimer_129 = PHI <pxTimer_17(27)>
  # xTimeNow_81 = PHI <xTimeNow_83(27)>
<L2>:
  _22 = xMessage.u.xTimerParameters.xMessageValue;
  _23 = pxTimer_129->xTimerPeriodInTicks;
  _24 = _22 + _23;
  pxTimer_129->xTimerListItem.xItemValue = _24;
  pxTimer_129->xTimerListItem.pvOwner = pxTimer_129;
  if (_24 <= xTimeNow_81)
    goto <bb 30>;
  else
    goto <bb 32>;

  <bb 30>:
  _85 = xTimeNow_81 - _22;
  if (_23 <= _85)
    goto <bb 50>;
  else
    goto <bb 31>;

  <bb 31>:
  pxOverflowTimerList.10_94 = pxOverflowTimerList;
  _95 = &pxTimer_129->xTimerListItem;
  vListInsert (pxOverflowTimerList.10_94, _95);
  goto <bb 44>;

  <bb 32>:
  _88 = _22 > xTimeNow_81;
  _89 = _22 <= _24;
  _90 = _88 & _89;
  if (_90 != 0)
    goto <bb 50>;
  else
    goto <bb 33>;

  <bb 33>:
  pxCurrentTimerList.11_91 = pxCurrentTimerList;
  _92 = &pxTimer_129->xTimerListItem;
  vListInsert (pxCurrentTimerList.11_91, _92);
  goto <bb 44>;

  <bb 34>:
  _28 = xMessage.u.xTimerParameters.xMessageValue;
  _29 = pxTimer_129->xTimerPeriodInTicks;
  _30 = _28 + _29;
  xTimerQueue.14_219 = xTimerQueue;
  if (xTimerQueue.14_219 != 0B)
    goto <bb 35>;
  else
    goto <bb 51>;

  <bb 35>:
  xMessage.xMessageID = 0;
  xMessage.u.xTimerParameters.xMessageValue = _30;
  xMessage.u.xTimerParameters.pxTimer = pxTimer_129;
  xTaskGetSchedulerState ();
  xTimerQueue.14_99 = xTimerQueue;
  xReturn_100 = xQueueGenericSend (xTimerQueue.14_99, &xMessage, 0, 0);
  xMessage ={v} {CLOBBER};
  if (xReturn_100 == 0)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  goto <bb 44>;

  <bb 37>:
  R_OS_AssertCalled ("../src/FreeRTOS/timers.c", 765);
  goto <bb 44>;

  # pxTimer_104 = PHI <pxTimer_17(27)>
  # xTimeNow_203 = PHI <xTimeNow_83(27)>
<L3>:
  _32 = xMessage.u.xTimerParameters.xMessageValue;
  pxTimer_104->xTimerPeriodInTicks = _32;
  if (_32 == 0)
    goto <bb 39>;
  else
    goto <bb 54>;

  <bb 39>:
  R_OS_AssertCalled ("../src/FreeRTOS/timers.c", 788);
  _33 = pxTimer_104->xTimerPeriodInTicks;
  _34 = _33 + xTimeNow_203;
  pxTimer_104->xTimerListItem.xItemValue = _34;
  pxTimer_104->xTimerListItem.pvOwner = pxTimer_104;
  if (_34 <= xTimeNow_203)
    goto <bb 40>;
  else
    goto <bb 42>;

  <bb 40>:
  if (_33 == 0)
    goto <bb 36>;
  else
    goto <bb 41>;

  <bb 41>:
  pxOverflowTimerList.10_115 = pxOverflowTimerList;
  _116 = &pxTimer_104->xTimerListItem;
  vListInsert (pxOverflowTimerList.10_115, _116);
  goto <bb 44>;

  <bb 42>:
  pxCurrentTimerList.11_112 = pxCurrentTimerList;
  _113 = &pxTimer_104->xTimerListItem;
  vListInsert (pxCurrentTimerList.11_112, _113);
  goto <bb 44>;

  # pxTimer_121 = PHI <pxTimer_17(27)>
<L4>:
  vPortFree (pxTimer_121);

  <bb 44>:

  <bb 45>:

<L6>:

  <bb 47>:
  xTimerQueue.12_35 = xTimerQueue;
  _36 = xQueueReceive (xTimerQueue.12_35, &xMessage, 0);
  if (_36 != 0)
    goto <bb 20>;
  else
    goto <bb 48>;

  <bb 48>:
  xMessage ={v} {CLOBBER};
  goto <bb 3>;

  <bb 49>:
  xLastTime = xTimeNow_50;
  _40 = xNextExpireTime_10 <= xTimeNow_50;
  if (_40 != 0)
    goto <bb 6>;
  else
    goto <bb 18>;

  <bb 50>:
  _26 = pxTimer_129->pxCallbackFunction;
  _26 (pxTimer_129);
  _27 = pxTimer_129->uxAutoReload;
  if (_27 == 1)
    goto <bb 34>;
  else
    goto <bb 36>;

  <bb 51>:
  xMessage ={v} {CLOBBER};
  goto <bb 37>;

  <bb 52>:
  xLastTime = xTimeNow_72;
  pxOverflowTimerList.4_42 = pxOverflowTimerList;
  _43 ={v} pxOverflowTimerList.4_42->uxNumberOfItems;
  _44 = _43 == 0;
  _130 = (long int) _44;
  goto <bb 18>;

  <bb 53>:
  vTaskSuspendAll ();
  xTimeNow_72 = xTaskGetTickCount ();
  xLastTime.6_38 = xLastTime;
  if (xLastTime.6_38 > xTimeNow_72)
    goto <bb 5>;
  else
    goto <bb 52>;

  <bb 54>:
  _213 = _32 + xTimeNow_203;
  pxTimer_104->xTimerListItem.xItemValue = _213;
  pxTimer_104->xTimerListItem.pvOwner = pxTimer_104;
  if (xTimeNow_203 >= _213)
    goto <bb 41>;
  else
    goto <bb 42>;

}


