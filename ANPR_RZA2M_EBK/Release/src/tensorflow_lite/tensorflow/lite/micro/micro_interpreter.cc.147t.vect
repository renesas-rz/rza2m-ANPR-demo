
;; Function TfLiteStatus tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() (_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv, funcdef_no=6651, decl_uid=180994, cgraph_uid=3839, symbol_order=3874)


Analyzing loop at ../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:91
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:91:64: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:91:64: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:91:64: note: not vectorized: control flow in loop.
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:91:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/base.h:392
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/base.h:392:22: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/base.h:392:22: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/base.h:392:22: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/base.h:392:22: note: bad loop form.
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:90:14: note: vectorized 0 loops in function.
TfLiteStatus tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() (struct MicroInterpreter * const this)
{
  const uint8_t * p;
  const struct OperatorCode * D.238362;
  static const char __PRETTY_FUNCTION__[258] = "flatbuffers::Vector<T>::return_type flatbuffers::Vector<T>::Get(flatbuffers::uoffset_t) const [with T = flatbuffers::Offset<tflite::OperatorCode>; flatbuffers::Vector<T>::return_type = const tflite::OperatorCode*; flatbuffers::uoffset_t = long unsigned int]";
  const uint8_t * p;
  const struct Operator * D.238358;
  static const char __PRETTY_FUNCTION__[250] = "flatbuffers::Vector<T>::return_type flatbuffers::Vector<T>::Get(flatbuffers::uoffset_t) const [with T = flatbuffers::Offset<tflite::Operator>; flatbuffers::Vector<T>::return_type = const tflite::Operator*; flatbuffers::uoffset_t = long unsigned int]";
  const uint8_t * p;
  const struct SubGraph * D.238354;
  static const char __PRETTY_FUNCTION__[250] = "flatbuffers::Vector<T>::return_type flatbuffers::Vector<T>::Get(flatbuffers::uoffset_t) const [with T = flatbuffers::Offset<tflite::SubGraph>; flatbuffers::Vector<T>::return_type = const tflite::SubGraph*; flatbuffers::uoffset_t = long unsigned int]";
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  unsigned char * p;
  struct TfLiteIntArray * outputs_array;
  struct TfLiteIntArray * inputs_array;
  unsigned char * builtin_data;
  size_t custom_data_size;
  const char * custom_data;
  BuiltinOperator op_type;
  const struct TfLiteRegistration * registration;
  size_t i;
  int subgraph_idx;
  TfLiteStatus _5;
  TfLiteStatus _6;
  int _16;
  const struct Model * _17;
  long unsigned int subgraph_idx.2_19;
  struct MicroAllocator & _24;
  struct BuiltinDataAllocator * _26;
  const struct Vector * iftmp.12_33;
  long unsigned int _34;
  const struct MicroOpResolver & _37;
  const struct OpResolver * _38;
  struct ErrorReporter * _39;
  unsigned int _41;
  struct SubgraphAllocations * _42;
  struct NodeAndRegistration * _43;
  unsigned int _44;
  struct NodeAndRegistration * _45;
  const struct TfLiteRegistration * * _46;
  TfLiteStatus _48;
  sizetype _49;
  struct SubgraphAllocations * _50;
  struct NodeAndRegistration * _51;
  struct NodeAndRegistration * _52;
  long int _54;
  short unsigned int _58;
  int _59;
  short unsigned int _60;
  const uint8_t * _61;
  sizetype _62;
  const struct MicroOpResolver & _63;
  int (*__vtbl_ptr_type) () * _64;
  int (*__vtbl_ptr_type) () _65;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _67;
  struct ErrorReporter * _68;
  const TfLiteStatus _70;
  struct MicroAllocator & _71;
  sizetype _72;
  const TfLiteStatus _74;
  struct MicroAllocator & _75;
  long int _76;
  const TfLiteStatus _78;
  const uint8_t[1] * _79;
  struct SubgraphAllocations * _80;
  struct NodeAndRegistration * _81;
  struct NodeAndRegistration * _82;
  struct TfLiteIntArray * inputs_array.8_84;
  struct TfLiteIntArray * outputs_array.9_86;
  unsigned char * builtin_data.10_88;
  int custom_data_size.11_91;
  struct SubgraphAllocations * _101;
  struct SubgraphAllocations * _102;
  struct SubgraphAllocations * _103;
  sizetype _104;
  short unsigned int _107;
  sizetype _109;
  long unsigned int _111;
  const struct Vector * iftmp.14_112;
  const struct Vector * iftmp.14_113;
  long unsigned int _114;
  long int _116;
  sizetype _117;
  sizetype _118;
  const uint8_t * _119;
  short unsigned int _120;
  int _121;
  short unsigned int _122;
  sizetype _124;
  long unsigned int _126;
  const struct Vector * iftmp.15_127;
  long unsigned int _136;
  const uint8_t[1] * _137;
  long int _138;
  sizetype _139;
  sizetype _140;
  const uint8_t * _141;
  short unsigned int _142;
  int _143;
  short unsigned int _144;
  sizetype _146;
  const void * _147;
  long unsigned int _148;
  long unsigned int iftmp.16_149;
  long int _150;
  sizetype _151;
  sizetype _152;
  const uint8_t * _153;
  short unsigned int _154;
  int _155;
  short unsigned int _156;
  sizetype _158;
  long unsigned int _160;
  const struct Vector * iftmp.17_161;
  long unsigned int _162;
  long unsigned int _163;
  sizetype _165;
  const uint8_t * _171;
  int prephitmp_174;
  short unsigned int pretmp_175;
  const uint8_t[1] * prephitmp_178;
  long int _179;
  sizetype _180;
  sizetype _181;
  const uint8_t * _182;
  short unsigned int _183;
  int _184;
  short unsigned int _185;
  long int pretmp_187;
  long unsigned int _189;
  const struct Vector * iftmp.17_190;
  short unsigned int _198;
  long unsigned int _199;
  sizetype _200;
  long unsigned int _202;
  const struct Vector * iftmp.18_203;
  const struct Vector * iftmp.18_204;
  long int _205;
  sizetype _206;
  sizetype _207;
  const uint8_t * _208;
  short unsigned int _209;
  int _210;
  short unsigned int _211;
  sizetype _213;
  long unsigned int _215;
  const struct Vector * iftmp.18_216;
  const struct Vector * iftmp.18_217;
  long unsigned int _218;
  const uint8_t * _219;
  long unsigned int _220;
  long unsigned int _222;
  const struct SubGraph * _223;
  const uint8_t * _225;
  long unsigned int _226;
  long unsigned int _228;
  const struct Operator * _229;
  const uint8_t * _231;
  long unsigned int _232;
  long unsigned int _234;
  const struct OperatorCode * _235;
  int _260;
  const uint8_t[1] * _262;
  struct MicroGraph * pretmp_271;
  const uint8_t[1] * pretmp_278;
  TfLiteStatus _295;
  TfLiteStatus _296;
  sizetype _297;
  TfLiteStatus _299;
  TfLiteStatus _300;

  <bb 2>:
  pretmp_271 = &this_13(D)->graph_;

  <bb 3>:
  # subgraph_idx_1 = PHI <0(2), subgraph_idx_29(49)>
  _16 = tflite::MicroGraph::NumSubgraphs (pretmp_271);
  if (subgraph_idx_1 < _16)
    goto <bb 4>;
  else
    goto <bb 50>;

  <bb 4>:
  _17 = this_13(D)->model_;
  _79 = &MEM[(const struct Table *)_17].data_;
  _76 = MEM[(const long int *)_17];
  _72 = (sizetype) _76;
  _62 = -_72;
  _61 = _79 + _62;
  _60 = MEM[(const short unsigned int *)_61];
  _59 = (int) _60;
  if (_59 > 8)
    goto <bb 5>;
  else
    goto <bb 51>;

  <bb 5>:
  _58 = MEM[(const short unsigned int *)_61 + 8B];
  _49 = (sizetype) _58;
  p_40 = _79 + _49;
  if (_58 != 0)
    goto <bb 6>;
  else
    goto <bb 51>;

  <bb 6>:
  _34 = MEM[(const long unsigned int *)p_40];
  iftmp.12_33 = p_40 + _34;
  subgraph_idx.2_19 = (long unsigned int) subgraph_idx_1;
  _218 = iftmp.12_33->length_;
  if (subgraph_idx.2_19 < _218)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  __assert_func ("C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h", 262, &__PRETTY_FUNCTION__, "i < size()");

  <bb 8>:
  _219 = &MEM[(void *)iftmp.12_33 + 4B];
  _220 = subgraph_idx.2_19 * 4;
  p_221 = _219 + _220;
  _222 = MEM[(const long unsigned int *)p_221];
  _223 = p_221 + _222;
  if (_223 != 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  abort ();

  <bb 10>:
  if (_59 > 6)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  _107 = MEM[(const short unsigned int *)_61 + 6B];
  _109 = (sizetype) _107;
  p_110 = _79 + _109;
  if (_107 != 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  _111 = MEM[(const long unsigned int *)p_110];
  iftmp.14_112 = p_110 + _111;

  <bb 13>:
  # iftmp.14_113 = PHI <0B(11), iftmp.14_112(12), 0B(10)>
  _24 = this_13(D)->allocator_;
  _26 = tflite::MicroAllocator::GetBuiltinDataAllocator (_24);
  pretmp_278 = &MEM[(const struct Table *)_223].data_;
  _41 = subgraph_idx.2_19 * 8;

  <bb 14>:
  # i_2 = PHI <0(13), i_96(46)>
  _116 = MEM[(const long int *)_223];
  _117 = (sizetype) _116;
  _118 = -_117;
  _119 = pretmp_278 + _118;
  _120 = MEM[(const short unsigned int *)_119];
  _121 = (int) _120;
  if (_121 > 10)
    goto <bb 15>;
  else
    goto <bb 52>;

  <bb 15>:
  _122 = MEM[(const short unsigned int *)_119 + 10B];
  _124 = (sizetype) _122;
  p_125 = pretmp_278 + _124;
  if (_122 != 0)
    goto <bb 16>;
  else
    goto <bb 52>;

  <bb 16>:
  _126 = MEM[(const long unsigned int *)p_125];
  iftmp.15_127 = p_125 + _126;
  _114 = iftmp.15_127->length_;
  if (i_2 < _114)
    goto <bb 17>;
  else
    goto <bb 49>;

  <bb 17>:
  _225 = &MEM[(void *)iftmp.15_127 + 4B];
  _226 = i_2 * 4;
  p_227 = _225 + _226;
  _228 = MEM[(const long unsigned int *)p_227];
  _229 = p_227 + _228;
  _137 = &MEM[(const struct Table *)_229].data_;
  _138 = MEM[(const long int *)_229];
  _139 = (sizetype) _138;
  _140 = -_139;
  _141 = _137 + _140;
  _142 = MEM[(const short unsigned int *)_141];
  _143 = (int) _142;
  if (_143 > 4)
    goto <bb 18>;
  else
    goto <bb 20>;

  <bb 18>:
  _144 = MEM[(const short unsigned int *)_141 + 4B];
  if (_144 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  _146 = (sizetype) _144;
  _147 = _137 + _146;
  _148 = MEM[(const long unsigned int *)_147];

  <bb 20>:
  # iftmp.16_149 = PHI <0(18), _148(19), 0(17)>
  _136 = iftmp.14_113->length_;
  if (_136 <= iftmp.16_149)
    goto <bb 47>;
  else
    goto <bb 21>;

  <bb 21>:
  _231 = &MEM[(void *)iftmp.14_113 + 4B];
  _232 = iftmp.16_149 * 4;
  p_233 = _231 + _232;
  _234 = MEM[(const long unsigned int *)p_233];
  _235 = p_233 + _234;
  _37 = this_13(D)->op_resolver_;
  _38 = &_37->D.180758;
  _39 = this_13(D)->error_reporter_;
  _101 = MEM[(struct SubgraphAllocations * *)this_13(D) + 120B];
  _42 = _101 + _41;
  _43 = _42->node_and_registrations;
  _44 = i_2 * 44;
  _45 = _43 + _44;
  _46 = &_45->registration;
  _48 = tflite::GetRegistrationFromOpCode (_235, _38, _39, _46);
  if (_48 != 0)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  # _300 = PHI <_48(21)>
  goto <bb 48>;

  <bb 23>:
  _102 = MEM[(struct SubgraphAllocations * *)this_13(D) + 120B];
  _50 = _102 + _41;
  _51 = _50->node_and_registrations;
  _52 = _51 + _44;
  registration_53 = _52->registration;
  if (registration_53 == 0B)
    goto <bb 47>;
  else
    goto <bb 24>;

  <bb 24>:
  _54 = registration_53->builtin_code;
  op_type_55 = (BuiltinOperator) _54;
  builtin_data = 0B;
  if (op_type_55 == 32)
    goto <bb 25>;
  else
    goto <bb 29>;

  <bb 25>:
  _150 = MEM[(const long int *)_229];
  _151 = (sizetype) _150;
  _152 = -_151;
  _153 = _137 + _152;
  _154 = MEM[(const short unsigned int *)_153];
  _155 = (int) _154;
  if (_155 > 14)
    goto <bb 26>;
  else
    goto <bb 36>;

  <bb 26>:
  _156 = MEM[(const short unsigned int *)_153 + 14B];
  _158 = (sizetype) _156;
  p_159 = _137 + _158;
  if (_156 != 0)
    goto <bb 27>;
  else
    goto <bb 36>;

  <bb 27>:
  _160 = MEM[(const long unsigned int *)p_159];
  iftmp.17_161 = p_159 + _160;
  if (iftmp.17_161 != 0B)
    goto <bb 28>;
  else
    goto <bb 36>;

  <bb 28>:
  _171 = &MEM[(void *)iftmp.17_161 + 4B];
  _163 = iftmp.17_161->length_;
  goto <bb 36>;

  <bb 29>:
  _179 = MEM[(const long int *)_229];
  _180 = (sizetype) _179;
  _181 = -_180;
  _182 = _137 + _181;
  _183 = MEM[(const short unsigned int *)_182];
  _184 = (int) _183;
  if (_184 > 14)
    goto <bb 30>;
  else
    goto <bb 32>;

  <bb 30>:
  _185 = MEM[(const short unsigned int *)_182 + 14B];
  _297 = (sizetype) _185;
  p_298 = _137 + _297;
  if (_185 != 0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  _189 = MEM[(const long unsigned int *)p_298];
  iftmp.17_190 = p_298 + _189;
  if (iftmp.17_190 != 0B)
    goto <bb 47>;
  else
    goto <bb 32>;

  <bb 32>:
  _63 = this_13(D)->op_resolver_;
  _64 = _63->D.180758._vptr.OpResolver;
  _65 = MEM[(int (*__vtbl_ptr_type) () *)_64 + 32B];
  _67 = OBJ_TYPE_REF(_65;(const struct MicroOpResolver)_63->8) (_63, op_type_55);
  if (_67 == 0B)
    goto <bb 47>;
  else
    goto <bb 33>;

  <bb 33>:
  _68 = this_13(D)->error_reporter_;
  _70 = _67 (_229, _68, _26, &builtin_data);
  if (_70 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  # _299 = PHI <_70(33)>
  goto <bb 48>;

  <bb 35>:
  pretmp_187 = MEM[(const long int *)_229];
  _104 = (sizetype) pretmp_187;
  _165 = -_104;
  _262 = _137 + _165;
  pretmp_175 = MEM[(const short unsigned int *)_262];
  _260 = (int) pretmp_175;

  <bb 36>:
  # custom_data_3 = PHI <_171(28), 0B(35), 0B(27), 0B(26), 0B(25)>
  # custom_data_size_4 = PHI <_163(28), 0(35), 0(27), 0(26), 0(25)>
  # prephitmp_178 = PHI <_153(28), _262(35), _153(27), _153(26), _153(25)>
  # prephitmp_174 = PHI <_155(28), _260(35), _155(27), _155(26), _155(25)>
  _71 = this_13(D)->allocator_;
  if (prephitmp_174 > 6)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _198 = MEM[(const short unsigned int *)prephitmp_178 + 6B];
  _200 = (sizetype) _198;
  p_201 = _137 + _200;
  if (_198 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  _202 = MEM[(const long unsigned int *)p_201];
  iftmp.18_203 = p_201 + _202;

  <bb 39>:
  # iftmp.18_204 = PHI <0B(37), iftmp.18_203(38), 0B(36)>
  _74 = tflite::MicroAllocator::FlatBufferVectorToTfLiteTypeArray (_71, iftmp.18_204, &inputs_array);
  if (_74 != 0)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 40>:
  # _296 = PHI <_74(39)>
  goto <bb 48>;

  <bb 41>:
  _75 = this_13(D)->allocator_;
  _205 = MEM[(const long int *)_229];
  _206 = (sizetype) _205;
  _207 = -_206;
  _208 = _137 + _207;
  _209 = MEM[(const short unsigned int *)_208];
  _210 = (int) _209;
  if (_210 > 8)
    goto <bb 42>;
  else
    goto <bb 44>;

  <bb 42>:
  _211 = MEM[(const short unsigned int *)_208 + 8B];
  _213 = (sizetype) _211;
  p_214 = _137 + _213;
  if (_211 != 0)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  _215 = MEM[(const long unsigned int *)p_214];
  iftmp.18_216 = p_214 + _215;

  <bb 44>:
  # iftmp.18_217 = PHI <0B(42), iftmp.18_216(43), 0B(41)>
  _78 = tflite::MicroAllocator::FlatBufferVectorToTfLiteTypeArray (_75, iftmp.18_217, &outputs_array);
  if (_78 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  # _295 = PHI <_78(44)>
  goto <bb 48>;

  <bb 46>:
  _103 = MEM[(struct SubgraphAllocations * *)this_13(D) + 120B];
  _80 = _103 + _41;
  _81 = _80->node_and_registrations;
  _82 = _81 + _44;
  MEM[(struct TfLiteNode *)_82] = {};
  inputs_array.8_84 = inputs_array;
  MEM[(struct TfLiteNode *)_82].inputs = inputs_array.8_84;
  outputs_array.9_86 = outputs_array;
  MEM[(struct TfLiteNode *)_82].outputs = outputs_array.9_86;
  builtin_data.10_88 = builtin_data;
  MEM[(struct TfLiteNode *)_82].builtin_data = builtin_data.10_88;
  MEM[(struct TfLiteNode *)_82].custom_initial_data = custom_data_3;
  custom_data_size.11_91 = (int) custom_data_size_4;
  MEM[(struct TfLiteNode *)_82].custom_initial_data_size = custom_data_size.11_91;
  builtin_data ={v} {CLOBBER};
  inputs_array ={v} {CLOBBER};
  outputs_array ={v} {CLOBBER};
  i_96 = i_2 + 1;
  goto <bb 14>;

  <bb 47>:

  <bb 48>:
  # _5 = PHI <1(47), _300(22), _295(45), _296(40), _299(34)>
  builtin_data ={v} {CLOBBER};
  inputs_array ={v} {CLOBBER};
  outputs_array ={v} {CLOBBER};
  goto <bb 50>;

  <bb 49>:
  subgraph_idx_29 = subgraph_idx_1 + 1;
  goto <bb 3>;

  <bb 50>:
  # _6 = PHI <_5(48), 0(3)>
  return _6;

  <bb 51>:
  _199 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 52>:
  _162 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

}



;; Function TfLiteStatus tflite::MicroInterpreter::AllocateTensors() (_ZN6tflite16MicroInterpreter15AllocateTensorsEv, funcdef_no=6652, decl_uid=180954, cgraph_uid=3840, symbol_order=3875)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_EBK/src/tensorflow_lite/third_party/flatbuffers/include/flatbuffers/flatbuffers.h:2437:18: note: bad loop form.
../src/tensorflow_lite/tensorflow/lite/micro/micro_interpreter.cc:181:14: note: vectorized 0 loops in function.
TfLiteStatus tflite::MicroInterpreter::AllocateTensors() (struct MicroInterpreter * const this)
{
  unsigned char * p;
  unsigned char * p;
  const struct Vector & D.238406;
  unsigned char * p;
  unsigned char * p;
  size_t D.238402;
  unsigned char * p;
  unsigned char * p;
  size_t D.238398;
  unsigned char * p;
  unsigned char * p;
  const struct Vector & D.238394;
  unsigned char * p;
  unsigned char * p;
  size_t D.238390;
  unsigned char * p;
  unsigned char * p;
  size_t D.238386;
  static const char __PRETTY_FUNCTION__[206] = "flatbuffers::Vector<T>::return_type flatbuffers::Vector<T>::Get(flatbuffers::uoffset_t) const [with T = long int; flatbuffers::Vector<T>::return_type = long int; flatbuffers::uoffset_t = long unsigned int]";
  static const char __PRETTY_FUNCTION__[206] = "flatbuffers::Vector<T>::return_type flatbuffers::Vector<T>::Get(flatbuffers::uoffset_t) const [with T = long int; flatbuffers::Vector<T>::return_type = long int; flatbuffers::uoffset_t = long unsigned int]";
  size_t i;
  size_t i;
  TfLiteStatus _3;
  struct MicroAllocator & _9;
  const struct Model * _10;
  struct SubgraphAllocations * _12;
  struct MicroGraph * _14;
  const TfLiteStatus _17;
  struct MicroAllocator & _29;
  const struct Model * _30;
  const uint8_t * _31;
  struct ScratchBufferHandle * * _32;
  const TfLiteStatus _34;
  struct MicroAllocator & _35;
  int (*__vtbl_ptr_type) () * _37;
  int (*__vtbl_ptr_type) () _38;
  struct TfLiteTensor * * prephitmp_39;
  unsigned int _41;
  void * _43;
  unsigned int _48;
  struct TfLiteTensor * * _49;
  struct MicroAllocator & _50;
  int (*__vtbl_ptr_type) () * _51;
  int (*__vtbl_ptr_type) () _52;
  long unsigned int _53;
  struct TfLiteTensor * _58;
  struct TfLiteTensor * * _60;
  struct TfLiteTensor * * _61;
  struct TfLiteTensor * _62;
  struct MicroAllocator & _64;
  int (*__vtbl_ptr_type) () * _65;
  int (*__vtbl_ptr_type) () _66;
  unsigned int _69;
  void * _71;
  unsigned int _76;
  struct TfLiteTensor * * _77;
  struct MicroAllocator & _78;
  int (*__vtbl_ptr_type) () * _79;
  int (*__vtbl_ptr_type) () _80;
  struct TfLiteTensor * _85;
  struct TfLiteTensor * * _87;
  struct TfLiteTensor * * _88;
  struct TfLiteTensor * _89;
  struct SubgraphAllocations * _92;
  struct SubgraphAllocations * _93;
  struct SubgraphAllocations * _94;
  const struct Model * _95;
  const struct Model * _96;
  const struct Model * _98;
  const long int * _99;
  long int _100;
  const uint8_t * _102;
  const long int * _103;
  long int _104;
  TfLiteStatus _105;
  const uint8_t[1] * _110;
  long int _111;
  sizetype _112;
  sizetype _113;
  const uint8_t * _114;
  short unsigned int _115;
  int _116;
  short unsigned int _117;
  sizetype _119;
  long unsigned int _121;
  const struct Vector * iftmp.12_122;
  long unsigned int _124;
  const uint8_t * _125;
  long unsigned int _126;
  const struct SubGraph * _127;
  const uint8_t[1] * _128;
  long int _129;
  sizetype _130;
  sizetype _131;
  const uint8_t * _132;
  short unsigned int _133;
  int _134;
  short unsigned int _135;
  long unsigned int _136;
  sizetype _137;
  long unsigned int _139;
  const struct Vector * iftmp.18_140;
  long unsigned int _142;
  const uint8_t[1] * _144;
  long int _145;
  sizetype _146;
  sizetype _147;
  const uint8_t * _148;
  short unsigned int _149;
  int _150;
  short unsigned int _151;
  sizetype _153;
  long unsigned int _155;
  const struct Vector * iftmp.12_156;
  long unsigned int _158;
  const uint8_t * _159;
  long unsigned int _160;
  const struct SubGraph * _161;
  const uint8_t[1] * _162;
  long int _163;
  sizetype _164;
  sizetype _165;
  const uint8_t * _166;
  short unsigned int _167;
  int _168;
  short unsigned int _169;
  sizetype _171;
  long unsigned int _173;
  const struct Vector * iftmp.18_174;
  long unsigned int _176;
  long unsigned int _180;
  short unsigned int _236;
  long unsigned int _237;
  sizetype _238;
  long unsigned int _240;
  const struct Vector * iftmp.18_241;
  long unsigned int _243;
  const uint8_t[1] * _245;
  long int _246;
  sizetype _247;
  sizetype _248;
  const uint8_t * _249;
  short unsigned int _250;
  int _251;
  short unsigned int _252;
  sizetype _254;
  long unsigned int _256;
  const struct Vector * iftmp.12_257;
  long unsigned int _259;
  const uint8_t * _260;
  long unsigned int _261;
  const struct SubGraph * _262;
  const uint8_t[1] * _263;
  long int _264;
  sizetype _265;
  sizetype _266;
  const uint8_t * _267;
  short unsigned int _268;
  int _269;
  short unsigned int _270;
  sizetype _272;
  long unsigned int _274;
  const struct Vector * iftmp.18_275;
  long unsigned int _277;
  long unsigned int _311;
  struct TfLiteTensor * * prephitmp_331;
  int _347;
  long unsigned int _357;
  const uint8_t[1] * _360;
  const uint8_t * _363;
  long unsigned int _365;

  <bb 2>:
  _9 = this_8(D)->allocator_;
  _10 = this_8(D)->model_;
  _12 = tflite::MicroAllocator::StartModelAllocation (_9, _10);
  if (_12 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  this_8(D)->initialization_status_ = 1;
  goto <bb 38>;

  <bb 4>:
  _14 = &this_8(D)->graph_;
  tflite::MicroGraph::SetSubgraphAllocations (_14, _12);
  _17 = tflite::MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer (this_8(D));
  if (_17 != 0)
    goto <bb 38>;
  else
    goto <bb 5>;

  <bb 5>:
  this_8(D)->context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
  this_8(D)->context_.RequestScratchBufferInArena = 0B;
  this_8(D)->context_.GetScratchBuffer = 0B;
  this_8(D)->context_.GetExecutionPlan = GetGraph;
  tflite::MicroGraph::InitSubgraphs (_14);
  this_8(D)->context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
  tflite::MicroGraph::PrepareSubgraphs (_14);
  this_8(D)->context_.AllocatePersistentBuffer = 0B;
  this_8(D)->context_.RequestScratchBufferInArena = 0B;
  this_8(D)->context_.GetScratchBuffer = GetScratchBuffer;
  _29 = this_8(D)->allocator_;
  _30 = this_8(D)->model_;
  _92 = MEM[(struct SubgraphAllocations * *)this_8(D) + 120B];
  _32 = &this_8(D)->scratch_buffer_handles_;
  _34 = tflite::MicroAllocator::FinishModelAllocation (_29, _30, _92, _32);
  if (_34 != 0)
    goto <bb 38>;
  else
    goto <bb 6>;

  <bb 6>:
  _35 = this_8(D)->allocator_;
  _37 = _35->_vptr.MicroAllocator;
  _38 = MEM[(int (*__vtbl_ptr_type) () *)_37 + 12B];
  _95 = MEM[(const struct Model * *)this_8(D)];
  _110 = &MEM[(const struct Table *)_95].data_;
  _111 = MEM[(const long int *)_95];
  _112 = (sizetype) _111;
  _113 = -_112;
  _114 = _110 + _113;
  _115 = MEM[(const short unsigned int *)_114];
  _116 = (int) _115;
  if (_116 > 8)
    goto <bb 7>;
  else
    goto <bb 39>;

  <bb 7>:
  _117 = MEM[(const short unsigned int *)_114 + 8B];
  _119 = (sizetype) _117;
  p_120 = _110 + _119;
  if (_117 != 0)
    goto <bb 8>;
  else
    goto <bb 39>;

  <bb 8>:
  _121 = MEM[(const long unsigned int *)p_120];
  iftmp.12_122 = p_120 + _121;
  _124 = iftmp.12_122->length_;
  if (_124 != 0)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  tflite::MicroInterpreter::_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.2.part.3 ();

  <bb 10>:
  _125 = &MEM[(void *)iftmp.12_122 + 4B];
  _126 = MEM[(const long unsigned int *)iftmp.12_122 + 4B];
  _127 = _125 + _126;
  _128 = &MEM[(const struct Table *)_127].data_;
  _129 = MEM[(const long int *)_127];
  _130 = (sizetype) _129;
  _131 = -_130;
  _132 = _128 + _131;
  _133 = MEM[(const short unsigned int *)_132];
  _134 = (int) _133;
  if (_134 > 6)
    goto <bb 11>;
  else
    goto <bb 40>;

  <bb 11>:
  _135 = MEM[(const short unsigned int *)_132 + 6B];
  _137 = (sizetype) _135;
  p_138 = _128 + _137;
  if (_135 != 0)
    goto <bb 12>;
  else
    goto <bb 40>;

  <bb 12>:
  _139 = MEM[(const long unsigned int *)p_138];
  iftmp.18_140 = p_138 + _139;
  _142 = iftmp.18_140->length_;
  _41 = _142 * 4;
  _43 = OBJ_TYPE_REF(_38;(struct MicroAllocator)_35->3) (_35, _41);
  this_8(D)->input_tensors_ = _43;
  if (_43 == 0B)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  goto <bb 15>;

  <bb 14>:
  goto <bb 38>;

  <bb 15>:
  # i_1 = PHI <0(13), i_63(22)>
  # prephitmp_331 = PHI <_43(13), _60(22)>
  _96 = MEM[(const struct Model * *)this_8(D)];
  _144 = &MEM[(const struct Table *)_96].data_;
  _145 = MEM[(const long int *)_96];
  _146 = (sizetype) _145;
  _147 = -_146;
  _148 = _144 + _147;
  _149 = MEM[(const short unsigned int *)_148];
  _150 = (int) _149;
  if (_150 > 8)
    goto <bb 16>;
  else
    goto <bb 41>;

  <bb 16>:
  _151 = MEM[(const short unsigned int *)_148 + 8B];
  _153 = (sizetype) _151;
  p_154 = _144 + _153;
  if (_151 != 0)
    goto <bb 17>;
  else
    goto <bb 41>;

  <bb 17>:
  _155 = MEM[(const long unsigned int *)p_154];
  iftmp.12_156 = p_154 + _155;
  _158 = iftmp.12_156->length_;
  if (_158 != 0)
    goto <bb 18>;
  else
    goto <bb 9>;

  <bb 18>:
  _159 = &MEM[(void *)iftmp.12_156 + 4B];
  _160 = MEM[(const long unsigned int *)iftmp.12_156 + 4B];
  _161 = _159 + _160;
  _162 = &MEM[(const struct Table *)_161].data_;
  _163 = MEM[(const long int *)_161];
  _164 = (sizetype) _163;
  _165 = -_164;
  _166 = _162 + _165;
  _167 = MEM[(const short unsigned int *)_166];
  _168 = (int) _167;
  if (_168 > 6)
    goto <bb 19>;
  else
    goto <bb 42>;

  <bb 19>:
  _169 = MEM[(const short unsigned int *)_166 + 6B];
  _171 = (sizetype) _169;
  p_172 = _162 + _171;
  if (_169 != 0)
    goto <bb 20>;
  else
    goto <bb 42>;

  <bb 20>:
  _173 = MEM[(const long unsigned int *)p_172];
  iftmp.18_174 = p_172 + _173;
  _176 = iftmp.18_174->length_;
  if (i_1 < _176)
    goto <bb 21>;
  else
    goto <bb 23>;

  <bb 21>:
  _48 = i_1 * 4;
  _49 = prephitmp_331 + _48;
  _50 = this_8(D)->allocator_;
  _51 = _50->_vptr.MicroAllocator;
  _52 = *_51;
  _93 = MEM[(struct SubgraphAllocations * *)this_8(D) + 120B];
  _31 = &MEM[(void *)iftmp.18_174 + 4B];
  _99 = _31 + _48;
  _100 = *_99;
  _58 = OBJ_TYPE_REF(_52;(struct MicroAllocator)_50->0) (_50, _96, _93, _100, 0);
  *_49 = _58;
  _60 = this_8(D)->input_tensors_;
  _61 = _60 + _48;
  _62 = *_61;
  if (_62 == 0B)
    goto <bb 14>;
  else
    goto <bb 22>;

  <bb 22>:
  i_63 = i_1 + 1;
  goto <bb 15>;

  <bb 23>:
  # _360 = PHI <_162(20)>
  # _363 = PHI <_166(20)>
  # _347 = PHI <_168(20)>
  _64 = this_8(D)->allocator_;
  _65 = _64->_vptr.MicroAllocator;
  _66 = MEM[(int (*__vtbl_ptr_type) () *)_65 + 12B];
  if (_347 > 8)
    goto <bb 25>;
  else
    goto <bb 43>;

  <bb 24>:
  tflite::MicroInterpreter::_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.5.part.6 ();

  <bb 25>:
  _236 = MEM[(const short unsigned int *)_363 + 8B];
  _238 = (sizetype) _236;
  p_239 = _360 + _238;
  if (_236 != 0)
    goto <bb 26>;
  else
    goto <bb 43>;

  <bb 26>:
  _240 = MEM[(const long unsigned int *)p_239];
  iftmp.18_241 = p_239 + _240;
  _243 = iftmp.18_241->length_;
  _69 = _243 * 4;
  _71 = OBJ_TYPE_REF(_66;(struct MicroAllocator)_64->3) (_64, _69);
  this_8(D)->output_tensors_ = _71;
  if (_71 == 0B)
    goto <bb 14>;
  else
    goto <bb 27>;

  <bb 27>:

  <bb 28>:
  # i_2 = PHI <0(27), i_90(35)>
  # prephitmp_39 = PHI <_71(27), _87(35)>
  _98 = MEM[(const struct Model * *)this_8(D)];
  _245 = &MEM[(const struct Table *)_98].data_;
  _246 = MEM[(const long int *)_98];
  _247 = (sizetype) _246;
  _248 = -_247;
  _249 = _245 + _248;
  _250 = MEM[(const short unsigned int *)_249];
  _251 = (int) _250;
  if (_251 > 8)
    goto <bb 29>;
  else
    goto <bb 44>;

  <bb 29>:
  _252 = MEM[(const short unsigned int *)_249 + 8B];
  _254 = (sizetype) _252;
  p_255 = _245 + _254;
  if (_252 != 0)
    goto <bb 30>;
  else
    goto <bb 44>;

  <bb 30>:
  _256 = MEM[(const long unsigned int *)p_255];
  iftmp.12_257 = p_255 + _256;
  _259 = iftmp.12_257->length_;
  if (_259 != 0)
    goto <bb 31>;
  else
    goto <bb 24>;

  <bb 31>:
  _260 = &MEM[(void *)iftmp.12_257 + 4B];
  _261 = MEM[(const long unsigned int *)iftmp.12_257 + 4B];
  _262 = _260 + _261;
  _263 = &MEM[(const struct Table *)_262].data_;
  _264 = MEM[(const long int *)_262];
  _265 = (sizetype) _264;
  _266 = -_265;
  _267 = _263 + _266;
  _268 = MEM[(const short unsigned int *)_267];
  _269 = (int) _268;
  if (_269 > 8)
    goto <bb 32>;
  else
    goto <bb 45>;

  <bb 32>:
  _270 = MEM[(const short unsigned int *)_267 + 8B];
  _272 = (sizetype) _270;
  p_273 = _263 + _272;
  if (_270 != 0)
    goto <bb 33>;
  else
    goto <bb 45>;

  <bb 33>:
  _274 = MEM[(const long unsigned int *)p_273];
  iftmp.18_275 = p_273 + _274;
  _277 = iftmp.18_275->length_;
  if (i_2 < _277)
    goto <bb 34>;
  else
    goto <bb 36>;

  <bb 34>:
  _76 = i_2 * 4;
  _77 = prephitmp_39 + _76;
  _78 = this_8(D)->allocator_;
  _79 = _78->_vptr.MicroAllocator;
  _80 = *_79;
  _94 = MEM[(struct SubgraphAllocations * *)this_8(D) + 120B];
  _102 = &MEM[(void *)iftmp.18_275 + 4B];
  _103 = _102 + _76;
  _104 = *_103;
  _85 = OBJ_TYPE_REF(_80;(struct MicroAllocator)_78->0) (_78, _98, _94, _104, 0);
  *_77 = _85;
  _87 = this_8(D)->output_tensors_;
  _88 = _87 + _76;
  _89 = *_88;
  if (_89 == 0B)
    goto <bb 14>;
  else
    goto <bb 35>;

  <bb 35>:
  i_90 = i_2 + 1;
  goto <bb 28>;

  <bb 36>:
  _105 = tflite::MicroGraph::ResetVariableTensors (_14);
  if (_105 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;

  <bb 37>:
  this_8(D)->tensors_allocated_ = 1;

  <bb 38>:
  # _3 = PHI <1(3), _17(4), _34(5), 1(14), _105(37), _105(36)>
  return _3;

  <bb 39>:
  _180 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 40>:
  _237 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 41>:
  _136 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 42>:
  _365 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 43>:
  _311 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 44>:
  _53 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

  <bb 45>:
  _357 ={v} MEM[(const struct Vector *)0B].length_;
  __builtin_trap ();

}


