
;; Function adc_hld_open (adc_hld_open, funcdef_no=4, decl_uid=8274, cgraph_uid=4, symbol_order=7)


Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: === vect_analyze_loop_form ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: not vectorized: control flow in loop.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: bad loop form.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:140:14: note: vectorized 0 loops in function.
adc_hld_open (struct st_def_stream_t * p_stream)
{
  uint_t channels_enabled;
  e_r_drv_adc_channel_t channel;
  bool_t enabled;
  uint8_t conversion_width;
  int_t _1;
  unsigned int _4;
  <unnamed type> _6;
  <unnamed type> _8;
  <unnamed type> _11;
  struct _cbuff_t * _13;
  unsigned int enabled.1_17;
  unsigned int ivtmp_18;
  unsigned char conversion_width.3_21;
  unsigned int _22;
  unsigned int _23;
  unsigned int ivtmp_33;

  <bb 2>:
  _4 = s_adc_drv_config.driver_open;
  if (_4 != 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  goto <bb 15>;

  <bb 4>:
  _6 = R_ADC_HWInitialise ();
  if (_6 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 5>:
  _8 = R_ADC_LoadInitialConfiguration (&s_adc_drv_config.p_userCallback);
  if (_8 != 0)
    goto <bb 6>;
  else
    goto <bb 12>;

  <bb 6>:
  R_ADC_GetConversionWidth (&conversion_width);

  <bb 7>:
  # channel_35 = PHI <channel_20(10), 0(6)>
  # channels_enabled_36 = PHI <channels_enabled_24(10), 0(6)>
  # ivtmp_18 = PHI <ivtmp_33(10), 8(6)>
  R_ADC_IsChannelEnabled (channel_35, &enabled);
  enabled.1_17 = enabled;
  if (enabled.1_17 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  channels_enabled_19 = channels_enabled_36 + 1;

  <bb 9>:
  # channels_enabled_24 = PHI <channels_enabled_36(7), channels_enabled_19(8)>
  channel_20 = channel_35 + 1;
  ivtmp_33 = ivtmp_18 - 1;
  if (ivtmp_33 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  goto <bb 7>;

  <bb 11>:
  # channels_enabled_9 = PHI <channels_enabled_24(9)>
  conversion_width.3_21 = conversion_width;
  _22 = (unsigned int) conversion_width.3_21;
  _23 = _22 * channels_enabled_9;
  s_adc_drv_config.conversion_data_size = _23;
  enabled ={v} {CLOBBER};
  conversion_width ={v} {CLOBBER};
  goto <bb 15>;

  <bb 12>:
  _11 = R_ADC_ConfigureInterrupts (adc_hld_interrupt_handler);
  if (_11 != 0)
    goto <bb 3>;
  else
    goto <bb 13>;

  <bb 13>:
  _13 = cbCreate (8192);
  s_adc_drv_config.p_conversion_cbuff = _13;
  if (_13 == 0B)
    goto <bb 3>;
  else
    goto <bb 14>;

  <bb 14>:
  s_adc_drv_config.driver_open = 1;

  <bb 15>:
  # _1 = PHI <-1(3), 0(14), -1(11)>
  return _1;

}



;; Function adc_hld_interrupt_handler (adc_hld_interrupt_handler, funcdef_no=10, decl_uid=8289, cgraph_uid=10, symbol_order=13)


Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:473
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:473:5: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:473:5: note: === vect_analyze_loop_form ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:473:5: note: not vectorized: control flow in loop.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:473:5: note: bad loop form.

Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483:13: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483:13: note: === vect_analyze_loop_form ===
split exit edge.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483:13: note: === get_loop_niters ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483:13: note: not vectorized: number of iterations cannot be computed.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:483:13: note: bad loop form.

Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467:9: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467:9: note: === vect_analyze_loop_form ===
split exit edge.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467:9: note: === get_loop_niters ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467:9: note: not vectorized: number of iterations cannot be computed.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:467:9: note: bad loop form.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:440:13: note: vectorized 0 loops in function.
adc_hld_interrupt_handler (uint32_t sense)
{
  int32_t cb_packet;
  uint8_t byte;
  uint_t i;
  uint8_t conversion_width;
  bool_t enabled;
  uint32_t conversion;
  e_r_drv_adc_channel_t channel;
  long unsigned int pretmp_5;
  struct _cbuff_t * _12;
  unsigned int _16;
  long unsigned int cb_packet.5_17;
  unsigned int ivtmp_18;
  unsigned int _19;
  struct _cbuff_t * _20;
  unsigned int enabled.6_24;
  unsigned char conversion_width.9_26;
  unsigned int _27;
  struct _cbuff_t * _28;
  unsigned char _30;
  long unsigned int conversion.7_32;
  long unsigned int conversion.8_33;
  void (*<T192f>) (e_r_drv_adc_callback_reason_t) _37;
  unsigned int ivtmp_38;
  unsigned char conversion_width.9_48;
  long unsigned int prephitmp_55;

  <bb 2>:
  _12 = s_adc_drv_config.p_conversion_cbuff;
  cb_packet_14 = cbFree (_12);
  if (cb_packet_14 < 0)
    goto <bb 18>;
  else
    goto <bb 3>;

  <bb 3>:
  R_ADC_GetConversionWidth (&conversion_width);
  _16 = s_adc_drv_config.conversion_data_size;
  cb_packet.5_17 = (long unsigned int) cb_packet_14;
  if (_16 > cb_packet.5_17)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 10>;

  <bb 5>:
  if (_16 != 0)
    goto <bb 6>;
  else
    goto <bb 4>;

  <bb 6>:

  <bb 7>:
  # i_50 = PHI <0(6), i_22(8)>
  _20 = s_adc_drv_config.p_conversion_cbuff;
  cbGet (_20, &byte);
  i_22 = i_50 + 1;
  _19 = s_adc_drv_config.conversion_data_size;
  if (_19 > i_22)
    goto <bb 8>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 4>;

  <bb 8>:
  goto <bb 7>;

  <bb 9>:

  <bb 10>:
  # channel_56 = PHI <0(4), channel_36(9)>
  # ivtmp_38 = PHI <8(4), ivtmp_18(9)>
  R_ADC_IsChannelEnabled (channel_56, &enabled);
  enabled.6_24 = enabled;
  if (enabled.6_24 != 0)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  channel_36 = channel_56 + 1;
  ivtmp_18 = ivtmp_38 - 1;
  if (ivtmp_18 != 0)
    goto <bb 9>;
  else
    goto <bb 16>;

  <bb 12>:
  R_ADC_ReadConversion (channel_56, &conversion);
  conversion_width.9_48 = conversion_width;
  if (conversion_width.9_48 != 0)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 13>:
  pretmp_5 = conversion;

  <bb 14>:
  # i_52 = PHI <0(13), i_35(15)>
  # prephitmp_55 = PHI <pretmp_5(13), conversion.8_33(15)>
  _28 = s_adc_drv_config.p_conversion_cbuff;
  _30 = (unsigned char) prephitmp_55;
  cbPut (_28, _30);
  conversion.7_32 = conversion;
  conversion.8_33 = conversion.7_32 >> 8;
  conversion = conversion.8_33;
  i_35 = i_52 + 1;
  conversion_width.9_26 = conversion_width;
  _27 = (unsigned int) conversion_width.9_26;
  if (_27 > i_35)
    goto <bb 15>;
  else
    goto <bb 19>;

  <bb 19>:
  goto <bb 11>;

  <bb 15>:
  goto <bb 14>;

  <bb 16>:
  _37 = s_adc_drv_config.p_userCallback;
  if (_37 != 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  _37 (0);

  <bb 18>:
  conversion ={v} {CLOBBER};
  enabled ={v} {CLOBBER};
  conversion_width ={v} {CLOBBER};
  byte ={v} {CLOBBER};
  return;

}



;; Function adc_hld_read (adc_hld_read, funcdef_no=6, decl_uid=8280, cgraph_uid=6, symbol_order=9)


Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:246
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:246:5: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:246:5: note: === vect_analyze_loop_form ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:246:5: note: not vectorized: control flow in loop.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:246:5: note: bad loop form.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:228:14: note: vectorized 0 loops in function.
adc_hld_read (struct st_def_stream_t * p_stream, uint8_t * p_buffer, uint32_t count)
{
  int_t bytes_read;
  uint32_t i;
  int_t D.8534;
  int_t _1;
  unsigned int _4;
  long unsigned int _6;
  struct _cbuff_t * _12;
  sizetype bytes_read.4_14;
  uint8_t * _15;
  int _16;

  <bb 2>:
  _4 = s_adc_drv_config.conversion_data_size;
  _6 = count_5(D) % _4;
  if (_6 != 0)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  __disable_irq ();
  if (count_5(D) != 0)
    goto <bb 4>;
  else
    goto <bb 10>;

  <bb 4>:

  <bb 5>:
  # bytes_read_10 = PHI <0(4), bytes_read_22(8)>
  # i_28 = PHI <0(4), i_19(8)>
  _12 = s_adc_drv_config.p_conversion_cbuff;
  bytes_read.4_14 = (sizetype) bytes_read_10;
  _15 = p_buffer_9(D) + bytes_read.4_14;
  _16 = cbGet (_12, _15);
  if (_16 != 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  bytes_read_17 = bytes_read_10 + 1;

  <bb 7>:
  # i_18 = PHI <count_5(D)(5), i_28(6)>
  # bytes_read_22 = PHI <bytes_read_10(5), bytes_read_17(6)>
  i_19 = i_18 + 1;
  if (count_5(D) > i_19)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:
  # bytes_read_23 = PHI <bytes_read_22(7)>

  <bb 10>:
  # bytes_read_27 = PHI <bytes_read_23(9), 0(3)>
  __enable_irq ();

  <bb 11>:
  # _1 = PHI <-1(2), bytes_read_27(10)>
  return _1;

}



;; Function adc_hld_control (adc_hld_control, funcdef_no=7, decl_uid=8284, cgraph_uid=7, symbol_order=10)


Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:295
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:295:23: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:295:23: note: === vect_analyze_loop_form ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:295:23: note: not vectorized: latch block not empty.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:295:23: note: bad loop form.

Analyzing loop at ../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: ===== analyze_loop_nest =====
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: === vect_analyze_loop_form ===
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: not vectorized: control flow in loop.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:417:5: note: bad loop form.
../generate/sc_drivers/r_adc/src/hld/r_adc_drv_api.c:275:14: note: vectorized 0 loops in function.
adc_hld_control (struct st_def_stream_t * p_stream, uint32_t ctl_code, void * p_ctl_struct)
{
  uint_t channels_enabled;
  e_r_drv_adc_channel_t channel;
  bool_t enabled;
  uint8_t conversion_width;
  int_t ret_value;
  e_r_drv_adc_err_t adc_err;
  int_t D.8546;
  int_t ret_value;
  e_r_drv_adc_err_t adc_err;
  long unsigned int _5;
  void (*<T192f>) (e_r_drv_adc_callback_reason_t) _11;
  unsigned int _13;
  struct st_r_drv_adc_unit_config_t * _16;
  void (*<T192f>) (e_r_drv_adc_callback_reason_t) _19;
  struct st_r_drv_adc_unit_config_t * _22;
  void (*<T192f>) (e_r_drv_adc_callback_reason_t) _26;
  struct _cbuff_t * _27;
  _Bool _29;
  unsigned int enabled.1_30;
  int _31;
  unsigned char conversion_width.3_34;
  unsigned int _35;
  unsigned int _36;
  int _40;
  unsigned int ivtmp_56;
  unsigned int ivtmp_59;

  <bb 2>:
  _5 = ctl_code_6(D) & 255;
  switch (_5) <default: <L23>, case 0: <L0>, case 1: <L6>, case 2: <L14>>

<L0>:
  R_ADC_SoftwareTrigger ();
  _11 = s_adc_drv_config.p_userCallback;
  if (_11 == 0B)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 20> (<L23>);

  <bb 5>:
  goto <bb 7>;

  <bb 6>:
  __asm__ __volatile__("nop");

  <bb 7>:
  _13 = R_ADC_IsConversionComplete ();
  if (_13 == 0)
    goto <bb 6>;
  else
    goto <bb 4>;

<L6>:
  if (p_ctl_struct_15(D) != 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 20> (<L23>);

  <bb 10>:
  _22 = &MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].config;
  adc_err_23 = R_ADC_SetConfiguration (_22);
  MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].err = adc_err_23;
  if (adc_err_23 == 0)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 11>:
  adc_err_24 = R_ADC_ConfigureAnalogueInputs ();
  if (adc_err_24 == 0)
    goto <bb 12>;
  else
    goto <bb 9>;

  <bb 12>:
  _26 = MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].config.p_adcCallback;
  s_adc_drv_config.p_userCallback = _26;
  __disable_irq ();
  _27 = s_adc_drv_config.p_conversion_cbuff;
  cbClear (_27);
  __enable_irq ();
  R_ADC_GetConversionWidth (&conversion_width);

  <bb 13>:
  # channel_60 = PHI <channel_33(16), 0(12)>
  # channels_enabled_61 = PHI <channels_enabled_37(16), 0(12)>
  # ivtmp_59 = PHI <ivtmp_56(16), 8(12)>
  R_ADC_IsChannelEnabled (channel_60, &enabled);
  enabled.1_30 = enabled;
  if (enabled.1_30 != 0)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  channels_enabled_32 = channels_enabled_61 + 1;

  <bb 15>:
  # channels_enabled_37 = PHI <channels_enabled_61(13), channels_enabled_32(14)>
  channel_33 = channel_60 + 1;
  ivtmp_56 = ivtmp_59 - 1;
  if (ivtmp_56 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  goto <bb 13>;

  <bb 17>:
  # channels_enabled_58 = PHI <channels_enabled_37(15)>
  conversion_width.3_34 = conversion_width;
  _35 = (unsigned int) conversion_width.3_34;
  _36 = _35 * channels_enabled_58;
  s_adc_drv_config.conversion_data_size = _36;
  enabled ={v} {CLOBBER};
  conversion_width ={v} {CLOBBER};
  goto <bb 20> (<L23>);

<L14>:
  if (p_ctl_struct_15(D) != 0B)
    goto <bb 19>;
  else
    goto <bb 9>;

  <bb 19>:
  _16 = &MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].config;
  adc_err_18 = R_ADC_GetConfiguration (_16);
  _19 = s_adc_drv_config.p_userCallback;
  MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].config.p_adcCallback = _19;
  MEM[(struct st_r_drv_adc_config_t *)p_ctl_struct_15(D)].err = adc_err_18;
  _29 = adc_err_18 != 0;
  _40 = (int) _29;
  _31 = -_40;

  # ret_value_1 = PHI <0(4), 0(17), _31(19), -1(2), -1(9)>
<L23>:
  return ret_value_1;

}


