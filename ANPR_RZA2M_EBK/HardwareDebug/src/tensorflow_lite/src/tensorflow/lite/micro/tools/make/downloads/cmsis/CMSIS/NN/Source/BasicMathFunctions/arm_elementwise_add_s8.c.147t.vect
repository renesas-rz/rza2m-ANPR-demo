
;; Function arm_elementwise_add_s8 (arm_elementwise_add_s8, funcdef_no=122, decl_uid=7171, cgraph_uid=122, symbol_order=122)


Analyzing loop at ../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [loop_count_113 + 4294967295, + , 4294967295] != 0
  bounds on difference of bases: -2 ... 0
Applying pattern match.pd:83, generic-match.c:10121
Applying pattern match.pd:2373, generic-match.c:1602
  result:
    # of iterations loop_count_113 + 4294967295, bounded by 2
Applying pattern match.pd:1047, generic-match.c:4821
Applying pattern match.pd:83, generic-match.c:9008
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Symbolic number of iterations is loop_count_113
Creating dr for *input_1_vect_416
analyze_innermost: success.
	base_address: input_1_vect_415
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 64
	base_object: *input_1_vect_415
	Access function 0: {0B, +, 1}_2
Creating dr for *input_2_vect_419
analyze_innermost: success.
	base_address: input_2_vect_418
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 64
	base_object: *input_2_vect_418
	Access function 0: {0B, +, 1}_2
Creating dr for mult.word.low
analyze_innermost: success.
	base_address: &mult
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 64
	base_object: mult.word
	Access function 0: 0
Creating dr for mult.word.high
analyze_innermost: success.
	base_address: &mult
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 64
	base_object: mult.word
	Access function 0: 32
Creating dr for mult.long_long
analyze_innermost: success.
	base_address: &mult
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 64
	base_object: mult.long_long
Creating dr for mult
analyze_innermost: success.
	base_address: &mult
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 64
	base_object: mult
Creating dr for *output_428
analyze_innermost: success.
	base_address: output_427
	offset from base address: 0
	constant offset from base address: 0
	step: 1
	aligned to: 64
	base_object: *output_427
	Access function 0: {0B, +, 1}_2
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === vect_analyze_data_refs ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: _115 = *input_1_vect_416;
const vector(16) signed char
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: _120 = *input_2_vect_419;
const vector(16) signed char
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: mult.word.low = 1073741824;
vector(4) long unsigned int
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: mult.word.high = 0;
vector(4) long int
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: _307 = mult.long_long;
vector(2) long long int
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: got vectype for stmt: *output_428 = _135;
vector(16) signed char
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === vect_analyze_scalar_cycles ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Analyze phi: input_1_vect_416 = PHI <input_1_vect_415(57), input_1_vect_114(60)>

../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Access function of PHI: {input_1_vect_415, +, 1}_2
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: step: 1,  init: input_1_vect_415
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Detected induction.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Analyze phi: input_2_vect_419 = PHI <input_2_vect_418(57), input_2_vect_119(60)>

../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Access function of PHI: {input_2_vect_418, +, 1}_2
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: step: 1,  init: input_2_vect_418
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Detected induction.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Analyze phi: loop_count_421 = PHI <loop_count_113(57), loop_count_137(60)>

../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Access function of PHI: {loop_count_113, +, 4294967295}_2
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: step: 4294967295,  init: loop_count_113
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Detected induction.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Analyze phi: .MEM_424 = PHI <.MEM_423(57), .MEM_136(60)>

../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Analyze phi: output_428 = PHI <output_427(57), output.22_134(60)>

../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Access function of PHI: {output_427, +, 1}_2
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: step: 1,  init: output_427
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: Detected induction.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === vect_pattern_recog ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_mask_conversion_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: mask_conversion pattern recognized: patt_599 = patt_600 ? -1073741823 : 1073741824;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _354
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _354 = input_1_mult_31(D) == input_1_118;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _355
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _355 = input_1_118 == -2147483648;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _347
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _347 = (long long int) input_1_118;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand input_1_118
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: input_1_118 = _117 << left_shift_29(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _594
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _594 = (long long int) input_1_mult_31(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: external
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand input_1_mult_31(D)
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_widen_mult_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: patt_598 = input_1_118 w* input_1_mult_31(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: widen_mult pattern recognized: patt_598 = input_1_118 w* input_1_mult_31(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_divmod_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: patt_578 = patt_579 >> 31;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: divmod pattern recognized: patt_578 = patt_579 >> 31;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _356
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _356 = _354 & _355;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _354
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _354 = input_1_mult_31(D) == input_1_118;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _355
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _355 = input_1_118 == -2147483648;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_bool_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: bool pattern recognized: patt_558 = patt_559 != 0 ? 2147483647 : _604;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: additional pattern stmt: patt_560 = input_1_mult_31(D) == input_1_118 ? 1 : 0;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: additional pattern stmt: patt_559 = input_1_118 == -2147483648 ? patt_560 : 0;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_mask_conversion_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: mask_conversion pattern recognized: patt_555 = patt_556 ? -1073741823 : 1073741824;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _332
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _332 = input_2_mult_38(D) == input_2_123;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _333
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _333 = input_2_123 == -2147483648;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _325
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _325 = (long long int) input_2_123;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand input_2_123
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: input_2_123 = _122 << left_shift_29(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _590
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _590 = (long long int) input_2_mult_38(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: external
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand input_2_mult_38(D)
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_widen_mult_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: patt_554 = input_2_123 w* input_2_mult_38(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: widen_mult pattern recognized: patt_554 = input_2_123 w* input_2_mult_38(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_divmod_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: patt_551 = patt_552 >> 31;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: divmod pattern recognized: patt_551 = patt_552 >> 31;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _334
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _334 = _332 & _333;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _332
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _332 = input_2_mult_38(D) == input_2_123;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _333
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _333 = input_2_123 == -2147483648;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_bool_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: bool pattern recognized: patt_548 = patt_549 != 0 ? 2147483647 : _608;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: additional pattern stmt: patt_550 = input_2_mult_38(D) == input_2_123 ? 1 : 0;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: additional pattern stmt: patt_549 = input_2_123 == -2147483648 ? patt_550 : 0;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _308
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _308 = (long long int) sum_128;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand sum_128
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: sum_128 = result_322 + result_344;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _586
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _586 = (long long int) out_mult_44(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: external
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand out_mult_44(D)
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_recog_widen_mult_pattern: detected:
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: patt_547 = sum_128 w* out_mult_44(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: widen_mult pattern recognized: patt_547 = sum_128 w* out_mult_44(D);
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: vect_is_simple_use: operand _311
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: def_stmt: _311 = _307 + _310;
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: type of def: internal
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: === vect_analyze_data_ref_accesses ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: not vectorized: complicated access pattern.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:222:11: note: bad data access.

Analyzing loop at ../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:142
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:142:11: note: ===== analyze_loop_nest =====
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:142:11: note: === vect_analyze_loop_form ===
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:142:11: note: not vectorized: control flow in loop.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:142:11: note: bad loop form.
../src/tensorflow_lite/src/tensorflow/lite/micro/tools/make/downloads/cmsis/CMSIS/NN/Source/BasicMathFunctions/arm_elementwise_add_s8.c:70:12: note: vectorized 0 loops in function.
arm_elementwise_add_s8 (const int8_t * input_1_vect, const int8_t * input_2_vect, const int32_t input_1_offset, const int32_t input_1_mult, const int32_t input_1_shift, const int32_t input_2_offset, const int32_t input_2_mult, const int32_t input_2_shift, const int32_t left_shift, int8_t * output, const int32_t out_offset, const int32_t out_mult, const int32_t out_shift, const int32_t out_activation_min, const int32_t out_activation_max, const uint32_t block_size)
{
  q31_t result;
  q63_t mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  q63_t mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  uint32_t result;
  uint32_t result;
  q31_t val;
  uint32_t result;
  uint32_t result;
  q31_t val;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  uint32_t result;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  const q31_t remainder_mask;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  q31_t result;
  union arm_nn_long_long mult;
  q31_t result;
  int32_t remainder;
  q31_t threshold;
  int8_t r4;
  int8_t r3;
  int8_t r2;
  int8_t r1;
  int32_t offset_2_packed;
  int32_t offset_1_packed;
  int32_t sum;
  int32_t input_2;
  int32_t input_1;
  uint32_t loop_count;
  long int _2;
  long int _10;
  long int _11;
  long int _14;
  long int _15;
  long int a_1.3_23;
  long int b_1.6_24;
  long int a_2.10_26;
  long int b_2.13_27;
  long int _28;
  long long int _35;
  long int _36;
  long long int _39;
  long long int _42;
  long long int _47;
  unsigned int _55;
  long int _56;
  long long int _58;
  unsigned int _60;
  long int _61;
  long int _71;
  long int _75;
  q7_t * _78;
  unsigned int _83;
  long int _84;
  signed char _86;
  unsigned int _87;
  unsigned int _88;
  long int _89;
  unsigned int val.25_91;
  signed char _93;
  long int _94;
  long int _99;
  long int _100;
  long int _101;
  long int _102;
  long int _103;
  long int _105;
  long int _106;
  long int _107;
  long int _108;
  long int _109;
  long int _110;
  long int _111;
  signed char _115;
  long int _116;
  long int _117;
  signed char _120;
  long int _121;
  long int _122;
  signed char _125;
  long int _126;
  signed char _129;
  int8_t * output.22_134;
  signed char _135;
  long long int _144;
  long long int _145;
  long long int _146;
  long long int _147;
  long long int _148;
  long long int _156;
  long long int _157;
  long long int _158;
  long long int _159;
  long long int _160;
  long long int _168;
  long long int _169;
  long long int _170;
  long long int _171;
  long long int _172;
  long long int _180;
  long long int _181;
  long long int _182;
  long long int _183;
  long long int _184;
  long long int _192;
  long long int _193;
  long long int _194;
  long long int _195;
  long long int _196;
  long long int _204;
  long long int _205;
  long long int _206;
  long long int _207;
  long long int _208;
  long long int _216;
  long long int _217;
  long long int _218;
  long long int _219;
  long long int _220;
  long long int _228;
  long long int _229;
  long long int _230;
  long long int _231;
  long long int _232;
  long long int _243;
  long long int _244;
  long long int _246;
  long long int _247;
  long long int _248;
  long long int _259;
  long long int _260;
  long long int _262;
  long long int _263;
  long long int _264;
  long long int _275;
  long long int _276;
  long long int _278;
  long long int _279;
  long long int _280;
  const q7_t * _286;
  long int _287;
  long unsigned int inA.23_288;
  long unsigned int _289;
  const q7_t * _292;
  long int _293;
  long unsigned int inA.23_294;
  long unsigned int _295;
  long long int _307;
  long long int _308;
  long long int _310;
  long long int _311;
  long long int _312;
  _Bool _323;
  long long int _325;
  long long int _327;
  long long int _330;
  _Bool _332;
  _Bool _333;
  _Bool _334;
  _Bool _345;
  long long int _347;
  long long int _349;
  long long int _352;
  _Bool _354;
  _Bool _355;
  _Bool _356;
  sizetype _409;
  q7_t * _425;
  long unsigned int _561;
  long unsigned int _562;
  long int _563;
  long int _564;
  long int _565;
  int _566;
  long int _567;
  long int _568;
  long long int _569;
  int _570;
  long int _571;
  long int _572;
  long long int _573;
  int _574;
  long int _575;
  long int _576;
  long long int _577;
  long int _580;
  long int _581;
  long int _582;
  int _583;
  long int _584;
  long int _585;
  long long int _586;
  int _587;
  long int _588;
  long int _589;
  long long int _590;
  int _591;
  long int _592;
  long int _593;
  long long int _594;
  _Bool _595;
  _Bool _596;
  sizetype _602;
  sizetype _603;
  long int _604;
  long int prephitmp_605;
  const q7_t * _606;
  const q7_t * _607;
  long int _608;
  long int prephitmp_609;

  <bb 2>:
  _10 = input_1_offset_9(D) << 16;
  _11 = input_1_offset_9(D) & 65535;
  offset_1_packed_12 = _10 | _11;
  # DEBUG offset_1_packed => offset_1_packed_12
  _14 = input_2_offset_13(D) << 16;
  _15 = input_2_offset_13(D) & 65535;
  offset_2_packed_16 = _14 | _15;
  # DEBUG offset_2_packed => offset_2_packed_16
  loop_count_18 = block_size_17(D) >> 2;
  # DEBUG loop_count => loop_count_18
  # DEBUG output => output_407(D)
  # DEBUG loop_count => loop_count_18
  # DEBUG input_2_vect => input_2_vect_20(D)
  # DEBUG input_1_vect => input_1_vect_19(D)
  if (loop_count_18 != 0)
    goto <bb 3>;
  else
    goto <bb 55>;

  <bb 3>:
  _561 = (long unsigned int) offset_1_packed_12;
  _562 = (long unsigned int) offset_2_packed_16;
  _563 = -input_1_shift_33(D);
  _564 = -input_2_shift_40(D);
  _565 = -out_shift_45(D);
  _566 = 1 << _565;
  _567 = _566 + -1;
  _568 = _567 >> 1;
  _569 = (long long int) out_mult_44(D);
  _570 = 1 << _564;
  _571 = _570 + -1;
  _572 = _571 >> 1;
  _573 = (long long int) input_2_mult_38(D);
  _574 = 1 << _563;
  _575 = _574 + -1;
  _576 = _575 >> 1;
  _577 = (long long int) input_1_mult_31(D);

  <bb 4>:
  # input_1_vect_445 = PHI <input_1_vect_19(D)(3), _292(54)>
  # input_2_vect_417 = PHI <input_2_vect_20(D)(3), _286(54)>
  # loop_count_420 = PHI <loop_count_18(3), loop_count_112(54)>
  # output_426 = PHI <output_407(D)(3), _78(54)>
  # DEBUG output => output_426
  # DEBUG loop_count => loop_count_420
  # DEBUG input_2_vect => input_2_vect_417
  # DEBUG input_1_vect => input_1_vect_445
  # DEBUG source => input_1_vect_445
  # DEBUG out1 => &b_1
  # DEBUG out2 => &a_1
  # DEBUG in_q7 => &source
  memcpy (&val, input_1_vect_445, 4);
  _292 = input_1_vect_445 + 4;
  # DEBUG source => _292
  _293 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q7 => NULL
  # DEBUG val => NULL
  # DEBUG inA => NULL
  inA.23_294 = (long unsigned int) _293;
  # DEBUG op1 => inA.23_294
  # DEBUG op2 => 8
  # DEBUG op2 => 8
  _295 = inA.23_294 r>> 8;
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op1 => NULL
  __asm__("sxtb16 %0, %1" : "=r" result_296 : "r" _295);
  # DEBUG result => result_296
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a_1 => (long int) result_296
  # DEBUG op1 => inA.23_294
  __asm__("sxtb16 %0, %1" : "=r" result_297 : "r" inA.23_294);
  # DEBUG result => result_297
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG b_1 => (long int) result_297
  # DEBUG source => NULL
  # DEBUG out1 => NULL
  # DEBUG out2 => NULL
  # DEBUG val => NULL
  # DEBUG result => NULL
  # DEBUG result => NULL
  # DEBUG input_1_vect => NULL
  # DEBUG source => input_2_vect_417
  # DEBUG out1 => &b_2
  # DEBUG out2 => &a_2
  # DEBUG in_q7 => &source
  memcpy (&val, input_2_vect_417, 4);
  _286 = input_2_vect_417 + 4;
  # DEBUG source => _286
  _287 = val;
  val ={v} {CLOBBER};
  # DEBUG in_q7 => NULL
  # DEBUG val => NULL
  # DEBUG inA => NULL
  inA.23_288 = (long unsigned int) _287;
  # DEBUG op1 => inA.23_288
  # DEBUG op2 => 8
  # DEBUG op2 => 8
  _289 = inA.23_288 r>> 8;
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG op1 => NULL
  __asm__("sxtb16 %0, %1" : "=r" result_290 : "r" _289);
  # DEBUG result => result_290
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG a_2 => (long int) result_290
  # DEBUG op1 => inA.23_288
  __asm__("sxtb16 %0, %1" : "=r" result_291 : "r" inA.23_288);
  # DEBUG result => result_291
  # DEBUG op1 => NULL
  # DEBUG result => NULL
  # DEBUG b_2 => (long int) result_291
  # DEBUG source => NULL
  # DEBUG out1 => NULL
  # DEBUG out2 => NULL
  # DEBUG val => NULL
  # DEBUG result => NULL
  # DEBUG result => NULL
  # DEBUG input_2_vect => NULL
  # DEBUG D#27 => (long unsigned int) offset_1_packed_12
  # DEBUG op1 => result_296
  # DEBUG op2 => D#27
  __asm__ __volatile__("sadd16 %0, %1, %2" : "=r" result_285 : "r" result_296, "r" _561);
  # DEBUG result => result_285
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG result => NULL
  a_1.3_23 = (long int) result_285;
  # DEBUG a_1 => a_1.3_23
  # DEBUG op1 => result_297
  # DEBUG op2 => D#27
  __asm__ __volatile__("sadd16 %0, %1, %2" : "=r" result_284 : "r" result_297, "r" _561);
  # DEBUG result => result_284
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG result => NULL
  b_1.6_24 = (long int) result_284;
  # DEBUG b_1 => b_1.6_24
  # DEBUG D#26 => (long unsigned int) offset_2_packed_16
  # DEBUG op1 => result_290
  # DEBUG op2 => D#26
  __asm__ __volatile__("sadd16 %0, %1, %2" : "=r" result_283 : "r" result_290, "r" _562);
  # DEBUG result => result_283
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG result => NULL
  a_2.10_26 = (long int) result_283;
  # DEBUG a_2 => a_2.10_26
  # DEBUG op1 => result_291
  # DEBUG op2 => D#26
  __asm__ __volatile__("sadd16 %0, %1, %2" : "=r" result_282 : "r" result_291, "r" _562);
  # DEBUG result => result_282
  # DEBUG op1 => NULL
  # DEBUG op2 => NULL
  # DEBUG result => NULL
  b_2.13_27 = (long int) result_282;
  # DEBUG b_2 => b_2.13_27
  _28 = b_1.6_24 & 65535;
  input_1_30 = _28 << left_shift_29(D);
  # DEBUG input_1 => input_1_30
  # DEBUG m1 => input_1_30
  # DEBUG m2 => input_1_mult_31(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _275 = mult.long_long;
  _276 = (long long int) input_1_30;
  _278 = _276 * _577;
  _279 = _275 + _278;
  _280 = _279 >> 31;
  result_281 = (q31_t) _280;
  # DEBUG result => result_281
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG D#25 => -input_1_shift_33(D)
  # DEBUG dividend => NULL
  # DEBUG exponent => D#25
  # DEBUG result => 0
  # DEBUG D#24 => 1 << D#25
  # DEBUG D#23 => D#24 + -1
  # DEBUG remainder_mask => D#23
  remainder_268 = result_281 & _575;
  # DEBUG remainder => remainder_268
  result_269 = result_281 >> _563;
  # DEBUG result => result_269
  # DEBUG D#22 => D#23 >> 1
  # DEBUG threshold => D#22
  if (result_269 < 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  threshold_271 = _576 + 1;
  # DEBUG threshold => threshold_271

  <bb 6>:
  # threshold_272 = PHI <_576(4), threshold_271(5)>
  # DEBUG threshold => threshold_272
  if (remainder_268 > threshold_272)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  result_273 = result_269 + 1;
  # DEBUG result => result_273

  <bb 8>:
  # result_274 = PHI <result_269(6), result_273(7)>
  # DEBUG result => result_274
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  _36 = b_2.13_27 & 65535;
  input_2_37 = _36 << left_shift_29(D);
  # DEBUG input_2 => input_2_37
  # DEBUG m1 => input_2_37
  # DEBUG m2 => input_2_mult_38(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _259 = mult.long_long;
  _260 = (long long int) input_2_37;
  _262 = _260 * _573;
  _263 = _259 + _262;
  _264 = _263 >> 31;
  result_265 = (q31_t) _264;
  # DEBUG result => result_265
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  # DEBUG D#21 => -input_2_shift_40(D)
  # DEBUG dividend => NULL
  # DEBUG exponent => D#21
  # DEBUG result => 0
  # DEBUG D#20 => 1 << D#21
  # DEBUG D#19 => D#20 + -1
  # DEBUG remainder_mask => D#19
  remainder_252 = result_265 & _571;
  # DEBUG remainder => remainder_252
  result_253 = result_265 >> _564;
  # DEBUG result => result_253
  # DEBUG D#18 => D#19 >> 1
  # DEBUG threshold => D#18
  if (result_253 < 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  threshold_255 = _572 + 1;
  # DEBUG threshold => threshold_255

  <bb 10>:
  # threshold_256 = PHI <_572(8), threshold_255(9)>
  # DEBUG threshold => threshold_256
  if (remainder_252 > threshold_256)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  result_257 = result_253 + 1;
  # DEBUG result => result_257

  <bb 12>:
  # result_258 = PHI <result_253(10), result_257(11)>
  # DEBUG result => result_258
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  sum_43 = result_258 + result_274;
  # DEBUG sum => sum_43
  # DEBUG m1 => sum_43
  # DEBUG m2 => out_mult_44(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _243 = mult.long_long;
  _244 = (long long int) sum_43;
  _246 = _244 * _569;
  _247 = _243 + _246;
  _248 = _247 >> 31;
  result_249 = (q31_t) _248;
  # DEBUG result => result_249
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  # DEBUG D#17 => -out_shift_45(D)
  # DEBUG dividend => NULL
  # DEBUG exponent => D#17
  # DEBUG result => 0
  # DEBUG D#16 => 1 << D#17
  # DEBUG D#15 => D#16 + -1
  # DEBUG remainder_mask => D#15
  remainder_236 = result_249 & _567;
  # DEBUG remainder => remainder_236
  result_237 = result_249 >> _565;
  # DEBUG result => result_237
  # DEBUG D#14 => D#15 >> 1
  # DEBUG threshold => D#14
  if (result_237 < 0)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  threshold_239 = _568 + 1;
  # DEBUG threshold => threshold_239

  <bb 14>:
  # threshold_240 = PHI <_568(12), threshold_239(13)>
  # DEBUG threshold => threshold_240
  if (remainder_236 > threshold_240)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  result_241 = result_237 + 1;
  # DEBUG result => result_241

  <bb 16>:
  # result_242 = PHI <result_237(14), result_241(15)>
  # DEBUG result => result_242
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  sum_49 = out_offset_48(D) + result_242;
  # DEBUG sum => sum_49
  sum_51 = MAX_EXPR <sum_49, out_activation_min_50(D)>;
  # DEBUG sum => sum_51
  sum_53 = MIN_EXPR <sum_51, out_activation_max_52(D)>;
  # DEBUG sum => sum_53
  r1_54 = (int8_t) sum_53;
  # DEBUG r1 => r1_54
  _55 = result_284 >> 16;
  _56 = (long int) _55;
  input_1_57 = _56 << left_shift_29(D);
  # DEBUG input_1 => input_1_57
  # DEBUG m1 => input_1_57
  # DEBUG m2 => input_1_mult_31(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _228 = mult.long_long;
  _229 = (long long int) input_1_57;
  _230 = _229 * _577;
  _231 = _228 + _230;
  _232 = _231 >> 31;
  result_233 = (q31_t) _232;
  # DEBUG result => result_233
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#25
  # DEBUG result => 0
  # DEBUG remainder_mask => D#23
  remainder_222 = result_233 & _575;
  # DEBUG remainder => remainder_222
  result_223 = result_233 >> _563;
  # DEBUG result => result_223
  # DEBUG threshold => D#22
  if (result_223 < 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  threshold_224 = _576 + 1;
  # DEBUG threshold => threshold_224

  <bb 18>:
  # threshold_225 = PHI <_576(16), threshold_224(17)>
  # DEBUG threshold => threshold_225
  if (remainder_222 > threshold_225)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  result_226 = result_223 + 1;
  # DEBUG result => result_226

  <bb 20>:
  # result_227 = PHI <result_223(18), result_226(19)>
  # DEBUG result => result_227
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  _60 = result_282 >> 16;
  _61 = (long int) _60;
  input_2_62 = _61 << left_shift_29(D);
  # DEBUG input_2 => input_2_62
  # DEBUG m1 => input_2_62
  # DEBUG m2 => input_2_mult_38(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _216 = mult.long_long;
  _217 = (long long int) input_2_62;
  _218 = _217 * _573;
  _219 = _216 + _218;
  _220 = _219 >> 31;
  result_221 = (q31_t) _220;
  # DEBUG result => result_221
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#21
  # DEBUG result => 0
  # DEBUG remainder_mask => D#19
  remainder_210 = result_221 & _571;
  # DEBUG remainder => remainder_210
  result_211 = result_221 >> _564;
  # DEBUG result => result_211
  # DEBUG threshold => D#18
  if (result_211 < 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  threshold_212 = _572 + 1;
  # DEBUG threshold => threshold_212

  <bb 22>:
  # threshold_213 = PHI <_572(20), threshold_212(21)>
  # DEBUG threshold => threshold_213
  if (remainder_210 > threshold_213)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  result_214 = result_211 + 1;
  # DEBUG result => result_214

  <bb 24>:
  # result_215 = PHI <result_211(22), result_214(23)>
  # DEBUG result => result_215
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  sum_65 = result_215 + result_227;
  # DEBUG sum => sum_65
  # DEBUG m1 => sum_65
  # DEBUG m2 => out_mult_44(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _204 = mult.long_long;
  _205 = (long long int) sum_65;
  _206 = _205 * _569;
  _207 = _204 + _206;
  _208 = _207 >> 31;
  result_209 = (q31_t) _208;
  # DEBUG result => result_209
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#17
  # DEBUG result => 0
  # DEBUG remainder_mask => D#15
  remainder_198 = result_209 & _567;
  # DEBUG remainder => remainder_198
  result_199 = result_209 >> _565;
  # DEBUG result => result_199
  # DEBUG threshold => D#14
  if (result_199 < 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  threshold_200 = _568 + 1;
  # DEBUG threshold => threshold_200

  <bb 26>:
  # threshold_201 = PHI <_568(24), threshold_200(25)>
  # DEBUG threshold => threshold_201
  if (remainder_198 > threshold_201)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  result_202 = result_199 + 1;
  # DEBUG result => result_202

  <bb 28>:
  # result_203 = PHI <result_199(26), result_202(27)>
  # DEBUG result => result_203
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  sum_67 = out_offset_48(D) + result_203;
  # DEBUG sum => sum_67
  sum_68 = MAX_EXPR <out_activation_min_50(D), sum_67>;
  # DEBUG sum => sum_68
  sum_69 = MIN_EXPR <out_activation_max_52(D), sum_68>;
  # DEBUG sum => sum_69
  r3_70 = (int8_t) sum_69;
  # DEBUG r3 => r3_70
  _71 = a_1.3_23 & 65535;
  input_1_72 = _71 << left_shift_29(D);
  # DEBUG input_1 => input_1_72
  # DEBUG m1 => input_1_72
  # DEBUG m2 => input_1_mult_31(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _192 = mult.long_long;
  _193 = (long long int) input_1_72;
  _194 = _193 * _577;
  _195 = _192 + _194;
  _196 = _195 >> 31;
  result_197 = (q31_t) _196;
  # DEBUG result => result_197
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#25
  # DEBUG result => 0
  # DEBUG remainder_mask => D#23
  remainder_186 = result_197 & _575;
  # DEBUG remainder => remainder_186
  result_187 = result_197 >> _563;
  # DEBUG result => result_187
  # DEBUG threshold => D#22
  if (result_187 < 0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  threshold_188 = _576 + 1;
  # DEBUG threshold => threshold_188

  <bb 30>:
  # threshold_189 = PHI <_576(28), threshold_188(29)>
  # DEBUG threshold => threshold_189
  if (remainder_186 > threshold_189)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  result_190 = result_187 + 1;
  # DEBUG result => result_190

  <bb 32>:
  # result_191 = PHI <result_187(30), result_190(31)>
  # DEBUG result => result_191
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  _75 = a_2.10_26 & 65535;
  input_2_76 = _75 << left_shift_29(D);
  # DEBUG input_2 => input_2_76
  # DEBUG m1 => input_2_76
  # DEBUG m2 => input_2_mult_38(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _180 = mult.long_long;
  _181 = (long long int) input_2_76;
  _182 = _181 * _573;
  _183 = _180 + _182;
  _184 = _183 >> 31;
  result_185 = (q31_t) _184;
  # DEBUG result => result_185
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#21
  # DEBUG result => 0
  # DEBUG remainder_mask => D#19
  remainder_174 = result_185 & _571;
  # DEBUG remainder => remainder_174
  result_175 = result_185 >> _564;
  # DEBUG result => result_175
  # DEBUG threshold => D#18
  if (result_175 < 0)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  threshold_176 = _572 + 1;
  # DEBUG threshold => threshold_176

  <bb 34>:
  # threshold_177 = PHI <_572(32), threshold_176(33)>
  # DEBUG threshold => threshold_177
  if (remainder_174 > threshold_177)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  result_178 = result_175 + 1;
  # DEBUG result => result_178

  <bb 36>:
  # result_179 = PHI <result_175(34), result_178(35)>
  # DEBUG result => result_179
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  sum_77 = result_179 + result_191;
  # DEBUG sum => sum_77
  # DEBUG m1 => sum_77
  # DEBUG m2 => out_mult_44(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _168 = mult.long_long;
  _169 = (long long int) sum_77;
  _170 = _169 * _569;
  _171 = _168 + _170;
  _172 = _171 >> 31;
  result_173 = (q31_t) _172;
  # DEBUG result => result_173
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#17
  # DEBUG result => 0
  # DEBUG remainder_mask => D#15
  remainder_162 = result_173 & _567;
  # DEBUG remainder => remainder_162
  result_163 = result_173 >> _565;
  # DEBUG result => result_163
  # DEBUG threshold => D#14
  if (result_163 < 0)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  threshold_164 = _568 + 1;
  # DEBUG threshold => threshold_164

  <bb 38>:
  # threshold_165 = PHI <_568(36), threshold_164(37)>
  # DEBUG threshold => threshold_165
  if (remainder_162 > threshold_165)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  result_166 = result_163 + 1;
  # DEBUG result => result_166

  <bb 40>:
  # result_167 = PHI <result_163(38), result_166(39)>
  # DEBUG result => result_167
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  sum_79 = out_offset_48(D) + result_167;
  # DEBUG sum => sum_79
  sum_80 = MAX_EXPR <out_activation_min_50(D), sum_79>;
  # DEBUG sum => sum_80
  sum_81 = MIN_EXPR <out_activation_max_52(D), sum_80>;
  # DEBUG sum => sum_81
  r2_82 = (int8_t) sum_81;
  # DEBUG r2 => r2_82
  _83 = result_285 >> 16;
  _84 = (long int) _83;
  input_1_85 = _84 << left_shift_29(D);
  # DEBUG input_1 => input_1_85
  # DEBUG m1 => input_1_85
  # DEBUG m2 => input_1_mult_31(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _156 = mult.long_long;
  _157 = (long long int) input_1_85;
  _158 = _157 * _577;
  _159 = _156 + _158;
  _160 = _159 >> 31;
  result_161 = (q31_t) _160;
  # DEBUG result => result_161
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#25
  # DEBUG result => 0
  # DEBUG remainder_mask => D#23
  remainder_150 = result_161 & _575;
  # DEBUG remainder => remainder_150
  result_151 = result_161 >> _563;
  # DEBUG result => result_151
  # DEBUG threshold => D#22
  if (result_151 < 0)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  threshold_152 = _576 + 1;
  # DEBUG threshold => threshold_152

  <bb 42>:
  # threshold_153 = PHI <_576(40), threshold_152(41)>
  # DEBUG threshold => threshold_153
  if (remainder_150 > threshold_153)
    goto <bb 43>;
  else
    goto <bb 44>;

  <bb 43>:
  result_154 = result_151 + 1;
  # DEBUG result => result_154

  <bb 44>:
  # result_155 = PHI <result_151(42), result_154(43)>
  # DEBUG result => result_155
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  _88 = result_283 >> 16;
  _89 = (long int) _88;
  input_2_90 = _89 << left_shift_29(D);
  # DEBUG input_2 => input_2_90
  # DEBUG m1 => input_2_90
  # DEBUG m2 => input_2_mult_38(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _144 = mult.long_long;
  _145 = (long long int) input_2_90;
  _146 = _145 * _573;
  _147 = _144 + _146;
  _148 = _147 >> 31;
  result_149 = (q31_t) _148;
  # DEBUG result => result_149
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#21
  # DEBUG result => 0
  # DEBUG remainder_mask => D#19
  remainder_138 = result_149 & _571;
  # DEBUG remainder => remainder_138
  result_139 = result_149 >> _564;
  # DEBUG result => result_139
  # DEBUG threshold => D#18
  if (result_139 < 0)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 45>:
  threshold_140 = _572 + 1;
  # DEBUG threshold => threshold_140

  <bb 46>:
  # threshold_141 = PHI <_572(44), threshold_140(45)>
  # DEBUG threshold => threshold_141
  if (remainder_138 > threshold_141)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  result_142 = result_139 + 1;
  # DEBUG result => result_142

  <bb 48>:
  # result_143 = PHI <result_139(46), result_142(47)>
  # DEBUG result => result_143
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  sum_92 = result_143 + result_155;
  # DEBUG sum => sum_92
  # DEBUG m1 => sum_92
  # DEBUG m2 => out_mult_44(D)
  # DEBUG result => 0
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _58 = mult.long_long;
  _47 = (long long int) sum_92;
  _42 = _47 * _569;
  _39 = _42 + _58;
  _35 = _39 >> 31;
  result_32 = (q31_t) _35;
  # DEBUG result => result_32
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => D#17
  # DEBUG result => 0
  # DEBUG remainder_mask => D#15
  remainder_74 = result_32 & _567;
  # DEBUG remainder => remainder_74
  result_73 = result_32 >> _565;
  # DEBUG result => result_73
  # DEBUG threshold => D#14
  if (result_73 < 0)
    goto <bb 49>;
  else
    goto <bb 50>;

  <bb 49>:
  threshold_66 = _568 + 1;
  # DEBUG threshold => threshold_66

  <bb 50>:
  # threshold_64 = PHI <_568(48), threshold_66(49)>
  # DEBUG threshold => threshold_64
  if (threshold_64 < remainder_74)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  result_63 = result_73 + 1;
  # DEBUG result => result_63

  <bb 52>:
  # result_59 = PHI <result_73(50), result_63(51)>
  # DEBUG result => result_59
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  sum_95 = out_offset_48(D) + result_59;
  # DEBUG sum => sum_95
  sum_96 = MAX_EXPR <out_activation_min_50(D), sum_95>;
  # DEBUG sum => sum_96
  sum_97 = MIN_EXPR <out_activation_max_52(D), sum_96>;
  # DEBUG sum => sum_97
  r4_98 = (int8_t) sum_97;
  # DEBUG r4 => r4_98
  _99 = (long int) r1_54;
  _100 = _99 & 255;
  _101 = (long int) r2_82;
  _102 = _101 << 8;
  _103 = _102 & 65535;
  _105 = (long int) r3_70;
  _106 = _105 << 16;
  _107 = _106 & 16711680;
  _2 = _100 | _107;
  _108 = _2 | _103;
  _109 = (long int) r4_98;
  _110 = _109 << 24;
  _111 = _108 | _110;
  # DEBUG pQ7 => &output
  # DEBUG value => _111
  # DEBUG val => _111
  _129 = (signed char) _111;
  MEM[(q7_t *)output_426] = _129;
  _126 = _111 >> 8;
  _125 = (signed char) _126;
  MEM[(q7_t *)output_426 + 1B] = _125;
  _94 = _111 >> 16;
  _93 = (signed char) _94;
  MEM[(q7_t *)output_426 + 2B] = _93;
  val.25_91 = (unsigned int) _111;
  _87 = val.25_91 >> 24;
  _86 = (signed char) _87;
  MEM[(q7_t *)output_426 + 3B] = _86;
  _78 = output_426 + 4;
  # DEBUG output => _78
  # DEBUG pQ7 => NULL
  # DEBUG value => NULL
  loop_count_112 = loop_count_420 + 4294967295;
  # DEBUG loop_count => loop_count_112
  # DEBUG output => _78
  # DEBUG loop_count => loop_count_112
  # DEBUG input_2_vect => _286
  # DEBUG input_1_vect => _292
  if (loop_count_112 != 0)
    goto <bb 54>;
  else
    goto <bb 53>;

  <bb 53>:
  _409 = loop_count_18 * 4;
  _425 = output_407(D) + _409;
  _603 = loop_count_18 * 4;
  _607 = input_2_vect_20(D) + _603;
  _602 = loop_count_18 * 4;
  _606 = input_1_vect_19(D) + _602;
  goto <bb 55>;

  <bb 54>:
  goto <bb 4>;

  <bb 55>:
  # input_1_vect_415 = PHI <_606(53), input_1_vect_19(D)(2)>
  # input_2_vect_418 = PHI <_607(53), input_2_vect_20(D)(2)>
  # output_427 = PHI <_425(53), output_407(D)(2)>
  loop_count_113 = block_size_17(D) & 3;
  # DEBUG loop_count => loop_count_113
  # DEBUG output => output_427
  # DEBUG loop_count => loop_count_113
  # DEBUG input_2_vect => input_2_vect_418
  # DEBUG input_1_vect => input_1_vect_415
  if (loop_count_113 != 0)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  # DEBUG D#1 => {CLOBBER}
  # DEBUG a_1 => D#1
  # DEBUG D#2 => {CLOBBER}
  # DEBUG b_1 => D#2
  # DEBUG D#3 => {CLOBBER}
  # DEBUG a_2 => D#3
  # DEBUG D#4 => {CLOBBER}
  # DEBUG b_2 => D#4
  return 0;

  <bb 57>:
  _580 = -input_1_shift_33(D);
  _581 = -input_2_shift_40(D);
  _582 = -out_shift_45(D);
  _583 = 1 << _582;
  _584 = _583 + -1;
  _585 = _584 >> 1;
  _586 = (long long int) out_mult_44(D);
  _587 = 1 << _581;
  _588 = _587 + -1;
  _589 = _588 >> 1;
  _590 = (long long int) input_2_mult_38(D);
  _591 = 1 << _580;
  _592 = _591 + -1;
  _593 = _592 >> 1;
  _594 = (long long int) input_1_mult_31(D);
  _595 = input_2_mult_38(D) < 0;
  _596 = input_1_mult_31(D) < 0;

  <bb 58>:
  # input_1_vect_416 = PHI <input_1_vect_415(57), input_1_vect_114(60)>
  # input_2_vect_419 = PHI <input_2_vect_418(57), input_2_vect_119(60)>
  # loop_count_421 = PHI <loop_count_113(57), loop_count_137(60)>
  # output_428 = PHI <output_427(57), output.22_134(60)>
  # DEBUG output => NULL
  # DEBUG loop_count => NULL
  # DEBUG input_2_vect => NULL
  # DEBUG input_1_vect => NULL
  input_1_vect_114 = input_1_vect_416 + 1;
  # DEBUG input_1_vect => NULL
  _115 = *input_1_vect_416;
  _116 = (long int) _115;
  _117 = input_1_offset_9(D) + _116;
  input_1_118 = _117 << left_shift_29(D);
  # DEBUG input_1 => NULL
  input_2_vect_119 = input_2_vect_419 + 1;
  # DEBUG input_2_vect => NULL
  _120 = *input_2_vect_419;
  _121 = (long int) _120;
  _122 = input_2_offset_13(D) + _121;
  input_2_123 = _122 << left_shift_29(D);
  # DEBUG input_2 => NULL
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG mult => NULL
  _345 = input_1_118 < 0;
  mult_350 = _345 != _596 ? -1073741823 : 1073741824;
  # DEBUG mult => NULL
  # DEBUG D#35 => NULL
  # DEBUG D#34 => NULL
  # DEBUG D#33 => NULL
  # DEBUG mult => NULL
  # DEBUG D#32 => NULL
  # DEBUG result => NULL
  _354 = input_1_mult_31(D) == input_1_118;
  _355 = input_1_118 == -2147483648;
  _356 = _354 & _355;
  _347 = (long long int) input_1_118;
  _349 = _347 * _594;
  mult_351 = _349 + mult_350;
  _352 = mult_351 / 2147483648;
  _604 = (long int) _352;
  prephitmp_605 = _356 ? 2147483647 : _604;
  # DEBUG result => NULL
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG mult => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG D#13 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG result => NULL
  # DEBUG D#12 => NULL
  # DEBUG D#11 => NULL
  # DEBUG remainder_mask => NULL
  remainder_338 = _592 & prephitmp_605;
  # DEBUG remainder => NULL
  result_339 = prephitmp_605 >> _580;
  # DEBUG result => NULL
  # DEBUG threshold => NULL
  threshold_341 = _593 + 1;
  # DEBUG threshold => NULL
  threshold_342 = result_339 < 0 ? threshold_341 : _593;
  # DEBUG threshold => NULL
  result_343 = result_339 + 1;
  # DEBUG result => NULL
  result_344 = remainder_338 > threshold_342 ? result_343 : result_339;
  # DEBUG result => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_1 => NULL
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG mult => NULL
  _323 = input_2_123 < 0;
  mult_328 = _323 != _595 ? -1073741823 : 1073741824;
  # DEBUG mult => NULL
  # DEBUG D#31 => NULL
  # DEBUG D#30 => NULL
  # DEBUG D#29 => NULL
  # DEBUG mult => NULL
  # DEBUG D#28 => NULL
  # DEBUG result => NULL
  _332 = input_2_mult_38(D) == input_2_123;
  _333 = input_2_123 == -2147483648;
  _334 = _332 & _333;
  _325 = (long long int) input_2_123;
  _327 = _325 * _590;
  mult_329 = _327 + mult_328;
  _330 = mult_329 / 2147483648;
  _608 = (long int) _330;
  prephitmp_609 = _334 ? 2147483647 : _608;
  # DEBUG result => NULL
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG mult => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  # DEBUG D#10 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG result => NULL
  # DEBUG D#9 => NULL
  # DEBUG D#8 => NULL
  # DEBUG remainder_mask => NULL
  remainder_316 = _588 & prephitmp_609;
  # DEBUG remainder => NULL
  result_317 = prephitmp_609 >> _581;
  # DEBUG result => NULL
  # DEBUG threshold => NULL
  threshold_319 = _589 + 1;
  # DEBUG threshold => NULL
  threshold_320 = result_317 < 0 ? threshold_319 : _589;
  # DEBUG threshold => NULL
  result_321 = result_317 + 1;
  # DEBUG result => NULL
  result_322 = remainder_316 > threshold_320 ? result_321 : result_317;
  # DEBUG result => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG input_2 => NULL
  sum_128 = result_322 + result_344;
  # DEBUG sum => NULL
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  mult.word.low = 1073741824;
  mult.word.high = 0;
  _307 = mult.long_long;
  _308 = (long long int) sum_128;
  _310 = _308 * _586;
  _311 = _307 + _310;
  _312 = _311 >> 31;
  result_313 = (q31_t) _312;
  # DEBUG result => NULL
  mult ={v} {CLOBBER};
  # DEBUG m1 => NULL
  # DEBUG m2 => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  # DEBUG D#7 => NULL
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG result => NULL
  # DEBUG D#6 => NULL
  # DEBUG D#5 => NULL
  # DEBUG remainder_mask => NULL
  remainder_300 = result_313 & _584;
  # DEBUG remainder => NULL
  result_301 = result_313 >> _582;
  # DEBUG result => NULL
  # DEBUG threshold => NULL
  threshold_303 = _585 + 1;
  # DEBUG threshold => NULL
  threshold_304 = result_301 < 0 ? threshold_303 : _585;
  # DEBUG threshold => NULL
  result_305 = result_301 + 1;
  # DEBUG result => NULL
  result_306 = remainder_300 > threshold_304 ? result_305 : result_301;
  # DEBUG result => result_306
  # DEBUG dividend => NULL
  # DEBUG exponent => NULL
  # DEBUG threshold => NULL
  # DEBUG remainder => NULL
  # DEBUG remainder_mask => NULL
  # DEBUG result => NULL
  # DEBUG sum => NULL
  sum_131 = out_offset_48(D) + result_306;
  # DEBUG sum => sum_131
  sum_132 = MAX_EXPR <out_activation_min_50(D), sum_131>;
  # DEBUG sum => sum_132
  sum_133 = MIN_EXPR <out_activation_max_52(D), sum_132>;
  # DEBUG sum => sum_133
  output.22_134 = output_428 + 1;
  # DEBUG output => output.22_134
  _135 = (signed char) sum_133;
  *output_428 = _135;
  loop_count_137 = loop_count_421 + 4294967295;
  # DEBUG loop_count => loop_count_137
  # DEBUG output => output.22_134
  # DEBUG loop_count => loop_count_137
  # DEBUG input_2_vect => input_2_vect_119
  # DEBUG input_1_vect => input_1_vect_114
  if (loop_count_137 != 0)
    goto <bb 60>;
  else
    goto <bb 59>;

  <bb 59>:
  goto <bb 56>;

  <bb 60>:
  goto <bb 58>;

}


