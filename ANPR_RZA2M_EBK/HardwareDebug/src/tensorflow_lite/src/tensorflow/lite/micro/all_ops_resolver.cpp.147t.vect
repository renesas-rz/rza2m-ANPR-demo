
;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 128u] (_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE, funcdef_no=9781, decl_uid=181363, cgraph_uid=6886, symbol_order=6936)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:45:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(tflite::BuiltinOperator) const [with unsigned int tOpCount = 128u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * _2;
  sizetype _7;
  long int _9;
  sizetype _10;
  unsigned int _14;
  long int _15;
  long int _16;

  <bb 2>:
  if (op_3(D) == 32)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG i => 0
  _14 = this_6(D)->registrations_len_;
  if (_14 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG D#16 => &this_6(D)->registrations_[0]
  # DEBUG registration => D#16
  _15 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[0].builtin_code;
  _16 = (long int) op_3(D);
  if (_15 == _16)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 10>;

  <bb 6>:
  registration_13 = &this_6(D)->registrations_[0];
  goto <bb 11>;

  <bb 7>:
  # DEBUG D#15 => i_11 * 32
  # DEBUG D#14 => D#15 + 4
  # DEBUG registration => this_6(D) + D#14
  _9 = MEM[(const struct TfLiteRegistration &)this_6(D)].registrations_[i_11].builtin_code;
  if (_9 == _16)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  # i_4 = PHI <i_11(7)>
  _7 = i_4 * 32;
  _10 = _7 + 4;
  registration_8 = this_6(D) + _10;
  goto <bb 11>;

  <bb 9>:

  <bb 10>:
  # i_17 = PHI <0(5), i_11(9)>
  # DEBUG i => i_17
  # DEBUG registration => D#16
  i_11 = i_17 + 1;
  # DEBUG i => i_11
  # DEBUG i => i_11
  if (i_11 >= _14)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 11>:
  # _2 = PHI <0B(3), registration_8(8), registration_13(6), 0B(2), 0B(10)>
  return _2;

}



;; Function TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 128u] (_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE, funcdef_no=11105, decl_uid=181369, cgraph_uid=8210, symbol_order=9053)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:71
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:71:5: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:68:41: note: vectorized 0 loops in function.
TfLiteStatus (* tflite::MicroMutableOpResolver<tOpCount>::GetOpDataParser(tflite::BuiltinOperator) const)(const tflite::Operator*, tflite::ErrorReporter*, tflite::BuiltinDataAllocator*, void**) [with unsigned int tOpCount = 128u] (const struct MicroMutableOpResolver * const this, BuiltinOperator op)
{
  unsigned int i;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _2;
  unsigned int _5;
  BuiltinOperator _7;
  TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) _10;
  BuiltinOperator _13;

  <bb 2>:
  _5 = this_4(D)->num_buitin_ops_;
  if (_5 <= 128)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG i => 0
  if (_5 == 0)
    goto <bb 12>;
  else
    goto <bb 5>;

  <bb 4>:
  abort ();

  <bb 5>:
  _13 = this_4(D)->builtin_codes_[0];
  if (op_8(D) == _13)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 6>:
  _7 = this_4(D)->builtin_codes_[i_9];
  if (_7 == op_8(D))
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 11>;

  <bb 8>:
  # i_1 = PHI <i_9(6)>

  <bb 9>:
  # i_15 = PHI <i_1(8), 0(5)>
  _10 = this_4(D)->builtin_parsers_[i_15];
  goto <bb 12>;

  <bb 10>:

  <bb 11>:
  # i_14 = PHI <0(10), i_9(7)>
  # DEBUG i => i_14
  i_9 = i_14 + 1;
  # DEBUG i => i_9
  # DEBUG i => i_9
  if (_5 <= i_9)
    goto <bb 12>;
  else
    goto <bb 6>;

  <bb 12>:
  # _2 = PHI <_10(9), 0B(11), 0B(3)>
  return _2;

}



;; Function const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 128u] (_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc, funcdef_no=9782, decl_uid=181366, cgraph_uid=6887, symbol_order=6937)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:57:29: note: vectorized 0 loops in function.
const TfLiteRegistration* tflite::MicroMutableOpResolver<tOpCount>::FindOp(const char*) const [with unsigned int tOpCount = 128u] (const struct MicroMutableOpResolver * const this, const char * op)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  sizetype _1;
  const struct TfLiteRegistration * _2;
  sizetype _5;
  long int _7;
  const char * _9;
  int _11;
  unsigned int _13;

  <bb 2>:
  # DEBUG i => 0
  # DEBUG i => 0
  _13 = this_4(D)->registrations_len_;
  if (_13 == 0)
    goto <bb 9>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # i_14 = PHI <0(3), i_8(8)>
  # DEBUG i => i_14
  # DEBUG D#19 => i_14 * 32
  # DEBUG D#18 => D#19 + 4
  # DEBUG registration => this_4(D) + D#18
  _7 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].builtin_code;
  if (_7 == 32)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  _9 = MEM[(const struct TfLiteRegistration &)this_4(D)].registrations_[i_14].custom_name;
  _11 = strcmp (_9, op_10(D));
  if (_11 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # i_21 = PHI <i_14(5)>
  _5 = i_21 * 32;
  _1 = _5 + 4;
  registration_6 = this_4(D) + _1;
  goto <bb 9>;

  <bb 7>:
  i_8 = i_14 + 1;
  # DEBUG i => i_8
  # DEBUG i => i_8
  if (i_8 >= _13)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 4>;

  <bb 9>:
  # _2 = PHI <registration_6(6), 0B(7), 0B(2)>
  return _2;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi, funcdef_no=6597, decl_uid=180929, cgraph_uid=3790, symbol_order=3825)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_op_resolver.h:53:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(tflite::BuiltinOperator, int) const (const struct MicroOpResolver * const this, BuiltinOperator op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238611;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  long int _6;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  const struct TfLiteRegistration * _10;
  long int _11;
  sizetype _12;
  long int _15;
  sizetype _16;
  unsigned int _19;

  <bb 2>:
  _3 = this_2(D)->D.180950._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 24B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 12>;

  <bb 3>:
  # DEBUG this => this_2(D)
  # DEBUG op => op_5(D)
  if (op_5(D) == 32)
    goto <bb 13>;
  else
    goto <bb 4>;

  <bb 4>:
  # DEBUG i => 0
  _19 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_19 == 0)
    goto <bb 13>;
  else
    goto <bb 5>;

  <bb 5>:
  # DEBUG D#22 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#22
  _11 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  _6 = (long int) op_5(D);
  if (_6 == _11)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 11>;

  <bb 7>:
  registration_9 = &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0];
  goto <bb 13>;

  <bb 8>:
  # DEBUG D#21 => i_17 * 32
  # DEBUG D#20 => D#21 + 4
  # DEBUG registration => this_2(D) + D#20
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_17].builtin_code;
  if (_6 == _15)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # i_18 = PHI <i_17(8)>
  _12 = i_18 * 32;
  _16 = _12 + 4;
  registration_14 = this_2(D) + _16;
  goto <bb 13>;

  <bb 10>:

  <bb 11>:
  # i_23 = PHI <0(6), i_17(10)>
  # DEBUG i => i_23
  # DEBUG registration => D#22
  i_17 = i_23 + 1;
  # DEBUG i => i_17
  # DEBUG i => i_17
  if (i_17 >= _19)
    goto <bb 13>;
  else
    goto <bb 8>;

  <bb 12>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->6) (this_2(D), op_5(D));

  <bb 13>:
  # _7 = PHI <_10(12), registration_9(7), 0B(4), registration_14(9), 0B(3), 0B(11)>
  return _7;

}



;; Function virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (_ZNK6tflite15MicroOpResolver6FindOpEPKci, funcdef_no=6598, decl_uid=180933, cgraph_uid=3791, symbol_order=3826)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_op_resolver.h:60:29: note: vectorized 0 loops in function.
virtual const TfLiteRegistration* tflite::MicroOpResolver::FindOp(const char*, int) const (const struct MicroOpResolver * const this, const char * op, int version)
{
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238623;
  int (*__vtbl_ptr_type) () * _3;
  int (*__vtbl_ptr_type) () _4;
  const struct TfLiteRegistration * _7;
  void * PROF_8;
  unsigned int _9;
  const struct TfLiteRegistration * _10;
  sizetype _12;
  sizetype _13;
  long int _15;
  const char * _16;
  int _17;

  <bb 2>:
  _3 = this_2(D)->D.180950._vptr.OpResolver;
  _4 = MEM[(int (*__vtbl_ptr_type) () *)_3 + 28B];
  PROF_8 = [obj_type_ref] OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7);
  if (PROF_8 == FindOp)
    goto <bb 3>;
  else
    goto <bb 10>;

  <bb 3>:
  # DEBUG i => 0
  _9 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_9 == 0)
    goto <bb 11>;
  else
    goto <bb 4>;

  <bb 4>:

  <bb 5>:
  # i_11 = PHI <0(4), i_18(9)>
  # DEBUG i => i_11
  # DEBUG D#25 => i_11 * 32
  # DEBUG D#24 => D#25 + 4
  # DEBUG registration => this_2(D) + D#24
  _15 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].builtin_code;
  if (_15 == 32)
    goto <bb 6>;
  else
    goto <bb 8>;

  <bb 6>:
  _16 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_11].custom_name;
  _17 = strcmp (_16, op_5(D));
  if (_17 == 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # i_27 = PHI <i_11(6)>
  _12 = i_27 * 32;
  _13 = _12 + 4;
  registration_14 = this_2(D) + _13;
  goto <bb 11>;

  <bb 8>:
  i_18 = i_11 + 1;
  # DEBUG i => i_18
  # DEBUG i => i_18
  if (_9 <= i_18)
    goto <bb 11>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 5>;

  <bb 10>:
  _10 = OBJ_TYPE_REF(_4;(const struct MicroOpResolver)this_2(D)->7) (this_2(D), op_5(D));

  <bb 11>:
  # _7 = PHI <_10(10), registration_14(7), 0B(8), 0B(3)>
  return _7;

}



;; Function TfLiteStatus tflite::MicroMutableOpResolver<tOpCount>::AddBuiltin(tflite::BuiltinOperator, const TfLiteRegistration&, tflite::MicroOpResolver::BuiltinParseFunction) [with unsigned int tOpCount = 128u] (_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE, funcdef_no=9219, decl_uid=181542, cgraph_uid=6324, symbol_order=6374)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:532:16: note: vectorized 0 loops in function.
TfLiteStatus tflite::MicroMutableOpResolver<tOpCount>::AddBuiltin(tflite::BuiltinOperator, const TfLiteRegistration&, tflite::MicroOpResolver::BuiltinParseFunction) [with unsigned int tOpCount = 128u] (struct MicroMutableOpResolver * const this, BuiltinOperator op, const struct TfLiteRegistration & registration, TfLiteStatus (*BuiltinParseFunction) (const struct Operator *, struct ErrorReporter *, struct BuiltinDataAllocator *, void * *) parser)
{
  TfLiteStatus D.238648;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238643;
  TfLiteStatus _1;
  long int _4;
  struct ErrorReporter * _8;
  int (*__vtbl_ptr_type) () * _10;
  int (*__vtbl_ptr_type) () _11;
  long int _12;
  struct ErrorReporter * _14;
  int _15;
  long int _20;
  unsigned int _22;
  unsigned int _24;
  unsigned int _28;
  void * PROF_30;
  const struct TfLiteRegistration * _32;
  unsigned int pretmp_35;
  unsigned int _36;
  long int _37;
  struct ErrorReporter * _42;
  int _43;
  unsigned int _51;
  unsigned int prephitmp_52;

  <bb 2>:
  if (op_5(D) == 32)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  _8 = this_7(D)->error_reporter_;
  if (_8 != 0B)
    goto <bb 5>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 21>;

  <bb 5>:
  tflite::ErrorReporter::Report (_8, "Invalid parameter BuiltinOperator_CUSTOM to the AddBuiltin function.");
  goto <bb 21>;

  <bb 6>:
  _10 = this_7(D)->D.181571.D.180950._vptr.OpResolver;
  _11 = MEM[(int (*__vtbl_ptr_type) () *)_10 + 24B];
  PROF_30 = [obj_type_ref] OBJ_TYPE_REF(_11;(const struct MicroMutableOpResolver)this_7(D)->6);
  if (PROF_30 == FindOp)
    goto <bb 7>;
  else
    goto <bb 14>;

  <bb 7>:
  # DEBUG i => 0
  _51 = MEM[(const struct MicroMutableOpResolver *)this_7(D)].registrations_len_;
  if (_51 == 0)
    goto <bb 20>;
  else
    goto <bb 8>;

  <bb 8>:
  # DEBUG D#26 => &MEM[(const struct MicroMutableOpResolver *)this_7(D)].registrations_[0]
  # DEBUG registration => D#26
  _12 = MEM[(const struct TfLiteRegistration &)this_7(D)].registrations_[0].builtin_code;
  _4 = (long int) op_5(D);
  if (_4 == _12)
    goto <bb 9>;
  else
    goto <bb 12>;

  <bb 9>:
  _14 = this_7(D)->error_reporter_;
  if (_14 != 0B)
    goto <bb 16>;
  else
    goto <bb 4>;

  <bb 10>:
  # DEBUG D#26 => &MEM[(const struct MicroMutableOpResolver *)this_7(D)].registrations_[i_39]
  # DEBUG registration => D#26
  _37 = MEM[(const struct TfLiteRegistration &)this_7(D)].registrations_[i_39].builtin_code;
  if (_4 == _37)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 13>;

  <bb 12>:

  <bb 13>:
  # i_45 = PHI <0(12), i_39(11)>
  # DEBUG i => i_45
  # DEBUG D#26 => &MEM[(const struct MicroMutableOpResolver *)this_7(D)].registrations_[i_45]
  # DEBUG registration => D#26
  i_39 = i_45 + 1;
  # DEBUG i => i_39
  # DEBUG i => i_39
  if (i_39 >= _51)
    goto <bb 17>;
  else
    goto <bb 10>;

  <bb 14>:
  _32 = OBJ_TYPE_REF(_11;(const struct MicroMutableOpResolver)this_7(D)->6) (this_7(D), op_5(D));
  if (_32 != 0B)
    goto <bb 9>;
  else
    goto <bb 15>;

  <bb 15>:
  pretmp_35 = this_7(D)->registrations_len_;
  goto <bb 17>;

  <bb 16>:
  _15 = (int) op_5(D);
  tflite::ErrorReporter::Report (_14, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", _15);
  goto <bb 21>;

  <bb 17>:
  # prephitmp_52 = PHI <pretmp_35(15), _51(13)>
  if (prephitmp_52 > 127)
    goto <bb 18>;
  else
    goto <bb 20>;

  <bb 18>:
  # DEBUG D#6 => registration_18(D)
  # DEBUG D#7 => parser_26(D)
  # DEBUG this => this_7(D)
  # DEBUG op => op_5(D)
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _42 = this_7(D)->error_reporter_;
  if (_42 != 0B)
    goto <bb 19>;
  else
    goto <bb 4>;

  <bb 19>:
  _43 = (int) op_5(D);
  tflite::ErrorReporter::Report (_42, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", _43, 128);
  goto <bb 21>;

  <bb 20>:
  # _36 = PHI <prephitmp_52(17), _51(7)>
  this_7(D)->registrations_[_36] = MEM[(const struct TfLiteRegistration &)registration_18(D)];
  _20 = (long int) op_5(D);
  this_7(D)->registrations_[_36].builtin_code = _20;
  _22 = _36 + 1;
  this_7(D)->registrations_len_ = _22;
  _24 = this_7(D)->num_buitin_ops_;
  this_7(D)->builtin_codes_[_24] = op_5(D);
  this_7(D)->builtin_parsers_[_24] = parser_26(D);
  _28 = _24 + 1;
  this_7(D)->num_buitin_ops_ = _28;

  <bb 21>:
  # _1 = PHI <1(5), 1(16), 1(19), 0(20), 1(4)>
  return _1;

}



;; Function tflite::AllOpsResolver::AllOpsResolver() (_ZN6tflite14AllOpsResolverC2Ev, funcdef_no=6696, decl_uid=181598, cgraph_uid=3801, symbol_order=3836)


Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:59:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.

Analyzing loop at C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: ===== analyze_loop_nest =====
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: === vect_analyze_loop_form ===
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: not vectorized: control flow in loop.
C:/Renesas/e2studio_2021_01_workspace_RZA2M_ANPR/ANPR_RZA2M_RDK/src/tensorflow_lite/src/tensorflow/lite/micro/micro_mutable_op_resolver.h:49:64: note: bad loop form.
../src/tensorflow_lite/src/tensorflow/lite/micro/all_ops_resolver.cpp:22:1: note: vectorized 0 loops in function.
tflite::AllOpsResolver::AllOpsResolver() (struct AllOpsResolver * const this)
{
  TfLiteStatus D.239678;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239673;
  TfLiteStatus D.239668;
  TfLiteStatus D.239663;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239658;
  TfLiteStatus D.239653;
  TfLiteStatus D.239648;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239643;
  TfLiteStatus D.239638;
  TfLiteStatus D.239633;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239628;
  TfLiteStatus D.239623;
  TfLiteStatus D.239618;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239613;
  TfLiteStatus D.239608;
  TfLiteStatus D.239603;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239598;
  TfLiteStatus D.239593;
  TfLiteStatus D.239588;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239583;
  TfLiteStatus D.239578;
  TfLiteStatus D.239573;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239568;
  TfLiteStatus D.239563;
  TfLiteStatus D.239558;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239553;
  TfLiteStatus D.239548;
  TfLiteStatus D.239543;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239538;
  TfLiteStatus D.239533;
  TfLiteStatus D.239528;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239523;
  TfLiteStatus D.239518;
  TfLiteStatus D.239513;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239508;
  TfLiteStatus D.239503;
  TfLiteStatus D.239498;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239493;
  TfLiteStatus D.239488;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239483;
  TfLiteStatus D.239478;
  TfLiteStatus D.239473;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239468;
  TfLiteStatus D.239463;
  TfLiteStatus D.239458;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239453;
  TfLiteStatus D.239448;
  TfLiteStatus D.239443;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239438;
  TfLiteStatus D.239433;
  TfLiteStatus D.239428;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239423;
  TfLiteStatus D.239418;
  TfLiteStatus D.239413;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239408;
  TfLiteStatus D.239403;
  TfLiteStatus D.239398;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239393;
  TfLiteStatus D.239388;
  TfLiteStatus D.239383;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239378;
  TfLiteStatus D.239373;
  TfLiteStatus D.239368;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239363;
  TfLiteStatus D.239358;
  TfLiteStatus D.239353;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239348;
  TfLiteStatus D.239343;
  TfLiteStatus D.239338;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239333;
  TfLiteStatus D.239328;
  TfLiteStatus D.239323;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239318;
  TfLiteStatus D.239313;
  TfLiteStatus D.239308;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239303;
  TfLiteStatus D.239298;
  TfLiteStatus D.239293;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239288;
  TfLiteStatus D.239283;
  TfLiteStatus D.239278;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239273;
  TfLiteStatus D.239268;
  TfLiteStatus D.239263;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239258;
  TfLiteStatus D.239253;
  TfLiteStatus D.239248;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239243;
  TfLiteStatus D.239238;
  TfLiteStatus D.239233;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239228;
  TfLiteStatus D.239223;
  TfLiteStatus D.239218;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239213;
  TfLiteStatus D.239208;
  TfLiteStatus D.239203;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239198;
  TfLiteStatus D.239193;
  TfLiteStatus D.239188;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239183;
  TfLiteStatus D.239178;
  TfLiteStatus D.239173;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239168;
  TfLiteStatus D.239163;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239158;
  TfLiteStatus D.239153;
  TfLiteStatus D.239148;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239143;
  TfLiteStatus D.239138;
  TfLiteStatus D.239133;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239128;
  TfLiteStatus D.239123;
  TfLiteStatus D.239118;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239113;
  TfLiteStatus D.239108;
  TfLiteStatus D.239103;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239098;
  TfLiteStatus D.239093;
  TfLiteStatus D.239088;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239083;
  TfLiteStatus D.239078;
  TfLiteStatus D.239073;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239068;
  TfLiteStatus D.239063;
  TfLiteStatus D.239058;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239053;
  TfLiteStatus D.239048;
  TfLiteStatus D.239043;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239038;
  TfLiteStatus D.239033;
  TfLiteStatus D.239028;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239023;
  TfLiteStatus D.239018;
  TfLiteStatus D.239013;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.239008;
  TfLiteStatus D.239003;
  TfLiteStatus D.238998;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238993;
  TfLiteStatus D.238988;
  TfLiteStatus D.238983;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238978;
  TfLiteStatus D.238973;
  TfLiteStatus D.238968;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238963;
  TfLiteStatus D.238958;
  TfLiteStatus D.238953;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238948;
  TfLiteStatus D.238943;
  TfLiteStatus D.238938;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238933;
  TfLiteStatus D.238928;
  TfLiteStatus D.238923;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238918;
  TfLiteStatus D.238913;
  TfLiteStatus D.238908;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238903;
  TfLiteStatus D.238898;
  TfLiteStatus D.238893;
  const struct TfLiteRegistration & registration;
  unsigned int i;
  const struct TfLiteRegistration * D.238888;
  TfLiteStatus D.238883;
  struct TfLiteRegistration D.238878;
  TfLiteStatus D.238877;
  struct TfLiteRegistration D.238875;
  TfLiteStatus D.238874;
  struct TfLiteRegistration D.238872;
  TfLiteStatus D.238871;
  struct TfLiteRegistration D.238869;
  TfLiteStatus D.238868;
  struct TfLiteRegistration D.238866;
  TfLiteStatus D.238865;
  struct TfLiteRegistration D.238863;
  TfLiteStatus D.238862;
  struct TfLiteRegistration D.238860;
  TfLiteStatus D.238859;
  struct TfLiteRegistration D.238857;
  TfLiteStatus D.238856;
  struct TfLiteRegistration D.238854;
  TfLiteStatus D.238853;
  struct TfLiteRegistration D.238851;
  TfLiteStatus D.238850;
  struct TfLiteRegistration D.238848;
  TfLiteStatus D.238847;
  struct TfLiteRegistration D.238845;
  TfLiteStatus D.238844;
  struct TfLiteRegistration D.238842;
  TfLiteStatus D.238841;
  struct TfLiteRegistration D.238839;
  TfLiteStatus D.238838;
  struct TfLiteRegistration D.238836;
  TfLiteStatus D.238835;
  TfLiteStatus D.238833;
  struct TfLiteRegistration D.238831;
  TfLiteStatus D.238830;
  struct TfLiteRegistration D.238828;
  TfLiteStatus D.238827;
  TfLiteStatus D.238825;
  struct TfLiteRegistration D.238822;
  TfLiteStatus D.238821;
  struct TfLiteRegistration D.238819;
  TfLiteStatus D.238818;
  struct TfLiteRegistration D.238816;
  TfLiteStatus D.238815;
  TfLiteStatus D.238813;
  struct TfLiteRegistration D.238808;
  TfLiteStatus D.238807;
  struct TfLiteRegistration D.238805;
  TfLiteStatus D.238804;
  struct TfLiteRegistration D.238802;
  TfLiteStatus D.238801;
  struct TfLiteRegistration D.238799;
  TfLiteStatus D.238798;
  struct TfLiteRegistration D.238796;
  TfLiteStatus D.238795;
  struct TfLiteRegistration D.238793;
  TfLiteStatus D.238792;
  struct TfLiteRegistration D.238790;
  TfLiteStatus D.238789;
  struct TfLiteRegistration D.238787;
  TfLiteStatus D.238786;
  struct TfLiteRegistration D.238784;
  TfLiteStatus D.238783;
  struct TfLiteRegistration D.238781;
  TfLiteStatus D.238780;
  struct TfLiteRegistration D.238778;
  TfLiteStatus D.238777;
  struct TfLiteRegistration D.238775;
  TfLiteStatus D.238774;
  struct TfLiteRegistration D.238772;
  TfLiteStatus D.238771;
  struct TfLiteRegistration D.238769;
  TfLiteStatus D.238768;
  struct TfLiteRegistration D.238766;
  TfLiteStatus D.238765;
  struct TfLiteRegistration D.238763;
  TfLiteStatus D.238762;
  struct TfLiteRegistration D.238760;
  TfLiteStatus D.238759;
  struct TfLiteRegistration D.238757;
  TfLiteStatus D.238756;
  struct TfLiteRegistration D.238754;
  TfLiteStatus D.238753;
  struct TfLiteRegistration D.238751;
  TfLiteStatus D.238750;
  struct TfLiteRegistration D.238748;
  TfLiteStatus D.238747;
  struct TfLiteRegistration D.238745;
  TfLiteStatus D.238744;
  struct TfLiteRegistration D.238742;
  TfLiteStatus D.238741;
  struct TfLiteRegistration D.238739;
  TfLiteStatus D.238738;
  struct TfLiteRegistration D.238736;
  TfLiteStatus D.238735;
  struct TfLiteRegistration D.238733;
  TfLiteStatus D.238732;
  struct TfLiteRegistration D.238730;
  TfLiteStatus D.238729;
  struct TfLiteRegistration D.238727;
  TfLiteStatus D.238726;
  struct TfLiteRegistration D.238724;
  TfLiteStatus D.238723;
  struct TfLiteRegistration D.238721;
  TfLiteStatus D.238720;
  struct TfLiteRegistration D.238718;
  TfLiteStatus D.238717;
  struct TfLiteRegistration D.238715;
  TfLiteStatus D.238714;
  struct TfLiteRegistration D.238712;
  TfLiteStatus D.238711;
  struct TfLiteRegistration D.238709;
  TfLiteStatus D.238708;
  struct TfLiteRegistration D.238706;
  TfLiteStatus D.238705;
  TfLiteStatus D.238703;
  struct TfLiteRegistration D.238698;
  TfLiteStatus D.238697;
  struct TfLiteRegistration D.238695;
  TfLiteStatus D.238694;
  struct TfLiteRegistration D.238692;
  TfLiteStatus D.238691;
  struct TfLiteRegistration D.238689;
  TfLiteStatus D.238688;
  struct TfLiteRegistration D.238686;
  TfLiteStatus D.238685;
  struct TfLiteRegistration D.238683;
  TfLiteStatus D.238682;
  struct TfLiteRegistration D.238680;
  TfLiteStatus D.238679;
  struct TfLiteRegistration D.238677;
  TfLiteStatus D.238676;
  struct TfLiteRegistration D.238674;
  TfLiteStatus D.238673;
  struct TfLiteRegistration D.238671;
  TfLiteStatus D.238670;
  struct TfLiteRegistration D.238668;
  TfLiteStatus D.238667;
  struct TfLiteRegistration D.238665;
  TfLiteStatus D.238664;
  struct TfLiteRegistration D.238662;
  TfLiteStatus D.238661;
  struct TfLiteRegistration D.181690;
  struct TfLiteRegistration D.181689;
  struct MicroMutableOpResolver * _3;
  struct ErrorReporter * _102;
  unsigned int _108;
  unsigned int _109;
  unsigned int prephitmp_110;
  unsigned int _149;
  struct ErrorReporter * _150;
  unsigned int _151;
  unsigned int _156;
  unsigned int _157;
  struct TfLiteRegistration * _162;
  const char * _163;
  unsigned int _165;
  struct TfLiteRegistration * _168;
  unsigned int _174;
  unsigned int _179;
  unsigned int _180;
  unsigned int _186;
  unsigned int _187;
  struct ErrorReporter * _189;
  unsigned int _195;
  unsigned int _196;
  unsigned int _203;
  unsigned int _204;
  long int _205;
  struct ErrorReporter * _210;
  unsigned int _214;
  unsigned int _215;
  struct ErrorReporter * _217;
  unsigned int _223;
  unsigned int _224;
  unsigned int _232;
  long int _233;
  struct ErrorReporter * _238;
  unsigned int _242;
  unsigned int _243;
  struct ErrorReporter * _245;
  unsigned int _251;
  unsigned int _252;
  unsigned int _258;
  unsigned int _260;
  long int _261;
  struct ErrorReporter * _266;
  unsigned int _270;
  unsigned int _271;
  struct ErrorReporter * _273;
  unsigned int _279;
  unsigned int _280;
  unsigned int _281;
  unsigned int prephitmp_286;
  unsigned int _288;
  long int _289;
  struct ErrorReporter * _294;
  unsigned int _298;
  unsigned int _299;
  struct ErrorReporter * _301;
  unsigned int _307;
  unsigned int _308;
  unsigned int _316;
  long int _317;
  struct ErrorReporter * _322;
  unsigned int _326;
  unsigned int _327;
  struct ErrorReporter * _329;
  unsigned int _335;
  unsigned int _336;
  unsigned int prephitmp_337;
  unsigned int _342;
  unsigned int _344;
  long int _345;
  struct ErrorReporter * _350;
  unsigned int _354;
  unsigned int _355;
  struct ErrorReporter * _357;
  unsigned int _363;
  unsigned int _364;
  unsigned int prephitmp_370;
  unsigned int _372;
  long int _373;
  struct ErrorReporter * _378;
  unsigned int _382;
  unsigned int _383;
  struct ErrorReporter * _385;
  unsigned int _391;
  unsigned int _392;
  unsigned int _400;
  long int _401;
  struct ErrorReporter * _406;
  unsigned int _410;
  unsigned int _411;
  struct ErrorReporter * _413;
  unsigned int _419;
  unsigned int _420;
  unsigned int _426;
  unsigned int _428;
  long int _429;
  struct ErrorReporter * _434;
  unsigned int _438;
  unsigned int _439;
  struct ErrorReporter * _441;
  unsigned int _447;
  unsigned int _448;
  unsigned int _449;
  unsigned int prephitmp_454;
  unsigned int _456;
  long int _457;
  struct ErrorReporter * _462;
  unsigned int _466;
  unsigned int _467;
  struct ErrorReporter * _469;
  unsigned int _475;
  unsigned int _476;
  unsigned int _484;
  long int _485;
  struct ErrorReporter * _490;
  unsigned int _494;
  unsigned int _495;
  struct ErrorReporter * _497;
  unsigned int _503;
  unsigned int _504;
  unsigned int prephitmp_505;
  unsigned int _510;
  unsigned int _512;
  long int _513;
  struct ErrorReporter * _518;
  unsigned int _521;
  struct ErrorReporter * _522;
  unsigned int _523;
  unsigned int _524;
  struct ErrorReporter * _526;
  unsigned int _535;
  long int _536;
  const char * _537;
  int _538;
  unsigned int _542;
  unsigned int _545;
  unsigned int _546;
  struct ErrorReporter * _548;
  unsigned int _554;
  unsigned int _555;
  unsigned int prephitmp_561;
  unsigned int _563;
  long int _564;
  struct ErrorReporter * _569;
  unsigned int _573;
  unsigned int _574;
  struct ErrorReporter * _576;
  unsigned int _582;
  unsigned int _583;
  unsigned int _591;
  long int _592;
  struct ErrorReporter * _597;
  unsigned int _600;
  struct ErrorReporter * _601;
  struct ErrorReporter * _605;
  long int _615;
  const char * _616;
  int _617;
  unsigned int _621;
  unsigned int _624;
  unsigned int _625;
  struct ErrorReporter * _627;
  unsigned int _630;
  unsigned int _633;
  unsigned int _634;
  unsigned int _639;
  unsigned int _640;
  long int _643;
  struct ErrorReporter * _648;
  unsigned int _650;
  struct ErrorReporter * _655;
  unsigned int _656;
  long int _659;
  unsigned int _661;
  unsigned int _662;
  unsigned int prephitmp_663;
  unsigned int prephitmp_667;
  unsigned int prephitmp_668;
  long int _671;
  unsigned int _675;
  struct ErrorReporter * _676;
  struct ErrorReporter * _683;
  unsigned int _686;
  unsigned int prephitmp_687;
  unsigned int _689;
  unsigned int _690;
  unsigned int _695;
  long int _699;
  unsigned int prephitmp_703;
  struct ErrorReporter * _704;
  unsigned int _706;
  unsigned int _707;
  long int _710;
  struct ErrorReporter * _715;
  struct ErrorReporter * _722;
  unsigned int prephitmp_723;
  unsigned int _725;
  unsigned int _728;
  unsigned int _729;
  unsigned int _732;
  long int _734;
  unsigned int prephitmp_735;
  long int _738;
  unsigned int prephitmp_739;
  struct ErrorReporter * _743;
  unsigned int prephitmp_745;
  struct ErrorReporter * _750;
  unsigned int _756;
  unsigned int _757;
  unsigned int _758;
  unsigned int _762;
  long int _766;
  struct ErrorReporter * _771;
  unsigned int prephitmp_773;
  struct ErrorReporter * _778;
  unsigned int _779;
  unsigned int _781;
  unsigned int _782;
  unsigned int _784;
  unsigned int _785;
  long int _788;
  unsigned int _791;
  long int _794;
  unsigned int _798;
  struct ErrorReporter * _799;
  struct ErrorReporter * _806;
  long int _809;
  unsigned int _810;
  unsigned int _812;
  unsigned int _813;
  unsigned int prephitmp_814;
  long int _816;
  long int _818;
  unsigned int prephitmp_819;
  long int _822;
  unsigned int _823;
  long int _826;
  struct ErrorReporter * _827;
  unsigned int _828;
  struct ErrorReporter * _834;
  unsigned int _835;
  long int _838;
  unsigned int _840;
  unsigned int _841;
  unsigned int _844;
  long int _846;
  long int _850;
  unsigned int _851;
  long int _854;
  struct ErrorReporter * _855;
  long int _856;
  unsigned int _857;
  struct ErrorReporter * _862;
  long int _863;
  unsigned int _865;
  unsigned int _868;
  unsigned int _869;
  unsigned int _875;
  long int _878;
  long int _879;
  unsigned int _882;
  struct ErrorReporter * _883;
  long int _884;
  long int _885;
  struct ErrorReporter * _890;
  unsigned int prephitmp_891;
  unsigned int _893;
  unsigned int _896;
  unsigned int _897;
  unsigned int _900;
  unsigned int _902;
  unsigned int prephitmp_903;
  long int _906;
  unsigned int _907;
  struct ErrorReporter * _911;
  long int _913;
  struct ErrorReporter * _918;
  long int _919;
  unsigned int _924;
  unsigned int _925;
  unsigned int _926;
  long int _934;
  long int _935;
  unsigned int _938;
  struct ErrorReporter * _939;
  long int _940;
  unsigned int _941;
  struct ErrorReporter * _946;
  long int _947;
  unsigned int _949;
  unsigned int _952;
  unsigned int _953;
  unsigned int _956;
  unsigned int _958;
  unsigned int _959;
  unsigned int _960;
  long int _962;
  unsigned int _966;
  struct ErrorReporter * _967;
  long int _969;
  struct ErrorReporter * _974;
  long int _977;
  unsigned int _978;
  unsigned int _980;
  unsigned int _981;
  unsigned int prephitmp_982;
  unsigned int _984;
  unsigned int _986;
  unsigned int prephitmp_987;
  unsigned int prephitmp_988;
  long int _990;
  unsigned int _994;
  struct ErrorReporter * _995;
  unsigned int _996;
  long int _997;
  struct ErrorReporter * _1002;
  unsigned int _1003;
  long int _1006;
  unsigned int _1008;
  unsigned int _1009;
  long int _1012;
  long int _1014;
  long int _1018;
  unsigned int _1019;
  struct ErrorReporter * _1023;
  unsigned int _1024;
  unsigned int _1025;
  struct ErrorReporter * _1030;
  long int _1031;
  long int _1034;
  unsigned int _1036;
  unsigned int _1037;
  unsigned int _1043;
  unsigned int _1044;
  long int _1046;
  unsigned int prephitmp_1047;
  long int _1050;
  struct ErrorReporter * _1051;
  long int _1052;
  unsigned int _1053;
  struct ErrorReporter * _1058;
  long int _1059;
  unsigned int _1061;
  unsigned int _1064;
  unsigned int _1065;
  unsigned int _1068;
  unsigned int _1070;
  unsigned int prephitmp_1071;
  unsigned int prephitmp_1072;
  long int _1074;
  unsigned int _1075;
  unsigned int _1078;
  struct ErrorReporter * _1079;
  unsigned int prephitmp_1080;
  long int _1081;
  struct ErrorReporter * _1086;
  unsigned int _1089;
  unsigned int _1090;
  unsigned int _1092;
  unsigned int _1093;
  unsigned int _1094;
  long int _1096;
  long int _1098;
  long int _1102;
  unsigned int _1106;
  struct ErrorReporter * _1107;
  unsigned int _1108;
  unsigned int prephitmp_1109;
  struct ErrorReporter * _1114;
  unsigned int _1115;
  unsigned int prephitmp_1117;
  long int _1118;
  unsigned int _1120;
  unsigned int _1121;
  long int _1124;
  long int _1126;
  unsigned int _1127;
  long int _1130;
  unsigned int _1131;
  long int _1134;
  struct ErrorReporter * _1135;
  unsigned int prephitmp_1136;
  unsigned int _1137;
  struct ErrorReporter * _1142;
  unsigned int _1148;
  unsigned int _1149;
  unsigned int prephitmp_1150;
  unsigned int _1154;
  unsigned int prephitmp_1155;
  unsigned int prephitmp_1156;
  long int _1158;
  long int _1159;
  long int _1162;
  struct ErrorReporter * _1163;
  unsigned int _1164;
  unsigned int _1165;
  struct ErrorReporter * _1170;
  unsigned int _1176;
  unsigned int _1177;
  long int _1186;
  struct ErrorReporter * _1191;
  struct ErrorReporter * _1198;
  unsigned int _1204;
  unsigned int _1205;
  unsigned int _1211;
  unsigned int _1212;
  long int _1214;
  struct ErrorReporter * _1219;
  struct ErrorReporter * _1226;
  unsigned int _1232;
  unsigned int _1233;
  unsigned int prephitmp_1239;
  unsigned int prephitmp_1240;
  long int _1242;
  struct ErrorReporter * _1247;
  struct ErrorReporter * _1254;
  unsigned int _1260;
  unsigned int _1261;
  unsigned int _1262;
  long int _1270;
  struct ErrorReporter * _1275;
  struct ErrorReporter * _1282;
  unsigned int _1288;
  unsigned int _1289;
  unsigned int _1295;
  unsigned int _1296;
  long int _1298;
  struct ErrorReporter * _1303;
  unsigned int prephitmp_1306;
  unsigned int prephitmp_1307;
  long int _1309;
  struct ErrorReporter * _1314;
  struct ErrorReporter * _1321;
  unsigned int _1327;
  unsigned int _1328;
  long int _1337;
  struct ErrorReporter * _1342;
  struct ErrorReporter * _1349;
  unsigned int _1355;
  unsigned int _1356;
  unsigned int _1362;
  long int _1365;
  struct ErrorReporter * _1370;
  struct ErrorReporter * _1377;
  unsigned int _1383;
  unsigned int _1384;
  unsigned int prephitmp_1390;
  unsigned int _1391;
  long int _1393;
  struct ErrorReporter * _1398;
  struct ErrorReporter * _1405;
  unsigned int _1411;
  unsigned int _1412;
  unsigned int prephitmp_1413;
  unsigned int prephitmp_1419;
  long int _1421;
  struct ErrorReporter * _1426;
  struct ErrorReporter * _1433;
  unsigned int _1439;
  unsigned int _1440;
  unsigned int _1446;
  long int _1449;
  struct ErrorReporter * _1454;
  struct ErrorReporter * _1461;
  unsigned int _1467;
  unsigned int _1468;
  unsigned int prephitmp_1474;
  unsigned int _1475;
  long int _1477;
  struct ErrorReporter * _1482;
  struct ErrorReporter * _1489;
  unsigned int _1495;
  unsigned int _1496;
  unsigned int prephitmp_1503;
  long int _1505;
  struct ErrorReporter * _1510;
  struct ErrorReporter * _1517;
  unsigned int _1523;
  unsigned int _1524;
  unsigned int _1525;
  unsigned int _1530;
  long int _1533;
  struct ErrorReporter * _1538;
  struct ErrorReporter * _1545;
  unsigned int _1551;
  unsigned int _1552;
  unsigned int prephitmp_1558;
  unsigned int _1559;
  long int _1561;
  struct ErrorReporter * _1566;
  struct ErrorReporter * _1573;
  unsigned int _1579;
  unsigned int _1580;
  unsigned int prephitmp_1581;
  unsigned int prephitmp_1587;
  long int _1589;
  struct ErrorReporter * _1594;
  struct ErrorReporter * _1601;
  unsigned int _1607;
  unsigned int _1608;
  unsigned int _1614;
  long int _1617;
  struct ErrorReporter * _1622;
  struct ErrorReporter * _1629;
  unsigned int _1635;
  unsigned int _1636;
  unsigned int prephitmp_1642;
  long int _1645;
  struct ErrorReporter * _1650;
  unsigned int prephitmp_1994;
  unsigned int prephitmp_2006;
  unsigned int _2008;
  long int _2033;
  unsigned int prephitmp_2035;
  long int _2059;
  unsigned int _2061;
  unsigned int prephitmp_2073;
  long int _2075;
  unsigned int prephitmp_2089;
  unsigned int _2103;
  unsigned int _2115;
  long int _2129;
  long int _2131;
  unsigned int _2143;
  long int _2145;
  unsigned int _2159;
  long int _2161;
  long int _2163;
  long int _2175;
  long int _2191;
  unsigned int _2203;
  unsigned int _2205;
  long int _2217;
  unsigned int _2219;
  unsigned int _2231;
  long int _2233;
  unsigned int _2247;
  unsigned int _2259;

  <bb 2>:
  _3 = &this_2(D)->D.181600;
  # DEBUG this => _3
  # DEBUG error_reporter => 0B
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # DEBUG D#5 => &_3->D.181571
  # DEBUG this => D#5
  # DEBUG D#4 => &D#5->D.180950
  # DEBUG this => D#4
  # DEBUG this => NULL
  # DEBUG this => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = 0;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = 0;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_ = 0B;
  # DEBUG this => NULL
  # DEBUG error_reporter => NULL
  this_2(D)->D.181600.D.181571.D.180950._vptr.OpResolver = &MEM[(void *)&_ZTVN6tflite14AllOpsResolverE + 8B];
  # DEBUG this => _3
  D.238878 = tflite::ops::micro::Register_ABS (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 101
  # DEBUG registration => &D.238878
  # DEBUG parser => ParseAbs
  # DEBUG i => 0
  _781 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_781 == 0)
    goto <bb 11>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG D#83 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#83
  _2075 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2075 == 101)
    goto <bb 545>;
  else
    goto <bb 6>;

  <bb 4>:
  # DEBUG D#83 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_207]
  # DEBUG registration => D#83
  _205 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_207].builtin_code;
  if (_205 == 101)
    goto <bb 545>;
  else
    goto <bb 5>;

  <bb 5>:
  goto <bb 7>;

  <bb 6>:

  <bb 7>:
  # i_790 = PHI <0(6), i_207(5)>
  # DEBUG i => i_790
  # DEBUG D#83 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_790]
  # DEBUG registration => D#83
  i_207 = i_790 + 1;
  # DEBUG i => i_207
  # DEBUG i => i_207
  if (i_207 >= _781)
    goto <bb 546>;
  else
    goto <bb 4>;

  <bb 8>:
  tflite::ErrorReporter::Report (_189, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 101);
  goto <bb 12>;

  <bb 9>:
  # DEBUG D#6 => &D.238878
  # DEBUG D#7 => ParseAbs
  # DEBUG this => _3
  # DEBUG op => 101
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _210 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_210 != 0B)
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 10>:
  tflite::ErrorReporter::Report (_210, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 101, 128);
  goto <bb 12>;

  <bb 11>:
  # _439 = PHI <_781(547), 0(2)>
  # prephitmp_2006 = PHI <_281(547), 1(2)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_439] = D.238878;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_439].builtin_code = 101;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_2006;
  _195 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_195] = 101;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_195] = ParseAbs;
  _196 = _195 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _196;

  <bb 12>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238878 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238875 = tflite::ops::micro::Register_ADD (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 0
  # DEBUG registration => &D.238875
  # DEBUG parser => ParseAdd
  # DEBUG i => 0
  _823 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_823 == 0)
    goto <bb 21>;
  else
    goto <bb 13>;

  <bb 13>:
  # DEBUG D#82 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#82
  _816 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_816 == 0)
    goto <bb 550>;
  else
    goto <bb 16>;

  <bb 14>:
  # DEBUG D#82 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_235]
  # DEBUG registration => D#82
  _233 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_235].builtin_code;
  if (_233 == 0)
    goto <bb 550>;
  else
    goto <bb 15>;

  <bb 15>:
  goto <bb 17>;

  <bb 16>:

  <bb 17>:
  # i_795 = PHI <0(16), i_235(15)>
  # DEBUG i => i_795
  # DEBUG D#82 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_795]
  # DEBUG registration => D#82
  i_235 = i_795 + 1;
  # DEBUG i => i_235
  # DEBUG i => i_235
  if (i_235 >= _823)
    goto <bb 548>;
  else
    goto <bb 14>;

  <bb 18>:
  tflite::ErrorReporter::Report (_217, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 0);
  goto <bb 22>;

  <bb 19>:
  # DEBUG D#6 => &D.238875
  # DEBUG D#7 => ParseAdd
  # DEBUG this => _3
  # DEBUG op => 0
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _238 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_238 != 0B)
    goto <bb 20>;
  else
    goto <bb 22>;

  <bb 20>:
  tflite::ErrorReporter::Report (_238, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 0, 128);
  goto <bb 22>;

  <bb 21>:
  # _625 = PHI <_823(549), 0(12)>
  # prephitmp_337 = PHI <_695(549), 1(12)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_625] = D.238875;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_625].builtin_code = 0;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_337;
  _223 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_223] = 0;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_223] = ParseAdd;
  _224 = _223 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _224;

  <bb 22>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238875 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238872 = tflite::Register_ADD_N (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 106
  # DEBUG registration => &D.238872
  # DEBUG parser => ParseAddN
  # DEBUG i => 0
  _828 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_828 == 0)
    goto <bb 31>;
  else
    goto <bb 23>;

  <bb 23>:
  # DEBUG D#81 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#81
  _818 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_818 == 106)
    goto <bb 551>;
  else
    goto <bb 26>;

  <bb 24>:
  # DEBUG D#81 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_263]
  # DEBUG registration => D#81
  _261 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_263].builtin_code;
  if (_261 == 106)
    goto <bb 551>;
  else
    goto <bb 25>;

  <bb 25>:
  goto <bb 27>;

  <bb 26>:

  <bb 27>:
  # i_751 = PHI <0(26), i_263(25)>
  # DEBUG i => i_751
  # DEBUG D#81 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_751]
  # DEBUG registration => D#81
  i_263 = i_751 + 1;
  # DEBUG i => i_263
  # DEBUG i => i_263
  if (i_263 >= _828)
    goto <bb 552>;
  else
    goto <bb 24>;

  <bb 28>:
  tflite::ErrorReporter::Report (_245, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 106);
  goto <bb 32>;

  <bb 29>:
  # DEBUG D#6 => &D.238872
  # DEBUG D#7 => ParseAddN
  # DEBUG this => _3
  # DEBUG op => 106
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _266 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_266 != 0B)
    goto <bb 30>;
  else
    goto <bb 32>;

  <bb 30>:
  tflite::ErrorReporter::Report (_266, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 106, 128);
  goto <bb 32>;

  <bb 31>:
  # _438 = PHI <_828(553), 0(22)>
  # prephitmp_1587 = PHI <_449(553), 1(22)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_438] = D.238872;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_438].builtin_code = 106;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1587;
  _251 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_251] = 106;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_251] = ParseAddN;
  _252 = _251 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _252;

  <bb 32>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238872 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238869 = tflite::ops::micro::Register_ARG_MAX (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 56
  # DEBUG registration => &D.238869
  # DEBUG parser => ParseArgMax
  # DEBUG i => 0
  _810 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_810 == 0)
    goto <bb 41>;
  else
    goto <bb 33>;

  <bb 33>:
  # DEBUG D#80 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#80
  _809 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_809 == 56)
    goto <bb 554>;
  else
    goto <bb 36>;

  <bb 34>:
  # DEBUG D#80 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_291]
  # DEBUG registration => D#80
  _289 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_291].builtin_code;
  if (_289 == 56)
    goto <bb 554>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 37>;

  <bb 36>:

  <bb 37>:
  # i_753 = PHI <0(36), i_291(35)>
  # DEBUG i => i_753
  # DEBUG D#80 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_753]
  # DEBUG registration => D#80
  i_291 = i_753 + 1;
  # DEBUG i => i_291
  # DEBUG i => i_291
  if (i_291 >= _810)
    goto <bb 555>;
  else
    goto <bb 34>;

  <bb 38>:
  tflite::ErrorReporter::Report (_273, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 56);
  goto <bb 42>;

  <bb 39>:
  # DEBUG D#6 => &D.238869
  # DEBUG D#7 => ParseArgMax
  # DEBUG this => _3
  # DEBUG op => 56
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _294 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_294 != 0B)
    goto <bb 40>;
  else
    goto <bb 42>;

  <bb 40>:
  tflite::ErrorReporter::Report (_294, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 56, 128);
  goto <bb 42>;

  <bb 41>:
  # _372 = PHI <_810(556), 0(32)>
  # prephitmp_505 = PHI <_1559(556), 1(32)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_372] = D.238869;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_372].builtin_code = 56;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_505;
  _279 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_279] = 56;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_279] = ParseArgMax;
  _280 = _279 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _280;

  <bb 42>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238869 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238866 = tflite::ops::micro::Register_ARG_MIN (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 79, &D.238866, ParseArgMin);
  D.238866 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238863 = tflite::ops::micro::Register_AVERAGE_POOL_2D (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 1, &D.238863, ParsePool);
  D.238863 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238860 = tflite::Register_BATCH_TO_SPACE_ND (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 37
  # DEBUG registration => &D.238860
  # DEBUG parser => ParseBatchToSpaceNd
  # DEBUG i => 0
  _851 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_851 == 0)
    goto <bb 51>;
  else
    goto <bb 43>;

  <bb 43>:
  # DEBUG D#79 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#79
  _854 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_854 == 37)
    goto <bb 559>;
  else
    goto <bb 46>;

  <bb 44>:
  # DEBUG D#79 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_319]
  # DEBUG registration => D#79
  _317 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_319].builtin_code;
  if (_317 == 37)
    goto <bb 559>;
  else
    goto <bb 45>;

  <bb 45>:
  goto <bb 47>;

  <bb 46>:

  <bb 47>:
  # i_772 = PHI <0(46), i_319(45)>
  # DEBUG i => i_772
  # DEBUG D#79 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_772]
  # DEBUG registration => D#79
  i_319 = i_772 + 1;
  # DEBUG i => i_319
  # DEBUG i => i_319
  if (i_319 >= _851)
    goto <bb 557>;
  else
    goto <bb 44>;

  <bb 48>:
  tflite::ErrorReporter::Report (_301, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 37);
  goto <bb 52>;

  <bb 49>:
  # DEBUG D#6 => &D.238860
  # DEBUG D#7 => ParseBatchToSpaceNd
  # DEBUG this => _3
  # DEBUG op => 37
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _322 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_322 != 0B)
    goto <bb 50>;
  else
    goto <bb 52>;

  <bb 50>:
  tflite::ErrorReporter::Report (_322, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 37, 128);
  goto <bb 52>;

  <bb 51>:
  # _400 = PHI <_851(558), 0(42)>
  # prephitmp_745 = PHI <_165(558), 1(42)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_400] = D.238860;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_400].builtin_code = 37;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_745;
  _307 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_307] = 37;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_307] = ParseBatchToSpaceNd;
  _308 = _307 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _308;

  <bb 52>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238860 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238857 = tflite::ops::micro::Register_CEIL (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 104
  # DEBUG registration => &D.238857
  # DEBUG parser => ParseCeil
  # DEBUG i => 0
  _2103 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2103 == 0)
    goto <bb 61>;
  else
    goto <bb 53>;

  <bb 53>:
  # DEBUG D#78 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#78
  _856 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_856 == 104)
    goto <bb 560>;
  else
    goto <bb 56>;

  <bb 54>:
  # DEBUG D#78 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_347]
  # DEBUG registration => D#78
  _345 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_347].builtin_code;
  if (_345 == 104)
    goto <bb 560>;
  else
    goto <bb 55>;

  <bb 55>:
  goto <bb 57>;

  <bb 56>:

  <bb 57>:
  # i_767 = PHI <0(56), i_347(55)>
  # DEBUG i => i_767
  # DEBUG D#78 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_767]
  # DEBUG registration => D#78
  i_347 = i_767 + 1;
  # DEBUG i => i_347
  # DEBUG i => i_347
  if (i_347 >= _2103)
    goto <bb 561>;
  else
    goto <bb 54>;

  <bb 58>:
  tflite::ErrorReporter::Report (_329, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 104);
  goto <bb 62>;

  <bb 59>:
  # DEBUG D#6 => &D.238857
  # DEBUG D#7 => ParseCeil
  # DEBUG this => _3
  # DEBUG op => 104
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _350 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_350 != 0B)
    goto <bb 60>;
  else
    goto <bb 62>;

  <bb 60>:
  tflite::ErrorReporter::Report (_350, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 104, 128);
  goto <bb 62>;

  <bb 61>:
  # _410 = PHI <_2103(562), 0(52)>
  # prephitmp_663 = PHI <_2061(562), 1(52)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_410] = D.238857;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_410].builtin_code = 104;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_663;
  _335 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_335] = 104;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_335] = ParseCeil;
  _336 = _335 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _336;

  <bb 62>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238857 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238854 = tflite::ops::micro::Register_CONCATENATION (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 2
  # DEBUG registration => &D.238854
  # DEBUG parser => ParseConcatenation
  # DEBUG i => 0
  _835 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_835 == 0)
    goto <bb 71>;
  else
    goto <bb 63>;

  <bb 63>:
  # DEBUG D#77 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#77
  _838 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_838 == 2)
    goto <bb 563>;
  else
    goto <bb 66>;

  <bb 64>:
  # DEBUG D#77 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_375]
  # DEBUG registration => D#77
  _373 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_375].builtin_code;
  if (_373 == 2)
    goto <bb 563>;
  else
    goto <bb 65>;

  <bb 65>:
  goto <bb 67>;

  <bb 66>:

  <bb 67>:
  # i_760 = PHI <0(66), i_375(65)>
  # DEBUG i => i_760
  # DEBUG D#77 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_760]
  # DEBUG registration => D#77
  i_375 = i_760 + 1;
  # DEBUG i => i_375
  # DEBUG i => i_375
  if (i_375 >= _835)
    goto <bb 564>;
  else
    goto <bb 64>;

  <bb 68>:
  tflite::ErrorReporter::Report (_357, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 2);
  goto <bb 72>;

  <bb 69>:
  # DEBUG D#6 => &D.238854
  # DEBUG D#7 => ParseConcatenation
  # DEBUG this => _3
  # DEBUG op => 2
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _378 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_378 != 0B)
    goto <bb 70>;
  else
    goto <bb 72>;

  <bb 70>:
  tflite::ErrorReporter::Report (_378, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 2, 128);
  goto <bb 72>;

  <bb 71>:
  # _411 = PHI <_835(565), 0(62)>
  # prephitmp_1503 = PHI <_758(565), 1(62)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_411] = D.238854;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_411].builtin_code = 2;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1503;
  _363 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_363] = 2;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_363] = ParseConcatenation;
  _364 = _363 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _364;

  <bb 72>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238854 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238851 = tflite::Register_CONV_2D (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 3
  # DEBUG registration => &D.238851
  # DEBUG parser => ParseConv2D
  # DEBUG i => 0
  _2115 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2115 == 0)
    goto <bb 81>;
  else
    goto <bb 73>;

  <bb 73>:
  # DEBUG D#76 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#76
  _879 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_879 == 3)
    goto <bb 566>;
  else
    goto <bb 76>;

  <bb 74>:
  # DEBUG D#76 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_403]
  # DEBUG registration => D#76
  _401 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_403].builtin_code;
  if (_401 == 3)
    goto <bb 566>;
  else
    goto <bb 75>;

  <bb 75>:
  goto <bb 77>;

  <bb 76>:

  <bb 77>:
  # i_726 = PHI <0(76), i_403(75)>
  # DEBUG i => i_726
  # DEBUG D#76 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_726]
  # DEBUG registration => D#76
  i_403 = i_726 + 1;
  # DEBUG i => i_403
  # DEBUG i => i_403
  if (i_403 >= _2115)
    goto <bb 567>;
  else
    goto <bb 74>;

  <bb 78>:
  tflite::ErrorReporter::Report (_385, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 3);
  goto <bb 82>;

  <bb 79>:
  # DEBUG D#6 => &D.238851
  # DEBUG D#7 => ParseConv2D
  # DEBUG this => _3
  # DEBUG op => 3
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _406 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_406 != 0B)
    goto <bb 80>;
  else
    goto <bb 82>;

  <bb 80>:
  tflite::ErrorReporter::Report (_406, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 3, 128);
  goto <bb 82>;

  <bb 81>:
  # _355 = PHI <_2115(568), 0(72)>
  # prephitmp_814 = PHI <_1475(568), 1(72)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_355] = D.238851;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_355].builtin_code = 3;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_814;
  _391 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_391] = 3;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_391] = ParseConv2D;
  _392 = _391 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _392;

  <bb 82>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238851 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238848 = tflite::ops::micro::Register_COS (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 108, &D.238848, ParseCos);
  D.238848 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238845 = tflite::Register_CUMSUM (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 128
  # DEBUG registration => &D.238845
  # DEBUG parser => ParseCumsum
  # DEBUG i => 0
  _865 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_865 == 0)
    goto <bb 91>;
  else
    goto <bb 83>;

  <bb 83>:
  # DEBUG D#75 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#75
  _885 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_885 == 128)
    goto <bb 571>;
  else
    goto <bb 86>;

  <bb 84>:
  # DEBUG D#75 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_431]
  # DEBUG registration => D#75
  _429 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_431].builtin_code;
  if (_429 == 128)
    goto <bb 571>;
  else
    goto <bb 85>;

  <bb 85>:
  goto <bb 87>;

  <bb 86>:

  <bb 87>:
  # i_2047 = PHI <0(86), i_431(85)>
  # DEBUG i => i_2047
  # DEBUG D#75 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_2047]
  # DEBUG registration => D#75
  i_431 = i_2047 + 1;
  # DEBUG i => i_431
  # DEBUG i => i_431
  if (i_431 >= _865)
    goto <bb 569>;
  else
    goto <bb 84>;

  <bb 88>:
  tflite::ErrorReporter::Report (_413, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 128);
  goto <bb 92>;

  <bb 89>:
  # DEBUG D#6 => &D.238845
  # DEBUG D#7 => ParseCumsum
  # DEBUG this => _3
  # DEBUG op => 128
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _434 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_434 != 0B)
    goto <bb 90>;
  else
    goto <bb 92>;

  <bb 90>:
  tflite::ErrorReporter::Report (_434, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 128, 128);
  goto <bb 92>;

  <bb 91>:
  # _344 = PHI <_865(570), 0(82)>
  # prephitmp_2089 = PHI <_926(570), 1(82)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_344] = D.238845;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_344].builtin_code = 128;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_2089;
  _419 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_419] = 128;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_419] = ParseCumsum;
  _420 = _419 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _420;

  <bb 92>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238845 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238842 = tflite::Register_DEPTH_TO_SPACE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 5
  # DEBUG registration => &D.238842
  # DEBUG parser => ParseDepthToSpace
  # DEBUG i => 0
  _900 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_900 == 0)
    goto <bb 101>;
  else
    goto <bb 93>;

  <bb 93>:
  # DEBUG D#74 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#74
  _863 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_863 == 5)
    goto <bb 572>;
  else
    goto <bb 96>;

  <bb 94>:
  # DEBUG D#74 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_459]
  # DEBUG registration => D#74
  _457 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_459].builtin_code;
  if (_457 == 5)
    goto <bb 572>;
  else
    goto <bb 95>;

  <bb 95>:
  goto <bb 97>;

  <bb 96>:

  <bb 97>:
  # i_2045 = PHI <0(96), i_459(95)>
  # DEBUG i => i_2045
  # DEBUG D#74 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_2045]
  # DEBUG registration => D#74
  i_459 = i_2045 + 1;
  # DEBUG i => i_459
  # DEBUG i => i_459
  if (i_459 >= _900)
    goto <bb 573>;
  else
    goto <bb 94>;

  <bb 98>:
  tflite::ErrorReporter::Report (_441, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 5);
  goto <bb 102>;

  <bb 99>:
  # DEBUG D#6 => &D.238842
  # DEBUG D#7 => ParseDepthToSpace
  # DEBUG this => _3
  # DEBUG op => 5
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _462 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_462 != 0B)
    goto <bb 100>;
  else
    goto <bb 102>;

  <bb 100>:
  tflite::ErrorReporter::Report (_462, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 5, 128);
  goto <bb 102>;

  <bb 101>:
  # _383 = PHI <_900(574), 0(92)>
  # prephitmp_982 = PHI <_857(574), 1(92)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_383] = D.238842;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_383].builtin_code = 5;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_982;
  _447 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_447] = 5;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_447] = ParseDepthToSpace;
  _448 = _447 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _448;

  <bb 102>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238842 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238839 = tflite::Register_DEPTHWISE_CONV_2D (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 4
  # DEBUG registration => &D.238839
  # DEBUG parser => ParseDepthwiseConv2D
  # DEBUG i => 0
  _902 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_902 == 0)
    goto <bb 111>;
  else
    goto <bb 103>;

  <bb 103>:
  # DEBUG D#73 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#73
  _2129 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2129 == 4)
    goto <bb 575>;
  else
    goto <bb 106>;

  <bb 104>:
  # DEBUG D#73 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_487]
  # DEBUG registration => D#73
  _485 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_487].builtin_code;
  if (_485 == 4)
    goto <bb 575>;
  else
    goto <bb 105>;

  <bb 105>:
  goto <bb 107>;

  <bb 106>:

  <bb 107>:
  # i_742 = PHI <0(106), i_487(105)>
  # DEBUG i => i_742
  # DEBUG D#73 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_742]
  # DEBUG registration => D#73
  i_487 = i_742 + 1;
  # DEBUG i => i_487
  # DEBUG i => i_487
  if (i_487 >= _902)
    goto <bb 576>;
  else
    goto <bb 104>;

  <bb 108>:
  tflite::ErrorReporter::Report (_469, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 4);
  goto <bb 112>;

  <bb 109>:
  # DEBUG D#6 => &D.238839
  # DEBUG D#7 => ParseDepthwiseConv2D
  # DEBUG this => _3
  # DEBUG op => 4
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _490 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_490 != 0B)
    goto <bb 110>;
  else
    goto <bb 112>;

  <bb 110>:
  tflite::ErrorReporter::Report (_490, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 4, 128);
  goto <bb 112>;

  <bb 111>:
  # _382 = PHI <_902(577), 0(102)>
  # prephitmp_1419 = PHI <_1094(577), 1(102)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_382] = D.238839;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_382].builtin_code = 4;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1419;
  _475 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_475] = 4;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_475] = ParseDepthwiseConv2D;
  _476 = _475 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _476;

  <bb 112>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238839 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238836 = tflite::ops::micro::Register_DEQUANTIZE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 6
  # DEBUG registration => &D.238836
  # DEBUG parser => ParseDequantize
  # DEBUG i => 0
  _893 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_893 == 0)
    goto <bb 121>;
  else
    goto <bb 113>;

  <bb 113>:
  # DEBUG D#72 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#72
  _2131 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2131 == 6)
    goto <bb 580>;
  else
    goto <bb 116>;

  <bb 114>:
  # DEBUG D#72 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_515]
  # DEBUG registration => D#72
  _513 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_515].builtin_code;
  if (_513 == 6)
    goto <bb 580>;
  else
    goto <bb 115>;

  <bb 115>:
  goto <bb 117>;

  <bb 116>:

  <bb 117>:
  # i_154 = PHI <0(116), i_515(115)>
  # DEBUG i => i_154
  # DEBUG D#72 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_154]
  # DEBUG registration => D#72
  i_515 = i_154 + 1;
  # DEBUG i => i_515
  # DEBUG i => i_515
  if (i_515 >= _893)
    goto <bb 578>;
  else
    goto <bb 114>;

  <bb 118>:
  tflite::ErrorReporter::Report (_497, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 6);
  goto <bb 122>;

  <bb 119>:
  # DEBUG D#6 => &D.238836
  # DEBUG D#7 => ParseDequantize
  # DEBUG this => _3
  # DEBUG op => 6
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _518 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_518 != 0B)
    goto <bb 120>;
  else
    goto <bb 122>;

  <bb 120>:
  tflite::ErrorReporter::Report (_518, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 6, 128);
  goto <bb 122>;

  <bb 121>:
  # _186 = PHI <_893(579), 0(112)>
  # prephitmp_1150 = PHI <_1391(579), 1(112)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_186] = D.238836;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_186].builtin_code = 6;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1150;
  _503 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_503] = 6;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_503] = ParseDequantize;
  _504 = _503 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _504;

  <bb 122>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238836 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  _168 = tflite::Register_DETECTION_POSTPROCESS ();
  # DEBUG this => _3
  # DEBUG name => "TFLite_Detection_PostProcess"
  # DEBUG registration => _168
  _521 = MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_521 > 127)
    goto <bb 124>;
  else
    goto <bb 123>;

  <bb 123>:
  # DEBUG i => 0
  if (_521 == 0)
    goto <bb 582>;
  else
    goto <bb 126>;

  <bb 124>:
  _522 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_522 != 0B)
    goto <bb 125>;
  else
    goto <bb 132>;

  <bb 125>:
  tflite::ErrorReporter::Report (_522, "Couldn\'t register custom op \'%s\', resolver size is too small (%d)", "TFLite_Detection_PostProcess", 128);
  goto <bb 132>;

  <bb 126>:

  <bb 127>:
  # i_153 = PHI <0(126), i_539(130)>
  # DEBUG i => i_153
  # DEBUG D#70 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_153]
  # DEBUG registration => D#70
  _536 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_153].builtin_code;
  if (_536 == 32)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  _537 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_153].custom_name;
  _538 = strcmp (_537, "TFLite_Detection_PostProcess");
  if (_538 == 0)
    goto <bb 581>;
  else
    goto <bb 129>;

  <bb 129>:
  i_539 = i_153 + 1;
  # DEBUG i => i_539
  # DEBUG i => i_539
  if (_521 <= i_539)
    goto <bb 582>;
  else
    goto <bb 130>;

  <bb 130>:
  goto <bb 127>;

  <bb 131>:
  tflite::ErrorReporter::Report (_526, "Calling AddCustom for the same op more than once is not supported (Op: %s).", "TFLite_Detection_PostProcess");

  <bb 132>:
  # DEBUG this => NULL
  # DEBUG name => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238831 = tflite::Register_ELU (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 111
  # DEBUG registration => &D.238831
  # DEBUG parser => ParseElu
  # DEBUG i => 0
  _2143 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2143 == 0)
    goto <bb 141>;
  else
    goto <bb 133>;

  <bb 133>:
  # DEBUG D#71 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#71
  _935 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_935 == 111)
    goto <bb 583>;
  else
    goto <bb 136>;

  <bb 134>:
  # DEBUG D#71 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_566]
  # DEBUG registration => D#71
  _564 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_566].builtin_code;
  if (_564 == 111)
    goto <bb 583>;
  else
    goto <bb 135>;

  <bb 135>:
  goto <bb 137>;

  <bb 136>:

  <bb 137>:
  # i_717 = PHI <0(136), i_566(135)>
  # DEBUG i => i_717
  # DEBUG D#71 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_717]
  # DEBUG registration => D#71
  i_566 = i_717 + 1;
  # DEBUG i => i_566
  # DEBUG i => i_566
  if (i_566 >= _2143)
    goto <bb 584>;
  else
    goto <bb 134>;

  <bb 138>:
  tflite::ErrorReporter::Report (_548, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 111);
  goto <bb 142>;

  <bb 139>:
  # DEBUG D#6 => &D.238831
  # DEBUG D#7 => ParseElu
  # DEBUG this => _3
  # DEBUG op => 111
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _569 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_569 != 0B)
    goto <bb 140>;
  else
    goto <bb 142>;

  <bb 140>:
  tflite::ErrorReporter::Report (_569, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 111, 128);
  goto <bb 142>;

  <bb 141>:
  # _624 = PHI <_2143(585), 0(132)>
  # prephitmp_891 = PHI <_1262(585), 1(132)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_624] = D.238831;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_624].builtin_code = 111;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_891;
  _554 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_554] = 111;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_554] = ParseElu;
  _555 = _554 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _555;

  <bb 142>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238831 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238828 = tflite::ops::micro::Register_EQUAL (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 71
  # DEBUG registration => &D.238828
  # DEBUG parser => ParseEqual
  # DEBUG i => 0
  _941 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_941 == 0)
    goto <bb 151>;
  else
    goto <bb 143>;

  <bb 143>:
  # DEBUG D#69 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#69
  _940 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_940 == 71)
    goto <bb 586>;
  else
    goto <bb 146>;

  <bb 144>:
  # DEBUG D#69 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_594]
  # DEBUG registration => D#69
  _592 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_594].builtin_code;
  if (_592 == 71)
    goto <bb 586>;
  else
    goto <bb 145>;

  <bb 145>:
  goto <bb 147>;

  <bb 146>:

  <bb 147>:
  # i_711 = PHI <0(146), i_594(145)>
  # DEBUG i => i_711
  # DEBUG D#69 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_711]
  # DEBUG registration => D#69
  i_594 = i_711 + 1;
  # DEBUG i => i_594
  # DEBUG i => i_594
  if (i_594 >= _941)
    goto <bb 587>;
  else
    goto <bb 144>;

  <bb 148>:
  tflite::ErrorReporter::Report (_576, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 71);
  goto <bb 152>;

  <bb 149>:
  # DEBUG D#6 => &D.238828
  # DEBUG D#7 => ParseEqual
  # DEBUG this => _3
  # DEBUG op => 71
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _597 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_597 != 0B)
    goto <bb 150>;
  else
    goto <bb 152>;

  <bb 150>:
  tflite::ErrorReporter::Report (_597, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 71, 128);
  goto <bb 152>;

  <bb 151>:
  # _782 = PHI <_941(588), 0(142)>
  # prephitmp_110 = PHI <_2159(588), 1(142)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_782] = D.238828;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_782].builtin_code = 71;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_110;
  _582 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_582] = 71;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_582] = ParseEqual;
  _583 = _582 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _583;

  <bb 152>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238828 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  _162 = tflite::Register_ETHOSU ();
  # DEBUG registration => _162
  if (_162 != 0B)
    goto <bb 154>;
  else
    goto <bb 153>;

  <bb 153>:
  goto <bb 164>;

  <bb 154>:
  _163 = tflite::GetString_ETHOSU ();
  # DEBUG this => _3
  # DEBUG name => _163
  # DEBUG registration => _162
  _600 = MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_600 > 127)
    goto <bb 156>;
  else
    goto <bb 155>;

  <bb 155>:
  # DEBUG i => 0
  if (_600 == 0)
    goto <bb 590>;
  else
    goto <bb 158>;

  <bb 156>:
  _601 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_601 != 0B)
    goto <bb 157>;
  else
    goto <bb 153>;

  <bb 157>:
  tflite::ErrorReporter::Report (_601, "Couldn\'t register custom op \'%s\', resolver size is too small (%d)", _163, 128);
  goto <bb 164>;

  <bb 158>:

  <bb 159>:
  # i_684 = PHI <0(158), i_618(162)>
  # DEBUG i => i_684
  # DEBUG D#67 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_684]
  # DEBUG registration => D#67
  _615 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_684].builtin_code;
  if (_615 == 32)
    goto <bb 160>;
  else
    goto <bb 161>;

  <bb 160>:
  _616 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_684].custom_name;
  _617 = strcmp (_616, _163);
  if (_617 == 0)
    goto <bb 589>;
  else
    goto <bb 161>;

  <bb 161>:
  i_618 = i_684 + 1;
  # DEBUG i => i_618
  # DEBUG i => i_618
  if (_600 <= i_618)
    goto <bb 590>;
  else
    goto <bb 162>;

  <bb 162>:
  goto <bb 159>;

  <bb 163>:
  tflite::ErrorReporter::Report (_605, "Calling AddCustom for the same op more than once is not supported (Op: %s).", _163);

  <bb 164>:
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238822 = tflite::ops::micro::Register_FLOOR (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 8
  # DEBUG registration => &D.238822
  # DEBUG parser => ParseFloor
  # DEBUG i => 0
  _956 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_956 == 0)
    goto <bb 173>;
  else
    goto <bb 165>;

  <bb 165>:
  # DEBUG D#68 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#68
  _919 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_919 == 8)
    goto <bb 593>;
  else
    goto <bb 168>;

  <bb 166>:
  # DEBUG D#68 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_645]
  # DEBUG registration => D#68
  _643 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_645].builtin_code;
  if (_643 == 8)
    goto <bb 593>;
  else
    goto <bb 167>;

  <bb 167>:
  goto <bb 169>;

  <bb 168>:

  <bb 169>:
  # i_2022 = PHI <0(168), i_645(167)>
  # DEBUG i => i_2022
  # DEBUG D#68 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_2022]
  # DEBUG registration => D#68
  i_645 = i_2022 + 1;
  # DEBUG i => i_645
  # DEBUG i => i_645
  if (i_645 >= _956)
    goto <bb 591>;
  else
    goto <bb 166>;

  <bb 170>:
  tflite::ErrorReporter::Report (_627, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 8);
  goto <bb 174>;

  <bb 171>:
  # DEBUG D#6 => &D.238822
  # DEBUG D#7 => ParseFloor
  # DEBUG this => _3
  # DEBUG op => 8
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _648 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_648 != 0B)
    goto <bb 172>;
  else
    goto <bb 174>;

  <bb 172>:
  tflite::ErrorReporter::Report (_648, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 8, 128);
  goto <bb 174>;

  <bb 173>:
  # _327 = PHI <_956(592), 0(164)>
  # prephitmp_1413 = PHI <_984(592), 1(164)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_327] = D.238822;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_327].builtin_code = 8;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1413;
  _633 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_633] = 8;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_633] = ParseFloor;
  _634 = _633 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _634;

  <bb 174>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238822 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238819 = tflite::Register_FLOOR_DIV (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 90
  # DEBUG registration => &D.238819
  # DEBUG parser => ParseFloorDiv
  # DEBUG i => 0
  _958 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_958 == 0)
    goto <bb 183>;
  else
    goto <bb 175>;

  <bb 175>:
  # DEBUG D#66 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#66
  _2161 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2161 == 90)
    goto <bb 594>;
  else
    goto <bb 178>;

  <bb 176>:
  # DEBUG D#66 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_673]
  # DEBUG registration => D#66
  _671 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_673].builtin_code;
  if (_671 == 90)
    goto <bb 594>;
  else
    goto <bb 177>;

  <bb 177>:
  goto <bb 179>;

  <bb 178>:

  <bb 179>:
  # i_705 = PHI <0(178), i_673(177)>
  # DEBUG i => i_705
  # DEBUG D#66 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_705]
  # DEBUG registration => D#66
  i_673 = i_705 + 1;
  # DEBUG i => i_673
  # DEBUG i => i_673
  if (i_673 >= _958)
    goto <bb 595>;
  else
    goto <bb 176>;

  <bb 180>:
  tflite::ErrorReporter::Report (_655, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 90);
  goto <bb 184>;

  <bb 181>:
  # DEBUG D#6 => &D.238819
  # DEBUG D#7 => ParseFloorDiv
  # DEBUG this => _3
  # DEBUG op => 90
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _676 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_676 != 0B)
    goto <bb 182>;
  else
    goto <bb 184>;

  <bb 182>:
  tflite::ErrorReporter::Report (_676, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 90, 128);
  goto <bb 184>;

  <bb 183>:
  # _354 = PHI <_958(596), 0(174)>
  # prephitmp_1307 = PHI <_1525(596), 1(174)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_354] = D.238819;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_354].builtin_code = 90;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1307;
  _661 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_661] = 90;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_661] = ParseFloorDiv;
  _662 = _661 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _662;

  <bb 184>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238819 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238816 = tflite::Register_FLOOR_MOD (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 95
  # DEBUG registration => &D.238816
  # DEBUG parser => ParseFloorMod
  # DEBUG i => 0
  _949 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_949 == 0)
    goto <bb 193>;
  else
    goto <bb 185>;

  <bb 185>:
  # DEBUG D#65 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#65
  _969 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_969 == 95)
    goto <bb 597>;
  else
    goto <bb 188>;

  <bb 186>:
  # DEBUG D#65 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_701]
  # DEBUG registration => D#65
  _699 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_701].builtin_code;
  if (_699 == 95)
    goto <bb 597>;
  else
    goto <bb 187>;

  <bb 187>:
  goto <bb 189>;

  <bb 188>:

  <bb 189>:
  # i_700 = PHI <0(188), i_701(187)>
  # DEBUG i => i_700
  # DEBUG D#65 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_700]
  # DEBUG registration => D#65
  i_701 = i_700 + 1;
  # DEBUG i => i_701
  # DEBUG i => i_701
  if (i_701 >= _949)
    goto <bb 598>;
  else
    goto <bb 186>;

  <bb 190>:
  tflite::ErrorReporter::Report (_683, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 95);
  goto <bb 194>;

  <bb 191>:
  # DEBUG D#6 => &D.238816
  # DEBUG D#7 => ParseFloorMod
  # DEBUG this => _3
  # DEBUG op => 95
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _704 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_704 != 0B)
    goto <bb 192>;
  else
    goto <bb 194>;

  <bb 192>:
  tflite::ErrorReporter::Report (_704, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 95, 128);
  goto <bb 194>;

  <bb 193>:
  # _591 = PHI <_949(599), 0(184)>
  # prephitmp_1581 = PHI <_1296(599), 1(184)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_591] = D.238816;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_591].builtin_code = 95;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1581;
  _689 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_689] = 95;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_689] = ParseFloorMod;
  _690 = _689 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _690;

  <bb 194>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238816 ={v} {CLOBBER};
  # DEBUG this => NULL
  D.181689 = tflite::Register_FULLY_CONNECTED (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG registration => &D.181689
  # DEBUG this => _3
  # DEBUG op => 9
  # DEBUG registration => &D.181689
  # DEBUG parser => ParseFullyConnected
  # DEBUG this => _3
  # DEBUG op => 9
  # DEBUG i => 0
  _994 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_994 == 0)
    goto <bb 203>;
  else
    goto <bb 195>;

  <bb 195>:
  # DEBUG D#64 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#64
  _947 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_947 == 9)
    goto <bb 602>;
  else
    goto <bb 198>;

  <bb 196>:
  # DEBUG D#64 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_712]
  # DEBUG registration => D#64
  _710 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_712].builtin_code;
  if (_710 == 9)
    goto <bb 602>;
  else
    goto <bb 197>;

  <bb 197>:
  goto <bb 199>;

  <bb 198>:

  <bb 199>:
  # i_693 = PHI <0(198), i_712(197)>
  # DEBUG i => i_693
  # DEBUG D#64 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_693]
  # DEBUG registration => D#64
  i_712 = i_693 + 1;
  # DEBUG i => i_712
  # DEBUG i => i_712
  if (i_712 >= _994)
    goto <bb 600>;
  else
    goto <bb 196>;

  <bb 200>:
  tflite::ErrorReporter::Report (_150, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 9);
  goto <bb 204>;

  <bb 201>:
  # DEBUG D#6 => &D.181689
  # DEBUG D#7 => ParseFullyConnected
  # DEBUG this => _3
  # DEBUG op => 9
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _715 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_715 != 0B)
    goto <bb 202>;
  else
    goto <bb 204>;

  <bb 202>:
  tflite::ErrorReporter::Report (_715, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 9, 128);
  goto <bb 204>;

  <bb 203>:
  # _316 = PHI <_994(601), 0(194)>
  # prephitmp_1047 = PHI <_639(601), 1(194)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_316] = D.181689;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_316].builtin_code = 9;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1047;
  _156 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_156] = 9;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_156] = ParseFullyConnected;
  _157 = _156 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _157;

  <bb 204>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.181689 ={v} {CLOBBER};
  # DEBUG this => _3
  D.238808 = tflite::ops::micro::Register_GREATER (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 61
  # DEBUG registration => &D.238808
  # DEBUG parser => ParseGreater
  # DEBUG i => 0
  _996 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_996 == 0)
    goto <bb 213>;
  else
    goto <bb 205>;

  <bb 205>:
  # DEBUG D#63 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#63
  _2175 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2175 == 61)
    goto <bb 603>;
  else
    goto <bb 208>;

  <bb 206>:
  # DEBUG D#63 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_740]
  # DEBUG registration => D#63
  _738 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_740].builtin_code;
  if (_738 == 61)
    goto <bb 603>;
  else
    goto <bb 207>;

  <bb 207>:
  goto <bb 209>;

  <bb 208>:

  <bb 209>:
  # i_658 = PHI <0(208), i_740(207)>
  # DEBUG i => i_658
  # DEBUG D#63 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_658]
  # DEBUG registration => D#63
  i_740 = i_658 + 1;
  # DEBUG i => i_740
  # DEBUG i => i_740
  if (i_740 >= _996)
    goto <bb 604>;
  else
    goto <bb 206>;

  <bb 210>:
  tflite::ErrorReporter::Report (_722, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 61);
  goto <bb 214>;

  <bb 211>:
  # DEBUG D#6 => &D.238808
  # DEBUG D#7 => ParseGreater
  # DEBUG this => _3
  # DEBUG op => 61
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _743 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_743 != 0B)
    goto <bb 212>;
  else
    goto <bb 214>;

  <bb 212>:
  tflite::ErrorReporter::Report (_743, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 61, 128);
  goto <bb 214>;

  <bb 213>:
  # _179 = PHI <_996(605), 0(204)>
  # prephitmp_1994 = PHI <_1078(605), 1(204)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_179] = D.238808;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_179].builtin_code = 61;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1994;
  _728 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_728] = 61;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_728] = ParseGreater;
  _729 = _728 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _729;

  <bb 214>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238808 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238805 = tflite::ops::micro::Register_GREATER_EQUAL (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 62
  # DEBUG registration => &D.238805
  # DEBUG parser => ParseGreaterEqual
  # DEBUG i => 0
  _978 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_978 == 0)
    goto <bb 223>;
  else
    goto <bb 215>;

  <bb 215>:
  # DEBUG D#62 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#62
  _977 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_977 == 62)
    goto <bb 606>;
  else
    goto <bb 218>;

  <bb 216>:
  # DEBUG D#62 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_768]
  # DEBUG registration => D#62
  _766 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_768].builtin_code;
  if (_766 == 62)
    goto <bb 606>;
  else
    goto <bb 217>;

  <bb 217>:
  goto <bb 219>;

  <bb 218>:

  <bb 219>:
  # i_677 = PHI <0(218), i_768(217)>
  # DEBUG i => i_677
  # DEBUG D#62 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_677]
  # DEBUG registration => D#62
  i_768 = i_677 + 1;
  # DEBUG i => i_768
  # DEBUG i => i_768
  if (i_768 >= _978)
    goto <bb 607>;
  else
    goto <bb 216>;

  <bb 220>:
  tflite::ErrorReporter::Report (_750, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 62);
  goto <bb 224>;

  <bb 221>:
  # DEBUG D#6 => &D.238805
  # DEBUG D#7 => ParseGreaterEqual
  # DEBUG this => _3
  # DEBUG op => 62
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _771 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_771 != 0B)
    goto <bb 222>;
  else
    goto <bb 224>;

  <bb 222>:
  tflite::ErrorReporter::Report (_771, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 62, 128);
  goto <bb 224>;

  <bb 223>:
  # _326 = PHI <_978(608), 0(214)>
  # prephitmp_1240 = PHI <_675(608), 1(214)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_326] = D.238805;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_326].builtin_code = 62;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1240;
  _756 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_756] = 62;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_756] = ParseGreaterEqual;
  _757 = _756 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _757;

  <bb 224>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238805 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238802 = tflite::ops::micro::Register_HARD_SWISH (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 117
  # DEBUG registration => &D.238802
  # DEBUG parser => ParseHardSwish
  # DEBUG i => 0
  _1019 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1019 == 0)
    goto <bb 233>;
  else
    goto <bb 225>;

  <bb 225>:
  # DEBUG D#61 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#61
  _1012 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1012 == 117)
    goto <bb 609>;
  else
    goto <bb 228>;

  <bb 226>:
  # DEBUG D#61 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_796]
  # DEBUG registration => D#61
  _794 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_796].builtin_code;
  if (_794 == 117)
    goto <bb 609>;
  else
    goto <bb 227>;

  <bb 227>:
  goto <bb 229>;

  <bb 228>:

  <bb 229>:
  # i_672 = PHI <0(228), i_796(227)>
  # DEBUG i => i_672
  # DEBUG D#61 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_672]
  # DEBUG registration => D#61
  i_796 = i_672 + 1;
  # DEBUG i => i_796
  # DEBUG i => i_796
  if (i_796 >= _1019)
    goto <bb 610>;
  else
    goto <bb 226>;

  <bb 230>:
  tflite::ErrorReporter::Report (_778, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 117);
  goto <bb 234>;

  <bb 231>:
  # DEBUG D#6 => &D.238802
  # DEBUG D#7 => ParseHardSwish
  # DEBUG this => _3
  # DEBUG op => 117
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _799 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_799 != 0B)
    goto <bb 232>;
  else
    goto <bb 234>;

  <bb 232>:
  tflite::ErrorReporter::Report (_799, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 117, 128);
  goto <bb 234>;

  <bb 233>:
  # _299 = PHI <_1019(611), 0(224)>
  # prephitmp_667 = PHI <_1212(611), 1(224)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_299] = D.238802;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_299].builtin_code = 117;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_667;
  _784 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_784] = 117;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_784] = ParseHardSwish;
  _785 = _784 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _785;

  <bb 234>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238802 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238799 = tflite::ops::micro::Register_L2_NORMALIZATION (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 11
  # DEBUG registration => &D.238799
  # DEBUG parser => ParseL2Normalization
  # DEBUG i => 0
  _1025 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1025 == 0)
    goto <bb 243>;
  else
    goto <bb 235>;

  <bb 235>:
  # DEBUG D#60 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#60
  _1014 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1014 == 11)
    goto <bb 614>;
  else
    goto <bb 238>;

  <bb 236>:
  # DEBUG D#60 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_824]
  # DEBUG registration => D#60
  _822 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_824].builtin_code;
  if (_822 == 11)
    goto <bb 614>;
  else
    goto <bb 237>;

  <bb 237>:
  goto <bb 239>;

  <bb 238>:

  <bb 239>:
  # i_665 = PHI <0(238), i_824(237)>
  # DEBUG i => i_665
  # DEBUG D#60 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_665]
  # DEBUG registration => D#60
  i_824 = i_665 + 1;
  # DEBUG i => i_824
  # DEBUG i => i_824
  if (i_824 >= _1025)
    goto <bb 612>;
  else
    goto <bb 236>;

  <bb 240>:
  tflite::ErrorReporter::Report (_806, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 11);
  goto <bb 244>;

  <bb 241>:
  # DEBUG D#6 => &D.238799
  # DEBUG D#7 => ParseL2Normalization
  # DEBUG this => _3
  # DEBUG op => 11
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _827 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_827 != 0B)
    goto <bb 242>;
  else
    goto <bb 244>;

  <bb 242>:
  tflite::ErrorReporter::Report (_827, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 11, 128);
  goto <bb 244>;

  <bb 243>:
  # _288 = PHI <_1025(613), 0(234)>
  # prephitmp_1136 = PHI <_656(613), 1(234)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_288] = D.238799;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_288].builtin_code = 11;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1136;
  _812 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_812] = 11;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_812] = ParseL2Normalization;
  _813 = _812 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _813;

  <bb 244>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238799 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238796 = tflite::Register_L2_POOL_2D (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 12
  # DEBUG registration => &D.238796
  # DEBUG parser => ParsePool
  # DEBUG i => 0
  _1003 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1003 == 0)
    goto <bb 253>;
  else
    goto <bb 245>;

  <bb 245>:
  # DEBUG D#59 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#59
  _1006 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1006 == 12)
    goto <bb 615>;
  else
    goto <bb 248>;

  <bb 246>:
  # DEBUG D#59 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_852]
  # DEBUG registration => D#59
  _850 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_852].builtin_code;
  if (_850 == 12)
    goto <bb 615>;
  else
    goto <bb 247>;

  <bb 247>:
  goto <bb 249>;

  <bb 248>:

  <bb 249>:
  # i_631 = PHI <0(248), i_852(247)>
  # DEBUG i => i_631
  # DEBUG D#59 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_631]
  # DEBUG registration => D#59
  i_852 = i_631 + 1;
  # DEBUG i => i_852
  # DEBUG i => i_852
  if (i_852 >= _1003)
    goto <bb 616>;
  else
    goto <bb 246>;

  <bb 250>:
  tflite::ErrorReporter::Report (_834, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 12);
  goto <bb 254>;

  <bb 251>:
  # DEBUG D#6 => &D.238796
  # DEBUG D#7 => ParsePool
  # DEBUG this => _3
  # DEBUG op => 12
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _855 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_855 != 0B)
    goto <bb 252>;
  else
    goto <bb 254>;

  <bb 252>:
  tflite::ErrorReporter::Report (_855, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 12, 128);
  goto <bb 254>;

  <bb 253>:
  # _260 = PHI <_1003(617), 0(244)>
  # prephitmp_703 = PHI <_1165(617), 1(244)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_260] = D.238796;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_260].builtin_code = 12;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_703;
  _840 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_840] = 12;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_840] = ParsePool;
  _841 = _840 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _841;

  <bb 254>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238796 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238793 = tflite::Register_LEAKY_RELU (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 98
  # DEBUG registration => &D.238793
  # DEBUG parser => ParseLeakyRelu
  # DEBUG i => 0
  _2203 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2203 == 0)
    goto <bb 263>;
  else
    goto <bb 255>;

  <bb 255>:
  # DEBUG D#58 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#58
  _1050 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1050 == 98)
    goto <bb 618>;
  else
    goto <bb 258>;

  <bb 256>:
  # DEBUG D#58 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_880]
  # DEBUG registration => D#58
  _878 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_880].builtin_code;
  if (_878 == 98)
    goto <bb 618>;
  else
    goto <bb 257>;

  <bb 257>:
  goto <bb 259>;

  <bb 258>:

  <bb 259>:
  # i_649 = PHI <0(258), i_880(257)>
  # DEBUG i => i_649
  # DEBUG D#58 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_649]
  # DEBUG registration => D#58
  i_880 = i_649 + 1;
  # DEBUG i => i_880
  # DEBUG i => i_880
  if (i_880 >= _2203)
    goto <bb 619>;
  else
    goto <bb 256>;

  <bb 260>:
  tflite::ErrorReporter::Report (_862, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 98);
  goto <bb 264>;

  <bb 261>:
  # DEBUG D#6 => &D.238793
  # DEBUG D#7 => ParseLeakyRelu
  # DEBUG this => _3
  # DEBUG op => 98
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _883 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_883 != 0B)
    goto <bb 262>;
  else
    goto <bb 264>;

  <bb 262>:
  tflite::ErrorReporter::Report (_883, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 98, 128);
  goto <bb 264>;

  <bb 263>:
  # _535 = PHI <_2203(620), 0(254)>
  # prephitmp_1156 = PHI <_706(620), 1(254)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_535] = D.238793;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_535].builtin_code = 98;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1156;
  _868 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_868] = 98;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_868] = ParseLeakyRelu;
  _869 = _868 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _869;

  <bb 264>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238793 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238790 = tflite::ops::micro::Register_LESS (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 58
  # DEBUG registration => &D.238790
  # DEBUG parser => ParseLess
  # DEBUG i => 0
  _2205 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2205 == 0)
    goto <bb 273>;
  else
    goto <bb 265>;

  <bb 265>:
  # DEBUG D#57 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#57
  _1052 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1052 == 58)
    goto <bb 623>;
  else
    goto <bb 268>;

  <bb 266>:
  # DEBUG D#57 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_908]
  # DEBUG registration => D#57
  _906 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_908].builtin_code;
  if (_906 == 58)
    goto <bb 623>;
  else
    goto <bb 267>;

  <bb 267>:
  goto <bb 269>;

  <bb 268>:

  <bb 269>:
  # i_1992 = PHI <0(268), i_908(267)>
  # DEBUG i => i_1992
  # DEBUG D#57 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1992]
  # DEBUG registration => D#57
  i_908 = i_1992 + 1;
  # DEBUG i => i_908
  # DEBUG i => i_908
  if (i_908 >= _2205)
    goto <bb 621>;
  else
    goto <bb 266>;

  <bb 270>:
  tflite::ErrorReporter::Report (_890, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 58);
  goto <bb 274>;

  <bb 271>:
  # DEBUG D#6 => &D.238790
  # DEBUG D#7 => ParseLess
  # DEBUG this => _3
  # DEBUG op => 58
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _911 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_911 != 0B)
    goto <bb 272>;
  else
    goto <bb 274>;

  <bb 272>:
  tflite::ErrorReporter::Report (_911, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 58, 128);
  goto <bb 274>;

  <bb 273>:
  # _180 = PHI <_2205(622), 0(264)>
  # prephitmp_687 = PHI <_650(622), 1(264)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_180] = D.238790;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_180].builtin_code = 58;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_687;
  _896 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_896] = 58;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_896] = ParseLess;
  _897 = _896 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _897;

  <bb 274>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238790 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238787 = tflite::ops::micro::Register_LESS_EQUAL (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 63
  # DEBUG registration => &D.238787
  # DEBUG parser => ParseLessEqual
  # DEBUG i => 0
  _1068 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1068 == 0)
    goto <bb 283>;
  else
    goto <bb 275>;

  <bb 275>:
  # DEBUG D#56 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#56
  _1034 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1034 == 63)
    goto <bb 624>;
  else
    goto <bb 278>;

  <bb 276>:
  # DEBUG D#56 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_936]
  # DEBUG registration => D#56
  _934 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_936].builtin_code;
  if (_934 == 63)
    goto <bb 624>;
  else
    goto <bb 277>;

  <bb 277>:
  goto <bb 279>;

  <bb 278>:

  <bb 279>:
  # i_1609 = PHI <0(278), i_936(277)>
  # DEBUG i => i_1609
  # DEBUG D#56 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1609]
  # DEBUG registration => D#56
  i_936 = i_1609 + 1;
  # DEBUG i => i_936
  # DEBUG i => i_936
  if (i_936 >= _1068)
    goto <bb 625>;
  else
    goto <bb 276>;

  <bb 280>:
  tflite::ErrorReporter::Report (_918, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 63);
  goto <bb 284>;

  <bb 281>:
  # DEBUG D#6 => &D.238787
  # DEBUG D#7 => ParseLessEqual
  # DEBUG this => _3
  # DEBUG op => 63
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _939 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_939 != 0B)
    goto <bb 282>;
  else
    goto <bb 284>;

  <bb 282>:
  tflite::ErrorReporter::Report (_939, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 63, 128);
  goto <bb 284>;

  <bb 283>:
  # _563 = PHI <_1068(626), 0(274)>
  # prephitmp_1117 = PHI <_149(626), 1(274)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_563] = D.238787;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_563].builtin_code = 63;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1117;
  _924 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_924] = 63;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_924] = ParseLessEqual;
  _925 = _924 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _925;

  <bb 284>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238787 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238784 = tflite::ops::micro::Register_LOG (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 73, &D.238784, ParseLog);
  D.238784 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238781 = tflite::ops::micro::Register_LOGICAL_AND (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 86
  # DEBUG registration => &D.238781
  # DEBUG parser => ParseLogicalAnd
  # DEBUG i => 0
  _1070 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1070 == 0)
    goto <bb 293>;
  else
    goto <bb 285>;

  <bb 285>:
  # DEBUG D#55 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#55
  _2217 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2217 == 86)
    goto <bb 627>;
  else
    goto <bb 288>;

  <bb 286>:
  # DEBUG D#55 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_964]
  # DEBUG registration => D#55
  _962 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_964].builtin_code;
  if (_962 == 86)
    goto <bb 627>;
  else
    goto <bb 287>;

  <bb 287>:
  goto <bb 289>;

  <bb 288>:

  <bb 289>:
  # i_1553 = PHI <0(288), i_964(287)>
  # DEBUG i => i_1553
  # DEBUG D#55 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1553]
  # DEBUG registration => D#55
  i_964 = i_1553 + 1;
  # DEBUG i => i_964
  # DEBUG i => i_964
  if (i_964 >= _1070)
    goto <bb 628>;
  else
    goto <bb 286>;

  <bb 290>:
  tflite::ErrorReporter::Report (_946, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 86);
  goto <bb 294>;

  <bb 291>:
  # DEBUG D#6 => &D.238781
  # DEBUG D#7 => ParseLogicalAnd
  # DEBUG this => _3
  # DEBUG op => 86
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _967 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_967 != 0B)
    goto <bb 292>;
  else
    goto <bb 294>;

  <bb 292>:
  tflite::ErrorReporter::Report (_967, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 86, 128);
  goto <bb 294>;

  <bb 293>:
  # _574 = PHI <_1070(629), 0(284)>
  # prephitmp_2035 = PHI <_630(629), 1(284)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_574] = D.238781;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_574].builtin_code = 86;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_2035;
  _952 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_952] = 86;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_952] = ParseLogicalAnd;
  _953 = _952 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _953;

  <bb 294>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238781 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238778 = tflite::ops::micro::Register_LOGICAL_NOT (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 87
  # DEBUG registration => &D.238778
  # DEBUG parser => ParseLogicalNot
  # DEBUG i => 0
  _1061 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1061 == 0)
    goto <bb 303>;
  else
    goto <bb 295>;

  <bb 295>:
  # DEBUG D#54 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#54
  _1081 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1081 == 87)
    goto <bb 630>;
  else
    goto <bb 298>;

  <bb 296>:
  # DEBUG D#54 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_992]
  # DEBUG registration => D#54
  _990 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_992].builtin_code;
  if (_990 == 87)
    goto <bb 630>;
  else
    goto <bb 297>;

  <bb 297>:
  goto <bb 299>;

  <bb 298>:

  <bb 299>:
  # i_1497 = PHI <0(298), i_992(297)>
  # DEBUG i => i_1497
  # DEBUG D#54 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1497]
  # DEBUG registration => D#54
  i_992 = i_1497 + 1;
  # DEBUG i => i_992
  # DEBUG i => i_992
  if (i_992 >= _1061)
    goto <bb 631>;
  else
    goto <bb 296>;

  <bb 300>:
  tflite::ErrorReporter::Report (_974, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 87);
  goto <bb 304>;

  <bb 301>:
  # DEBUG D#6 => &D.238778
  # DEBUG D#7 => ParseLogicalNot
  # DEBUG this => _3
  # DEBUG op => 87
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _995 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_995 != 0B)
    goto <bb 302>;
  else
    goto <bb 304>;

  <bb 302>:
  tflite::ErrorReporter::Report (_995, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 87, 128);
  goto <bb 304>;

  <bb 303>:
  # _573 = PHI <_1061(632), 0(294)>
  # prephitmp_1072 = PHI <_151(632), 1(294)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_573] = D.238778;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_573].builtin_code = 87;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1072;
  _980 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_980] = 87;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_980] = ParseLogicalNot;
  _981 = _980 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _981;

  <bb 304>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238778 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238775 = tflite::ops::micro::Register_LOGICAL_OR (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 84
  # DEBUG registration => &D.238775
  # DEBUG parser => ParseLogicalOr
  # DEBUG i => 0
  _1106 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1106 == 0)
    goto <bb 313>;
  else
    goto <bb 305>;

  <bb 305>:
  # DEBUG D#53 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#53
  _1059 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1059 == 84)
    goto <bb 635>;
  else
    goto <bb 308>;

  <bb 306>:
  # DEBUG D#53 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1020]
  # DEBUG registration => D#53
  _1018 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1020].builtin_code;
  if (_1018 == 84)
    goto <bb 635>;
  else
    goto <bb 307>;

  <bb 307>:
  goto <bb 309>;

  <bb 308>:

  <bb 309>:
  # i_1441 = PHI <0(308), i_1020(307)>
  # DEBUG i => i_1441
  # DEBUG D#53 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1441]
  # DEBUG registration => D#53
  i_1020 = i_1441 + 1;
  # DEBUG i => i_1020
  # DEBUG i => i_1020
  if (i_1020 >= _1106)
    goto <bb 633>;
  else
    goto <bb 306>;

  <bb 310>:
  tflite::ErrorReporter::Report (_1002, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 84);
  goto <bb 314>;

  <bb 311>:
  # DEBUG D#6 => &D.238775
  # DEBUG D#7 => ParseLogicalOr
  # DEBUG this => _3
  # DEBUG op => 84
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1023 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1023 != 0B)
    goto <bb 312>;
  else
    goto <bb 314>;

  <bb 312>:
  tflite::ErrorReporter::Report (_1023, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 84, 128);
  goto <bb 314>;

  <bb 313>:
  # _524 = PHI <_1106(634), 0(304)>
  # prephitmp_739 = PHI <_1044(634), 1(304)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_524] = D.238775;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_524].builtin_code = 84;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_739;
  _1008 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1008] = 84;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1008] = ParseLogicalOr;
  _1009 = _1008 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1009;

  <bb 314>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238775 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238772 = tflite::ops::micro::Register_LOGISTIC (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 14
  # DEBUG registration => &D.238772
  # DEBUG parser => ParseLogistic
  # DEBUG i => 0
  _1108 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1108 == 0)
    goto <bb 323>;
  else
    goto <bb 315>;

  <bb 315>:
  # DEBUG D#52 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#52
  _1098 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1098 == 14)
    goto <bb 636>;
  else
    goto <bb 318>;

  <bb 316>:
  # DEBUG D#52 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1048]
  # DEBUG registration => D#52
  _1046 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1048].builtin_code;
  if (_1046 == 14)
    goto <bb 636>;
  else
    goto <bb 317>;

  <bb 317>:
  goto <bb 319>;

  <bb 318>:

  <bb 319>:
  # i_1385 = PHI <0(318), i_1048(317)>
  # DEBUG i => i_1385
  # DEBUG D#52 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1385]
  # DEBUG registration => D#52
  i_1048 = i_1385 + 1;
  # DEBUG i => i_1048
  # DEBUG i => i_1048
  if (i_1048 >= _1108)
    goto <bb 637>;
  else
    goto <bb 316>;

  <bb 320>:
  tflite::ErrorReporter::Report (_1030, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 14);
  goto <bb 324>;

  <bb 321>:
  # DEBUG D#6 => &D.238772
  # DEBUG D#7 => ParseLogistic
  # DEBUG this => _3
  # DEBUG op => 14
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1051 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1051 != 0B)
    goto <bb 322>;
  else
    goto <bb 324>;

  <bb 322>:
  tflite::ErrorReporter::Report (_1051, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 14, 128);
  goto <bb 324>;

  <bb 323>:
  # _523 = PHI <_1108(638), 0(314)>
  # prephitmp_1109 = PHI <_725(638), 1(314)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_523] = D.238772;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_523].builtin_code = 14;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1109;
  _1036 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1036] = 14;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1036] = ParseLogistic;
  _1037 = _1036 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1037;

  <bb 324>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238772 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238769 = tflite::ops::micro::Register_MAX_POOL_2D (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 17
  # DEBUG registration => &D.238769
  # DEBUG parser => ParsePool
  # DEBUG i => 0
  _1090 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1090 == 0)
    goto <bb 333>;
  else
    goto <bb 325>;

  <bb 325>:
  # DEBUG D#51 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#51
  _2233 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2233 == 17)
    goto <bb 639>;
  else
    goto <bb 328>;

  <bb 326>:
  # DEBUG D#51 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1076]
  # DEBUG registration => D#51
  _1074 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1076].builtin_code;
  if (_1074 == 17)
    goto <bb 639>;
  else
    goto <bb 327>;

  <bb 327>:
  goto <bb 329>;

  <bb 328>:

  <bb 329>:
  # i_1329 = PHI <0(328), i_1076(327)>
  # DEBUG i => i_1329
  # DEBUG D#51 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1329]
  # DEBUG registration => D#51
  i_1076 = i_1329 + 1;
  # DEBUG i => i_1076
  # DEBUG i => i_1076
  if (i_1076 >= _1090)
    goto <bb 640>;
  else
    goto <bb 326>;

  <bb 330>:
  tflite::ErrorReporter::Report (_1058, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 17);
  goto <bb 334>;

  <bb 331>:
  # DEBUG D#6 => &D.238769
  # DEBUG D#7 => ParsePool
  # DEBUG this => _3
  # DEBUG op => 17
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1079 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1079 != 0B)
    goto <bb 332>;
  else
    goto <bb 334>;

  <bb 332>:
  tflite::ErrorReporter::Report (_1079, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 17, 128);
  goto <bb 334>;

  <bb 333>:
  # _546 = PHI <_1090(641), 0(324)>
  # prephitmp_723 = PHI <_2231(641), 1(324)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_546] = D.238769;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_546].builtin_code = 17;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_723;
  _1064 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1064] = 17;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1064] = ParsePool;
  _1065 = _1064 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1065;

  <bb 334>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238769 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238766 = tflite::ops::micro::Register_MAXIMUM (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 55
  # DEBUG registration => &D.238766
  # DEBUG parser => ParseMaximum
  # DEBUG i => 0
  _1131 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1131 == 0)
    goto <bb 343>;
  else
    goto <bb 335>;

  <bb 335>:
  # DEBUG D#50 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#50
  _1124 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1124 == 55)
    goto <bb 644>;
  else
    goto <bb 338>;

  <bb 336>:
  # DEBUG D#50 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1104]
  # DEBUG registration => D#50
  _1102 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1104].builtin_code;
  if (_1102 == 55)
    goto <bb 644>;
  else
    goto <bb 337>;

  <bb 337>:
  goto <bb 339>;

  <bb 338>:

  <bb 339>:
  # i_1290 = PHI <0(338), i_1104(337)>
  # DEBUG i => i_1290
  # DEBUG D#50 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1290]
  # DEBUG registration => D#50
  i_1104 = i_1290 + 1;
  # DEBUG i => i_1104
  # DEBUG i => i_1104
  if (i_1104 >= _1131)
    goto <bb 642>;
  else
    goto <bb 336>;

  <bb 340>:
  tflite::ErrorReporter::Report (_1086, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 55);
  goto <bb 344>;

  <bb 341>:
  # DEBUG D#6 => &D.238766
  # DEBUG D#7 => ParseMaximum
  # DEBUG this => _3
  # DEBUG op => 55
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1107 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1107 != 0B)
    goto <bb 342>;
  else
    goto <bb 344>;

  <bb 342>:
  tflite::ErrorReporter::Report (_1107, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 55, 128);
  goto <bb 344>;

  <bb 343>:
  # _203 = PHI <_1131(643), 0(334)>
  # prephitmp_988 = PHI <_762(643), 1(334)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_203] = D.238766;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_203].builtin_code = 55;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_988;
  _1092 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1092] = 55;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1092] = ParseMaximum;
  _1093 = _1092 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1093;

  <bb 344>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238766 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238763 = tflite::ops::micro::Register_MEAN (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 40
  # DEBUG registration => &D.238763
  # DEBUG parser => ParseReducer
  # DEBUG i => 0
  _1137 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1137 == 0)
    goto <bb 353>;
  else
    goto <bb 345>;

  <bb 345>:
  # DEBUG D#49 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#49
  _1126 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1126 == 40)
    goto <bb 645>;
  else
    goto <bb 348>;

  <bb 346>:
  # DEBUG D#49 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1132]
  # DEBUG registration => D#49
  _1130 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1132].builtin_code;
  if (_1130 == 40)
    goto <bb 645>;
  else
    goto <bb 347>;

  <bb 347>:
  goto <bb 349>;

  <bb 348>:

  <bb 349>:
  # i_1234 = PHI <0(348), i_1132(347)>
  # DEBUG i => i_1234
  # DEBUG D#49 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1234]
  # DEBUG registration => D#49
  i_1132 = i_1234 + 1;
  # DEBUG i => i_1132
  # DEBUG i => i_1132
  if (i_1132 >= _1137)
    goto <bb 646>;
  else
    goto <bb 346>;

  <bb 350>:
  tflite::ErrorReporter::Report (_1114, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 40);
  goto <bb 354>;

  <bb 351>:
  # DEBUG D#6 => &D.238763
  # DEBUG D#7 => ParseReducer
  # DEBUG this => _3
  # DEBUG op => 40
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1135 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1135 != 0B)
    goto <bb 352>;
  else
    goto <bb 354>;

  <bb 352>:
  tflite::ErrorReporter::Report (_1135, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 40, 128);
  goto <bb 354>;

  <bb 353>:
  # _545 = PHI <_1137(647), 0(344)>
  # prephitmp_773 = PHI <_960(647), 1(344)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_545] = D.238763;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_545].builtin_code = 40;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_773;
  _1120 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1120] = 40;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1120] = ParseReducer;
  _1121 = _1120 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1121;

  <bb 354>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238763 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238760 = tflite::ops::micro::Register_MINIMUM (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 57
  # DEBUG registration => &D.238760
  # DEBUG parser => ParseMinimum
  # DEBUG i => 0
  _1115 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1115 == 0)
    goto <bb 363>;
  else
    goto <bb 355>;

  <bb 355>:
  # DEBUG D#48 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#48
  _1118 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1118 == 57)
    goto <bb 648>;
  else
    goto <bb 358>;

  <bb 356>:
  # DEBUG D#48 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1160]
  # DEBUG registration => D#48
  _1158 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1160].builtin_code;
  if (_1158 == 57)
    goto <bb 648>;
  else
    goto <bb 357>;

  <bb 357>:
  goto <bb 359>;

  <bb 358>:

  <bb 359>:
  # i_1178 = PHI <0(358), i_1160(357)>
  # DEBUG i => i_1178
  # DEBUG D#48 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1178]
  # DEBUG registration => D#48
  i_1160 = i_1178 + 1;
  # DEBUG i => i_1160
  # DEBUG i => i_1160
  if (_1115 <= i_1160)
    goto <bb 649>;
  else
    goto <bb 356>;

  <bb 360>:
  tflite::ErrorReporter::Report (_1142, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 57);
  goto <bb 364>;

  <bb 361>:
  # DEBUG D#6 => &D.238760
  # DEBUG D#7 => ParseMinimum
  # DEBUG this => _3
  # DEBUG op => 57
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1163 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1163 != 0B)
    goto <bb 362>;
  else
    goto <bb 364>;

  <bb 362>:
  tflite::ErrorReporter::Report (_1163, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 57, 128);
  goto <bb 364>;

  <bb 363>:
  # _512 = PHI <_1115(650), 0(354)>
  # prephitmp_1080 = PHI <_798(650), 1(354)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_512] = D.238760;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_512].builtin_code = 57;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1080;
  _1148 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1148] = 57;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1148] = ParseMinimum;
  _1149 = _1148 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1149;

  <bb 364>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238760 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238757 = tflite::ops::micro::Register_MUL (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 18
  # DEBUG registration => &D.238757
  # DEBUG parser => ParseMul
  # DEBUG i => 0
  _2259 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2259 == 0)
    goto <bb 373>;
  else
    goto <bb 365>;

  <bb 365>:
  # DEBUG D#47 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#47
  _1162 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1162 == 18)
    goto <bb 651>;
  else
    goto <bb 368>;

  <bb 366>:
  # DEBUG D#47 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1188]
  # DEBUG registration => D#47
  _1186 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1188].builtin_code;
  if (_1186 == 18)
    goto <bb 651>;
  else
    goto <bb 367>;

  <bb 367>:
  goto <bb 369>;

  <bb 368>:

  <bb 369>:
  # i_1122 = PHI <0(368), i_1188(367)>
  # DEBUG i => i_1122
  # DEBUG D#47 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1122]
  # DEBUG registration => D#47
  i_1188 = i_1122 + 1;
  # DEBUG i => i_1188
  # DEBUG i => i_1188
  if (i_1188 >= _2259)
    goto <bb 652>;
  else
    goto <bb 366>;

  <bb 370>:
  tflite::ErrorReporter::Report (_1170, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 18);
  goto <bb 374>;

  <bb 371>:
  # DEBUG D#6 => &D.238757
  # DEBUG D#7 => ParseMul
  # DEBUG this => _3
  # DEBUG op => 18
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1191 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1191 != 0B)
    goto <bb 372>;
  else
    goto <bb 374>;

  <bb 372>:
  tflite::ErrorReporter::Report (_1191, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 18, 128);
  goto <bb 374>;

  <bb 373>:
  # _484 = PHI <_2259(653), 0(364)>
  # prephitmp_2073 = PHI <_1075(653), 1(364)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_484] = D.238757;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_484].builtin_code = 18;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_2073;
  _1176 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1176] = 18;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1176] = ParseMul;
  _1177 = _1176 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1177;

  <bb 374>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238757 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238754 = tflite::ops::micro::Register_NEG (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 59, &D.238754, ParseNeg);
  D.238754 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238751 = tflite::ops::micro::Register_NOT_EQUAL (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 72, &D.238751, ParseNotEqual);
  D.238751 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238748 = tflite::ops::micro::Register_PACK (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 83
  # DEBUG registration => &D.238748
  # DEBUG parser => ParsePack
  # DEBUG i => 0
  _2247 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2247 == 0)
    goto <bb 383>;
  else
    goto <bb 375>;

  <bb 375>:
  # DEBUG D#46 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#46
  _1159 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1159 == 83)
    goto <bb 656>;
  else
    goto <bb 378>;

  <bb 376>:
  # DEBUG D#46 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1216]
  # DEBUG registration => D#46
  _1214 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1216].builtin_code;
  if (_1214 == 83)
    goto <bb 656>;
  else
    goto <bb 377>;

  <bb 377>:
  goto <bb 379>;

  <bb 378>:

  <bb 379>:
  # i_1066 = PHI <0(378), i_1216(377)>
  # DEBUG i => i_1066
  # DEBUG D#46 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1066]
  # DEBUG registration => D#46
  i_1216 = i_1066 + 1;
  # DEBUG i => i_1216
  # DEBUG i => i_1216
  if (i_1216 >= _2247)
    goto <bb 654>;
  else
    goto <bb 376>;

  <bb 380>:
  tflite::ErrorReporter::Report (_1198, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 83);
  goto <bb 384>;

  <bb 381>:
  # DEBUG D#6 => &D.238748
  # DEBUG D#7 => ParsePack
  # DEBUG this => _3
  # DEBUG op => 83
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1219 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1219 != 0B)
    goto <bb 382>;
  else
    goto <bb 384>;

  <bb 382>:
  tflite::ErrorReporter::Report (_1219, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 83, 128);
  goto <bb 384>;

  <bb 383>:
  # _495 = PHI <_2247(655), 0(374)>
  # prephitmp_1642 = PHI <_1614(655), 1(374)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_495] = D.238748;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_495].builtin_code = 83;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1642;
  _1204 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1204] = 83;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1204] = ParsePack;
  _1205 = _1204 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1205;

  <bb 384>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238748 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238745 = tflite::ops::micro::Register_PAD (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 34, &D.238745, ParsePad);
  D.238745 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238742 = tflite::ops::micro::Register_PADV2 (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 60, &D.238742, ParsePadV2);
  D.238742 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238739 = tflite::ops::micro::Register_PRELU (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 54, &D.238739, ParsePrelu);
  D.238739 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238736 = tflite::Register_QUANTIZE (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 114, &D.238736, ParseQuantize);
  D.238736 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238733 = tflite::ops::micro::Register_REDUCE_MAX (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 82, &D.238733, ParseReducer);
  D.238733 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238730 = tflite::ops::micro::Register_RELU (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 19, &D.238730, ParseRelu);
  D.238730 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238727 = tflite::ops::micro::Register_RELU6 (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 21, &D.238727, ParseRelu6);
  D.238727 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238724 = tflite::ops::micro::Register_RESHAPE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 22
  # DEBUG registration => &D.238724
  # DEBUG parser => ParseReshape
  # DEBUG i => 0
  _1089 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1089 == 0)
    goto <bb 393>;
  else
    goto <bb 385>;

  <bb 385>:
  # DEBUG D#45 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#45
  _1134 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1134 == 22)
    goto <bb 657>;
  else
    goto <bb 388>;

  <bb 386>:
  # DEBUG D#45 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1244]
  # DEBUG registration => D#45
  _1242 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1244].builtin_code;
  if (_1242 == 22)
    goto <bb 657>;
  else
    goto <bb 387>;

  <bb 387>:
  goto <bb 389>;

  <bb 388>:

  <bb 389>:
  # i_1010 = PHI <0(388), i_1244(387)>
  # DEBUG i => i_1010
  # DEBUG D#45 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1010]
  # DEBUG registration => D#45
  i_1244 = i_1010 + 1;
  # DEBUG i => i_1244
  # DEBUG i => i_1244
  if (_1089 <= i_1244)
    goto <bb 658>;
  else
    goto <bb 386>;

  <bb 390>:
  tflite::ErrorReporter::Report (_1226, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 22);
  goto <bb 394>;

  <bb 391>:
  # DEBUG D#6 => &D.238724
  # DEBUG D#7 => ParseReshape
  # DEBUG this => _3
  # DEBUG op => 22
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1247 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1247 != 0B)
    goto <bb 392>;
  else
    goto <bb 394>;

  <bb 392>:
  tflite::ErrorReporter::Report (_1247, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 22, 128);
  goto <bb 394>;

  <bb 393>:
  # _494 = PHI <_1089(659), 0(384)>
  # prephitmp_1558 = PHI <_1530(659), 1(384)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_494] = D.238724;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_494].builtin_code = 22;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1558;
  _1232 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1232] = 22;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1232] = ParseReshape;
  _1233 = _1232 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1233;

  <bb 394>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238724 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238721 = tflite::Register_RESIZE_BILINEAR (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 23, &D.238721, ParseResizeBilinear);
  D.238721 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238718 = tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 97, &D.238718, ParseResizeNearestNeighbor);
  D.238718 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238715 = tflite::ops::micro::Register_ROUND (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 116, &D.238715, ParseRound);
  D.238715 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238712 = tflite::ops::micro::Register_RSQRT (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 76
  # DEBUG registration => &D.238712
  # DEBUG parser => ParseRsqrt
  # DEBUG i => 0
  _2219 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2219 == 0)
    goto <bb 403>;
  else
    goto <bb 395>;

  <bb 395>:
  # DEBUG D#44 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#44
  _1096 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1096 == 76)
    goto <bb 660>;
  else
    goto <bb 398>;

  <bb 396>:
  # DEBUG D#44 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1272]
  # DEBUG registration => D#44
  _1270 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1272].builtin_code;
  if (_1270 == 76)
    goto <bb 660>;
  else
    goto <bb 397>;

  <bb 397>:
  goto <bb 399>;

  <bb 398>:

  <bb 399>:
  # i_954 = PHI <0(398), i_1272(397)>
  # DEBUG i => i_954
  # DEBUG D#44 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_954]
  # DEBUG registration => D#44
  i_1272 = i_954 + 1;
  # DEBUG i => i_1272
  # DEBUG i => i_1272
  if (i_1272 >= _2219)
    goto <bb 661>;
  else
    goto <bb 396>;

  <bb 400>:
  tflite::ErrorReporter::Report (_1254, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 76);
  goto <bb 404>;

  <bb 401>:
  # DEBUG D#6 => &D.238712
  # DEBUG D#7 => ParseRsqrt
  # DEBUG this => _3
  # DEBUG op => 76
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1275 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1275 != 0B)
    goto <bb 402>;
  else
    goto <bb 404>;

  <bb 402>:
  tflite::ErrorReporter::Report (_1275, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 76, 128);
  goto <bb 404>;

  <bb 403>:
  # _456 = PHI <_2219(662), 0(394)>
  # prephitmp_1474 = PHI <_1446(662), 1(394)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_456] = D.238712;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_456].builtin_code = 76;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1474;
  _1260 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1260] = 76;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1260] = ParseRsqrt;
  _1261 = _1260 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1261;

  <bb 404>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238712 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238709 = tflite::Register_SHAPE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 77
  # DEBUG registration => &D.238709
  # DEBUG parser => ParseShape
  # DEBUG i => 0
  _1053 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1053 == 0)
    goto <bb 413>;
  else
    goto <bb 405>;

  <bb 405>:
  # DEBUG D#43 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#43
  _1031 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_1031 == 77)
    goto <bb 665>;
  else
    goto <bb 408>;

  <bb 406>:
  # DEBUG D#43 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1300]
  # DEBUG registration => D#43
  _1298 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1300].builtin_code;
  if (_1298 == 77)
    goto <bb 665>;
  else
    goto <bb 407>;

  <bb 407>:
  goto <bb 409>;

  <bb 408>:

  <bb 409>:
  # i_898 = PHI <0(408), i_1300(407)>
  # DEBUG i => i_898
  # DEBUG D#43 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_898]
  # DEBUG registration => D#43
  i_1300 = i_898 + 1;
  # DEBUG i => i_1300
  # DEBUG i => i_1300
  if (_1053 <= i_1300)
    goto <bb 663>;
  else
    goto <bb 406>;

  <bb 410>:
  tflite::ErrorReporter::Report (_1282, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 77);
  goto <bb 414>;

  <bb 411>:
  # DEBUG D#6 => &D.238709
  # DEBUG D#7 => ParseShape
  # DEBUG this => _3
  # DEBUG op => 77
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1303 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1303 != 0B)
    goto <bb 412>;
  else
    goto <bb 414>;

  <bb 412>:
  tflite::ErrorReporter::Report (_1303, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 77, 128);
  goto <bb 414>;

  <bb 413>:
  # _467 = PHI <_1053(664), 0(404)>
  # prephitmp_1390 = PHI <_1362(664), 1(404)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_467] = D.238709;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_467].builtin_code = 77;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1390;
  _1288 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1288] = 77;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1288] = ParseShape;
  _1289 = _1288 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1289;

  <bb 414>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238709 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238706 = tflite::ops::micro::Register_SIN (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 66, &D.238706, ParseSin);
  D.238706 ={v} {CLOBBER};
  # DEBUG this => NULL
  D.181690 = tflite::Register_SOFTMAX (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG registration => &D.181690
  # DEBUG this => _3
  # DEBUG op => 25
  # DEBUG registration => &D.181690
  # DEBUG parser => ParseSoftmax
  # DEBUG this => _3
  # DEBUG op => 25
  # DEBUG i => 0
  _1024 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1024 == 0)
    goto <bb 423>;
  else
    goto <bb 415>;

  <bb 415>:
  # DEBUG D#42 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#42
  _2191 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2191 == 25)
    goto <bb 666>;
  else
    goto <bb 418>;

  <bb 416>:
  # DEBUG D#42 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1311]
  # DEBUG registration => D#42
  _1309 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1311].builtin_code;
  if (_1309 == 25)
    goto <bb 666>;
  else
    goto <bb 417>;

  <bb 417>:
  goto <bb 419>;

  <bb 418>:

  <bb 419>:
  # i_842 = PHI <0(418), i_1311(417)>
  # DEBUG i => i_842
  # DEBUG D#42 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_842]
  # DEBUG registration => D#42
  i_1311 = i_842 + 1;
  # DEBUG i => i_1311
  # DEBUG i => i_1311
  if (_1024 <= i_1311)
    goto <bb 667>;
  else
    goto <bb 416>;

  <bb 420>:
  tflite::ErrorReporter::Report (_102, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 25);
  goto <bb 424>;

  <bb 421>:
  # DEBUG D#6 => &D.181690
  # DEBUG D#7 => ParseSoftmax
  # DEBUG this => _3
  # DEBUG op => 25
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1314 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1314 != 0B)
    goto <bb 422>;
  else
    goto <bb 424>;

  <bb 422>:
  tflite::ErrorReporter::Report (_1314, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 25, 128);
  goto <bb 424>;

  <bb 423>:
  # _466 = PHI <_1024(668), 0(414)>
  # prephitmp_1306 = PHI <_1295(668), 1(414)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_466] = D.181690;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_466].builtin_code = 25;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1306;
  _108 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_108] = 25;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_108] = ParseSoftmax;
  _109 = _108 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _109;

  <bb 424>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  # DEBUG this => NULL
  # DEBUG registration => NULL
  D.181690 ={v} {CLOBBER};
  # DEBUG this => _3
  D.238698 = tflite::Register_SPACE_TO_BATCH_ND (); [return slot optimization]
  tflite::MicroMutableOpResolver<128u>::AddBuiltin (_3, 38, &D.238698, ParseSpaceToBatchNd);
  D.238698 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238695 = tflite::ops::micro::Register_SPLIT (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 49
  # DEBUG registration => &D.238695
  # DEBUG parser => ParseSplit
  # DEBUG i => 0
  _986 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_986 == 0)
    goto <bb 433>;
  else
    goto <bb 425>;

  <bb 425>:
  # DEBUG D#41 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#41
  _997 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_997 == 49)
    goto <bb 669>;
  else
    goto <bb 428>;

  <bb 426>:
  # DEBUG D#41 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1339]
  # DEBUG registration => D#41
  _1337 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1339].builtin_code;
  if (_1337 == 49)
    goto <bb 669>;
  else
    goto <bb 427>;

  <bb 427>:
  goto <bb 429>;

  <bb 428>:

  <bb 429>:
  # i_786 = PHI <0(428), i_1339(427)>
  # DEBUG i => i_786
  # DEBUG D#41 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_786]
  # DEBUG registration => D#41
  i_1339 = i_786 + 1;
  # DEBUG i => i_1339
  # DEBUG i => i_1339
  if (_986 <= i_1339)
    goto <bb 670>;
  else
    goto <bb 426>;

  <bb 430>:
  tflite::ErrorReporter::Report (_1321, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 49);
  goto <bb 434>;

  <bb 431>:
  # DEBUG D#6 => &D.238695
  # DEBUG D#7 => ParseSplit
  # DEBUG this => _3
  # DEBUG op => 49
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1342 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1342 != 0B)
    goto <bb 432>;
  else
    goto <bb 434>;

  <bb 432>:
  tflite::ErrorReporter::Report (_1342, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 49, 128);
  goto <bb 434>;

  <bb 433>:
  # _428 = PHI <_986(671), 0(424)>
  # prephitmp_1239 = PHI <_1211(671), 1(424)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_428] = D.238695;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_428].builtin_code = 49;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1239;
  _1327 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1327] = 49;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1327] = ParseSplit;
  _1328 = _1327 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1328;

  <bb 434>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238695 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238692 = tflite::ops::micro::Register_SPLIT_V (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 102
  # DEBUG registration => &D.238692
  # DEBUG parser => ParseSplitV
  # DEBUG i => 0
  _966 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_966 == 0)
    goto <bb 443>;
  else
    goto <bb 435>;

  <bb 435>:
  # DEBUG D#40 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#40
  _2163 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2163 == 102)
    goto <bb 672>;
  else
    goto <bb 438>;

  <bb 436>:
  # DEBUG D#40 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1367]
  # DEBUG registration => D#40
  _1365 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1367].builtin_code;
  if (_1365 == 102)
    goto <bb 672>;
  else
    goto <bb 437>;

  <bb 437>:
  goto <bb 439>;

  <bb 438>:

  <bb 439>:
  # i_730 = PHI <0(438), i_1367(437)>
  # DEBUG i => i_730
  # DEBUG D#40 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_730]
  # DEBUG registration => D#40
  i_1367 = i_730 + 1;
  # DEBUG i => i_1367
  # DEBUG i => i_1367
  if (_966 <= i_1367)
    goto <bb 673>;
  else
    goto <bb 436>;

  <bb 440>:
  tflite::ErrorReporter::Report (_1349, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 102);
  goto <bb 444>;

  <bb 441>:
  # DEBUG D#6 => &D.238692
  # DEBUG D#7 => ParseSplitV
  # DEBUG this => _3
  # DEBUG op => 102
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1370 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1370 != 0B)
    goto <bb 442>;
  else
    goto <bb 444>;

  <bb 442>:
  tflite::ErrorReporter::Report (_1370, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 102, 128);
  goto <bb 444>;

  <bb 443>:
  # _174 = PHI <_966(674), 0(434)>
  # prephitmp_1155 = PHI <_1127(674), 1(434)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_174] = D.238692;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_174].builtin_code = 102;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1155;
  _1355 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1355] = 102;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1355] = ParseSplitV;
  _1356 = _1355 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1356;

  <bb 444>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238692 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238689 = tflite::ops::micro::Register_SQRT (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 75
  # DEBUG registration => &D.238689
  # DEBUG parser => ParseSqrt
  # DEBUG i => 0
  _938 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_938 == 0)
    goto <bb 453>;
  else
    goto <bb 445>;

  <bb 445>:
  # DEBUG D#39 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#39
  _2145 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2145 == 75)
    goto <bb 677>;
  else
    goto <bb 448>;

  <bb 446>:
  # DEBUG D#39 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1395]
  # DEBUG registration => D#39
  _1393 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1395].builtin_code;
  if (_1393 == 75)
    goto <bb 677>;
  else
    goto <bb 447>;

  <bb 447>:
  goto <bb 449>;

  <bb 448>:

  <bb 449>:
  # i_691 = PHI <0(448), i_1395(447)>
  # DEBUG i => i_691
  # DEBUG D#39 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_691]
  # DEBUG registration => D#39
  i_1395 = i_691 + 1;
  # DEBUG i => i_1395
  # DEBUG i => i_1395
  if (_938 <= i_1395)
    goto <bb 675>;
  else
    goto <bb 446>;

  <bb 450>:
  tflite::ErrorReporter::Report (_1377, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 75);
  goto <bb 454>;

  <bb 451>:
  # DEBUG D#6 => &D.238689
  # DEBUG D#7 => ParseSqrt
  # DEBUG this => _3
  # DEBUG op => 75
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1398 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1398 != 0B)
    goto <bb 452>;
  else
    goto <bb 454>;

  <bb 452>:
  tflite::ErrorReporter::Report (_1398, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 75, 128);
  goto <bb 454>;

  <bb 453>:
  # _187 = PHI <_938(676), 0(444)>
  # prephitmp_1071 = PHI <_1043(676), 1(444)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_187] = D.238689;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_187].builtin_code = 75;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_1071;
  _1383 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1383] = 75;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1383] = ParseSqrt;
  _1384 = _1383 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1384;

  <bb 454>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238689 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238686 = tflite::ops::micro::Register_SQUARE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 92
  # DEBUG registration => &D.238686
  # DEBUG parser => ParseSquare
  # DEBUG i => 0
  _907 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_907 == 0)
    goto <bb 463>;
  else
    goto <bb 455>;

  <bb 455>:
  # DEBUG D#38 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#38
  _913 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_913 == 92)
    goto <bb 678>;
  else
    goto <bb 458>;

  <bb 456>:
  # DEBUG D#38 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1423]
  # DEBUG registration => D#38
  _1421 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1423].builtin_code;
  if (_1421 == 92)
    goto <bb 678>;
  else
    goto <bb 457>;

  <bb 457>:
  goto <bb 459>;

  <bb 458>:

  <bb 459>:
  # i_635 = PHI <0(458), i_1423(457)>
  # DEBUG i => i_635
  # DEBUG D#38 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_635]
  # DEBUG registration => D#38
  i_1423 = i_635 + 1;
  # DEBUG i => i_1423
  # DEBUG i => i_1423
  if (_907 <= i_1423)
    goto <bb 679>;
  else
    goto <bb 456>;

  <bb 460>:
  tflite::ErrorReporter::Report (_1405, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 92);
  goto <bb 464>;

  <bb 461>:
  # DEBUG D#6 => &D.238686
  # DEBUG D#7 => ParseSquare
  # DEBUG this => _3
  # DEBUG op => 92
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1426 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1426 != 0B)
    goto <bb 462>;
  else
    goto <bb 464>;

  <bb 462>:
  tflite::ErrorReporter::Report (_1426, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 92, 128);
  goto <bb 464>;

  <bb 463>:
  # _298 = PHI <_907(680), 0(454)>
  # prephitmp_987 = PHI <_959(680), 1(454)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_298] = D.238686;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_298].builtin_code = 92;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_987;
  _1411 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1411] = 92;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1411] = ParseSquare;
  _1412 = _1411 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1412;

  <bb 464>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238686 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238683 = tflite::Register_SQUEEZE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 43
  # DEBUG registration => &D.238683
  # DEBUG parser => ParseSqueeze
  # DEBUG i => 0
  _882 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_882 == 0)
    goto <bb 473>;
  else
    goto <bb 465>;

  <bb 465>:
  # DEBUG D#37 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#37
  _884 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_884 == 43)
    goto <bb 681>;
  else
    goto <bb 468>;

  <bb 466>:
  # DEBUG D#37 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1451]
  # DEBUG registration => D#37
  _1449 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1451].builtin_code;
  if (_1449 == 43)
    goto <bb 681>;
  else
    goto <bb 467>;

  <bb 467>:
  goto <bb 469>;

  <bb 468>:

  <bb 469>:
  # i_584 = PHI <0(468), i_1451(467)>
  # DEBUG i => i_584
  # DEBUG D#37 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_584]
  # DEBUG registration => D#37
  i_1451 = i_584 + 1;
  # DEBUG i => i_1451
  # DEBUG i => i_1451
  if (_882 <= i_1451)
    goto <bb 682>;
  else
    goto <bb 466>;

  <bb 470>:
  tflite::ErrorReporter::Report (_1433, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 43);
  goto <bb 474>;

  <bb 471>:
  # DEBUG D#6 => &D.238683
  # DEBUG D#7 => ParseSqueeze
  # DEBUG this => _3
  # DEBUG op => 43
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1454 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1454 != 0B)
    goto <bb 472>;
  else
    goto <bb 474>;

  <bb 472>:
  tflite::ErrorReporter::Report (_1454, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 43, 128);
  goto <bb 474>;

  <bb 473>:
  # _214 = PHI <_882(683), 0(464)>
  # prephitmp_903 = PHI <_875(683), 1(464)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_214] = D.238683;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_214].builtin_code = 43;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_903;
  _1439 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1439] = 43;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1439] = ParseSqueeze;
  _1440 = _1439 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1440;

  <bb 474>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238683 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238680 = tflite::ops::micro::Register_STRIDED_SLICE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 45
  # DEBUG registration => &D.238680
  # DEBUG parser => ParseStridedSlice
  # DEBUG i => 0
  _844 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_844 == 0)
    goto <bb 483>;
  else
    goto <bb 475>;

  <bb 475>:
  # DEBUG D#36 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#36
  _846 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_846 == 45)
    goto <bb 686>;
  else
    goto <bb 478>;

  <bb 476>:
  # DEBUG D#36 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1479]
  # DEBUG registration => D#36
  _1477 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1479].builtin_code;
  if (_1477 == 45)
    goto <bb 686>;
  else
    goto <bb 477>;

  <bb 477>:
  goto <bb 479>;

  <bb 478>:

  <bb 479>:
  # i_528 = PHI <0(478), i_1479(477)>
  # DEBUG i => i_528
  # DEBUG D#36 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_528]
  # DEBUG registration => D#36
  i_1479 = i_528 + 1;
  # DEBUG i => i_1479
  # DEBUG i => i_1479
  if (_844 <= i_1479)
    goto <bb 684>;
  else
    goto <bb 476>;

  <bb 480>:
  tflite::ErrorReporter::Report (_1461, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 45);
  goto <bb 484>;

  <bb 481>:
  # DEBUG D#6 => &D.238680
  # DEBUG D#7 => ParseStridedSlice
  # DEBUG this => _3
  # DEBUG op => 45
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1482 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1482 != 0B)
    goto <bb 482>;
  else
    goto <bb 484>;

  <bb 482>:
  tflite::ErrorReporter::Report (_1482, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 45, 128);
  goto <bb 484>;

  <bb 483>:
  # _271 = PHI <_844(685), 0(474)>
  # prephitmp_819 = PHI <_791(685), 1(474)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_271] = D.238680;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_271].builtin_code = 45;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_819;
  _1467 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1467] = 45;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1467] = ParseStridedSlice;
  _1468 = _1467 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1468;

  <bb 484>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238680 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238677 = tflite::ops::micro::Register_SUB (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 41
  # DEBUG registration => &D.238677
  # DEBUG parser => ParseSub
  # DEBUG i => 0
  _779 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_779 == 0)
    goto <bb 493>;
  else
    goto <bb 485>;

  <bb 485>:
  # DEBUG D#35 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#35
  _826 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_826 == 41)
    goto <bb 687>;
  else
    goto <bb 488>;

  <bb 486>:
  # DEBUG D#35 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1507]
  # DEBUG registration => D#35
  _1505 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1507].builtin_code;
  if (_1505 == 41)
    goto <bb 687>;
  else
    goto <bb 487>;

  <bb 487>:
  goto <bb 489>;

  <bb 488>:

  <bb 489>:
  # i_477 = PHI <0(488), i_1507(487)>
  # DEBUG i => i_477
  # DEBUG D#35 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_477]
  # DEBUG registration => D#35
  i_1507 = i_477 + 1;
  # DEBUG i => i_1507
  # DEBUG i => i_1507
  if (_779 <= i_1507)
    goto <bb 688>;
  else
    goto <bb 486>;

  <bb 490>:
  tflite::ErrorReporter::Report (_1489, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 41);
  goto <bb 494>;

  <bb 491>:
  # DEBUG D#6 => &D.238677
  # DEBUG D#7 => ParseSub
  # DEBUG this => _3
  # DEBUG op => 41
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1510 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1510 != 0B)
    goto <bb 492>;
  else
    goto <bb 494>;

  <bb 492>:
  tflite::ErrorReporter::Report (_1510, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 41, 128);
  goto <bb 494>;

  <bb 493>:
  # _270 = PHI <_779(689), 0(484)>
  # prephitmp_735 = PHI <_707(689), 1(484)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_270] = D.238677;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_270].builtin_code = 41;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_735;
  _1495 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1495] = 41;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1495] = ParseSub;
  _1496 = _1495 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1496;

  <bb 494>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238677 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238674 = tflite::Register_SVDF (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 27
  # DEBUG registration => &D.238674
  # DEBUG parser => ParseSvdf
  # DEBUG i => 0
  _1164 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1164 == 0)
    goto <bb 503>;
  else
    goto <bb 495>;

  <bb 495>:
  # DEBUG D#34 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#34
  _788 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_788 == 27)
    goto <bb 690>;
  else
    goto <bb 498>;

  <bb 496>:
  # DEBUG D#34 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1535]
  # DEBUG registration => D#34
  _1533 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1535].builtin_code;
  if (_1533 == 27)
    goto <bb 690>;
  else
    goto <bb 497>;

  <bb 497>:
  goto <bb 499>;

  <bb 498>:

  <bb 499>:
  # i_421 = PHI <0(498), i_1535(497)>
  # DEBUG i => i_421
  # DEBUG D#34 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_421]
  # DEBUG registration => D#34
  i_1535 = i_421 + 1;
  # DEBUG i => i_1535
  # DEBUG i => i_1535
  if (_1164 <= i_1535)
    goto <bb 691>;
  else
    goto <bb 496>;

  <bb 500>:
  tflite::ErrorReporter::Report (_1517, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 27);
  goto <bb 504>;

  <bb 501>:
  # DEBUG D#6 => &D.238674
  # DEBUG D#7 => ParseSvdf
  # DEBUG this => _3
  # DEBUG op => 27
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1538 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1538 != 0B)
    goto <bb 502>;
  else
    goto <bb 504>;

  <bb 502>:
  tflite::ErrorReporter::Report (_1538, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 27, 128);
  goto <bb 504>;

  <bb 503>:
  # _232 = PHI <_1164(692), 0(494)>
  # prephitmp_668 = PHI <_640(692), 1(494)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_232] = D.238674;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_232].builtin_code = 27;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_668;
  _1523 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1523] = 27;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1523] = ParseSvdf;
  _1524 = _1523 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1524;

  <bb 504>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238674 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238671 = tflite::ops::micro::Register_TANH (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 28
  # DEBUG registration => &D.238671
  # DEBUG parser => ParseTanh
  # DEBUG i => 0
  _1154 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_1154 == 0)
    goto <bb 513>;
  else
    goto <bb 505>;

  <bb 505>:
  # DEBUG D#33 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#33
  _2059 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2059 == 28)
    goto <bb 693>;
  else
    goto <bb 508>;

  <bb 506>:
  # DEBUG D#33 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1563]
  # DEBUG registration => D#33
  _1561 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1563].builtin_code;
  if (_1561 == 28)
    goto <bb 693>;
  else
    goto <bb 507>;

  <bb 507>:
  goto <bb 509>;

  <bb 508>:

  <bb 509>:
  # i_365 = PHI <0(508), i_1563(507)>
  # DEBUG i => i_365
  # DEBUG D#33 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_365]
  # DEBUG registration => D#33
  i_1563 = i_365 + 1;
  # DEBUG i => i_1563
  # DEBUG i => i_1563
  if (_1154 <= i_1563)
    goto <bb 694>;
  else
    goto <bb 506>;

  <bb 510>:
  tflite::ErrorReporter::Report (_1545, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 28);
  goto <bb 514>;

  <bb 511>:
  # DEBUG D#6 => &D.238671
  # DEBUG D#7 => ParseTanh
  # DEBUG this => _3
  # DEBUG op => 28
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1566 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1566 != 0B)
    goto <bb 512>;
  else
    goto <bb 514>;

  <bb 512>:
  tflite::ErrorReporter::Report (_1566, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 28, 128);
  goto <bb 514>;

  <bb 513>:
  # _243 = PHI <_1154(695), 0(504)>
  # prephitmp_561 = PHI <_510(695), 1(504)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_243] = D.238671;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_243].builtin_code = 28;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_561;
  _1551 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1551] = 28;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1551] = ParseTanh;
  _1552 = _1551 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1552;

  <bb 514>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238671 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238668 = tflite::Register_TRANSPOSE_CONV (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 67
  # DEBUG registration => &D.238668
  # DEBUG parser => ParseTransposeConv
  # DEBUG i => 0
  _732 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_732 == 0)
    goto <bb 523>;
  else
    goto <bb 515>;

  <bb 515>:
  # DEBUG D#32 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#32
  _734 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_734 == 67)
    goto <bb 698>;
  else
    goto <bb 518>;

  <bb 516>:
  # DEBUG D#32 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1591]
  # DEBUG registration => D#32
  _1589 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1591].builtin_code;
  if (_1589 == 67)
    goto <bb 698>;
  else
    goto <bb 517>;

  <bb 517>:
  goto <bb 519>;

  <bb 518>:

  <bb 519>:
  # i_309 = PHI <0(518), i_1591(517)>
  # DEBUG i => i_309
  # DEBUG D#32 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_309]
  # DEBUG registration => D#32
  i_1591 = i_309 + 1;
  # DEBUG i => i_1591
  # DEBUG i => i_1591
  if (_732 <= i_1591)
    goto <bb 696>;
  else
    goto <bb 516>;

  <bb 520>:
  tflite::ErrorReporter::Report (_1573, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 67);
  goto <bb 524>;

  <bb 521>:
  # DEBUG D#6 => &D.238668
  # DEBUG D#7 => ParseTransposeConv
  # DEBUG this => _3
  # DEBUG op => 67
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1594 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1594 != 0B)
    goto <bb 522>;
  else
    goto <bb 524>;

  <bb 522>:
  tflite::ErrorReporter::Report (_1594, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 67, 128);
  goto <bb 524>;

  <bb 523>:
  # _242 = PHI <_732(697), 0(514)>
  # prephitmp_454 = PHI <_426(697), 1(514)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_242] = D.238668;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_242].builtin_code = 67;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_454;
  _1579 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1579] = 67;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1579] = ParseTransposeConv;
  _1580 = _1579 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1580;

  <bb 524>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238668 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238665 = tflite::Register_TRANSPOSE (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 39
  # DEBUG registration => &D.238665
  # DEBUG parser => ParseTranspose
  # DEBUG i => 0
  _686 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_686 == 0)
    goto <bb 533>;
  else
    goto <bb 525>;

  <bb 525>:
  # DEBUG D#31 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#31
  _2033 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_2033 == 39)
    goto <bb 699>;
  else
    goto <bb 528>;

  <bb 526>:
  # DEBUG D#31 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1619]
  # DEBUG registration => D#31
  _1617 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1619].builtin_code;
  if (_1617 == 39)
    goto <bb 699>;
  else
    goto <bb 527>;

  <bb 527>:
  goto <bb 529>;

  <bb 528>:

  <bb 529>:
  # i_253 = PHI <0(528), i_1619(527)>
  # DEBUG i => i_253
  # DEBUG D#31 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_253]
  # DEBUG registration => D#31
  i_1619 = i_253 + 1;
  # DEBUG i => i_1619
  # DEBUG i => i_1619
  if (_686 <= i_1619)
    goto <bb 700>;
  else
    goto <bb 526>;

  <bb 530>:
  tflite::ErrorReporter::Report (_1601, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 39);
  goto <bb 534>;

  <bb 531>:
  # DEBUG D#6 => &D.238665
  # DEBUG D#7 => ParseTranspose
  # DEBUG this => _3
  # DEBUG op => 39
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1622 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1622 != 0B)
    goto <bb 532>;
  else
    goto <bb 534>;

  <bb 532>:
  tflite::ErrorReporter::Report (_1622, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 39, 128);
  goto <bb 534>;

  <bb 533>:
  # _204 = PHI <_686(701), 0(524)>
  # prephitmp_370 = PHI <_342(701), 1(524)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_204] = D.238665;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_204].builtin_code = 39;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_370;
  _1607 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1607] = 39;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1607] = ParseTranspose;
  _1608 = _1607 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1608;

  <bb 534>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238665 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => _3
  D.238662 = tflite::ops::micro::Register_UNPACK (); [return slot optimization]
  # DEBUG this => _3
  # DEBUG op => 88
  # DEBUG registration => &D.238662
  # DEBUG parser => ParseUnpack
  # DEBUG i => 0
  _2008 = MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_len_;
  if (_2008 == 0)
    goto <bb 543>;
  else
    goto <bb 535>;

  <bb 535>:
  # DEBUG D#30 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[0]
  # DEBUG registration => D#30
  _659 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[0].builtin_code;
  if (_659 == 88)
    goto <bb 702>;
  else
    goto <bb 538>;

  <bb 536>:
  # DEBUG D#30 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_1647]
  # DEBUG registration => D#30
  _1645 = MEM[(const struct TfLiteRegistration &)this_2(D)].registrations_[i_1647].builtin_code;
  if (_1645 == 88)
    goto <bb 702>;
  else
    goto <bb 537>;

  <bb 537>:
  goto <bb 539>;

  <bb 538>:

  <bb 539>:
  # i_197 = PHI <0(538), i_1647(537)>
  # DEBUG i => i_197
  # DEBUG D#30 => &MEM[(const struct MicroMutableOpResolver *)this_2(D)].registrations_[i_197]
  # DEBUG registration => D#30
  i_1647 = i_197 + 1;
  # DEBUG i => i_1647
  # DEBUG i => i_1647
  if (i_1647 >= _2008)
    goto <bb 703>;
  else
    goto <bb 536>;

  <bb 540>:
  tflite::ErrorReporter::Report (_1629, "Calling AddBuiltin with the same op more than once is not supported (Op: #%d).", 88);
  goto <bb 544>;

  <bb 541>:
  # DEBUG D#6 => &D.238662
  # DEBUG D#7 => ParseUnpack
  # DEBUG this => _3
  # DEBUG op => 88
  # DEBUG D#9 => D#6
  # DEBUG registration => D#9
  # DEBUG D#8 => D#7
  # DEBUG parser => D#8
  _1650 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1650 != 0B)
    goto <bb 542>;
  else
    goto <bb 544>;

  <bb 542>:
  tflite::ErrorReporter::Report (_1650, "Couldn\'t register builtin op #%d, resolver size is too small (%d).", 88, 128);
  goto <bb 544>;

  <bb 543>:
  # _215 = PHI <_2008(704), 0(534)>
  # prephitmp_286 = PHI <_258(704), 1(534)>
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_215] = D.238662;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_[_215].builtin_code = 88;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = prephitmp_286;
  _1635 = MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_codes_[_1635] = 88;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].builtin_parsers_[_1635] = ParseUnpack;
  _1636 = _1635 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].num_buitin_ops_ = _1636;

  <bb 544>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG registration => NULL
  # DEBUG parser => NULL
  D.238662 ={v} {CLOBBER};
  # DEBUG this => NULL
  return this_2(D);

  <bb 545>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _189 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_189 != 0B)
    goto <bb 8>;
  else
    goto <bb 12>;

  <bb 546>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_781 > 127)
    goto <bb 9>;
  else
    goto <bb 547>;

  <bb 547>:
  _281 = _781 + 1;
  goto <bb 11>;

  <bb 548>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_823 > 127)
    goto <bb 19>;
  else
    goto <bb 549>;

  <bb 549>:
  _695 = _823 + 1;
  goto <bb 21>;

  <bb 550>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _217 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_217 != 0B)
    goto <bb 18>;
  else
    goto <bb 22>;

  <bb 551>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _245 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_245 != 0B)
    goto <bb 28>;
  else
    goto <bb 32>;

  <bb 552>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_828 > 127)
    goto <bb 29>;
  else
    goto <bb 553>;

  <bb 553>:
  _449 = _828 + 1;
  goto <bb 31>;

  <bb 554>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _273 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_273 != 0B)
    goto <bb 38>;
  else
    goto <bb 42>;

  <bb 555>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_810 > 127)
    goto <bb 39>;
  else
    goto <bb 556>;

  <bb 556>:
  _1559 = _810 + 1;
  goto <bb 41>;

  <bb 557>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_851 > 127)
    goto <bb 49>;
  else
    goto <bb 558>;

  <bb 558>:
  _165 = _851 + 1;
  goto <bb 51>;

  <bb 559>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _301 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_301 != 0B)
    goto <bb 48>;
  else
    goto <bb 52>;

  <bb 560>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _329 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_329 != 0B)
    goto <bb 58>;
  else
    goto <bb 62>;

  <bb 561>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2103 > 127)
    goto <bb 59>;
  else
    goto <bb 562>;

  <bb 562>:
  _2061 = _2103 + 1;
  goto <bb 61>;

  <bb 563>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _357 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_357 != 0B)
    goto <bb 68>;
  else
    goto <bb 72>;

  <bb 564>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_835 > 127)
    goto <bb 69>;
  else
    goto <bb 565>;

  <bb 565>:
  _758 = _835 + 1;
  goto <bb 71>;

  <bb 566>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _385 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_385 != 0B)
    goto <bb 78>;
  else
    goto <bb 82>;

  <bb 567>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2115 > 127)
    goto <bb 79>;
  else
    goto <bb 568>;

  <bb 568>:
  _1475 = _2115 + 1;
  goto <bb 81>;

  <bb 569>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_865 > 127)
    goto <bb 89>;
  else
    goto <bb 570>;

  <bb 570>:
  _926 = _865 + 1;
  goto <bb 91>;

  <bb 571>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _413 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_413 != 0B)
    goto <bb 88>;
  else
    goto <bb 92>;

  <bb 572>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _441 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_441 != 0B)
    goto <bb 98>;
  else
    goto <bb 102>;

  <bb 573>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_900 > 127)
    goto <bb 99>;
  else
    goto <bb 574>;

  <bb 574>:
  _857 = _900 + 1;
  goto <bb 101>;

  <bb 575>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _469 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_469 != 0B)
    goto <bb 108>;
  else
    goto <bb 112>;

  <bb 576>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_902 > 127)
    goto <bb 109>;
  else
    goto <bb 577>;

  <bb 577>:
  _1094 = _902 + 1;
  goto <bb 111>;

  <bb 578>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_893 > 127)
    goto <bb 119>;
  else
    goto <bb 579>;

  <bb 579>:
  _1391 = _893 + 1;
  goto <bb 121>;

  <bb 580>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _497 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_497 != 0B)
    goto <bb 118>;
  else
    goto <bb 122>;

  <bb 581>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _526 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_526 != 0B)
    goto <bb 131>;
  else
    goto <bb 132>;

  <bb 582>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => _3
  # DEBUG name => "TFLite_Detection_PostProcess"
  # DEBUG registration => _168
  # DEBUG D#10 => &_3->registrations_[_521]
  # DEBUG new_registration => D#10
  _542 = _521 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = _542;
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_521] = MEM[(const struct TfLiteRegistration &)_168];
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_521].builtin_code = 32;
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_521].custom_name = "TFLite_Detection_PostProcess";
  # DEBUG this => NULL
  # DEBUG name => NULL
  # DEBUG registration => NULL
  # DEBUG new_registration => NULL
  goto <bb 132>;

  <bb 583>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _548 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_548 != 0B)
    goto <bb 138>;
  else
    goto <bb 142>;

  <bb 584>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2143 > 127)
    goto <bb 139>;
  else
    goto <bb 585>;

  <bb 585>:
  _1262 = _2143 + 1;
  goto <bb 141>;

  <bb 586>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _576 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_576 != 0B)
    goto <bb 148>;
  else
    goto <bb 152>;

  <bb 587>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_941 > 127)
    goto <bb 149>;
  else
    goto <bb 588>;

  <bb 588>:
  _2159 = _941 + 1;
  goto <bb 151>;

  <bb 589>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _605 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_605 != 0B)
    goto <bb 163>;
  else
    goto <bb 153>;

  <bb 590>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => _3
  # DEBUG name => _163
  # DEBUG registration => _162
  # DEBUG D#10 => &_3->registrations_[_600]
  # DEBUG new_registration => D#10
  _621 = _600 + 1;
  MEM[(struct MicroMutableOpResolver *)this_2(D)].registrations_len_ = _621;
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_600] = MEM[(const struct TfLiteRegistration &)_162];
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_600].builtin_code = 32;
  MEM[(struct TfLiteRegistration *)this_2(D)].registrations_[_600].custom_name = _163;
  # DEBUG this => NULL
  # DEBUG name => NULL
  # DEBUG registration => NULL
  # DEBUG new_registration => NULL
  goto <bb 164>;

  <bb 591>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_956 > 127)
    goto <bb 171>;
  else
    goto <bb 592>;

  <bb 592>:
  _984 = _956 + 1;
  goto <bb 173>;

  <bb 593>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _627 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_627 != 0B)
    goto <bb 170>;
  else
    goto <bb 174>;

  <bb 594>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _655 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_655 != 0B)
    goto <bb 180>;
  else
    goto <bb 184>;

  <bb 595>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_958 > 127)
    goto <bb 181>;
  else
    goto <bb 596>;

  <bb 596>:
  _1525 = _958 + 1;
  goto <bb 183>;

  <bb 597>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _683 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_683 != 0B)
    goto <bb 190>;
  else
    goto <bb 194>;

  <bb 598>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_949 > 127)
    goto <bb 191>;
  else
    goto <bb 599>;

  <bb 599>:
  _1296 = _949 + 1;
  goto <bb 193>;

  <bb 600>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_994 > 127)
    goto <bb 201>;
  else
    goto <bb 601>;

  <bb 601>:
  _639 = _994 + 1;
  goto <bb 203>;

  <bb 602>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _150 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_150 != 0B)
    goto <bb 200>;
  else
    goto <bb 204>;

  <bb 603>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _722 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_722 != 0B)
    goto <bb 210>;
  else
    goto <bb 214>;

  <bb 604>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_996 > 127)
    goto <bb 211>;
  else
    goto <bb 605>;

  <bb 605>:
  _1078 = _996 + 1;
  goto <bb 213>;

  <bb 606>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _750 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_750 != 0B)
    goto <bb 220>;
  else
    goto <bb 224>;

  <bb 607>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_978 > 127)
    goto <bb 221>;
  else
    goto <bb 608>;

  <bb 608>:
  _675 = _978 + 1;
  goto <bb 223>;

  <bb 609>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _778 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_778 != 0B)
    goto <bb 230>;
  else
    goto <bb 234>;

  <bb 610>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1019 > 127)
    goto <bb 231>;
  else
    goto <bb 611>;

  <bb 611>:
  _1212 = _1019 + 1;
  goto <bb 233>;

  <bb 612>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1025 > 127)
    goto <bb 241>;
  else
    goto <bb 613>;

  <bb 613>:
  _656 = _1025 + 1;
  goto <bb 243>;

  <bb 614>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _806 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_806 != 0B)
    goto <bb 240>;
  else
    goto <bb 244>;

  <bb 615>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _834 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_834 != 0B)
    goto <bb 250>;
  else
    goto <bb 254>;

  <bb 616>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1003 > 127)
    goto <bb 251>;
  else
    goto <bb 617>;

  <bb 617>:
  _1165 = _1003 + 1;
  goto <bb 253>;

  <bb 618>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _862 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_862 != 0B)
    goto <bb 260>;
  else
    goto <bb 264>;

  <bb 619>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2203 > 127)
    goto <bb 261>;
  else
    goto <bb 620>;

  <bb 620>:
  _706 = _2203 + 1;
  goto <bb 263>;

  <bb 621>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2205 > 127)
    goto <bb 271>;
  else
    goto <bb 622>;

  <bb 622>:
  _650 = _2205 + 1;
  goto <bb 273>;

  <bb 623>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _890 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_890 != 0B)
    goto <bb 270>;
  else
    goto <bb 274>;

  <bb 624>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _918 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_918 != 0B)
    goto <bb 280>;
  else
    goto <bb 284>;

  <bb 625>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1068 > 127)
    goto <bb 281>;
  else
    goto <bb 626>;

  <bb 626>:
  _149 = _1068 + 1;
  goto <bb 283>;

  <bb 627>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _946 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_946 != 0B)
    goto <bb 290>;
  else
    goto <bb 294>;

  <bb 628>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1070 > 127)
    goto <bb 291>;
  else
    goto <bb 629>;

  <bb 629>:
  _630 = _1070 + 1;
  goto <bb 293>;

  <bb 630>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _974 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_974 != 0B)
    goto <bb 300>;
  else
    goto <bb 304>;

  <bb 631>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1061 > 127)
    goto <bb 301>;
  else
    goto <bb 632>;

  <bb 632>:
  _151 = _1061 + 1;
  goto <bb 303>;

  <bb 633>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1106 > 127)
    goto <bb 311>;
  else
    goto <bb 634>;

  <bb 634>:
  _1044 = _1106 + 1;
  goto <bb 313>;

  <bb 635>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1002 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1002 != 0B)
    goto <bb 310>;
  else
    goto <bb 314>;

  <bb 636>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1030 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1030 != 0B)
    goto <bb 320>;
  else
    goto <bb 324>;

  <bb 637>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1108 > 127)
    goto <bb 321>;
  else
    goto <bb 638>;

  <bb 638>:
  _725 = _1108 + 1;
  goto <bb 323>;

  <bb 639>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1058 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1058 != 0B)
    goto <bb 330>;
  else
    goto <bb 334>;

  <bb 640>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1090 > 127)
    goto <bb 331>;
  else
    goto <bb 641>;

  <bb 641>:
  _2231 = _1090 + 1;
  goto <bb 333>;

  <bb 642>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1131 > 127)
    goto <bb 341>;
  else
    goto <bb 643>;

  <bb 643>:
  _762 = _1131 + 1;
  goto <bb 343>;

  <bb 644>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1086 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1086 != 0B)
    goto <bb 340>;
  else
    goto <bb 344>;

  <bb 645>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1114 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1114 != 0B)
    goto <bb 350>;
  else
    goto <bb 354>;

  <bb 646>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1137 > 127)
    goto <bb 351>;
  else
    goto <bb 647>;

  <bb 647>:
  _960 = _1137 + 1;
  goto <bb 353>;

  <bb 648>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1142 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1142 != 0B)
    goto <bb 360>;
  else
    goto <bb 364>;

  <bb 649>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1115 > 127)
    goto <bb 361>;
  else
    goto <bb 650>;

  <bb 650>:
  _798 = _1115 + 1;
  goto <bb 363>;

  <bb 651>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1170 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1170 != 0B)
    goto <bb 370>;
  else
    goto <bb 374>;

  <bb 652>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2259 > 127)
    goto <bb 371>;
  else
    goto <bb 653>;

  <bb 653>:
  _1075 = _2259 + 1;
  goto <bb 373>;

  <bb 654>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2247 > 127)
    goto <bb 381>;
  else
    goto <bb 655>;

  <bb 655>:
  _1614 = _2247 + 1;
  goto <bb 383>;

  <bb 656>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1198 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1198 != 0B)
    goto <bb 380>;
  else
    goto <bb 384>;

  <bb 657>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1226 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1226 != 0B)
    goto <bb 390>;
  else
    goto <bb 394>;

  <bb 658>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1089 > 127)
    goto <bb 391>;
  else
    goto <bb 659>;

  <bb 659>:
  _1530 = _1089 + 1;
  goto <bb 393>;

  <bb 660>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1254 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1254 != 0B)
    goto <bb 400>;
  else
    goto <bb 404>;

  <bb 661>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2219 > 127)
    goto <bb 401>;
  else
    goto <bb 662>;

  <bb 662>:
  _1446 = _2219 + 1;
  goto <bb 403>;

  <bb 663>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1053 > 127)
    goto <bb 411>;
  else
    goto <bb 664>;

  <bb 664>:
  _1362 = _1053 + 1;
  goto <bb 413>;

  <bb 665>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1282 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1282 != 0B)
    goto <bb 410>;
  else
    goto <bb 414>;

  <bb 666>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _102 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_102 != 0B)
    goto <bb 420>;
  else
    goto <bb 424>;

  <bb 667>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1024 > 127)
    goto <bb 421>;
  else
    goto <bb 668>;

  <bb 668>:
  _1295 = _1024 + 1;
  goto <bb 423>;

  <bb 669>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1321 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1321 != 0B)
    goto <bb 430>;
  else
    goto <bb 434>;

  <bb 670>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_986 > 127)
    goto <bb 431>;
  else
    goto <bb 671>;

  <bb 671>:
  _1211 = _986 + 1;
  goto <bb 433>;

  <bb 672>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1349 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1349 != 0B)
    goto <bb 440>;
  else
    goto <bb 444>;

  <bb 673>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_966 > 127)
    goto <bb 441>;
  else
    goto <bb 674>;

  <bb 674>:
  _1127 = _966 + 1;
  goto <bb 443>;

  <bb 675>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_938 > 127)
    goto <bb 451>;
  else
    goto <bb 676>;

  <bb 676>:
  _1043 = _938 + 1;
  goto <bb 453>;

  <bb 677>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1377 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1377 != 0B)
    goto <bb 450>;
  else
    goto <bb 454>;

  <bb 678>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1405 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1405 != 0B)
    goto <bb 460>;
  else
    goto <bb 464>;

  <bb 679>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_907 > 127)
    goto <bb 461>;
  else
    goto <bb 680>;

  <bb 680>:
  _959 = _907 + 1;
  goto <bb 463>;

  <bb 681>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1433 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1433 != 0B)
    goto <bb 470>;
  else
    goto <bb 474>;

  <bb 682>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_882 > 127)
    goto <bb 471>;
  else
    goto <bb 683>;

  <bb 683>:
  _875 = _882 + 1;
  goto <bb 473>;

  <bb 684>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_844 > 127)
    goto <bb 481>;
  else
    goto <bb 685>;

  <bb 685>:
  _791 = _844 + 1;
  goto <bb 483>;

  <bb 686>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1461 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1461 != 0B)
    goto <bb 480>;
  else
    goto <bb 484>;

  <bb 687>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1489 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1489 != 0B)
    goto <bb 490>;
  else
    goto <bb 494>;

  <bb 688>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_779 > 127)
    goto <bb 491>;
  else
    goto <bb 689>;

  <bb 689>:
  _707 = _779 + 1;
  goto <bb 493>;

  <bb 690>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1517 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1517 != 0B)
    goto <bb 500>;
  else
    goto <bb 504>;

  <bb 691>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1164 > 127)
    goto <bb 501>;
  else
    goto <bb 692>;

  <bb 692>:
  _640 = _1164 + 1;
  goto <bb 503>;

  <bb 693>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1545 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1545 != 0B)
    goto <bb 510>;
  else
    goto <bb 514>;

  <bb 694>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_1154 > 127)
    goto <bb 511>;
  else
    goto <bb 695>;

  <bb 695>:
  _510 = _1154 + 1;
  goto <bb 513>;

  <bb 696>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_732 > 127)
    goto <bb 521>;
  else
    goto <bb 697>;

  <bb 697>:
  _426 = _732 + 1;
  goto <bb 523>;

  <bb 698>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1573 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1573 != 0B)
    goto <bb 520>;
  else
    goto <bb 524>;

  <bb 699>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1601 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1601 != 0B)
    goto <bb 530>;
  else
    goto <bb 534>;

  <bb 700>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_686 > 127)
    goto <bb 531>;
  else
    goto <bb 701>;

  <bb 701>:
  _342 = _686 + 1;
  goto <bb 533>;

  <bb 702>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  _1629 = MEM[(struct MicroMutableOpResolver *)this_2(D)].error_reporter_;
  if (_1629 != 0B)
    goto <bb 540>;
  else
    goto <bb 544>;

  <bb 703>:
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  # DEBUG this => NULL
  # DEBUG op => NULL
  # DEBUG i => NULL
  # DEBUG registration => NULL
  if (_2008 > 127)
    goto <bb 541>;
  else
    goto <bb 704>;

  <bb 704>:
  _258 = _2008 + 1;
  goto <bb 543>;

}


